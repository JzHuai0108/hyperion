// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     COST_FUNCTION.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <ceres/sized_cost_function.h>

#include <sym/pose3.h>

namespace hyperion::ceres {

class Pose3SensorBetweenCostFunction final : public ::ceres::SizedCostFunction<6, 7, 7, 7> {
 public:
  /// Constructor.
  explicit Pose3SensorBetweenCostFunction(const sym::Pose3<double>& sTy,
                                          const Eigen::Matrix<double, 6, 6>& sqrtInfo)
      : s_T_y_{sTy}, sqrt_info_{sqrtInfo} {}

  /// sTy accessor.
  [[nodiscard]] auto sTy() const -> const sym::Pose3<double>& {
    return s_T_y_;
  }

  /// sTy modifier.
  auto sTy() -> sym::Pose3<double>& {
    return s_T_y_;
  }

  /// sqrtInfo accessor.
  [[nodiscard]] auto sqrtInfo() const -> const Eigen::Matrix<double, 6, 6>& {
    return sqrt_info_;
  }

  /// sqrtInfo modifier.
  auto sqrtInfo() -> Eigen::Matrix<double, 6, 6>& {
    return sqrt_info_;
  }

  /// See documentation of base class.
  /// @note Returns (tangent_dim x ambient_dim) Jacobians stored in row-major order.
  auto Evaluate(double const* const* parameters, double* residuals, double** jacobians) const
      -> bool override;

 private:
  sym::Pose3<double> s_T_y_;
  Eigen::Matrix<double, 6, 6> sqrt_info_;
};

}  // namespace hyperion::ceres
