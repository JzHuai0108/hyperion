// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     COST_FUNCTION.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <ceres/sized_cost_function.h>

#include <sym/pose2.h>
#include <sym/rot2.h>

namespace hyperion::ceres {

class Spline3Pose2Rot2SensorBetweenCostFunction final
    : public ::ceres::SizedCostFunction<1, 4, 4, 4, 4, 4, 4> {
 public:
  /// Constructor.
  explicit Spline3Pose2Rot2SensorBetweenCostFunction(const Eigen::Matrix<double, 3, 1>& lambdas,
                                                     const sym::Rot2<double>& sTy,
                                                     const Eigen::Matrix<double, 1, 1>& sqrtInfo)
      : lambdas_{lambdas}, s_T_y_{sTy}, sqrt_info_{sqrtInfo} {}

  /// lambdas accessor.
  [[nodiscard]] auto lambdas() const -> const Eigen::Matrix<double, 3, 1>& {
    return lambdas_;
  }

  /// lambdas modifier.
  auto lambdas() -> Eigen::Matrix<double, 3, 1>& {
    return lambdas_;
  }

  /// sTy accessor.
  [[nodiscard]] auto sTy() const -> const sym::Rot2<double>& {
    return s_T_y_;
  }

  /// sTy modifier.
  auto sTy() -> sym::Rot2<double>& {
    return s_T_y_;
  }

  /// sqrtInfo accessor.
  [[nodiscard]] auto sqrtInfo() const -> const Eigen::Matrix<double, 1, 1>& {
    return sqrt_info_;
  }

  /// sqrtInfo modifier.
  auto sqrtInfo() -> Eigen::Matrix<double, 1, 1>& {
    return sqrt_info_;
  }

  /// See documentation of base class.
  /// @note Returns (tangent_dim x ambient_dim) Jacobians stored in row-major order.
  auto Evaluate(double const* const* parameters, double* residuals, double** jacobians) const
      -> bool override;

 private:
  Eigen::Matrix<double, 3, 1> lambdas_;
  sym::Rot2<double> s_T_y_;
  Eigen::Matrix<double, 1, 1> sqrt_info_;
};

}  // namespace hyperion::ceres
