// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     COST_FUNCTION.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <ceres/sized_cost_function.h>

#include <sym/pose2.h>

namespace hyperion::ceres {

class Spline3Pose2R2SensorRelativeBetweenCostFunction final
    : public ::ceres::SizedCostFunction<2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4> {
 public:
  /// Constructor.
  explicit Spline3Pose2R2SensorRelativeBetweenCostFunction(
      const Eigen::Matrix<double, 3, 1>& lambdas_x, const Eigen::Matrix<double, 3, 1>& lambdas_y,
      const Eigen::Matrix<double, 2, 1>& aTb, const Eigen::Matrix<double, 2, 2>& sqrtInfo)
      : lambdas_x_{lambdas_x}, lambdas_y_{lambdas_y}, a_T_b_{aTb}, sqrt_info_{sqrtInfo} {}

  /// lambdas_x accessor.
  [[nodiscard]] auto lambdas_x() const -> const Eigen::Matrix<double, 3, 1>& {
    return lambdas_x_;
  }

  /// lambdas_x modifier.
  auto lambdas_x() -> Eigen::Matrix<double, 3, 1>& {
    return lambdas_x_;
  }

  /// lambdas_y accessor.
  [[nodiscard]] auto lambdas_y() const -> const Eigen::Matrix<double, 3, 1>& {
    return lambdas_y_;
  }

  /// lambdas_y modifier.
  auto lambdas_y() -> Eigen::Matrix<double, 3, 1>& {
    return lambdas_y_;
  }

  /// aTb accessor.
  [[nodiscard]] auto aTb() const -> const Eigen::Matrix<double, 2, 1>& {
    return a_T_b_;
  }

  /// aTb modifier.
  auto aTb() -> Eigen::Matrix<double, 2, 1>& {
    return a_T_b_;
  }

  /// sqrtInfo accessor.
  [[nodiscard]] auto sqrtInfo() const -> const Eigen::Matrix<double, 2, 2>& {
    return sqrt_info_;
  }

  /// sqrtInfo modifier.
  auto sqrtInfo() -> Eigen::Matrix<double, 2, 2>& {
    return sqrt_info_;
  }

  /// See documentation of base class.
  /// @note Returns (tangent_dim x ambient_dim) Jacobians stored in row-major order.
  auto Evaluate(double const* const* parameters, double* residuals, double** jacobians) const
      -> bool override;

 private:
  Eigen::Matrix<double, 3, 1> lambdas_x_;
  Eigen::Matrix<double, 3, 1> lambdas_y_;
  Eigen::Matrix<double, 2, 1> a_T_b_;
  Eigen::Matrix<double, 2, 2> sqrt_info_;
};

}  // namespace hyperion::ceres
