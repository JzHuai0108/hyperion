// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline5_pose3_velocity_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix52
 *     x0: Pose3
 *     x1: Pose3
 *     x2: Pose3
 *     x3: Pose3
 *     x4: Pose3
 *     x5: Pose3
 *     velocity: Matrix61
 *     sqrt_info: Matrix66
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Spline5Pose3VelocityGlobalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 5, 2>& lambdas, const sym::Pose3<Scalar>& x0,
    const sym::Pose3<Scalar>& x1, const sym::Pose3<Scalar>& x2, const sym::Pose3<Scalar>& x3,
    const sym::Pose3<Scalar>& x4, const sym::Pose3<Scalar>& x5,
    const Eigen::Matrix<Scalar, 6, 1>& velocity, const Eigen::Matrix<Scalar, 6, 6>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 731

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x4 = x4.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x5 = x5.Data();

  // Intermediate terms (200)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = -2 * std::pow(_x0[1], Scalar(2));
  const Scalar _tmp2 = 1 - 2 * std::pow(_x0[2], Scalar(2));
  const Scalar _tmp3 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp4 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp5 = std::pow(_tmp4, Scalar(2));
  const Scalar _tmp6 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp7 = _x0[3] * _x1[3];
  const Scalar _tmp8 =
      2 * std::min<Scalar>(0, (((-_tmp6 + _tmp7) > 0) - ((-_tmp6 + _tmp7) < 0))) + 1;
  const Scalar _tmp9 = 1 - epsilon;
  const Scalar _tmp10 = std::min<Scalar>(_tmp9, std::fabs(_tmp6 - _tmp7));
  const Scalar _tmp11 = std::acos(_tmp10);
  const Scalar _tmp12 = 1 - std::pow(_tmp10, Scalar(2));
  const Scalar _tmp13 = std::pow(_tmp11, Scalar(2)) * std::pow(_tmp8, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp12;
  const Scalar _tmp14 = 4 * _tmp13;
  const Scalar _tmp15 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp16 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp17 = std::pow(_tmp16, Scalar(2));
  const Scalar _tmp18 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp19 = _tmp14 * _tmp15 + _tmp14 * _tmp17 + _tmp14 * _tmp5 + _tmp18;
  const Scalar _tmp20 = std::sqrt(_tmp19);
  const Scalar _tmp21 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp22 = std::sin(_tmp21);
  const Scalar _tmp23 = 8 * _tmp13 * std::pow(_tmp22, Scalar(2)) / _tmp19;
  const Scalar _tmp24 = _tmp23 * _tmp4;
  const Scalar _tmp25 = _tmp24 * _tmp3;
  const Scalar _tmp26 = _tmp11 * _tmp8 / std::sqrt(_tmp12);
  const Scalar _tmp27 = 4 * _tmp22 * lambdas(0, 0) * std::cos(_tmp21) / _tmp20;
  const Scalar _tmp28 = _tmp26 * _tmp27;
  const Scalar _tmp29 = _tmp16 * _tmp28;
  const Scalar _tmp30 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp31 = std::pow(_tmp30, Scalar(2));
  const Scalar _tmp32 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp33 = _x2[3] * _x3[3];
  const Scalar _tmp34 = std::min<Scalar>(_tmp9, std::fabs(_tmp32 - _tmp33));
  const Scalar _tmp35 = 1 - std::pow(_tmp34, Scalar(2));
  const Scalar _tmp36 =
      2 * std::min<Scalar>(0, (((-_tmp32 + _tmp33) > 0) - ((-_tmp32 + _tmp33) < 0))) + 1;
  const Scalar _tmp37 = std::acos(_tmp34);
  const Scalar _tmp38 = std::pow(_tmp36, Scalar(2)) * std::pow(_tmp37, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp35;
  const Scalar _tmp39 = 4 * _tmp38;
  const Scalar _tmp40 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp41 = std::pow(_tmp40, Scalar(2));
  const Scalar _tmp42 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp43 = std::pow(_tmp42, Scalar(2));
  const Scalar _tmp44 = _tmp18 + _tmp31 * _tmp39 + _tmp39 * _tmp41 + _tmp39 * _tmp43;
  const Scalar _tmp45 = std::sqrt(_tmp44);
  const Scalar _tmp46 = (Scalar(1) / Scalar(2)) * _tmp45;
  const Scalar _tmp47 = std::sin(_tmp46);
  const Scalar _tmp48 = 8 * _tmp38 * std::pow(_tmp47, Scalar(2)) / _tmp44;
  const Scalar _tmp49 = -_tmp31 * _tmp48;
  const Scalar _tmp50 = -_tmp41 * _tmp48;
  const Scalar _tmp51 = -_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2];
  const Scalar _tmp52 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp53 = _x3[3] * _x4[3];
  const Scalar _tmp54 = std::min<Scalar>(_tmp9, std::fabs(_tmp52 - _tmp53));
  const Scalar _tmp55 = std::acos(_tmp54);
  const Scalar _tmp56 =
      2 * std::min<Scalar>(0, (((-_tmp52 + _tmp53) > 0) - ((-_tmp52 + _tmp53) < 0))) + 1;
  const Scalar _tmp57 = 1 - std::pow(_tmp54, Scalar(2));
  const Scalar _tmp58 = _tmp55 * _tmp56 / std::sqrt(_tmp57);
  const Scalar _tmp59 = 2 * lambdas(3, 1);
  const Scalar _tmp60 = _tmp58 * _tmp59;
  const Scalar _tmp61 = -_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0];
  const Scalar _tmp62 = std::pow(_tmp61, Scalar(2));
  const Scalar _tmp63 = std::pow(_tmp55, Scalar(2)) * std::pow(_tmp56, Scalar(2)) *
                        std::pow(lambdas(3, 0), Scalar(2)) / _tmp57;
  const Scalar _tmp64 = 4 * _tmp63;
  const Scalar _tmp65 = std::pow(_tmp51, Scalar(2));
  const Scalar _tmp66 = _x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1];
  const Scalar _tmp67 = std::pow(_tmp66, Scalar(2));
  const Scalar _tmp68 = _tmp18 + _tmp62 * _tmp64 + _tmp64 * _tmp65 + _tmp64 * _tmp67;
  const Scalar _tmp69 = std::sqrt(_tmp68);
  const Scalar _tmp70 = (Scalar(1) / Scalar(2)) * _tmp69;
  const Scalar _tmp71 = std::sin(_tmp70);
  const Scalar _tmp72 = 8 * _tmp63 * std::pow(_tmp71, Scalar(2)) / _tmp68;
  const Scalar _tmp73 = _tmp61 * _tmp72;
  const Scalar _tmp74 = _tmp51 * _tmp73;
  const Scalar _tmp75 = _tmp58 * _tmp66;
  const Scalar _tmp76 = 4 * _tmp71 * lambdas(3, 0) * std::cos(_tmp70) / _tmp69;
  const Scalar _tmp77 = _tmp75 * _tmp76;
  const Scalar _tmp78 = -_x4[0] * _x5[0] - _x4[1] * _x5[1] - _x4[2] * _x5[2];
  const Scalar _tmp79 = _x4[3] * _x5[3];
  const Scalar _tmp80 = std::min<Scalar>(_tmp9, std::fabs(_tmp78 - _tmp79));
  const Scalar _tmp81 =
      2 * lambdas(4, 1) *
      (2 * std::min<Scalar>(0, (((-_tmp78 + _tmp79) > 0) - ((-_tmp78 + _tmp79) < 0))) + 1) *
      std::acos(_tmp80) / std::sqrt(Scalar(1 - std::pow(_tmp80, Scalar(2))));
  const Scalar _tmp82 =
      _tmp81 * (-_x4[0] * _x5[3] - _x4[1] * _x5[2] + _x4[2] * _x5[1] + _x4[3] * _x5[0]);
  const Scalar _tmp83 = _tmp51 * _tmp66 * _tmp72;
  const Scalar _tmp84 = _tmp58 * _tmp76;
  const Scalar _tmp85 = _tmp61 * _tmp84;
  const Scalar _tmp86 =
      _tmp81 * (_x4[0] * _x5[2] - _x4[1] * _x5[3] - _x4[2] * _x5[0] + _x4[3] * _x5[1]);
  const Scalar _tmp87 = -_tmp67 * _tmp72;
  const Scalar _tmp88 = -_tmp62 * _tmp72;
  const Scalar _tmp89 =
      _tmp81 * (-_x4[0] * _x5[1] + _x4[1] * _x5[0] - _x4[2] * _x5[3] + _x4[3] * _x5[2]);
  const Scalar _tmp90 = _tmp51 * _tmp60 + _tmp82 * (_tmp74 - _tmp77) + _tmp86 * (_tmp83 + _tmp85) +
                        _tmp89 * (_tmp87 + _tmp88 + 1);
  const Scalar _tmp91 = _tmp36 * _tmp37 / std::sqrt(_tmp35);
  const Scalar _tmp92 = _tmp40 * _tmp91;
  const Scalar _tmp93 = 4 * _tmp47 * lambdas(2, 0) * std::cos(_tmp46) / _tmp45;
  const Scalar _tmp94 = _tmp92 * _tmp93;
  const Scalar _tmp95 = _tmp30 * _tmp42 * _tmp48;
  const Scalar _tmp96 = -_tmp65 * _tmp72 + 1;
  const Scalar _tmp97 = _tmp66 * _tmp73;
  const Scalar _tmp98 = _tmp51 * _tmp84;
  const Scalar _tmp99 = _tmp59 * _tmp75 + _tmp82 * (_tmp97 + _tmp98) + _tmp86 * (_tmp88 + _tmp96) +
                        _tmp89 * (_tmp83 - _tmp85);
  const Scalar _tmp100 = 2 * lambdas(2, 1);
  const Scalar _tmp101 = _tmp100 * _tmp91;
  const Scalar _tmp102 = _tmp60 * _tmp61 + _tmp82 * (_tmp87 + _tmp96) + _tmp86 * (_tmp97 - _tmp98) +
                         _tmp89 * (_tmp74 + _tmp77);
  const Scalar _tmp103 = _tmp91 * _tmp93;
  const Scalar _tmp104 = _tmp103 * _tmp30;
  const Scalar _tmp105 = _tmp40 * _tmp48;
  const Scalar _tmp106 = _tmp105 * _tmp42;
  const Scalar _tmp107 = _tmp101 * _tmp42 + _tmp102 * (-_tmp104 + _tmp106) +
                         _tmp90 * (_tmp49 + _tmp50 + 1) + _tmp99 * (_tmp94 + _tmp95);
  const Scalar _tmp108 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp109 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp110 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp111 = std::pow(_tmp110, Scalar(2));
  const Scalar _tmp112 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp113 = _x1[3] * _x2[3];
  const Scalar _tmp114 = std::min<Scalar>(_tmp9, std::fabs(_tmp112 - _tmp113));
  const Scalar _tmp115 = 1 - std::pow(_tmp114, Scalar(2));
  const Scalar _tmp116 =
      2 * std::min<Scalar>(0, (((-_tmp112 + _tmp113) > 0) - ((-_tmp112 + _tmp113) < 0))) + 1;
  const Scalar _tmp117 = std::acos(_tmp114);
  const Scalar _tmp118 = std::pow(_tmp116, Scalar(2)) * std::pow(_tmp117, Scalar(2)) *
                         std::pow(lambdas(1, 0), Scalar(2)) / _tmp115;
  const Scalar _tmp119 = 4 * _tmp118;
  const Scalar _tmp120 = std::pow(_tmp109, Scalar(2));
  const Scalar _tmp121 = std::pow(_tmp108, Scalar(2));
  const Scalar _tmp122 = _tmp111 * _tmp119 + _tmp119 * _tmp120 + _tmp119 * _tmp121 + _tmp18;
  const Scalar _tmp123 = std::sqrt(_tmp122);
  const Scalar _tmp124 = (Scalar(1) / Scalar(2)) * _tmp123;
  const Scalar _tmp125 = std::sin(_tmp124);
  const Scalar _tmp126 = 8 * _tmp118 * std::pow(_tmp125, Scalar(2)) / _tmp122;
  const Scalar _tmp127 = _tmp108 * _tmp109 * _tmp126;
  const Scalar _tmp128 = _tmp116 * _tmp117 / std::sqrt(_tmp115);
  const Scalar _tmp129 = 4 * _tmp125 * lambdas(1, 0) * std::cos(_tmp124) / _tmp123;
  const Scalar _tmp130 = _tmp128 * _tmp129;
  const Scalar _tmp131 = _tmp110 * _tmp130;
  const Scalar _tmp132 = _tmp108 * _tmp128;
  const Scalar _tmp133 = 2 * lambdas(1, 1);
  const Scalar _tmp134 = _tmp105 * _tmp30;
  const Scalar _tmp135 = _tmp103 * _tmp42;
  const Scalar _tmp136 = -_tmp43 * _tmp48 + 1;
  const Scalar _tmp137 = _tmp101 * _tmp30 + _tmp102 * (_tmp134 + _tmp135) +
                         _tmp90 * (-_tmp94 + _tmp95) + _tmp99 * (_tmp136 + _tmp50);
  const Scalar _tmp138 = -_tmp111 * _tmp126;
  const Scalar _tmp139 = -_tmp120 * _tmp126 + 1;
  const Scalar _tmp140 = _tmp110 * _tmp126;
  const Scalar _tmp141 = _tmp108 * _tmp140;
  const Scalar _tmp142 = _tmp109 * _tmp130;
  const Scalar _tmp143 = _tmp100 * _tmp92 + _tmp102 * (_tmp136 + _tmp49) +
                         _tmp90 * (_tmp104 + _tmp106) + _tmp99 * (_tmp134 - _tmp135);
  const Scalar _tmp144 = _tmp107 * (_tmp127 - _tmp131) + _tmp132 * _tmp133 +
                         _tmp137 * (_tmp138 + _tmp139) + _tmp143 * (_tmp141 + _tmp142);
  const Scalar _tmp145 = _tmp129 * _tmp132;
  const Scalar _tmp146 = _tmp109 * _tmp140;
  const Scalar _tmp147 = -_tmp121 * _tmp126;
  const Scalar _tmp148 = _tmp128 * _tmp133;
  const Scalar _tmp149 = _tmp107 * (_tmp145 + _tmp146) + _tmp110 * _tmp148 +
                         _tmp137 * (_tmp141 - _tmp142) + _tmp143 * (_tmp139 + _tmp147);
  const Scalar _tmp150 = -_tmp17 * _tmp23;
  const Scalar _tmp151 = -_tmp15 * _tmp23 + 1;
  const Scalar _tmp152 = 2 * lambdas(0, 1);
  const Scalar _tmp153 = _tmp152 * _tmp26;
  const Scalar _tmp154 = _tmp107 * (_tmp138 + _tmp147 + 1) + _tmp109 * _tmp148 +
                         _tmp137 * (_tmp127 + _tmp131) + _tmp143 * (-_tmp145 + _tmp146);
  const Scalar _tmp155 = _tmp26 * _tmp3;
  const Scalar _tmp156 = _tmp155 * _tmp27;
  const Scalar _tmp157 = _tmp16 * _tmp24;
  const Scalar _tmp158 = _tmp144 * (_tmp25 - _tmp29) + _tmp149 * (_tmp150 + _tmp151) +
                         _tmp153 * _tmp4 + _tmp154 * (_tmp156 + _tmp157);
  const Scalar _tmp159 = 2 * _x0[0];
  const Scalar _tmp160 = _tmp159 * _x0[1];
  const Scalar _tmp161 = 2 * _x0[3];
  const Scalar _tmp162 = _tmp161 * _x0[2];
  const Scalar _tmp163 = -_tmp23 * _tmp5;
  const Scalar _tmp164 = _tmp16 * _tmp23 * _tmp3;
  const Scalar _tmp165 = _tmp28 * _tmp4;
  const Scalar _tmp166 = _tmp144 * (_tmp150 + _tmp163 + 1) + _tmp149 * (_tmp25 + _tmp29) +
                         _tmp152 * _tmp155 + _tmp154 * (_tmp164 - _tmp165);
  const Scalar _tmp167 = _tmp161 * _x0[1];
  const Scalar _tmp168 = _tmp159 * _x0[2];
  const Scalar _tmp169 = _tmp144 * (_tmp164 + _tmp165) + _tmp149 * (-_tmp156 + _tmp157) +
                         _tmp153 * _tmp16 + _tmp154 * (_tmp151 + _tmp163);
  const Scalar _tmp170 =
      _tmp158 * (_tmp1 + _tmp2) + _tmp166 * (_tmp160 - _tmp162) + _tmp169 * (_tmp167 + _tmp168);
  const Scalar _tmp171 = _tmp0 * _tmp170 - velocity(0, 0);
  const Scalar _tmp172 = _tmp161 * _x0[0];
  const Scalar _tmp173 = 2 * _x0[1] * _x0[2];
  const Scalar _tmp174 = -2 * std::pow(_x0[0], Scalar(2));
  const Scalar _tmp175 = _tmp158 * (-_tmp167 + _tmp168) + _tmp166 * (_tmp172 + _tmp173) +
                         _tmp169 * (_tmp1 + _tmp174 + 1);
  const Scalar _tmp176 = _tmp0 * _tmp175 - velocity(2, 0);
  const Scalar _tmp177 = -_x1[4] + _x2[4];
  const Scalar _tmp178 = -_x4[4] + _x5[4];
  const Scalar _tmp179 = -_x3[4] + _x4[4];
  const Scalar _tmp180 = -_x2[4] + _x3[4];
  const Scalar _tmp181 = -_x0[4] + _x1[4];
  const Scalar _tmp182 = -_x1[5] + _x2[5];
  const Scalar _tmp183 = -_x4[5] + _x5[5];
  const Scalar _tmp184 = -_x3[5] + _x4[5];
  const Scalar _tmp185 = -_x2[5] + _x3[5];
  const Scalar _tmp186 = -_x0[5] + _x1[5];
  const Scalar _tmp187 = _tmp182 * lambdas(1, 0) + _tmp183 * lambdas(4, 0) +
                         _tmp184 * lambdas(3, 0) + _tmp185 * lambdas(2, 0) +
                         _tmp186 * lambdas(0, 0) + _x0[5];
  const Scalar _tmp188 = -_x1[6] + _x2[6];
  const Scalar _tmp189 = -_x4[6] + _x5[6];
  const Scalar _tmp190 = -_x3[6] + _x4[6];
  const Scalar _tmp191 = -_x2[6] + _x3[6];
  const Scalar _tmp192 = -_x0[6] + _x1[6];
  const Scalar _tmp193 = _tmp188 * lambdas(1, 0) + _tmp189 * lambdas(4, 0) +
                         _tmp190 * lambdas(3, 0) + _tmp191 * lambdas(2, 0) +
                         _tmp192 * lambdas(0, 0) + _x0[6];
  const Scalar _tmp194 =
      _tmp158 * (_tmp160 + _tmp162) + _tmp166 * (_tmp174 + _tmp2) + _tmp169 * (-_tmp172 + _tmp173);
  const Scalar _tmp195 =
      _tmp0 * (_tmp175 * _tmp187 + _tmp177 * lambdas(1, 1) + _tmp178 * lambdas(4, 1) +
               _tmp179 * lambdas(3, 1) + _tmp180 * lambdas(2, 1) + _tmp181 * lambdas(0, 1) -
               _tmp193 * _tmp194) -
      velocity(3, 0);
  const Scalar _tmp196 = _tmp0 * _tmp194 - velocity(1, 0);
  const Scalar _tmp197 = _tmp177 * lambdas(1, 0) + _tmp178 * lambdas(4, 0) +
                         _tmp179 * lambdas(3, 0) + _tmp180 * lambdas(2, 0) +
                         _tmp181 * lambdas(0, 0) + _x0[4];
  const Scalar _tmp198 = _tmp0 * (_tmp170 * _tmp193 - _tmp175 * _tmp197 + _tmp182 * lambdas(1, 1) +
                                  _tmp183 * lambdas(4, 1) + _tmp184 * lambdas(3, 1) +
                                  _tmp185 * lambdas(2, 1) + _tmp186 * lambdas(0, 1)) -
                         velocity(4, 0);
  const Scalar _tmp199 =
      _tmp0 * (-_tmp170 * _tmp187 + _tmp188 * lambdas(1, 1) + _tmp189 * lambdas(4, 1) +
               _tmp190 * lambdas(3, 1) + _tmp191 * lambdas(2, 1) + _tmp192 * lambdas(0, 1) +
               _tmp194 * _tmp197) -
      velocity(5, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp171 * sqrt_info(0, 0) + _tmp176 * sqrt_info(0, 2) + _tmp195 * sqrt_info(0, 3) +
               _tmp196 * sqrt_info(0, 1) + _tmp198 * sqrt_info(0, 4) + _tmp199 * sqrt_info(0, 5);
  _res(1, 0) = _tmp171 * sqrt_info(1, 0) + _tmp176 * sqrt_info(1, 2) + _tmp195 * sqrt_info(1, 3) +
               _tmp196 * sqrt_info(1, 1) + _tmp198 * sqrt_info(1, 4) + _tmp199 * sqrt_info(1, 5);
  _res(2, 0) = _tmp171 * sqrt_info(2, 0) + _tmp176 * sqrt_info(2, 2) + _tmp195 * sqrt_info(2, 3) +
               _tmp196 * sqrt_info(2, 1) + _tmp198 * sqrt_info(2, 4) + _tmp199 * sqrt_info(2, 5);
  _res(3, 0) = _tmp171 * sqrt_info(3, 0) + _tmp176 * sqrt_info(3, 2) + _tmp195 * sqrt_info(3, 3) +
               _tmp196 * sqrt_info(3, 1) + _tmp198 * sqrt_info(3, 4) + _tmp199 * sqrt_info(3, 5);
  _res(4, 0) = _tmp171 * sqrt_info(4, 0) + _tmp176 * sqrt_info(4, 2) + _tmp195 * sqrt_info(4, 3) +
               _tmp196 * sqrt_info(4, 1) + _tmp198 * sqrt_info(4, 4) + _tmp199 * sqrt_info(4, 5);
  _res(5, 0) = _tmp171 * sqrt_info(5, 0) + _tmp176 * sqrt_info(5, 2) + _tmp195 * sqrt_info(5, 3) +
               _tmp196 * sqrt_info(5, 1) + _tmp198 * sqrt_info(5, 4) + _tmp199 * sqrt_info(5, 5);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
