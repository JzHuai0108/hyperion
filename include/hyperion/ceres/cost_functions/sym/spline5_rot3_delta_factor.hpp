// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline5_rot3_delta_factor
 *
 * Args:
 *     lambdas: Matrix51
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     x4: Rot3
 *     x5: Rot3
 *     y: Rot3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline5Rot3DeltaFactor(
    const Eigen::Matrix<Scalar, 5, 1>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const sym::Rot3<Scalar>& x4, const sym::Rot3<Scalar>& x5, const sym::Rot3<Scalar>& y,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon) {
  // Total ops: 553

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x4 = x4.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x5 = x5.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (121)
  const Scalar _tmp0 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp1 = -_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0];
  const Scalar _tmp2 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp3 = _x3[3] * _x4[3];
  const Scalar _tmp4 = 1 - epsilon;
  const Scalar _tmp5 = std::min<Scalar>(_tmp4, std::fabs(_tmp2 - _tmp3));
  const Scalar _tmp6 = std::acos(_tmp5);
  const Scalar _tmp7 =
      2 * std::min<Scalar>(0, (((-_tmp2 + _tmp3) > 0) - ((-_tmp2 + _tmp3) < 0))) + 1;
  const Scalar _tmp8 = 1 - std::pow(_tmp5, Scalar(2));
  const Scalar _tmp9 = 4 * std::pow(_tmp6, Scalar(2)) * std::pow(_tmp7, Scalar(2)) *
                       std::pow(lambdas(3, 0), Scalar(2)) / _tmp8;
  const Scalar _tmp10 = -_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2];
  const Scalar _tmp11 = _x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1];
  const Scalar _tmp12 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp13 =
      std::sqrt(Scalar(std::pow(_tmp1, Scalar(2)) * _tmp9 + std::pow(_tmp10, Scalar(2)) * _tmp9 +
                       std::pow(_tmp11, Scalar(2)) * _tmp9 + _tmp12));
  const Scalar _tmp14 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp15 =
      _tmp6 * _tmp7 * lambdas(3, 0) * std::sin(_tmp14) / (_tmp13 * std::sqrt(_tmp8));
  const Scalar _tmp16 = 4 * _tmp15;
  const Scalar _tmp17 = _tmp1 * _tmp16;
  const Scalar _tmp18 = -_x4[0] * _x5[3] - _x4[1] * _x5[2] + _x4[2] * _x5[1] + _x4[3] * _x5[0];
  const Scalar _tmp19 = -_x4[0] * _x5[0] - _x4[1] * _x5[1] - _x4[2] * _x5[2];
  const Scalar _tmp20 = _x4[3] * _x5[3];
  const Scalar _tmp21 = std::min<Scalar>(_tmp4, std::fabs(_tmp19 - _tmp20));
  const Scalar _tmp22 = std::acos(_tmp21);
  const Scalar _tmp23 =
      2 * std::min<Scalar>(0, (((-_tmp19 + _tmp20) > 0) - ((-_tmp19 + _tmp20) < 0))) + 1;
  const Scalar _tmp24 = 1 - std::pow(_tmp21, Scalar(2));
  const Scalar _tmp25 = 4 * std::pow(_tmp22, Scalar(2)) * std::pow(_tmp23, Scalar(2)) *
                        std::pow(lambdas(4, 0), Scalar(2)) / _tmp24;
  const Scalar _tmp26 = _x4[0] * _x5[2] - _x4[1] * _x5[3] - _x4[2] * _x5[0] + _x4[3] * _x5[1];
  const Scalar _tmp27 = -_x4[0] * _x5[1] + _x4[1] * _x5[0] - _x4[2] * _x5[3] + _x4[3] * _x5[2];
  const Scalar _tmp28 = std::sqrt(Scalar(_tmp12 + std::pow(_tmp18, Scalar(2)) * _tmp25 +
                                         _tmp25 * std::pow(_tmp26, Scalar(2)) +
                                         _tmp25 * std::pow(_tmp27, Scalar(2))));
  const Scalar _tmp29 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp30 =
      _tmp22 * _tmp23 * lambdas(4, 0) * std::sin(_tmp29) / (std::sqrt(_tmp24) * _tmp28);
  const Scalar _tmp31 = _tmp18 * _tmp30;
  const Scalar _tmp32 = _tmp27 * _tmp30;
  const Scalar _tmp33 = _tmp10 * _tmp16;
  const Scalar _tmp34 = _tmp26 * _tmp30;
  const Scalar _tmp35 = _tmp11 * _tmp15;
  const Scalar _tmp36 = 4 * _tmp35;
  const Scalar _tmp37 = std::cos(_tmp29);
  const Scalar _tmp38 = std::cos(_tmp14);
  const Scalar _tmp39 = -_tmp17 * _tmp31 - _tmp32 * _tmp33 - _tmp34 * _tmp36 + _tmp37 * _tmp38;
  const Scalar _tmp40 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp41 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp42 = _x2[3] * _x3[3];
  const Scalar _tmp43 = std::min<Scalar>(_tmp4, std::fabs(_tmp41 - _tmp42));
  const Scalar _tmp44 = std::acos(_tmp43);
  const Scalar _tmp45 =
      2 * std::min<Scalar>(0, (((-_tmp41 + _tmp42) > 0) - ((-_tmp41 + _tmp42) < 0))) + 1;
  const Scalar _tmp46 = 1 - std::pow(_tmp43, Scalar(2));
  const Scalar _tmp47 = 4 * std::pow(_tmp44, Scalar(2)) * std::pow(_tmp45, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp46;
  const Scalar _tmp48 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp49 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp50 = std::sqrt(Scalar(_tmp12 + std::pow(_tmp40, Scalar(2)) * _tmp47 +
                                         _tmp47 * std::pow(_tmp48, Scalar(2)) +
                                         _tmp47 * std::pow(_tmp49, Scalar(2))));
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp50;
  const Scalar _tmp52 = std::cos(_tmp51);
  const Scalar _tmp53 = 2 * _tmp38;
  const Scalar _tmp54 = _tmp30 * _tmp53;
  const Scalar _tmp55 = 2 * _tmp37;
  const Scalar _tmp56 = _tmp15 * _tmp55;
  const Scalar _tmp57 = _tmp10 * _tmp56 + _tmp17 * _tmp34 + _tmp27 * _tmp54 - _tmp31 * _tmp36;
  const Scalar _tmp58 =
      2 * _tmp44 * _tmp45 * lambdas(2, 0) * std::sin(_tmp51) / (std::sqrt(_tmp46) * _tmp50);
  const Scalar _tmp59 = _tmp48 * _tmp58;
  const Scalar _tmp60 = -_tmp17 * _tmp32 + _tmp31 * _tmp33 + _tmp34 * _tmp53 + _tmp35 * _tmp55;
  const Scalar _tmp61 = _tmp40 * _tmp58;
  const Scalar _tmp62 = _tmp1 * _tmp56 + _tmp18 * _tmp54 + _tmp32 * _tmp36 - _tmp33 * _tmp34;
  const Scalar _tmp63 = _tmp49 * _tmp58;
  const Scalar _tmp64 = _tmp39 * _tmp52 - _tmp57 * _tmp59 - _tmp60 * _tmp61 - _tmp62 * _tmp63;
  const Scalar _tmp65 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp66 = _x1[3] * _x2[3];
  const Scalar _tmp67 = std::min<Scalar>(_tmp4, std::fabs(_tmp65 - _tmp66));
  const Scalar _tmp68 = 1 - std::pow(_tmp67, Scalar(2));
  const Scalar _tmp69 = std::acos(_tmp67);
  const Scalar _tmp70 =
      2 * std::min<Scalar>(0, (((-_tmp65 + _tmp66) > 0) - ((-_tmp65 + _tmp66) < 0))) + 1;
  const Scalar _tmp71 = 4 * std::pow(_tmp69, Scalar(2)) * std::pow(_tmp70, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp68;
  const Scalar _tmp72 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp73 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp74 = std::sqrt(Scalar(std::pow(_tmp0, Scalar(2)) * _tmp71 + _tmp12 +
                                         _tmp71 * std::pow(_tmp72, Scalar(2)) +
                                         _tmp71 * std::pow(_tmp73, Scalar(2))));
  const Scalar _tmp75 = (Scalar(1) / Scalar(2)) * _tmp74;
  const Scalar _tmp76 =
      2 * _tmp69 * _tmp70 * lambdas(1, 0) * std::sin(_tmp75) / (std::sqrt(_tmp68) * _tmp74);
  const Scalar _tmp77 = _tmp64 * _tmp76;
  const Scalar _tmp78 = _tmp39 * _tmp61 + _tmp52 * _tmp60 - _tmp57 * _tmp63 + _tmp59 * _tmp62;
  const Scalar _tmp79 = std::cos(_tmp75);
  const Scalar _tmp80 = _tmp39 * _tmp63 + _tmp52 * _tmp62 + _tmp57 * _tmp61 - _tmp59 * _tmp60;
  const Scalar _tmp81 = _tmp76 * _tmp80;
  const Scalar _tmp82 = _tmp39 * _tmp59 + _tmp52 * _tmp57 + _tmp60 * _tmp63 - _tmp61 * _tmp62;
  const Scalar _tmp83 = _tmp76 * _tmp82;
  const Scalar _tmp84 = _tmp0 * _tmp77 - _tmp72 * _tmp83 + _tmp73 * _tmp81 + _tmp78 * _tmp79;
  const Scalar _tmp85 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp86 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp87 = _x0[3] * _x1[3];
  const Scalar _tmp88 = std::min<Scalar>(_tmp4, std::fabs(_tmp86 - _tmp87));
  const Scalar _tmp89 = 1 - std::pow(_tmp88, Scalar(2));
  const Scalar _tmp90 = std::acos(_tmp88);
  const Scalar _tmp91 =
      2 * std::min<Scalar>(0, (((-_tmp86 + _tmp87) > 0) - ((-_tmp86 + _tmp87) < 0))) + 1;
  const Scalar _tmp92 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp93 = 4 * std::pow(_tmp90, Scalar(2)) * std::pow(_tmp91, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp89;
  const Scalar _tmp94 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp95 = std::sqrt(Scalar(_tmp12 + std::pow(_tmp85, Scalar(2)) * _tmp93 +
                                         std::pow(_tmp92, Scalar(2)) * _tmp93 +
                                         _tmp93 * std::pow(_tmp94, Scalar(2))));
  const Scalar _tmp96 = (Scalar(1) / Scalar(2)) * _tmp95;
  const Scalar _tmp97 =
      2 * _tmp90 * _tmp91 * lambdas(0, 0) * std::sin(_tmp96) / (std::sqrt(_tmp89) * _tmp95);
  const Scalar _tmp98 = _tmp85 * _tmp97;
  const Scalar _tmp99 = _tmp76 * _tmp78;
  const Scalar _tmp100 = -_tmp0 * _tmp81 + _tmp72 * _tmp99 + _tmp73 * _tmp77 + _tmp79 * _tmp82;
  const Scalar _tmp101 = _tmp94 * _tmp97;
  const Scalar _tmp102 = -_tmp0 * _tmp99 + _tmp64 * _tmp79 - _tmp72 * _tmp81 - _tmp73 * _tmp83;
  const Scalar _tmp103 = _tmp92 * _tmp97;
  const Scalar _tmp104 = _tmp0 * _tmp83 + _tmp72 * _tmp77 - _tmp73 * _tmp99 + _tmp79 * _tmp80;
  const Scalar _tmp105 = std::cos(_tmp96);
  const Scalar _tmp106 =
      _tmp100 * _tmp101 + _tmp102 * _tmp103 + _tmp104 * _tmp105 - _tmp84 * _tmp98;
  const Scalar _tmp107 =
      -_tmp100 * _tmp103 + _tmp101 * _tmp102 + _tmp104 * _tmp98 + _tmp105 * _tmp84;
  const Scalar _tmp108 =
      _tmp100 * _tmp105 - _tmp101 * _tmp104 + _tmp102 * _tmp98 + _tmp103 * _tmp84;
  const Scalar _tmp109 =
      -_tmp100 * _tmp98 - _tmp101 * _tmp84 + _tmp102 * _tmp105 - _tmp103 * _tmp104;
  const Scalar _tmp110 = -_tmp106 * _x0[0] - _tmp107 * _x0[1] - _tmp108 * _x0[2] + _tmp109 * _x0[3];
  const Scalar _tmp111 = _tmp106 * _x0[3] - _tmp107 * _x0[2] + _tmp108 * _x0[1] + _tmp109 * _x0[0];
  const Scalar _tmp112 = -_tmp106 * _x0[1] + _tmp107 * _x0[0] + _tmp108 * _x0[3] + _tmp109 * _x0[2];
  const Scalar _tmp113 = _tmp106 * _x0[2] + _tmp107 * _x0[3] - _tmp108 * _x0[0] + _tmp109 * _x0[1];
  const Scalar _tmp114 = -_tmp111 * _y[0] - _tmp112 * _y[2] - _tmp113 * _y[1];
  const Scalar _tmp115 = _tmp110 * _y[3];
  const Scalar _tmp116 = std::min<Scalar>(_tmp4, std::fabs(_tmp114 - _tmp115));
  const Scalar _tmp117 =
      2 * (2 * std::min<Scalar>(0, (((-_tmp114 + _tmp115) > 0) - ((-_tmp114 + _tmp115) < 0))) + 1) *
      std::acos(_tmp116) / std::sqrt(Scalar(1 - std::pow(_tmp116, Scalar(2))));
  const Scalar _tmp118 =
      _tmp117 * (-_tmp110 * _y[0] + _tmp111 * _y[3] - _tmp112 * _y[1] + _tmp113 * _y[2]);
  const Scalar _tmp119 =
      _tmp117 * (-_tmp110 * _y[1] - _tmp111 * _y[2] + _tmp112 * _y[0] + _tmp113 * _y[3]);
  const Scalar _tmp120 =
      _tmp117 * (-_tmp110 * _y[2] + _tmp111 * _y[1] + _tmp112 * _y[3] - _tmp113 * _y[0]);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp118 * sqrt_info(0, 0) + _tmp119 * sqrt_info(0, 1) + _tmp120 * sqrt_info(0, 2);
  _res(1, 0) = _tmp118 * sqrt_info(1, 0) + _tmp119 * sqrt_info(1, 1) + _tmp120 * sqrt_info(1, 2);
  _res(2, 0) = _tmp118 * sqrt_info(2, 0) + _tmp119 * sqrt_info(2, 1) + _tmp120 * sqrt_info(2, 2);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
