// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline5_rot3_velocity_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix52
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     x4: Rot3
 *     x5: Rot3
 *     velocity: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline5Rot3VelocityLocalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 5, 2>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const sym::Rot3<Scalar>& x4, const sym::Rot3<Scalar>& x5,
    const Eigen::Matrix<Scalar, 3, 1>& velocity, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 547

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x4 = x4.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x5 = x5.Data();

  // Intermediate terms (162)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = -_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0];
  const Scalar _tmp2 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp4 = _x3[3] * _x4[3];
  const Scalar _tmp5 = 1 - epsilon;
  const Scalar _tmp6 = std::min<Scalar>(_tmp5, std::fabs(_tmp3 - _tmp4));
  const Scalar _tmp7 = std::acos(_tmp6);
  const Scalar _tmp8 =
      2 * std::min<Scalar>(0, (((-_tmp3 + _tmp4) > 0) - ((-_tmp3 + _tmp4) < 0))) + 1;
  const Scalar _tmp9 = 1 - std::pow(_tmp6, Scalar(2));
  const Scalar _tmp10 = std::pow(_tmp7, Scalar(2)) * std::pow(_tmp8, Scalar(2)) *
                        std::pow(lambdas(3, 0), Scalar(2)) / _tmp9;
  const Scalar _tmp11 = 4 * _tmp10;
  const Scalar _tmp12 = _x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1];
  const Scalar _tmp13 = std::pow(_tmp12, Scalar(2));
  const Scalar _tmp14 = -_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2];
  const Scalar _tmp15 = std::pow(_tmp14, Scalar(2));
  const Scalar _tmp16 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp17 = _tmp11 * _tmp13 + _tmp11 * _tmp15 + _tmp11 * _tmp2 + _tmp16;
  const Scalar _tmp18 = std::sqrt(_tmp17);
  const Scalar _tmp19 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp20 = std::sin(_tmp19);
  const Scalar _tmp21 = 8 * _tmp10 * std::pow(_tmp20, Scalar(2)) / _tmp17;
  const Scalar _tmp22 = -_tmp2 * _tmp21;
  const Scalar _tmp23 = -_tmp13 * _tmp21;
  const Scalar _tmp24 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp25 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp26 = _x2[3] * _x3[3];
  const Scalar _tmp27 = std::min<Scalar>(_tmp5, std::fabs(_tmp25 - _tmp26));
  const Scalar _tmp28 = std::acos(_tmp27);
  const Scalar _tmp29 =
      2 * std::min<Scalar>(0, (((-_tmp25 + _tmp26) > 0) - ((-_tmp25 + _tmp26) < 0))) + 1;
  const Scalar _tmp30 = 1 - std::pow(_tmp27, Scalar(2));
  const Scalar _tmp31 = _tmp28 * _tmp29 / std::sqrt(_tmp30);
  const Scalar _tmp32 = _tmp24 * _tmp31;
  const Scalar _tmp33 = 2 * lambdas(2, 1);
  const Scalar _tmp34 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp35 = std::pow(_tmp34, Scalar(2));
  const Scalar _tmp36 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp37 = std::pow(_tmp36, Scalar(2));
  const Scalar _tmp38 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp39 = _x1[3] * _x2[3];
  const Scalar _tmp40 = std::min<Scalar>(_tmp5, std::fabs(_tmp38 - _tmp39));
  const Scalar _tmp41 = 1 - std::pow(_tmp40, Scalar(2));
  const Scalar _tmp42 = std::acos(_tmp40);
  const Scalar _tmp43 =
      2 * std::min<Scalar>(0, (((-_tmp38 + _tmp39) > 0) - ((-_tmp38 + _tmp39) < 0))) + 1;
  const Scalar _tmp44 = std::pow(_tmp42, Scalar(2)) * std::pow(_tmp43, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp41;
  const Scalar _tmp45 = 4 * _tmp44;
  const Scalar _tmp46 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp47 = std::pow(_tmp46, Scalar(2));
  const Scalar _tmp48 = _tmp16 + _tmp35 * _tmp45 + _tmp37 * _tmp45 + _tmp45 * _tmp47;
  const Scalar _tmp49 = std::sqrt(_tmp48);
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp49;
  const Scalar _tmp51 = std::sin(_tmp50);
  const Scalar _tmp52 = 8 * _tmp44 * std::pow(_tmp51, Scalar(2)) / _tmp48;
  const Scalar _tmp53 = -_tmp35 * _tmp52;
  const Scalar _tmp54 = -_tmp37 * _tmp52;
  const Scalar _tmp55 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp56 = _x0[3] * _x1[3];
  const Scalar _tmp57 = std::min<Scalar>(_tmp5, std::fabs(_tmp55 - _tmp56));
  const Scalar _tmp58 =
      2 * lambdas(0, 1) *
      (2 * std::min<Scalar>(0, (((-_tmp55 + _tmp56) > 0) - ((-_tmp55 + _tmp56) < 0))) + 1) *
      std::acos(_tmp57) / std::sqrt(Scalar(1 - std::pow(_tmp57, Scalar(2))));
  const Scalar _tmp59 =
      _tmp58 * (-_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0]);
  const Scalar _tmp60 = _tmp42 * _tmp43 / std::sqrt(_tmp41);
  const Scalar _tmp61 = _tmp34 * _tmp60;
  const Scalar _tmp62 = 4 * _tmp51 * lambdas(1, 0) * std::cos(_tmp50) / _tmp49;
  const Scalar _tmp63 = _tmp61 * _tmp62;
  const Scalar _tmp64 = _tmp46 * _tmp52;
  const Scalar _tmp65 = _tmp36 * _tmp64;
  const Scalar _tmp66 =
      _tmp58 * (_x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1]);
  const Scalar _tmp67 = _tmp60 * _tmp62;
  const Scalar _tmp68 = _tmp36 * _tmp67;
  const Scalar _tmp69 = _tmp34 * _tmp64;
  const Scalar _tmp70 =
      _tmp58 * (-_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2]);
  const Scalar _tmp71 = 2 * lambdas(1, 1);
  const Scalar _tmp72 = _tmp60 * _tmp71;
  const Scalar _tmp73 = _tmp46 * _tmp72 + _tmp59 * (_tmp53 + _tmp54 + 1) +
                        _tmp66 * (_tmp63 + _tmp65) + _tmp70 * (-_tmp68 + _tmp69);
  const Scalar _tmp74 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp75 = std::pow(_tmp24, Scalar(2));
  const Scalar _tmp76 = std::pow(_tmp28, Scalar(2)) * std::pow(_tmp29, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp30;
  const Scalar _tmp77 = 4 * _tmp76;
  const Scalar _tmp78 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp79 = std::pow(_tmp78, Scalar(2));
  const Scalar _tmp80 = std::pow(_tmp74, Scalar(2));
  const Scalar _tmp81 = _tmp16 + _tmp75 * _tmp77 + _tmp77 * _tmp79 + _tmp77 * _tmp80;
  const Scalar _tmp82 = std::sqrt(_tmp81);
  const Scalar _tmp83 = (Scalar(1) / Scalar(2)) * _tmp82;
  const Scalar _tmp84 = std::sin(_tmp83);
  const Scalar _tmp85 = 8 * _tmp76 * std::pow(_tmp84, Scalar(2)) / _tmp81;
  const Scalar _tmp86 = _tmp74 * _tmp85;
  const Scalar _tmp87 = _tmp24 * _tmp86;
  const Scalar _tmp88 = 4 * _tmp84 * lambdas(2, 0) * std::cos(_tmp83) / _tmp82;
  const Scalar _tmp89 = _tmp31 * _tmp88;
  const Scalar _tmp90 = _tmp78 * _tmp89;
  const Scalar _tmp91 = _tmp34 * _tmp36 * _tmp52;
  const Scalar _tmp92 = _tmp46 * _tmp67;
  const Scalar _tmp93 = -_tmp47 * _tmp52 + 1;
  const Scalar _tmp94 = _tmp36 * _tmp72 + _tmp59 * (-_tmp63 + _tmp65) + _tmp66 * (_tmp53 + _tmp93) +
                        _tmp70 * (_tmp91 + _tmp92);
  const Scalar _tmp95 = _tmp74 * _tmp89;
  const Scalar _tmp96 = _tmp24 * _tmp78 * _tmp85;
  const Scalar _tmp97 = -_tmp80 * _tmp85;
  const Scalar _tmp98 = -_tmp79 * _tmp85;
  const Scalar _tmp99 = _tmp59 * (_tmp68 + _tmp69) + _tmp61 * _tmp71 + _tmp66 * (_tmp91 - _tmp92) +
                        _tmp70 * (_tmp54 + _tmp93);
  const Scalar _tmp100 = _tmp32 * _tmp33 + _tmp73 * (_tmp87 + _tmp90) +
                         _tmp94 * (-_tmp95 + _tmp96) + _tmp99 * (_tmp97 + _tmp98 + 1);
  const Scalar _tmp101 = _tmp12 * _tmp14 * _tmp21;
  const Scalar _tmp102 = _tmp7 * _tmp8 / std::sqrt(_tmp9);
  const Scalar _tmp103 = _tmp1 * _tmp102;
  const Scalar _tmp104 = 4 * _tmp20 * lambdas(3, 0) * std::cos(_tmp19) / _tmp18;
  const Scalar _tmp105 = _tmp103 * _tmp104;
  const Scalar _tmp106 = _tmp32 * _tmp88;
  const Scalar _tmp107 = _tmp78 * _tmp86;
  const Scalar _tmp108 = _tmp31 * _tmp33;
  const Scalar _tmp109 = -_tmp75 * _tmp85 + 1;
  const Scalar _tmp110 = _tmp108 * _tmp78 + _tmp73 * (-_tmp106 + _tmp107) +
                         _tmp94 * (_tmp109 + _tmp97) + _tmp99 * (_tmp95 + _tmp96);
  const Scalar _tmp111 = _tmp102 * _tmp104;
  const Scalar _tmp112 = _tmp111 * _tmp12;
  const Scalar _tmp113 = _tmp1 * _tmp21;
  const Scalar _tmp114 = _tmp113 * _tmp14;
  const Scalar _tmp115 = _tmp108 * _tmp74 + _tmp73 * (_tmp109 + _tmp98) +
                         _tmp94 * (_tmp106 + _tmp107) + _tmp99 * (_tmp87 - _tmp90);
  const Scalar _tmp116 = 2 * lambdas(3, 1);
  const Scalar _tmp117 = _tmp102 * _tmp116;
  const Scalar _tmp118 = _tmp100 * (_tmp22 + _tmp23 + 1) + _tmp110 * (_tmp101 - _tmp105) +
                         _tmp115 * (_tmp112 + _tmp114) + _tmp117 * _tmp14;
  const Scalar _tmp119 = -_x4[0] * _x5[3] - _x4[1] * _x5[2] + _x4[2] * _x5[1] + _x4[3] * _x5[0];
  const Scalar _tmp120 = -_x4[0] * _x5[0] - _x4[1] * _x5[1] - _x4[2] * _x5[2];
  const Scalar _tmp121 = _x4[3] * _x5[3];
  const Scalar _tmp122 = std::min<Scalar>(_tmp5, std::fabs(_tmp120 - _tmp121));
  const Scalar _tmp123 = std::acos(_tmp122);
  const Scalar _tmp124 =
      2 * std::min<Scalar>(0, (((-_tmp120 + _tmp121) > 0) - ((-_tmp120 + _tmp121) < 0))) + 1;
  const Scalar _tmp125 = 1 - std::pow(_tmp122, Scalar(2));
  const Scalar _tmp126 = _tmp123 * _tmp124 / std::sqrt(_tmp125);
  const Scalar _tmp127 = std::pow(_tmp119, Scalar(2));
  const Scalar _tmp128 = std::pow(_tmp123, Scalar(2)) * std::pow(_tmp124, Scalar(2)) *
                         std::pow(lambdas(4, 0), Scalar(2)) / _tmp125;
  const Scalar _tmp129 = 4 * _tmp128;
  const Scalar _tmp130 = _x4[0] * _x5[2] - _x4[1] * _x5[3] - _x4[2] * _x5[0] + _x4[3] * _x5[1];
  const Scalar _tmp131 = std::pow(_tmp130, Scalar(2));
  const Scalar _tmp132 = -_x4[0] * _x5[1] + _x4[1] * _x5[0] - _x4[2] * _x5[3] + _x4[3] * _x5[2];
  const Scalar _tmp133 = std::pow(_tmp132, Scalar(2));
  const Scalar _tmp134 = _tmp127 * _tmp129 + _tmp129 * _tmp131 + _tmp129 * _tmp133 + _tmp16;
  const Scalar _tmp135 = std::sqrt(_tmp134);
  const Scalar _tmp136 = (Scalar(1) / Scalar(2)) * _tmp135;
  const Scalar _tmp137 = std::sin(_tmp136);
  const Scalar _tmp138 = 4 * _tmp137 * lambdas(4, 0) * std::cos(_tmp136) / _tmp135;
  const Scalar _tmp139 = _tmp126 * _tmp138;
  const Scalar _tmp140 = _tmp119 * _tmp139;
  const Scalar _tmp141 = 8 * _tmp128 * std::pow(_tmp137, Scalar(2)) / _tmp134;
  const Scalar _tmp142 = _tmp132 * _tmp141;
  const Scalar _tmp143 = _tmp130 * _tmp142;
  const Scalar _tmp144 = _tmp126 * _tmp130;
  const Scalar _tmp145 = 2 * lambdas(4, 1);
  const Scalar _tmp146 = _tmp113 * _tmp12;
  const Scalar _tmp147 = _tmp111 * _tmp14;
  const Scalar _tmp148 = -_tmp15 * _tmp21 + 1;
  const Scalar _tmp149 = _tmp100 * (-_tmp112 + _tmp114) + _tmp103 * _tmp116 +
                         _tmp110 * (_tmp146 + _tmp147) + _tmp115 * (_tmp148 + _tmp23);
  const Scalar _tmp150 = _tmp119 * _tmp130 * _tmp141;
  const Scalar _tmp151 = _tmp132 * _tmp139;
  const Scalar _tmp152 = _tmp100 * (_tmp101 + _tmp105) + _tmp110 * (_tmp148 + _tmp22) +
                         _tmp115 * (_tmp146 - _tmp147) + _tmp117 * _tmp12;
  const Scalar _tmp153 = -_tmp127 * _tmp141;
  const Scalar _tmp154 = -_tmp133 * _tmp141 + 1;
  const Scalar _tmp155 = _tmp0 * (_tmp118 * (_tmp140 + _tmp143) + _tmp144 * _tmp145 +
                                  _tmp149 * (_tmp150 - _tmp151) + _tmp152 * (_tmp153 + _tmp154)) -
                         velocity(1, 0);
  const Scalar _tmp156 = _tmp119 * _tmp142;
  const Scalar _tmp157 = _tmp138 * _tmp144;
  const Scalar _tmp158 = _tmp126 * _tmp145;
  const Scalar _tmp159 = -_tmp131 * _tmp141;
  const Scalar _tmp160 = _tmp0 * (_tmp118 * (_tmp153 + _tmp159 + 1) + _tmp132 * _tmp158 +
                                  _tmp149 * (_tmp156 + _tmp157) + _tmp152 * (-_tmp140 + _tmp143)) -
                         velocity(2, 0);
  const Scalar _tmp161 = _tmp0 * (_tmp118 * (_tmp156 - _tmp157) + _tmp119 * _tmp158 +
                                  _tmp149 * (_tmp154 + _tmp159) + _tmp152 * (_tmp150 + _tmp151)) -
                         velocity(0, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp155 * sqrt_info(0, 1) + _tmp160 * sqrt_info(0, 2) + _tmp161 * sqrt_info(0, 0);
  _res(1, 0) = _tmp155 * sqrt_info(1, 1) + _tmp160 * sqrt_info(1, 2) + _tmp161 * sqrt_info(1, 0);
  _res(2, 0) = _tmp155 * sqrt_info(2, 1) + _tmp160 * sqrt_info(2, 2) + _tmp161 * sqrt_info(2, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
