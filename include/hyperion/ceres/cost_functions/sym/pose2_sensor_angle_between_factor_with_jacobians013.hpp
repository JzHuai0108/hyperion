// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_sensor_angle_between_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_s: Pose2
 *     s_d_y: Matrix11
 *     y: Pose2
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x (4) (row-major)
 *     res_D_x_T_s: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x_T_s (4)
 * (row-major) res_D_y: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg y (4)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose2SensorAngleBetweenFactorWithJacobians013(
    const sym::Pose2<Scalar>& x, const sym::Pose2<Scalar>& x_T_s,
    const Eigen::Matrix<Scalar, 1, 1>& s_d_y, const sym::Pose2<Scalar>& y,
    const Eigen::Matrix<Scalar, 1, 1>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_s = nullptr,
    Scalar* const res_D_y = nullptr) {
  // Total ops: 55

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (19)
  const Scalar _tmp0 = _x[0] * _x_T_s[0] - _x[1] * _x_T_s[1];
  const Scalar _tmp1 = _tmp0 * _y[1];
  const Scalar _tmp2 = _x[0] * _x_T_s[1];
  const Scalar _tmp3 = _x[1] * _x_T_s[0];
  const Scalar _tmp4 = _tmp2 + _tmp3;
  const Scalar _tmp5 = _tmp4 * _y[0];
  const Scalar _tmp6 = _tmp1 - _tmp5;
  const Scalar _tmp7 = _tmp0 * _y[0];
  const Scalar _tmp8 = _tmp4 * _y[1] + _tmp7;
  const Scalar _tmp9 = _tmp8 + epsilon * ((((_tmp8) > 0) - ((_tmp8) < 0)) + Scalar(0.5));
  const Scalar _tmp10 = std::atan2(_tmp6, _tmp9);
  const Scalar _tmp11 = std::sqrt(Scalar(std::pow(_tmp10, Scalar(2)) + epsilon));
  const Scalar _tmp12 = -_tmp2 - _tmp3;
  const Scalar _tmp13 = Scalar(1.0) / (_tmp9);
  const Scalar _tmp14 = std::pow(_tmp9, Scalar(2));
  const Scalar _tmp15 = _tmp6 / _tmp14;
  const Scalar _tmp16 =
      _tmp10 * _tmp14 * sqrt_info(0, 0) / (_tmp11 * (_tmp14 + std::pow(_tmp6, Scalar(2))));
  const Scalar _tmp17 =
      _tmp16 * (_tmp13 * (_tmp12 * _y[1] - _tmp7) - _tmp15 * (_tmp1 + _tmp12 * _y[0]));
  const Scalar _tmp18 = _tmp16 * (_tmp13 * _tmp8 - _tmp15 * (-_tmp1 + _tmp5));

  // Output terms (4)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) * (_tmp11 - s_d_y(0, 0));

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = -_tmp17 * _x[1];
    _res_D_x(0, 1) = _tmp17 * _x[0];
    _res_D_x(0, 2) = 0;
    _res_D_x(0, 3) = 0;
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s(0, 0) = -_tmp17 * _x_T_s[1];
    _res_D_x_T_s(0, 1) = _tmp17 * _x_T_s[0];
    _res_D_x_T_s(0, 2) = 0;
    _res_D_x_T_s(0, 3) = 0;
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = -_tmp18 * _y[1];
    _res_D_y(0, 1) = _tmp18 * _y[0];
    _res_D_y(0, 2) = 0;
    _res_D_y(0, 3) = 0;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
