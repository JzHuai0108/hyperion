// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>
#include <sym/rot2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose2_rot2_sensor_between_factor
 *
 * Args:
 *     lambdas: Matrix31
 *     x0: Pose2
 *     x1: Pose2
 *     x2: Pose2
 *     x3: Pose2
 *     x_T_s: Pose2
 *     s_T_y: Rot2
 *     y: Pose2
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x0: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x0 (4) (row-major)
 *     res_D_x1: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x1 (4) (row-major)
 *     res_D_x2: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x2 (4) (row-major)
 *     res_D_x3: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x3 (4) (row-major)
 *     res_D_x_T_s: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x_T_s (4)
 * (row-major) res_D_y: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg y (4)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Spline3Pose2Rot2SensorBetweenFactorWithJacobians123457(
    const Eigen::Matrix<Scalar, 3, 1>& lambdas, const sym::Pose2<Scalar>& x0,
    const sym::Pose2<Scalar>& x1, const sym::Pose2<Scalar>& x2, const sym::Pose2<Scalar>& x3,
    const sym::Pose2<Scalar>& x_T_s, const sym::Rot2<Scalar>& s_T_y, const sym::Pose2<Scalar>& y,
    const Eigen::Matrix<Scalar, 1, 1>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr,
    Scalar* const res_D_x_T_s = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 368

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 2, 1>& _s_T_y = s_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (133)
  const Scalar _tmp0 = _x2[1] * _x3[0];
  const Scalar _tmp1 = _x2[0] * _x3[1];
  const Scalar _tmp2 = -_tmp0 + _tmp1;
  const Scalar _tmp3 = _x2[0] * _x3[0];
  const Scalar _tmp4 = _x2[1] * _x3[1];
  const Scalar _tmp5 = _tmp3 + _tmp4;
  const Scalar _tmp6 = _tmp5 + epsilon * ((((_tmp5) > 0) - ((_tmp5) < 0)) + Scalar(0.5));
  const Scalar _tmp7 = lambdas(2, 0) * std::atan2(_tmp2, _tmp6);
  const Scalar _tmp8 = std::sin(_tmp7);
  const Scalar _tmp9 = _x1[0] * _x2[1];
  const Scalar _tmp10 = _x1[1] * _x2[0];
  const Scalar _tmp11 = -_tmp10 + _tmp9;
  const Scalar _tmp12 = _x1[0] * _x2[0];
  const Scalar _tmp13 = _x1[1] * _x2[1];
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = _tmp14 + epsilon * ((((_tmp14) > 0) - ((_tmp14) < 0)) + Scalar(0.5));
  const Scalar _tmp16 = lambdas(1, 0) * std::atan2(_tmp11, _tmp15);
  const Scalar _tmp17 = std::sin(_tmp16);
  const Scalar _tmp18 = _tmp17 * _tmp8;
  const Scalar _tmp19 = std::cos(_tmp7);
  const Scalar _tmp20 = std::cos(_tmp16);
  const Scalar _tmp21 = _tmp19 * _tmp20;
  const Scalar _tmp22 = -_tmp18 + _tmp21;
  const Scalar _tmp23 = _x0[1] * _x1[0];
  const Scalar _tmp24 = _x0[0] * _x1[1];
  const Scalar _tmp25 = -_tmp23 + _tmp24;
  const Scalar _tmp26 = _x0[1] * _x1[1];
  const Scalar _tmp27 = _x0[0] * _x1[0];
  const Scalar _tmp28 = _tmp26 + _tmp27;
  const Scalar _tmp29 = _tmp28 + epsilon * ((((_tmp28) > 0) - ((_tmp28) < 0)) + Scalar(0.5));
  const Scalar _tmp30 = lambdas(0, 0) * std::atan2(_tmp25, _tmp29);
  const Scalar _tmp31 = std::cos(_tmp30);
  const Scalar _tmp32 = _tmp22 * _tmp31;
  const Scalar _tmp33 = _tmp20 * _tmp8;
  const Scalar _tmp34 = _tmp17 * _tmp19;
  const Scalar _tmp35 = _tmp33 + _tmp34;
  const Scalar _tmp36 = std::sin(_tmp30);
  const Scalar _tmp37 = _tmp35 * _tmp36;
  const Scalar _tmp38 = _tmp32 - _tmp37;
  const Scalar _tmp39 = _tmp38 * _x0[1];
  const Scalar _tmp40 = _tmp22 * _tmp36;
  const Scalar _tmp41 = _tmp31 * _tmp35;
  const Scalar _tmp42 = _tmp40 + _tmp41;
  const Scalar _tmp43 = _tmp42 * _x0[0];
  const Scalar _tmp44 = _tmp39 + _tmp43;
  const Scalar _tmp45 = _tmp44 * _x_T_s[0];
  const Scalar _tmp46 = _tmp38 * _x0[0] - _tmp42 * _x0[1];
  const Scalar _tmp47 = _tmp46 * _x_T_s[1];
  const Scalar _tmp48 = _tmp45 + _tmp47;
  const Scalar _tmp49 = _tmp48 * _y[0];
  const Scalar _tmp50 = -_tmp44 * _x_T_s[1] + _tmp46 * _x_T_s[0];
  const Scalar _tmp51 = _tmp50 * _y[1];
  const Scalar _tmp52 = -_tmp49 + _tmp51;
  const Scalar _tmp53 = _tmp50 * _y[0];
  const Scalar _tmp54 = _tmp48 * _y[1] + _tmp53;
  const Scalar _tmp55 = _s_T_y[1] * _tmp54;
  const Scalar _tmp56 = _s_T_y[0] * _tmp52 - _tmp55;
  const Scalar _tmp57 = _s_T_y[0] * _tmp54;
  const Scalar _tmp58 = _s_T_y[1] * _tmp52 + _tmp57;
  const Scalar _tmp59 = _tmp58 + epsilon * ((((_tmp58) > 0) - ((_tmp58) < 0)) + Scalar(0.5));
  const Scalar _tmp60 = std::pow(_tmp25, Scalar(2));
  const Scalar _tmp61 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp62 = Scalar(1.0) / (_tmp61);
  const Scalar _tmp63 = Scalar(1.0) / (_tmp29);
  const Scalar _tmp64 = _tmp61 * lambdas(0, 0) / (_tmp60 + _tmp61);
  const Scalar _tmp65 = _tmp64 * (-_tmp60 * _tmp62 + _tmp63 * (-_tmp26 - _tmp27));
  const Scalar _tmp66 = _tmp32 * _tmp65 - _tmp37 * _tmp65;
  const Scalar _tmp67 = -_tmp40 * _tmp65 - _tmp41 * _tmp65;
  const Scalar _tmp68 = -_tmp39 - _tmp43 - _tmp66 * _x0[1] + _tmp67 * _x0[0];
  const Scalar _tmp69 = _tmp46 + _tmp66 * _x0[0] + _tmp67 * _x0[1];
  const Scalar _tmp70 = _tmp68 * _x_T_s[1] + _tmp69 * _x_T_s[0];
  const Scalar _tmp71 = _tmp68 * _x_T_s[0] - _tmp69 * _x_T_s[1];
  const Scalar _tmp72 = _tmp70 * _y[1] + _tmp71 * _y[0];
  const Scalar _tmp73 = -_tmp70 * _y[0] + _tmp71 * _y[1];
  const Scalar _tmp74 = Scalar(1.0) / (_tmp59);
  const Scalar _tmp75 = std::pow(_tmp59, Scalar(2));
  const Scalar _tmp76 = _tmp56 / _tmp75;
  const Scalar _tmp77 = _tmp75 * sqrt_info(0, 0) / (std::pow(_tmp56, Scalar(2)) + _tmp75);
  const Scalar _tmp78 = _tmp77 * (_tmp74 * (_s_T_y[0] * _tmp73 - _s_T_y[1] * _tmp72) -
                                  _tmp76 * (_s_T_y[0] * _tmp72 + _s_T_y[1] * _tmp73));
  const Scalar _tmp79 = std::pow(_tmp11, Scalar(2));
  const Scalar _tmp80 = std::pow(_tmp15, Scalar(2));
  const Scalar _tmp81 = Scalar(1.0) / (_tmp80);
  const Scalar _tmp82 = Scalar(1.0) / (_tmp15);
  const Scalar _tmp83 = _tmp80 * lambdas(1, 0) / (_tmp79 + _tmp80);
  const Scalar _tmp84 = _tmp83 * (-_tmp79 * _tmp81 + _tmp82 * (-_tmp12 - _tmp13));
  const Scalar _tmp85 = -_tmp18 * _tmp84 + _tmp21 * _tmp84;
  const Scalar _tmp86 = -_tmp33 * _tmp84 - _tmp34 * _tmp84;
  const Scalar _tmp87 = _tmp64 * (-_tmp25 * _tmp62 * (_tmp23 - _tmp24) + _tmp28 * _tmp63);
  const Scalar _tmp88 = _tmp31 * _tmp85 + _tmp32 * _tmp87 + _tmp36 * _tmp86 - _tmp37 * _tmp87;
  const Scalar _tmp89 = _tmp31 * _tmp86 - _tmp36 * _tmp85 - _tmp40 * _tmp87 - _tmp41 * _tmp87;
  const Scalar _tmp90 = -_tmp88 * _x0[1] + _tmp89 * _x0[0];
  const Scalar _tmp91 = _tmp88 * _x0[0] + _tmp89 * _x0[1];
  const Scalar _tmp92 = _tmp90 * _x_T_s[0] - _tmp91 * _x_T_s[1];
  const Scalar _tmp93 = _tmp90 * _x_T_s[1] + _tmp91 * _x_T_s[0];
  const Scalar _tmp94 = _tmp92 * _y[0] + _tmp93 * _y[1];
  const Scalar _tmp95 = _tmp92 * _y[1] - _tmp93 * _y[0];
  const Scalar _tmp96 = _tmp77 * (_tmp74 * (_s_T_y[0] * _tmp95 - _s_T_y[1] * _tmp94) -
                                  _tmp76 * (_s_T_y[0] * _tmp94 + _s_T_y[1] * _tmp95));
  const Scalar _tmp97 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp98 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp99 = Scalar(1.0) / (_tmp98);
  const Scalar _tmp100 = Scalar(1.0) / (_tmp6);
  const Scalar _tmp101 = _tmp98 * lambdas(2, 0) / (_tmp97 + _tmp98);
  const Scalar _tmp102 = _tmp101 * (_tmp100 * (-_tmp3 - _tmp4) - _tmp97 * _tmp99);
  const Scalar _tmp103 = _tmp83 * (-_tmp11 * _tmp81 * (_tmp10 - _tmp9) + _tmp14 * _tmp82);
  const Scalar _tmp104 = -_tmp102 * _tmp33 - _tmp102 * _tmp34 - _tmp103 * _tmp33 - _tmp103 * _tmp34;
  const Scalar _tmp105 = -_tmp102 * _tmp18 + _tmp102 * _tmp21 - _tmp103 * _tmp18 + _tmp103 * _tmp21;
  const Scalar _tmp106 = _tmp104 * _tmp36 + _tmp105 * _tmp31;
  const Scalar _tmp107 = _tmp104 * _tmp31 - _tmp105 * _tmp36;
  const Scalar _tmp108 = _tmp106 * _x0[0] + _tmp107 * _x0[1];
  const Scalar _tmp109 = -_tmp106 * _x0[1] + _tmp107 * _x0[0];
  const Scalar _tmp110 = _tmp108 * _x_T_s[0] + _tmp109 * _x_T_s[1];
  const Scalar _tmp111 = -_tmp108 * _x_T_s[1] + _tmp109 * _x_T_s[0];
  const Scalar _tmp112 = -_tmp110 * _y[0] + _tmp111 * _y[1];
  const Scalar _tmp113 = _tmp110 * _y[1] + _tmp111 * _y[0];
  const Scalar _tmp114 = _tmp77 * (_tmp74 * (_s_T_y[0] * _tmp112 - _s_T_y[1] * _tmp113) -
                                   _tmp76 * (_s_T_y[0] * _tmp113 + _s_T_y[1] * _tmp112));
  const Scalar _tmp115 = _tmp101 * (_tmp100 * _tmp5 - _tmp2 * _tmp99 * (_tmp0 - _tmp1));
  const Scalar _tmp116 = -_tmp115 * _tmp18 + _tmp115 * _tmp21;
  const Scalar _tmp117 = -_tmp115 * _tmp33 - _tmp115 * _tmp34;
  const Scalar _tmp118 = -_tmp116 * _tmp36 + _tmp117 * _tmp31;
  const Scalar _tmp119 = _tmp116 * _tmp31 + _tmp117 * _tmp36;
  const Scalar _tmp120 = _tmp118 * _x0[1] + _tmp119 * _x0[0];
  const Scalar _tmp121 = _tmp118 * _x0[0] - _tmp119 * _x0[1];
  const Scalar _tmp122 = _tmp120 * _x_T_s[0] + _tmp121 * _x_T_s[1];
  const Scalar _tmp123 = -_tmp120 * _x_T_s[1] + _tmp121 * _x_T_s[0];
  const Scalar _tmp124 = -_tmp122 * _y[0] + _tmp123 * _y[1];
  const Scalar _tmp125 = _tmp122 * _y[1] + _tmp123 * _y[0];
  const Scalar _tmp126 = _tmp77 * (_tmp74 * (_s_T_y[0] * _tmp124 - _s_T_y[1] * _tmp125) -
                                   _tmp76 * (_s_T_y[0] * _tmp125 + _s_T_y[1] * _tmp124));
  const Scalar _tmp127 = -_tmp45 - _tmp47;
  const Scalar _tmp128 = _tmp127 * _y[0] + _tmp51;
  const Scalar _tmp129 = _tmp127 * _y[1] - _tmp53;
  const Scalar _tmp130 = _tmp77 * (_tmp74 * (_s_T_y[0] * _tmp129 - _s_T_y[1] * _tmp128) -
                                   _tmp76 * (_s_T_y[0] * _tmp128 + _s_T_y[1] * _tmp129));
  const Scalar _tmp131 = _tmp49 - _tmp51;
  const Scalar _tmp132 =
      _tmp77 * (_tmp74 * (-_s_T_y[1] * _tmp131 + _tmp57) - _tmp76 * (_s_T_y[0] * _tmp131 + _tmp55));

  // Output terms (7)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) * std::atan2(_tmp56, _tmp59);

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = -_tmp78 * _x0[1];
    _res_D_x0(0, 1) = _tmp78 * _x0[0];
    _res_D_x0(0, 2) = 0;
    _res_D_x0(0, 3) = 0;
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = -_tmp96 * _x1[1];
    _res_D_x1(0, 1) = _tmp96 * _x1[0];
    _res_D_x1(0, 2) = 0;
    _res_D_x1(0, 3) = 0;
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = -_tmp114 * _x2[1];
    _res_D_x2(0, 1) = _tmp114 * _x2[0];
    _res_D_x2(0, 2) = 0;
    _res_D_x2(0, 3) = 0;
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) = -_tmp126 * _x3[1];
    _res_D_x3(0, 1) = _tmp126 * _x3[0];
    _res_D_x3(0, 2) = 0;
    _res_D_x3(0, 3) = 0;
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s(0, 0) = -_tmp130 * _x_T_s[1];
    _res_D_x_T_s(0, 1) = _tmp130 * _x_T_s[0];
    _res_D_x_T_s(0, 2) = 0;
    _res_D_x_T_s(0, 3) = 0;
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = -_tmp132 * _y[1];
    _res_D_y(0, 1) = _tmp132 * _y[0];
    _res_D_y(0, 2) = 0;
    _res_D_y(0, 3) = 0;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
