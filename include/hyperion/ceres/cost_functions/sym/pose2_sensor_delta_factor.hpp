// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_sensor_delta_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_y: Pose2
 *     y: Pose2
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose2SensorDeltaFactor(const sym::Pose2<Scalar>& x,
                                                   const sym::Pose2<Scalar>& x_T_y,
                                                   const sym::Pose2<Scalar>& y,
                                                   const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
                                                   const Scalar epsilon) {
  // Total ops: 48

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_y = x_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (6)
  const Scalar _tmp0 = _x[0] * _y[0] + _x[1] * _y[1];
  const Scalar _tmp1 = _x[0] * _y[1] - _x[1] * _y[0];
  const Scalar _tmp2 = _tmp0 * _x_T_y[0] + _tmp1 * _x_T_y[1];
  const Scalar _tmp3 =
      std::atan2(-_tmp0 * _x_T_y[1] + _tmp1 * _x_T_y[0],
                 _tmp2 + epsilon * ((((_tmp2) > 0) - ((_tmp2) < 0)) + Scalar(0.5)));
  const Scalar _tmp4 = -_x[0] * _x[2] + _x[0] * _y[2] - _x[1] * _x[3] + _x[1] * _y[3] - _x_T_y[2];
  const Scalar _tmp5 = -_x[0] * _x[3] + _x[0] * _y[3] + _x[1] * _x[2] - _x[1] * _y[2] - _x_T_y[3];

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp3 * sqrt_info(0, 0) + _tmp4 * sqrt_info(0, 1) + _tmp5 * sqrt_info(0, 2);
  _res(1, 0) = _tmp3 * sqrt_info(1, 0) + _tmp4 * sqrt_info(1, 1) + _tmp5 * sqrt_info(1, 2);
  _res(2, 0) = _tmp3 * sqrt_info(2, 0) + _tmp4 * sqrt_info(2, 1) + _tmp5 * sqrt_info(2, 2);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
