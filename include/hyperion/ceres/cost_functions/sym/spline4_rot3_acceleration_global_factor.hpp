// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline4_rot3_acceleration_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix43
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     x4: Rot3
 *     acceleration: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline4Rot3AccelerationGlobalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 4, 3>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const sym::Rot3<Scalar>& x4, const Eigen::Matrix<Scalar, 3, 1>& acceleration,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon) {
  // Total ops: 577

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x4 = x4.Data();

  // Intermediate terms (185)
  const Scalar _tmp0 = std::pow(dt, Scalar(-2));
  const Scalar _tmp1 = 2 * _x0[3];
  const Scalar _tmp2 = _tmp1 * _x0[0];
  const Scalar _tmp3 = 2 * _x0[1];
  const Scalar _tmp4 = _tmp3 * _x0[2];
  const Scalar _tmp5 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp6 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp7 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp8 = _x1[3] * _x2[3];
  const Scalar _tmp9 = 1 - epsilon;
  const Scalar _tmp10 = std::min<Scalar>(_tmp9, std::fabs(_tmp7 - _tmp8));
  const Scalar _tmp11 = 1 - std::pow(_tmp10, Scalar(2));
  const Scalar _tmp12 = std::acos(_tmp10);
  const Scalar _tmp13 =
      2 * std::min<Scalar>(0, (((-_tmp7 + _tmp8) > 0) - ((-_tmp7 + _tmp8) < 0))) + 1;
  const Scalar _tmp14 = _tmp12 * _tmp13 / std::sqrt(_tmp11);
  const Scalar _tmp15 = 2 * _tmp14;
  const Scalar _tmp16 = _tmp15 * _tmp6;
  const Scalar _tmp17 = _tmp16 * lambdas(1, 1);
  const Scalar _tmp18 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp19 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp20 = std::pow(_tmp19, Scalar(2));
  const Scalar _tmp21 = std::pow(_tmp12, Scalar(2)) * std::pow(_tmp13, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp11;
  const Scalar _tmp22 = 4 * _tmp21;
  const Scalar _tmp23 = std::pow(_tmp18, Scalar(2));
  const Scalar _tmp24 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp25 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp26 = _tmp20 * _tmp22 + _tmp22 * _tmp23 + _tmp22 * _tmp24 + _tmp25;
  const Scalar _tmp27 = std::sqrt(_tmp26);
  const Scalar _tmp28 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp29 = std::sin(_tmp28);
  const Scalar _tmp30 = 4 * _tmp14 * _tmp29 * lambdas(1, 0) * std::cos(_tmp28) / _tmp27;
  const Scalar _tmp31 = _tmp18 * _tmp30;
  const Scalar _tmp32 = 8 * _tmp21 * std::pow(_tmp29, Scalar(2)) / _tmp26;
  const Scalar _tmp33 = _tmp19 * _tmp32 * _tmp6;
  const Scalar _tmp34 = -_tmp31 + _tmp33;
  const Scalar _tmp35 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp36 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp37 = _x2[3] * _x3[3];
  const Scalar _tmp38 = std::min<Scalar>(_tmp9, std::fabs(_tmp36 - _tmp37));
  const Scalar _tmp39 = std::acos(_tmp38);
  const Scalar _tmp40 =
      2 * std::min<Scalar>(0, (((-_tmp36 + _tmp37) > 0) - ((-_tmp36 + _tmp37) < 0))) + 1;
  const Scalar _tmp41 = 1 - std::pow(_tmp38, Scalar(2));
  const Scalar _tmp42 = _tmp39 * _tmp40 / std::sqrt(_tmp41);
  const Scalar _tmp43 = 2 * _tmp42;
  const Scalar _tmp44 = _tmp35 * _tmp43;
  const Scalar _tmp45 = _tmp44 * lambdas(2, 1);
  const Scalar _tmp46 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp47 = std::pow(_tmp46, Scalar(2));
  const Scalar _tmp48 = std::pow(_tmp39, Scalar(2)) * std::pow(_tmp40, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp41;
  const Scalar _tmp49 = 4 * _tmp48;
  const Scalar _tmp50 = std::pow(_tmp35, Scalar(2));
  const Scalar _tmp51 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp52 = std::pow(_tmp51, Scalar(2));
  const Scalar _tmp53 = _tmp25 + _tmp47 * _tmp49 + _tmp49 * _tmp50 + _tmp49 * _tmp52;
  const Scalar _tmp54 = std::sqrt(_tmp53);
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp54;
  const Scalar _tmp56 = std::sin(_tmp55);
  const Scalar _tmp57 = 4 * _tmp42 * _tmp56 * lambdas(2, 0) * std::cos(_tmp55) / _tmp54;
  const Scalar _tmp58 = _tmp46 * _tmp57;
  const Scalar _tmp59 = 8 * _tmp48 * std::pow(_tmp56, Scalar(2)) / _tmp53;
  const Scalar _tmp60 = _tmp35 * _tmp51 * _tmp59;
  const Scalar _tmp61 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp62 = _x3[3] * _x4[3];
  const Scalar _tmp63 = std::min<Scalar>(_tmp9, std::fabs(_tmp61 - _tmp62));
  const Scalar _tmp64 =
      2 * (2 * std::min<Scalar>(0, (((-_tmp61 + _tmp62) > 0) - ((-_tmp61 + _tmp62) < 0))) + 1) *
      std::acos(_tmp63) / std::sqrt(Scalar(1 - std::pow(_tmp63, Scalar(2))));
  const Scalar _tmp65 =
      _tmp64 * (-_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0]);
  const Scalar _tmp66 = _tmp65 * (_tmp58 + _tmp60);
  const Scalar _tmp67 = _tmp51 * _tmp57;
  const Scalar _tmp68 = _tmp46 * _tmp59;
  const Scalar _tmp69 = _tmp35 * _tmp68;
  const Scalar _tmp70 =
      _tmp64 * (-_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2]);
  const Scalar _tmp71 = _tmp70 * (-_tmp67 + _tmp69);
  const Scalar _tmp72 = -_tmp52 * _tmp59;
  const Scalar _tmp73 = -_tmp47 * _tmp59 + 1;
  const Scalar _tmp74 =
      _tmp64 * (_x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1]);
  const Scalar _tmp75 = _tmp74 * (_tmp72 + _tmp73);
  const Scalar _tmp76 = _tmp66 * lambdas(3, 1) + _tmp71 * lambdas(3, 1) + _tmp75 * lambdas(3, 1);
  const Scalar _tmp77 = _tmp45 + _tmp76;
  const Scalar _tmp78 = -_tmp23 * _tmp32;
  const Scalar _tmp79 = -_tmp20 * _tmp32;
  const Scalar _tmp80 = _tmp78 + _tmp79 + 1;
  const Scalar _tmp81 = _tmp43 * _tmp51;
  const Scalar _tmp82 = _tmp81 * lambdas(2, 1);
  const Scalar _tmp83 = _tmp51 * _tmp68;
  const Scalar _tmp84 = _tmp35 * _tmp57;
  const Scalar _tmp85 = _tmp70 * (_tmp83 + _tmp84);
  const Scalar _tmp86 = _tmp74 * (-_tmp58 + _tmp60);
  const Scalar _tmp87 = -_tmp50 * _tmp59;
  const Scalar _tmp88 = _tmp65 * (_tmp73 + _tmp87);
  const Scalar _tmp89 = _tmp85 * lambdas(3, 1) + _tmp86 * lambdas(3, 1) + _tmp88 * lambdas(3, 1);
  const Scalar _tmp90 = _tmp82 + _tmp89;
  const Scalar _tmp91 = _tmp43 * _tmp46;
  const Scalar _tmp92 = _tmp91 * lambdas(2, 1);
  const Scalar _tmp93 = _tmp74 * (_tmp67 + _tmp69);
  const Scalar _tmp94 = _tmp70 * (_tmp72 + _tmp87 + 1);
  const Scalar _tmp95 = _tmp65 * (_tmp83 - _tmp84);
  const Scalar _tmp96 = _tmp93 * lambdas(3, 1) + _tmp94 * lambdas(3, 1) + _tmp95 * lambdas(3, 1);
  const Scalar _tmp97 = _tmp92 + _tmp96;
  const Scalar _tmp98 = _tmp19 * _tmp30;
  const Scalar _tmp99 = _tmp18 * _tmp32;
  const Scalar _tmp100 = _tmp6 * _tmp99;
  const Scalar _tmp101 = _tmp100 + _tmp98;
  const Scalar _tmp102 = _tmp101 * _tmp97 + _tmp34 * _tmp77 + _tmp80 * _tmp90;
  const Scalar _tmp103 = _tmp102 + _tmp17;
  const Scalar _tmp104 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp105 = std::pow(_tmp104, Scalar(2));
  const Scalar _tmp106 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp107 = _x0[3] * _x1[3];
  const Scalar _tmp108 = std::min<Scalar>(_tmp9, std::fabs(_tmp106 - _tmp107));
  const Scalar _tmp109 = 1 - std::pow(_tmp108, Scalar(2));
  const Scalar _tmp110 = std::acos(_tmp108);
  const Scalar _tmp111 =
      2 * std::min<Scalar>(0, (((-_tmp106 + _tmp107) > 0) - ((-_tmp106 + _tmp107) < 0))) + 1;
  const Scalar _tmp112 = std::pow(_tmp110, Scalar(2)) * std::pow(_tmp111, Scalar(2)) *
                         std::pow(lambdas(0, 0), Scalar(2)) / _tmp109;
  const Scalar _tmp113 = 4 * _tmp112;
  const Scalar _tmp114 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp115 = std::pow(_tmp114, Scalar(2));
  const Scalar _tmp116 = std::pow(_tmp5, Scalar(2));
  const Scalar _tmp117 = _tmp105 * _tmp113 + _tmp113 * _tmp115 + _tmp113 * _tmp116 + _tmp25;
  const Scalar _tmp118 = std::sqrt(_tmp117);
  const Scalar _tmp119 = (Scalar(1) / Scalar(2)) * _tmp118;
  const Scalar _tmp120 = std::sin(_tmp119);
  const Scalar _tmp121 = 8 * _tmp112 * std::pow(_tmp120, Scalar(2)) / _tmp117;
  const Scalar _tmp122 = -_tmp105 * _tmp121;
  const Scalar _tmp123 = -_tmp116 * _tmp121 + 1;
  const Scalar _tmp124 = _tmp122 + _tmp123;
  const Scalar _tmp125 = _tmp15 * _tmp18;
  const Scalar _tmp126 = _tmp125 * lambdas(1, 1);
  const Scalar _tmp127 = _tmp19 * _tmp99;
  const Scalar _tmp128 = _tmp30 * _tmp6;
  const Scalar _tmp129 = _tmp127 + _tmp128;
  const Scalar _tmp130 = _tmp100 - _tmp98;
  const Scalar _tmp131 = -_tmp24 * _tmp32 + 1;
  const Scalar _tmp132 = _tmp131 + _tmp79;
  const Scalar _tmp133 = _tmp129 * _tmp77 + _tmp130 * _tmp90 + _tmp132 * _tmp97;
  const Scalar _tmp134 = _tmp126 + _tmp133;
  const Scalar _tmp135 = _tmp110 * _tmp111 / std::sqrt(_tmp109);
  const Scalar _tmp136 = 4 * _tmp120 * _tmp135 * lambdas(0, 0) * std::cos(_tmp119) / _tmp118;
  const Scalar _tmp137 = _tmp104 * _tmp136;
  const Scalar _tmp138 = _tmp121 * _tmp5;
  const Scalar _tmp139 = _tmp114 * _tmp138;
  const Scalar _tmp140 = _tmp137 + _tmp139;
  const Scalar _tmp141 = _tmp136 * _tmp5;
  const Scalar _tmp142 = _tmp104 * _tmp114 * _tmp121;
  const Scalar _tmp143 = -_tmp141 + _tmp142;
  const Scalar _tmp144 = _tmp15 * _tmp19;
  const Scalar _tmp145 = _tmp144 * lambdas(1, 1);
  const Scalar _tmp146 = _tmp127 - _tmp128;
  const Scalar _tmp147 = _tmp31 + _tmp33;
  const Scalar _tmp148 = _tmp131 + _tmp78;
  const Scalar _tmp149 = _tmp146 * _tmp97 + _tmp147 * _tmp90 + _tmp148 * _tmp77;
  const Scalar _tmp150 = _tmp145 + _tmp149;
  const Scalar _tmp151 = 2 * _tmp135;
  const Scalar _tmp152 = _tmp151 * lambdas(0, 1);
  const Scalar _tmp153 = _tmp152 * (_tmp103 * _tmp124 + _tmp134 * _tmp140 + _tmp143 * _tmp150);
  const Scalar _tmp154 = _tmp44 * lambdas(2, 2) + _tmp66 * lambdas(3, 2) + _tmp71 * lambdas(3, 2) +
                         _tmp75 * lambdas(3, 2) - _tmp82 * _tmp96 + _tmp89 * _tmp92;
  const Scalar _tmp155 = -_tmp45 * _tmp89 + _tmp76 * _tmp82 + _tmp91 * lambdas(2, 2) +
                         _tmp93 * lambdas(3, 2) + _tmp94 * lambdas(3, 2) + _tmp95 * lambdas(3, 2);
  const Scalar _tmp156 = _tmp45 * _tmp96 - _tmp76 * _tmp92 + _tmp81 * lambdas(2, 2) +
                         _tmp85 * lambdas(3, 2) + _tmp86 * lambdas(3, 2) + _tmp88 * lambdas(3, 2);
  const Scalar _tmp157 = -_tmp102 * _tmp145 + _tmp125 * lambdas(1, 2) + _tmp129 * _tmp154 +
                         _tmp130 * _tmp156 + _tmp132 * _tmp155 + _tmp149 * _tmp17;
  const Scalar _tmp158 = _tmp104 * _tmp138;
  const Scalar _tmp159 = _tmp114 * _tmp136;
  const Scalar _tmp160 = _tmp158 - _tmp159;
  const Scalar _tmp161 = _tmp102 * _tmp126 - _tmp133 * _tmp17 + _tmp144 * lambdas(1, 2) +
                         _tmp146 * _tmp155 + _tmp147 * _tmp156 + _tmp148 * _tmp154;
  const Scalar _tmp162 = -_tmp115 * _tmp121;
  const Scalar _tmp163 = _tmp123 + _tmp162;
  const Scalar _tmp164 = _tmp141 + _tmp142;
  const Scalar _tmp165 = _tmp101 * _tmp155 - _tmp126 * _tmp149 + _tmp133 * _tmp145 +
                         _tmp154 * _tmp34 + _tmp156 * _tmp80 + _tmp16 * lambdas(1, 2);
  const Scalar _tmp166 = -_tmp137 + _tmp139;
  const Scalar _tmp167 = _tmp158 + _tmp159;
  const Scalar _tmp168 = _tmp122 + _tmp162 + 1;
  const Scalar _tmp169 = _tmp152 * (_tmp103 * _tmp166 + _tmp134 * _tmp168 + _tmp150 * _tmp167);
  const Scalar _tmp170 = _tmp151 * lambdas(0, 2);
  const Scalar _tmp171 = _tmp104 * _tmp170 - _tmp114 * _tmp169 + _tmp153 * _tmp5 +
                         _tmp157 * _tmp160 + _tmp161 * _tmp163 + _tmp164 * _tmp165;
  const Scalar _tmp172 = _tmp1 * _x0[1];
  const Scalar _tmp173 = 2 * _x0[0] * _x0[2];
  const Scalar _tmp174 = _tmp152 * (_tmp103 * _tmp164 + _tmp134 * _tmp160 + _tmp150 * _tmp163);
  const Scalar _tmp175 = _tmp104 * _tmp169 + _tmp114 * _tmp170 + _tmp124 * _tmp165 +
                         _tmp140 * _tmp157 + _tmp143 * _tmp161 - _tmp174 * _tmp5;
  const Scalar _tmp176 = -2 * std::pow(_x0[1], Scalar(2));
  const Scalar _tmp177 = 1 - 2 * std::pow(_x0[0], Scalar(2));
  const Scalar _tmp178 = -_tmp104 * _tmp153 + _tmp114 * _tmp174 + _tmp157 * _tmp168 +
                         _tmp161 * _tmp167 + _tmp165 * _tmp166 + _tmp170 * _tmp5;
  const Scalar _tmp179 = _tmp0 * (_tmp171 * (_tmp2 + _tmp4) + _tmp175 * (-_tmp172 + _tmp173) +
                                  _tmp178 * (_tmp176 + _tmp177)) -
                         acceleration(2, 0);
  const Scalar _tmp180 = -2 * std::pow(_x0[2], Scalar(2));
  const Scalar _tmp181 = _tmp1 * _x0[2];
  const Scalar _tmp182 = _tmp3 * _x0[0];
  const Scalar _tmp183 = _tmp0 * (_tmp171 * (_tmp177 + _tmp180) + _tmp175 * (_tmp181 + _tmp182) +
                                  _tmp178 * (-_tmp2 + _tmp4)) -
                         acceleration(1, 0);
  const Scalar _tmp184 =
      _tmp0 * (_tmp171 * (-_tmp181 + _tmp182) + _tmp175 * (_tmp176 + _tmp180 + 1) +
               _tmp178 * (_tmp172 + _tmp173)) -
      acceleration(0, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp179 * sqrt_info(0, 2) + _tmp183 * sqrt_info(0, 1) + _tmp184 * sqrt_info(0, 0);
  _res(1, 0) = _tmp179 * sqrt_info(1, 2) + _tmp183 * sqrt_info(1, 1) + _tmp184 * sqrt_info(1, 0);
  _res(2, 0) = _tmp179 * sqrt_info(2, 2) + _tmp183 * sqrt_info(2, 1) + _tmp184 * sqrt_info(2, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
