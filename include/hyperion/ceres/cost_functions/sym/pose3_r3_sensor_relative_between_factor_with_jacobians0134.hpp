// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_r3_sensor_relative_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_a: Pose3
 *     a_T_b: Matrix31
 *     y: Pose3
 *     y_T_b: Pose3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x7) jacobian (result_dim x storage_dim) of res (3) wrt arg x (7) (row-major)
 *     res_D_x_T_a: (3x7) jacobian (result_dim x storage_dim) of res (3) wrt arg x_T_a (7)
 * (row-major) res_D_y: (3x7) jacobian (result_dim x storage_dim) of res (3) wrt arg y (7)
 * (row-major) res_D_y_T_b: (3x7) jacobian (result_dim x storage_dim) of res (3) wrt arg y_T_b (7)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose3R3SensorRelativeBetweenFactorWithJacobians0134(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_a,
    const Eigen::Matrix<Scalar, 3, 1>& a_T_b, const sym::Pose3<Scalar>& y,
    const sym::Pose3<Scalar>& y_T_b, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
    const Scalar epsilon, Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_a = nullptr,
    Scalar* const res_D_y = nullptr, Scalar* const res_D_y_T_b = nullptr) {
  // Total ops: 1534

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (444)
  const Scalar _tmp0 = _x[3] * _x_T_a[1];
  const Scalar _tmp1 = _x[2] * _x_T_a[0];
  const Scalar _tmp2 = _x[0] * _x_T_a[2];
  const Scalar _tmp3 = _x[1] * _x_T_a[3];
  const Scalar _tmp4 = _tmp0 + _tmp1 - _tmp2 + _tmp3;
  const Scalar _tmp5 = 2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp6 = -_tmp5;
  const Scalar _tmp7 = _x[3] * _x_T_a[0];
  const Scalar _tmp8 = _x[2] * _x_T_a[1];
  const Scalar _tmp9 = _x[0] * _x_T_a[3];
  const Scalar _tmp10 = _x[1] * _x_T_a[2];
  const Scalar _tmp11 = _tmp10 + _tmp7 - _tmp8 + _tmp9;
  const Scalar _tmp12 = 2 * std::pow(_tmp11, Scalar(2));
  const Scalar _tmp13 = 1 - _tmp12;
  const Scalar _tmp14 = _tmp13 + _tmp6;
  const Scalar _tmp15 = 2 * _y[3];
  const Scalar _tmp16 = _tmp15 * _y[1];
  const Scalar _tmp17 = -_tmp16;
  const Scalar _tmp18 = 2 * _y[0];
  const Scalar _tmp19 = _tmp18 * _y[2];
  const Scalar _tmp20 = _tmp17 + _tmp19;
  const Scalar _tmp21 = 2 * _y[1];
  const Scalar _tmp22 = _tmp21 * _y[2];
  const Scalar _tmp23 = _tmp18 * _y[3];
  const Scalar _tmp24 = _tmp22 + _tmp23;
  const Scalar _tmp25 = std::pow(_y[1], Scalar(2));
  const Scalar _tmp26 = -2 * _tmp25;
  const Scalar _tmp27 = std::pow(_y[0], Scalar(2));
  const Scalar _tmp28 = -2 * _tmp27;
  const Scalar _tmp29 = _tmp26 + _tmp28 + 1;
  const Scalar _tmp30 = _tmp20 * _y_T_b[4] + _tmp24 * _y_T_b[5] + _tmp29 * _y_T_b[6] + _y[6];
  const Scalar _tmp31 = _tmp16 + _tmp19;
  const Scalar _tmp32 = std::pow(_y[2], Scalar(2));
  const Scalar _tmp33 = 1 - 2 * _tmp32;
  const Scalar _tmp34 = _tmp26 + _tmp33;
  const Scalar _tmp35 = _tmp15 * _y[2];
  const Scalar _tmp36 = -_tmp35;
  const Scalar _tmp37 = _tmp18 * _y[1];
  const Scalar _tmp38 = _tmp36 + _tmp37;
  const Scalar _tmp39 = _tmp31 * _y_T_b[6] + _tmp34 * _y_T_b[4] + _tmp38 * _y_T_b[5] + _y[4];
  const Scalar _tmp40 = _x[3] * _x_T_a[2];
  const Scalar _tmp41 = _x[2] * _x_T_a[3];
  const Scalar _tmp42 = _x[0] * _x_T_a[1];
  const Scalar _tmp43 = _x[1] * _x_T_a[0];
  const Scalar _tmp44 = _tmp40 + _tmp41 + _tmp42 - _tmp43;
  const Scalar _tmp45 = 2 * _tmp44;
  const Scalar _tmp46 = _tmp11 * _tmp45;
  const Scalar _tmp47 = _x[3] * _x_T_a[3];
  const Scalar _tmp48 = _x[2] * _x_T_a[2];
  const Scalar _tmp49 = _x[0] * _x_T_a[0];
  const Scalar _tmp50 = _x[1] * _x_T_a[1];
  const Scalar _tmp51 = _tmp47 - _tmp48 - _tmp49 - _tmp50;
  const Scalar _tmp52 = 2 * _tmp4;
  const Scalar _tmp53 = _tmp51 * _tmp52;
  const Scalar _tmp54 = _tmp46 + _tmp53;
  const Scalar _tmp55 = -_tmp23;
  const Scalar _tmp56 = _tmp22 + _tmp55;
  const Scalar _tmp57 = _tmp28 + _tmp33;
  const Scalar _tmp58 = _tmp35 + _tmp37;
  const Scalar _tmp59 = _tmp56 * _y_T_b[6] + _tmp57 * _y_T_b[5] + _tmp58 * _y_T_b[4] + _y[5];
  const Scalar _tmp60 = _tmp44 * _tmp52;
  const Scalar _tmp61 = 2 * _tmp11;
  const Scalar _tmp62 = _tmp51 * _tmp61;
  const Scalar _tmp63 = -_tmp62;
  const Scalar _tmp64 = _tmp60 + _tmp63;
  const Scalar _tmp65 = 2 * _x[2];
  const Scalar _tmp66 = _tmp65 * _x[0];
  const Scalar _tmp67 = 2 * _x[1];
  const Scalar _tmp68 = _tmp67 * _x[3];
  const Scalar _tmp69 = -_tmp68;
  const Scalar _tmp70 = _tmp66 + _tmp69;
  const Scalar _tmp71 = 2 * _x[0];
  const Scalar _tmp72 = _tmp71 * _x[3];
  const Scalar _tmp73 = _tmp67 * _x[2];
  const Scalar _tmp74 = _tmp72 + _tmp73;
  const Scalar _tmp75 = std::pow(_x[0], Scalar(2));
  const Scalar _tmp76 = -2 * _tmp75;
  const Scalar _tmp77 = std::pow(_x[1], Scalar(2));
  const Scalar _tmp78 = -2 * _tmp77;
  const Scalar _tmp79 = _tmp76 + _tmp78 + 1;
  const Scalar _tmp80 = _tmp70 * _x_T_a[4] + _tmp74 * _x_T_a[5] + _tmp79 * _x_T_a[6] + _x[6];
  const Scalar _tmp81 = _tmp67 * _x[0];
  const Scalar _tmp82 = _tmp65 * _x[3];
  const Scalar _tmp83 = -_tmp82;
  const Scalar _tmp84 = _tmp81 + _tmp83;
  const Scalar _tmp85 = _tmp66 + _tmp68;
  const Scalar _tmp86 = std::pow(_x[2], Scalar(2));
  const Scalar _tmp87 = 1 - 2 * _tmp86;
  const Scalar _tmp88 = _tmp78 + _tmp87;
  const Scalar _tmp89 = _tmp84 * _x_T_a[5] + _tmp85 * _x_T_a[6] + _tmp88 * _x_T_a[4] + _x[4];
  const Scalar _tmp90 = _tmp81 + _tmp82;
  const Scalar _tmp91 = -_tmp72;
  const Scalar _tmp92 = _tmp73 + _tmp91;
  const Scalar _tmp93 = _tmp76 + _tmp87;
  const Scalar _tmp94 = _tmp90 * _x_T_a[4] + _tmp92 * _x_T_a[6] + _tmp93 * _x_T_a[5] + _x[5];
  const Scalar _tmp95 = _tmp14 * _tmp30 - _tmp14 * _tmp80 + _tmp39 * _tmp54 - _tmp54 * _tmp89 +
                        _tmp59 * _tmp64 - _tmp64 * _tmp94 - a_T_b(2, 0);
  const Scalar _tmp96 = -_tmp53;
  const Scalar _tmp97 = _tmp46 + _tmp96;
  const Scalar _tmp98 = 2 * std::pow(_tmp44, Scalar(2));
  const Scalar _tmp99 = -_tmp98;
  const Scalar _tmp100 = _tmp6 + _tmp99 + 1;
  const Scalar _tmp101 = _tmp11 * _tmp52;
  const Scalar _tmp102 = _tmp45 * _tmp51;
  const Scalar _tmp103 = _tmp101 + _tmp102;
  const Scalar _tmp104 = _tmp100 * _tmp39 - _tmp100 * _tmp89 + _tmp103 * _tmp59 - _tmp103 * _tmp94 +
                         _tmp30 * _tmp97 - _tmp80 * _tmp97 - a_T_b(0, 0);
  const Scalar _tmp105 = _tmp60 + _tmp62;
  const Scalar _tmp106 = -_tmp102;
  const Scalar _tmp107 = _tmp101 + _tmp106;
  const Scalar _tmp108 = _tmp13 + _tmp99;
  const Scalar _tmp109 = _tmp105 * _tmp30 - _tmp105 * _tmp80 + _tmp107 * _tmp39 - _tmp107 * _tmp89 +
                         _tmp108 * _tmp59 - _tmp108 * _tmp94 - a_T_b(1, 0);
  const Scalar _tmp110 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp111 = -_tmp110;
  const Scalar _tmp112 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp113 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp114 = -_tmp113;
  const Scalar _tmp115 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp116 = -_tmp115;
  const Scalar _tmp117 = _tmp114 + _tmp116;
  const Scalar _tmp118 = _tmp111 + _tmp112 + _tmp117;
  const Scalar _tmp119 = 4 * _tmp11;
  const Scalar _tmp120 = -_tmp118 * _tmp119;
  const Scalar _tmp121 = (Scalar(1) / Scalar(2)) * _tmp49;
  const Scalar _tmp122 = (Scalar(1) / Scalar(2)) * _tmp50;
  const Scalar _tmp123 = (Scalar(1) / Scalar(2)) * _tmp47;
  const Scalar _tmp124 = (Scalar(1) / Scalar(2)) * _tmp48;
  const Scalar _tmp125 = _tmp123 - _tmp124;
  const Scalar _tmp126 = _tmp121 + _tmp122 + _tmp125;
  const Scalar _tmp127 = 4 * _tmp44;
  const Scalar _tmp128 = -_tmp126 * _tmp127;
  const Scalar _tmp129 = _tmp120 + _tmp128;
  const Scalar _tmp130 = -_tmp81;
  const Scalar _tmp131 = std::pow(_x[3], Scalar(2));
  const Scalar _tmp132 = -_tmp75;
  const Scalar _tmp133 = -_tmp86;
  const Scalar _tmp134 =
      _x_T_a[4] * (_tmp131 + _tmp132 + _tmp133 + _tmp77) + _x_T_a[5] * (_tmp130 + _tmp83);
  const Scalar _tmp135 = (Scalar(1) / Scalar(2)) * _tmp43;
  const Scalar _tmp136 = -_tmp135;
  const Scalar _tmp137 = (Scalar(1) / Scalar(2)) * _tmp42;
  const Scalar _tmp138 = _tmp136 + _tmp137;
  const Scalar _tmp139 = (Scalar(1) / Scalar(2)) * _tmp41;
  const Scalar _tmp140 = -_tmp139;
  const Scalar _tmp141 = (Scalar(1) / Scalar(2)) * _tmp40;
  const Scalar _tmp142 = -_tmp141;
  const Scalar _tmp143 = _tmp140 + _tmp142;
  const Scalar _tmp144 = 2 * _tmp138 + 2 * _tmp143;
  const Scalar _tmp145 = _tmp144 * _tmp44;
  const Scalar _tmp146 = 2 * _tmp51;
  const Scalar _tmp147 = _tmp126 * _tmp146;
  const Scalar _tmp148 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp149 = -_tmp148;
  const Scalar _tmp150 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp151 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp152 = -_tmp151;
  const Scalar _tmp153 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp154 = -_tmp153;
  const Scalar _tmp155 = _tmp152 + _tmp154;
  const Scalar _tmp156 = _tmp149 + _tmp150 + _tmp155;
  const Scalar _tmp157 = _tmp118 * _tmp52 + _tmp156 * _tmp61;
  const Scalar _tmp158 = -_tmp145 - _tmp147 + _tmp157;
  const Scalar _tmp159 = _tmp11 * _tmp144;
  const Scalar _tmp160 = _tmp118 * _tmp146;
  const Scalar _tmp161 = _tmp126 * _tmp52 + _tmp156 * _tmp45;
  const Scalar _tmp162 = _tmp159 + _tmp160 + _tmp161;
  const Scalar _tmp163 = -_tmp131;
  const Scalar _tmp164 = _tmp163 + _tmp77;
  const Scalar _tmp165 = _tmp132 + _tmp86;
  const Scalar _tmp166 = _tmp84 * _x_T_a[4] + _x_T_a[5] * (_tmp164 + _tmp165);
  const Scalar _tmp167 = -_tmp66;
  const Scalar _tmp168 = _tmp74 * _x_T_a[4] + _x_T_a[5] * (_tmp167 + _tmp68);
  const Scalar _tmp169 = -_tmp105 * _tmp168 - _tmp107 * _tmp166 - _tmp108 * _tmp134 +
                         _tmp129 * _tmp59 - _tmp129 * _tmp94 + _tmp158 * _tmp39 - _tmp158 * _tmp89 +
                         _tmp162 * _tmp30 - _tmp162 * _tmp80;
  const Scalar _tmp170 = _tmp144 * _tmp4;
  const Scalar _tmp171 = _tmp146 * _tmp156;
  const Scalar _tmp172 = _tmp118 * _tmp45 + _tmp126 * _tmp61;
  const Scalar _tmp173 = _tmp170 + _tmp171 + _tmp172;
  const Scalar _tmp174 = 4 * _tmp4;
  const Scalar _tmp175 = -_tmp156 * _tmp174;
  const Scalar _tmp176 = _tmp120 + _tmp175;
  const Scalar _tmp177 = -_tmp159 - _tmp160 + _tmp161;
  const Scalar _tmp178 = -_tmp134 * _tmp64 - _tmp14 * _tmp168 - _tmp166 * _tmp54 +
                         _tmp173 * _tmp39 - _tmp173 * _tmp89 + _tmp176 * _tmp30 - _tmp176 * _tmp80 +
                         _tmp177 * _tmp59 - _tmp177 * _tmp94;
  const Scalar _tmp179 = -_tmp170 - _tmp171 + _tmp172;
  const Scalar _tmp180 = _tmp128 + _tmp175;
  const Scalar _tmp181 = _tmp145 + _tmp147 + _tmp157;
  const Scalar _tmp182 = -_tmp100 * _tmp166 - _tmp103 * _tmp134 - _tmp168 * _tmp97 +
                         _tmp179 * _tmp30 - _tmp179 * _tmp80 + _tmp180 * _tmp39 - _tmp180 * _tmp89 +
                         _tmp181 * _tmp59 - _tmp181 * _tmp94;
  const Scalar _tmp183 =
      _tmp169 * sqrt_info(0, 1) + _tmp178 * sqrt_info(0, 2) + _tmp182 * sqrt_info(0, 0);
  const Scalar _tmp184 = -_tmp73;
  const Scalar _tmp185 = _tmp90 * _x_T_a[6] + _x_T_a[4] * (_tmp184 + _tmp72);
  const Scalar _tmp186 = _tmp133 + _tmp75;
  const Scalar _tmp187 = _tmp70 * _x_T_a[6] + _x_T_a[4] * (_tmp164 + _tmp186);
  const Scalar _tmp188 = -_tmp112;
  const Scalar _tmp189 = _tmp111 + _tmp188;
  const Scalar _tmp190 = _tmp113 + _tmp116;
  const Scalar _tmp191 = _tmp189 + _tmp190;
  const Scalar _tmp192 = _tmp191 * _tmp52;
  const Scalar _tmp193 = -_tmp122;
  const Scalar _tmp194 = _tmp123 + _tmp124;
  const Scalar _tmp195 = _tmp121 + _tmp193 + _tmp194;
  const Scalar _tmp196 = _tmp146 * _tmp195;
  const Scalar _tmp197 = -_tmp150;
  const Scalar _tmp198 = _tmp148 + _tmp155 + _tmp197;
  const Scalar _tmp199 = -_tmp137;
  const Scalar _tmp200 = _tmp136 + _tmp199;
  const Scalar _tmp201 = _tmp140 + _tmp141 + _tmp200;
  const Scalar _tmp202 = _tmp198 * _tmp61 + _tmp201 * _tmp45;
  const Scalar _tmp203 = _tmp192 + _tmp196 + _tmp202;
  const Scalar _tmp204 = -_tmp119 * _tmp201;
  const Scalar _tmp205 = -_tmp174 * _tmp195;
  const Scalar _tmp206 = _tmp204 + _tmp205;
  const Scalar _tmp207 = -_tmp77;
  const Scalar _tmp208 = _tmp131 + _tmp207;
  const Scalar _tmp209 = _x_T_a[4] * (_tmp167 + _tmp69) + _x_T_a[6] * (_tmp186 + _tmp208);
  const Scalar _tmp210 = _tmp191 * _tmp61;
  const Scalar _tmp211 = _tmp146 * _tmp201;
  const Scalar _tmp212 = _tmp195 * _tmp45 + _tmp198 * _tmp52;
  const Scalar _tmp213 = -_tmp210 - _tmp211 + _tmp212;
  const Scalar _tmp214 = -_tmp14 * _tmp187 - _tmp185 * _tmp64 + _tmp203 * _tmp39 -
                         _tmp203 * _tmp89 + _tmp206 * _tmp30 - _tmp206 * _tmp80 - _tmp209 * _tmp54 +
                         _tmp213 * _tmp59 - _tmp213 * _tmp94;
  const Scalar _tmp215 = -_tmp192 - _tmp196 + _tmp202;
  const Scalar _tmp216 = -_tmp127 * _tmp198;
  const Scalar _tmp217 = _tmp205 + _tmp216;
  const Scalar _tmp218 = _tmp191 * _tmp45;
  const Scalar _tmp219 = _tmp146 * _tmp198;
  const Scalar _tmp220 = _tmp195 * _tmp61 + _tmp201 * _tmp52;
  const Scalar _tmp221 = _tmp218 + _tmp219 + _tmp220;
  const Scalar _tmp222 = -_tmp100 * _tmp209 - _tmp103 * _tmp185 - _tmp187 * _tmp97 +
                         _tmp215 * _tmp30 - _tmp215 * _tmp80 + _tmp217 * _tmp39 - _tmp217 * _tmp89 +
                         _tmp221 * _tmp59 - _tmp221 * _tmp94;
  const Scalar _tmp223 = _tmp204 + _tmp216;
  const Scalar _tmp224 = -_tmp218 - _tmp219 + _tmp220;
  const Scalar _tmp225 = _tmp210 + _tmp211 + _tmp212;
  const Scalar _tmp226 = -_tmp105 * _tmp187 - _tmp107 * _tmp209 - _tmp108 * _tmp185 +
                         _tmp223 * _tmp59 - _tmp223 * _tmp94 + _tmp224 * _tmp39 - _tmp224 * _tmp89 +
                         _tmp225 * _tmp30 - _tmp225 * _tmp80;
  const Scalar _tmp227 =
      _tmp214 * sqrt_info(0, 2) + _tmp222 * sqrt_info(0, 0) + _tmp226 * sqrt_info(0, 1);
  const Scalar _tmp228 = 2 * _tmp227;
  const Scalar _tmp229 = _tmp92 * _x_T_a[5] + _x_T_a[6] * (_tmp163 + _tmp207 + _tmp75 + _tmp86);
  const Scalar _tmp230 = -_tmp121;
  const Scalar _tmp231 = _tmp122 + _tmp194 + _tmp230;
  const Scalar _tmp232 = -_tmp119 * _tmp231;
  const Scalar _tmp233 = _tmp110 + _tmp117 + _tmp188;
  const Scalar _tmp234 = -_tmp127 * _tmp233;
  const Scalar _tmp235 = _tmp232 + _tmp234;
  const Scalar _tmp236 = _tmp149 + _tmp197;
  const Scalar _tmp237 = _tmp152 + _tmp153;
  const Scalar _tmp238 = _tmp236 + _tmp237;
  const Scalar _tmp239 = _tmp238 * _tmp45;
  const Scalar _tmp240 = _tmp146 * _tmp233;
  const Scalar _tmp241 = _tmp139 + _tmp142 + _tmp200;
  const Scalar _tmp242 = _tmp231 * _tmp52 + _tmp241 * _tmp61;
  const Scalar _tmp243 = -_tmp239 - _tmp240 + _tmp242;
  const Scalar _tmp244 = _tmp238 * _tmp61;
  const Scalar _tmp245 = _tmp146 * _tmp231;
  const Scalar _tmp246 = _tmp233 * _tmp52 + _tmp241 * _tmp45;
  const Scalar _tmp247 = _tmp244 + _tmp245 + _tmp246;
  const Scalar _tmp248 = _tmp85 * _x_T_a[5] + _x_T_a[6] * (_tmp130 + _tmp82);
  const Scalar _tmp249 = _x_T_a[5] * (_tmp165 + _tmp208) + _x_T_a[6] * (_tmp184 + _tmp91);
  const Scalar _tmp250 = -_tmp105 * _tmp249 - _tmp107 * _tmp248 - _tmp108 * _tmp229 +
                         _tmp235 * _tmp59 - _tmp235 * _tmp94 + _tmp243 * _tmp39 - _tmp243 * _tmp89 +
                         _tmp247 * _tmp30 - _tmp247 * _tmp80;
  const Scalar _tmp251 = _tmp238 * _tmp52;
  const Scalar _tmp252 = _tmp146 * _tmp241;
  const Scalar _tmp253 = _tmp231 * _tmp45 + _tmp233 * _tmp61;
  const Scalar _tmp254 = -_tmp251 - _tmp252 + _tmp253;
  const Scalar _tmp255 = -_tmp174 * _tmp241;
  const Scalar _tmp256 = _tmp234 + _tmp255;
  const Scalar _tmp257 = _tmp239 + _tmp240 + _tmp242;
  const Scalar _tmp258 = -_tmp100 * _tmp248 - _tmp103 * _tmp229 - _tmp249 * _tmp97 +
                         _tmp254 * _tmp30 - _tmp254 * _tmp80 + _tmp256 * _tmp39 - _tmp256 * _tmp89 +
                         _tmp257 * _tmp59 - _tmp257 * _tmp94;
  const Scalar _tmp259 = _tmp251 + _tmp252 + _tmp253;
  const Scalar _tmp260 = _tmp232 + _tmp255;
  const Scalar _tmp261 = -_tmp244 - _tmp245 + _tmp246;
  const Scalar _tmp262 = -_tmp14 * _tmp249 - _tmp229 * _tmp64 - _tmp248 * _tmp54 +
                         _tmp259 * _tmp39 - _tmp259 * _tmp89 + _tmp260 * _tmp30 - _tmp260 * _tmp80 +
                         _tmp261 * _tmp59 - _tmp261 * _tmp94;
  const Scalar _tmp263 =
      _tmp250 * sqrt_info(0, 1) + _tmp258 * sqrt_info(0, 0) + _tmp262 * sqrt_info(0, 2);
  const Scalar _tmp264 = 2 * _x[3];
  const Scalar _tmp265 =
      _tmp169 * sqrt_info(1, 1) + _tmp178 * sqrt_info(1, 2) + _tmp182 * sqrt_info(1, 0);
  const Scalar _tmp266 =
      _tmp214 * sqrt_info(1, 2) + _tmp222 * sqrt_info(1, 0) + _tmp226 * sqrt_info(1, 1);
  const Scalar _tmp267 =
      _tmp250 * sqrt_info(1, 1) + _tmp258 * sqrt_info(1, 0) + _tmp262 * sqrt_info(1, 2);
  const Scalar _tmp268 =
      _tmp169 * sqrt_info(2, 1) + _tmp178 * sqrt_info(2, 2) + _tmp182 * sqrt_info(2, 0);
  const Scalar _tmp269 =
      _tmp214 * sqrt_info(2, 2) + _tmp222 * sqrt_info(2, 0) + _tmp226 * sqrt_info(2, 1);
  const Scalar _tmp270 =
      _tmp250 * sqrt_info(2, 1) + _tmp258 * sqrt_info(2, 0) + _tmp262 * sqrt_info(2, 2);
  const Scalar _tmp271 = -_tmp101;
  const Scalar _tmp272 = _tmp102 + _tmp271;
  const Scalar _tmp273 = -_tmp46;
  const Scalar _tmp274 = _tmp273 + _tmp96;
  const Scalar _tmp275 = _tmp5 - 1;
  const Scalar _tmp276 = _tmp275 + _tmp98;
  const Scalar _tmp277 = -_tmp60;
  const Scalar _tmp278 = _tmp277 + _tmp62;
  const Scalar _tmp279 = _tmp106 + _tmp271;
  const Scalar _tmp280 = _tmp12 + _tmp98 - 1;
  const Scalar _tmp281 = _tmp277 + _tmp63;
  const Scalar _tmp282 = _tmp273 + _tmp53;
  const Scalar _tmp283 = _tmp12 + _tmp275;
  const Scalar _tmp284 = _tmp135 + _tmp143 + _tmp199;
  const Scalar _tmp285 = -_tmp119 * _tmp284;
  const Scalar _tmp286 = _tmp148 + _tmp150 + _tmp237;
  const Scalar _tmp287 = -_tmp127 * _tmp286;
  const Scalar _tmp288 = _tmp285 + _tmp287;
  const Scalar _tmp289 = _tmp114 + _tmp115 + _tmp189;
  const Scalar _tmp290 = _tmp289 * _tmp45;
  const Scalar _tmp291 = _tmp146 * _tmp286;
  const Scalar _tmp292 = _tmp125 + _tmp193 + _tmp230;
  const Scalar _tmp293 = _tmp292 * _tmp61;
  const Scalar _tmp294 = _tmp284 * _tmp52;
  const Scalar _tmp295 = _tmp293 + _tmp294;
  const Scalar _tmp296 = -_tmp290 - _tmp291 + _tmp295;
  const Scalar _tmp297 = _tmp289 * _tmp61;
  const Scalar _tmp298 = _tmp146 * _tmp284;
  const Scalar _tmp299 = _tmp292 * _tmp45;
  const Scalar _tmp300 = _tmp286 * _tmp52 + _tmp299;
  const Scalar _tmp301 = _tmp297 + _tmp298 + _tmp300;
  const Scalar _tmp302 = _tmp288 * _tmp59 - _tmp288 * _tmp94 + _tmp296 * _tmp39 - _tmp296 * _tmp89 +
                         _tmp30 * _tmp301 - _tmp301 * _tmp80;
  const Scalar _tmp303 = _tmp289 * _tmp52;
  const Scalar _tmp304 = _tmp146 * _tmp292;
  const Scalar _tmp305 = -_tmp304;
  const Scalar _tmp306 = _tmp284 * _tmp45;
  const Scalar _tmp307 = _tmp286 * _tmp61 + _tmp306;
  const Scalar _tmp308 = -_tmp303 + _tmp305 + _tmp307;
  const Scalar _tmp309 = -_tmp174 * _tmp292;
  const Scalar _tmp310 = _tmp287 + _tmp309;
  const Scalar _tmp311 = _tmp290 + _tmp291 + _tmp295;
  const Scalar _tmp312 = _tmp30 * _tmp308 - _tmp308 * _tmp80 + _tmp310 * _tmp39 - _tmp310 * _tmp89 +
                         _tmp311 * _tmp59 - _tmp311 * _tmp94;
  const Scalar _tmp313 = _tmp303 + _tmp304;
  const Scalar _tmp314 = _tmp307 + _tmp313;
  const Scalar _tmp315 = _tmp285 + _tmp309;
  const Scalar _tmp316 = -_tmp297 - _tmp298 + _tmp300;
  const Scalar _tmp317 = _tmp30 * _tmp315 + _tmp314 * _tmp39 - _tmp314 * _tmp89 - _tmp315 * _tmp80 +
                         _tmp316 * _tmp59 - _tmp316 * _tmp94;
  const Scalar _tmp318 =
      _tmp302 * sqrt_info(0, 1) + _tmp312 * sqrt_info(0, 0) + _tmp317 * sqrt_info(0, 2);
  const Scalar _tmp319 = 2 * _x_T_a[2];
  const Scalar _tmp320 = _tmp151 + _tmp154 + _tmp236;
  const Scalar _tmp321 = _tmp320 * _tmp52;
  const Scalar _tmp322 = _tmp138 + _tmp139 + _tmp141;
  const Scalar _tmp323 = _tmp146 * _tmp322;
  const Scalar _tmp324 = _tmp297 + _tmp299;
  const Scalar _tmp325 = _tmp321 + _tmp323 + _tmp324;
  const Scalar _tmp326 = -_tmp119 * _tmp292;
  const Scalar _tmp327 = -_tmp174 * _tmp322;
  const Scalar _tmp328 = _tmp326 + _tmp327;
  const Scalar _tmp329 = _tmp320 * _tmp61;
  const Scalar _tmp330 = _tmp322 * _tmp45;
  const Scalar _tmp331 = _tmp303 + _tmp305 - _tmp329 + _tmp330;
  const Scalar _tmp332 = _tmp30 * _tmp328 + _tmp325 * _tmp39 - _tmp325 * _tmp89 - _tmp328 * _tmp80 +
                         _tmp331 * _tmp59 - _tmp331 * _tmp94;
  const Scalar _tmp333 = -_tmp321 - _tmp323 + _tmp324;
  const Scalar _tmp334 = -_tmp127 * _tmp289;
  const Scalar _tmp335 = _tmp327 + _tmp334;
  const Scalar _tmp336 = _tmp322 * _tmp61;
  const Scalar _tmp337 = _tmp146 * _tmp289;
  const Scalar _tmp338 = _tmp320 * _tmp45;
  const Scalar _tmp339 = _tmp292 * _tmp52;
  const Scalar _tmp340 = _tmp338 + _tmp339;
  const Scalar _tmp341 = _tmp336 + _tmp337 + _tmp340;
  const Scalar _tmp342 = _tmp30 * _tmp333 - _tmp333 * _tmp80 + _tmp335 * _tmp39 - _tmp335 * _tmp89 +
                         _tmp341 * _tmp59 - _tmp341 * _tmp94;
  const Scalar _tmp343 = _tmp326 + _tmp334;
  const Scalar _tmp344 = _tmp336 - _tmp337 - _tmp338 + _tmp339;
  const Scalar _tmp345 = _tmp313 + _tmp329 + _tmp330;
  const Scalar _tmp346 = _tmp30 * _tmp345 + _tmp343 * _tmp59 - _tmp343 * _tmp94 + _tmp344 * _tmp39 -
                         _tmp344 * _tmp89 - _tmp345 * _tmp80;
  const Scalar _tmp347 =
      _tmp332 * sqrt_info(0, 2) + _tmp342 * sqrt_info(0, 0) + _tmp346 * sqrt_info(0, 1);
  const Scalar _tmp348 = 2 * _x_T_a[3];
  const Scalar _tmp349 = _tmp110 + _tmp112 + _tmp190;
  const Scalar _tmp350 = _tmp349 * _tmp45;
  const Scalar _tmp351 = _tmp146 * _tmp320;
  const Scalar _tmp352 = _tmp293 - _tmp294 + _tmp350 - _tmp351;
  const Scalar _tmp353 = -_tmp127 * _tmp292;
  const Scalar _tmp354 = -_tmp174 * _tmp320;
  const Scalar _tmp355 = _tmp353 + _tmp354;
  const Scalar _tmp356 = _tmp329 + _tmp349 * _tmp52;
  const Scalar _tmp357 = _tmp304 + _tmp306 + _tmp356;
  const Scalar _tmp358 = _tmp30 * _tmp352 - _tmp352 * _tmp80 + _tmp355 * _tmp39 - _tmp355 * _tmp89 +
                         _tmp357 * _tmp59 - _tmp357 * _tmp94;
  const Scalar _tmp359 = _tmp295 + _tmp350 + _tmp351;
  const Scalar _tmp360 = -_tmp119 * _tmp349;
  const Scalar _tmp361 = _tmp354 + _tmp360;
  const Scalar _tmp362 = _tmp284 * _tmp61;
  const Scalar _tmp363 = _tmp146 * _tmp349;
  const Scalar _tmp364 = _tmp340 - _tmp362 - _tmp363;
  const Scalar _tmp365 = _tmp30 * _tmp361 + _tmp359 * _tmp39 - _tmp359 * _tmp89 - _tmp361 * _tmp80 +
                         _tmp364 * _tmp59 - _tmp364 * _tmp94;
  const Scalar _tmp366 = _tmp353 + _tmp360;
  const Scalar _tmp367 = _tmp305 - _tmp306 + _tmp356;
  const Scalar _tmp368 = _tmp340 + _tmp362 + _tmp363;
  const Scalar _tmp369 = _tmp30 * _tmp368 + _tmp366 * _tmp59 - _tmp366 * _tmp94 + _tmp367 * _tmp39 -
                         _tmp367 * _tmp89 - _tmp368 * _tmp80;
  const Scalar _tmp370 =
      _tmp358 * sqrt_info(0, 0) + _tmp365 * sqrt_info(0, 2) + _tmp369 * sqrt_info(0, 1);
  const Scalar _tmp371 = 2 * _tmp370;
  const Scalar _tmp372 =
      _tmp302 * sqrt_info(1, 1) + _tmp312 * sqrt_info(1, 0) + _tmp317 * sqrt_info(1, 2);
  const Scalar _tmp373 =
      _tmp332 * sqrt_info(1, 2) + _tmp342 * sqrt_info(1, 0) + _tmp346 * sqrt_info(1, 1);
  const Scalar _tmp374 =
      _tmp358 * sqrt_info(1, 0) + _tmp365 * sqrt_info(1, 2) + _tmp369 * sqrt_info(1, 1);
  const Scalar _tmp375 = 2 * _tmp374;
  const Scalar _tmp376 =
      _tmp302 * sqrt_info(2, 1) + _tmp312 * sqrt_info(2, 0) + _tmp317 * sqrt_info(2, 2);
  const Scalar _tmp377 =
      _tmp332 * sqrt_info(2, 2) + _tmp342 * sqrt_info(2, 0) + _tmp346 * sqrt_info(2, 1);
  const Scalar _tmp378 =
      _tmp358 * sqrt_info(2, 0) + _tmp365 * sqrt_info(2, 2) + _tmp369 * sqrt_info(2, 1);
  const Scalar _tmp379 = 2 * _tmp378;
  const Scalar _tmp380 = 2 * _tmp318;
  const Scalar _tmp381 = 2 * _tmp372;
  const Scalar _tmp382 = 2 * _tmp376;
  const Scalar _tmp383 = 2 * _tmp347;
  const Scalar _tmp384 = 2 * _tmp373;
  const Scalar _tmp385 = 2 * _tmp377;
  const Scalar _tmp386 = -_tmp14 * _tmp70 - _tmp54 * _tmp88 - _tmp64 * _tmp90;
  const Scalar _tmp387 = -_tmp105 * _tmp70 - _tmp107 * _tmp88 - _tmp108 * _tmp90;
  const Scalar _tmp388 = -_tmp100 * _tmp88 - _tmp103 * _tmp90 - _tmp70 * _tmp97;
  const Scalar _tmp389 = -_tmp100 * _tmp84 - _tmp103 * _tmp93 - _tmp74 * _tmp97;
  const Scalar _tmp390 = -_tmp105 * _tmp74 - _tmp107 * _tmp84 - _tmp108 * _tmp93;
  const Scalar _tmp391 = -_tmp14 * _tmp74 - _tmp54 * _tmp84 - _tmp64 * _tmp93;
  const Scalar _tmp392 = -_tmp14 * _tmp79 - _tmp54 * _tmp85 - _tmp64 * _tmp92;
  const Scalar _tmp393 = -_tmp100 * _tmp85 - _tmp103 * _tmp92 - _tmp79 * _tmp97;
  const Scalar _tmp394 = -_tmp105 * _tmp79 - _tmp107 * _tmp85 - _tmp108 * _tmp92;
  const Scalar _tmp395 = -_tmp22;
  const Scalar _tmp396 = std::pow(_y[3], Scalar(2));
  const Scalar _tmp397 = -_tmp27;
  const Scalar _tmp398 = _tmp396 + _tmp397;
  const Scalar _tmp399 = -_tmp25;
  const Scalar _tmp400 = _tmp32 + _tmp399;
  const Scalar _tmp401 = _y_T_b[5] * (_tmp398 + _tmp400) + _y_T_b[6] * (_tmp395 + _tmp55);
  const Scalar _tmp402 = -_tmp37;
  const Scalar _tmp403 = _tmp31 * _y_T_b[5] + _y_T_b[6] * (_tmp35 + _tmp402);
  const Scalar _tmp404 = -_tmp396;
  const Scalar _tmp405 = _tmp27 + _tmp404;
  const Scalar _tmp406 = _tmp56 * _y_T_b[5] + _y_T_b[6] * (_tmp400 + _tmp405);
  const Scalar _tmp407 = _tmp14 * _tmp401 + _tmp403 * _tmp54 + _tmp406 * _tmp64;
  const Scalar _tmp408 = _tmp105 * _tmp401 + _tmp107 * _tmp403 + _tmp108 * _tmp406;
  const Scalar _tmp409 = _tmp100 * _tmp403 + _tmp103 * _tmp406 + _tmp401 * _tmp97;
  const Scalar _tmp410 =
      _tmp407 * sqrt_info(0, 2) + _tmp408 * sqrt_info(0, 1) + _tmp409 * sqrt_info(0, 0);
  const Scalar _tmp411 = -_tmp19;
  const Scalar _tmp412 = -_tmp32;
  const Scalar _tmp413 =
      _y_T_b[4] * (_tmp17 + _tmp411) + _y_T_b[6] * (_tmp27 + _tmp396 + _tmp399 + _tmp412);
  const Scalar _tmp414 = _tmp25 + _tmp412;
  const Scalar _tmp415 = _tmp20 * _y_T_b[6] + _y_T_b[4] * (_tmp405 + _tmp414);
  const Scalar _tmp416 = _tmp58 * _y_T_b[6] + _y_T_b[4] * (_tmp23 + _tmp395);
  const Scalar _tmp417 = _tmp14 * _tmp415 + _tmp413 * _tmp54 + _tmp416 * _tmp64;
  const Scalar _tmp418 = _tmp100 * _tmp413 + _tmp103 * _tmp416 + _tmp415 * _tmp97;
  const Scalar _tmp419 = _tmp105 * _tmp415 + _tmp107 * _tmp413 + _tmp108 * _tmp416;
  const Scalar _tmp420 =
      _tmp417 * sqrt_info(0, 2) + _tmp418 * sqrt_info(0, 0) + _tmp419 * sqrt_info(0, 1);
  const Scalar _tmp421 = 2 * _y[2];
  const Scalar _tmp422 = _tmp38 * _y_T_b[4] + _y_T_b[5] * (_tmp25 + _tmp32 + _tmp397 + _tmp404);
  const Scalar _tmp423 = _y_T_b[4] * (_tmp398 + _tmp414) + _y_T_b[5] * (_tmp36 + _tmp402);
  const Scalar _tmp424 = _tmp24 * _y_T_b[4] + _y_T_b[5] * (_tmp16 + _tmp411);
  const Scalar _tmp425 = _tmp105 * _tmp424 + _tmp107 * _tmp422 + _tmp108 * _tmp423;
  const Scalar _tmp426 = _tmp100 * _tmp422 + _tmp103 * _tmp423 + _tmp424 * _tmp97;
  const Scalar _tmp427 = _tmp14 * _tmp424 + _tmp422 * _tmp54 + _tmp423 * _tmp64;
  const Scalar _tmp428 =
      _tmp425 * sqrt_info(0, 1) + _tmp426 * sqrt_info(0, 0) + _tmp427 * sqrt_info(0, 2);
  const Scalar _tmp429 =
      _tmp407 * sqrt_info(1, 2) + _tmp408 * sqrt_info(1, 1) + _tmp409 * sqrt_info(1, 0);
  const Scalar _tmp430 =
      _tmp417 * sqrt_info(1, 2) + _tmp418 * sqrt_info(1, 0) + _tmp419 * sqrt_info(1, 1);
  const Scalar _tmp431 =
      _tmp425 * sqrt_info(1, 1) + _tmp426 * sqrt_info(1, 0) + _tmp427 * sqrt_info(1, 2);
  const Scalar _tmp432 =
      _tmp407 * sqrt_info(2, 2) + _tmp408 * sqrt_info(2, 1) + _tmp409 * sqrt_info(2, 0);
  const Scalar _tmp433 =
      _tmp417 * sqrt_info(2, 2) + _tmp418 * sqrt_info(2, 0) + _tmp419 * sqrt_info(2, 1);
  const Scalar _tmp434 =
      _tmp425 * sqrt_info(2, 1) + _tmp426 * sqrt_info(2, 0) + _tmp427 * sqrt_info(2, 2);
  const Scalar _tmp435 = _tmp105 * _tmp20 + _tmp107 * _tmp34 + _tmp108 * _tmp58;
  const Scalar _tmp436 = _tmp100 * _tmp34 + _tmp103 * _tmp58 + _tmp20 * _tmp97;
  const Scalar _tmp437 = _tmp14 * _tmp20 + _tmp34 * _tmp54 + _tmp58 * _tmp64;
  const Scalar _tmp438 = _tmp14 * _tmp24 + _tmp38 * _tmp54 + _tmp57 * _tmp64;
  const Scalar _tmp439 = _tmp105 * _tmp24 + _tmp107 * _tmp38 + _tmp108 * _tmp57;
  const Scalar _tmp440 = _tmp100 * _tmp38 + _tmp103 * _tmp57 + _tmp24 * _tmp97;
  const Scalar _tmp441 = _tmp100 * _tmp31 + _tmp103 * _tmp56 + _tmp29 * _tmp97;
  const Scalar _tmp442 = _tmp105 * _tmp29 + _tmp107 * _tmp31 + _tmp108 * _tmp56;
  const Scalar _tmp443 = _tmp14 * _tmp29 + _tmp31 * _tmp54 + _tmp56 * _tmp64;

  // Output terms (5)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp104 * sqrt_info(0, 0) + _tmp109 * sqrt_info(0, 1) + _tmp95 * sqrt_info(0, 2);
  _res(1, 0) = _tmp104 * sqrt_info(1, 0) + _tmp109 * sqrt_info(1, 1) + _tmp95 * sqrt_info(1, 2);
  _res(2, 0) = _tmp104 * sqrt_info(2, 0) + _tmp109 * sqrt_info(2, 1) + _tmp95 * sqrt_info(2, 2);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 7, Eigen::RowMajor>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp183 * _tmp67 - _tmp228 * _x[2] + _tmp263 * _tmp264;
    _res_D_x(1, 0) = _tmp264 * _tmp267 + _tmp265 * _tmp67 - _tmp266 * _tmp65;
    _res_D_x(2, 0) = _tmp264 * _tmp270 + _tmp268 * _tmp67 - _tmp269 * _tmp65;
    _res_D_x(0, 1) = -_tmp183 * _tmp71 + _tmp228 * _x[3] + _tmp263 * _tmp65;
    _res_D_x(1, 1) = _tmp264 * _tmp266 - _tmp265 * _tmp71 + _tmp267 * _tmp65;
    _res_D_x(2, 1) = _tmp264 * _tmp269 - _tmp268 * _tmp71 + _tmp270 * _tmp65;
    _res_D_x(0, 2) = _tmp183 * _tmp264 + _tmp228 * _x[0] - _tmp263 * _tmp67;
    _res_D_x(1, 2) = _tmp264 * _tmp265 + _tmp266 * _tmp71 - _tmp267 * _tmp67;
    _res_D_x(2, 2) = _tmp264 * _tmp268 + _tmp269 * _tmp71 - _tmp270 * _tmp67;
    _res_D_x(0, 3) = -_tmp183 * _tmp65 - _tmp227 * _tmp67 - _tmp263 * _tmp71;
    _res_D_x(1, 3) = -_tmp265 * _tmp65 - _tmp266 * _tmp67 - _tmp267 * _tmp71;
    _res_D_x(2, 3) = -_tmp268 * _tmp65 - _tmp269 * _tmp67 - _tmp270 * _tmp71;
    _res_D_x(0, 4) =
        _tmp272 * sqrt_info(0, 1) + _tmp274 * sqrt_info(0, 2) + _tmp276 * sqrt_info(0, 0);
    _res_D_x(1, 4) =
        _tmp272 * sqrt_info(1, 1) + _tmp274 * sqrt_info(1, 2) + _tmp276 * sqrt_info(1, 0);
    _res_D_x(2, 4) =
        _tmp272 * sqrt_info(2, 1) + _tmp274 * sqrt_info(2, 2) + _tmp276 * sqrt_info(2, 0);
    _res_D_x(0, 5) =
        _tmp278 * sqrt_info(0, 2) + _tmp279 * sqrt_info(0, 0) + _tmp280 * sqrt_info(0, 1);
    _res_D_x(1, 5) =
        _tmp278 * sqrt_info(1, 2) + _tmp279 * sqrt_info(1, 0) + _tmp280 * sqrt_info(1, 1);
    _res_D_x(2, 5) =
        _tmp278 * sqrt_info(2, 2) + _tmp279 * sqrt_info(2, 0) + _tmp280 * sqrt_info(2, 1);
    _res_D_x(0, 6) =
        _tmp281 * sqrt_info(0, 1) + _tmp282 * sqrt_info(0, 0) + _tmp283 * sqrt_info(0, 2);
    _res_D_x(1, 6) =
        _tmp281 * sqrt_info(1, 1) + _tmp282 * sqrt_info(1, 0) + _tmp283 * sqrt_info(1, 2);
    _res_D_x(2, 6) =
        _tmp281 * sqrt_info(2, 1) + _tmp282 * sqrt_info(2, 0) + _tmp283 * sqrt_info(2, 2);
  }

  if (res_D_x_T_a != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 7, Eigen::RowMajor>> _res_D_x_T_a{res_D_x_T_a};

    _res_D_x_T_a(0, 0) = -_tmp318 * _tmp319 + _tmp347 * _tmp348 + _tmp371 * _x_T_a[1];
    _res_D_x_T_a(1, 0) = -_tmp319 * _tmp372 + _tmp348 * _tmp373 + _tmp375 * _x_T_a[1];
    _res_D_x_T_a(2, 0) = -_tmp319 * _tmp376 + _tmp348 * _tmp377 + _tmp379 * _x_T_a[1];
    _res_D_x_T_a(0, 1) = _tmp319 * _tmp347 - _tmp371 * _x_T_a[0] + _tmp380 * _x_T_a[3];
    _res_D_x_T_a(1, 1) = _tmp319 * _tmp373 - _tmp375 * _x_T_a[0] + _tmp381 * _x_T_a[3];
    _res_D_x_T_a(2, 1) = _tmp319 * _tmp377 - _tmp379 * _x_T_a[0] + _tmp382 * _x_T_a[3];
    _res_D_x_T_a(0, 2) = _tmp371 * _x_T_a[3] + _tmp380 * _x_T_a[0] - _tmp383 * _x_T_a[1];
    _res_D_x_T_a(1, 2) = _tmp375 * _x_T_a[3] + _tmp381 * _x_T_a[0] - _tmp384 * _x_T_a[1];
    _res_D_x_T_a(2, 2) = _tmp348 * _tmp378 + _tmp382 * _x_T_a[0] - _tmp385 * _x_T_a[1];
    _res_D_x_T_a(0, 3) = -_tmp319 * _tmp370 - _tmp380 * _x_T_a[1] - _tmp383 * _x_T_a[0];
    _res_D_x_T_a(1, 3) = -_tmp319 * _tmp374 - _tmp381 * _x_T_a[1] - _tmp384 * _x_T_a[0];
    _res_D_x_T_a(2, 3) = -_tmp319 * _tmp378 - _tmp382 * _x_T_a[1] - _tmp385 * _x_T_a[0];
    _res_D_x_T_a(0, 4) =
        _tmp386 * sqrt_info(0, 2) + _tmp387 * sqrt_info(0, 1) + _tmp388 * sqrt_info(0, 0);
    _res_D_x_T_a(1, 4) =
        _tmp386 * sqrt_info(1, 2) + _tmp387 * sqrt_info(1, 1) + _tmp388 * sqrt_info(1, 0);
    _res_D_x_T_a(2, 4) =
        _tmp386 * sqrt_info(2, 2) + _tmp387 * sqrt_info(2, 1) + _tmp388 * sqrt_info(2, 0);
    _res_D_x_T_a(0, 5) =
        _tmp389 * sqrt_info(0, 0) + _tmp390 * sqrt_info(0, 1) + _tmp391 * sqrt_info(0, 2);
    _res_D_x_T_a(1, 5) =
        _tmp389 * sqrt_info(1, 0) + _tmp390 * sqrt_info(1, 1) + _tmp391 * sqrt_info(1, 2);
    _res_D_x_T_a(2, 5) =
        _tmp389 * sqrt_info(2, 0) + _tmp390 * sqrt_info(2, 1) + _tmp391 * sqrt_info(2, 2);
    _res_D_x_T_a(0, 6) =
        _tmp392 * sqrt_info(0, 2) + _tmp393 * sqrt_info(0, 0) + _tmp394 * sqrt_info(0, 1);
    _res_D_x_T_a(1, 6) =
        _tmp392 * sqrt_info(1, 2) + _tmp393 * sqrt_info(1, 0) + _tmp394 * sqrt_info(1, 1);
    _res_D_x_T_a(2, 6) =
        _tmp392 * sqrt_info(2, 2) + _tmp393 * sqrt_info(2, 0) + _tmp394 * sqrt_info(2, 1);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 7, Eigen::RowMajor>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp15 * _tmp410 + _tmp21 * _tmp428 - _tmp420 * _tmp421;
    _res_D_y(1, 0) = _tmp15 * _tmp429 + _tmp21 * _tmp431 - _tmp421 * _tmp430;
    _res_D_y(2, 0) = _tmp15 * _tmp432 + _tmp21 * _tmp434 - _tmp421 * _tmp433;
    _res_D_y(0, 1) = _tmp15 * _tmp420 - _tmp18 * _tmp428 + _tmp410 * _tmp421;
    _res_D_y(1, 1) = _tmp15 * _tmp430 - _tmp18 * _tmp431 + _tmp421 * _tmp429;
    _res_D_y(2, 1) = _tmp15 * _tmp433 - _tmp18 * _tmp434 + _tmp421 * _tmp432;
    _res_D_y(0, 2) = _tmp15 * _tmp428 + _tmp18 * _tmp420 - _tmp21 * _tmp410;
    _res_D_y(1, 2) = _tmp15 * _tmp431 + _tmp18 * _tmp430 - _tmp21 * _tmp429;
    _res_D_y(2, 2) = _tmp15 * _tmp434 + _tmp18 * _tmp433 - _tmp21 * _tmp432;
    _res_D_y(0, 3) = -_tmp18 * _tmp410 - _tmp21 * _tmp420 - _tmp421 * _tmp428;
    _res_D_y(1, 3) = -_tmp18 * _tmp429 - _tmp21 * _tmp430 - _tmp421 * _tmp431;
    _res_D_y(2, 3) = -_tmp18 * _tmp432 - _tmp21 * _tmp433 - _tmp421 * _tmp434;
    _res_D_y(0, 4) =
        _tmp100 * sqrt_info(0, 0) + _tmp107 * sqrt_info(0, 1) + _tmp54 * sqrt_info(0, 2);
    _res_D_y(1, 4) =
        _tmp100 * sqrt_info(1, 0) + _tmp107 * sqrt_info(1, 1) + _tmp54 * sqrt_info(1, 2);
    _res_D_y(2, 4) =
        _tmp100 * sqrt_info(2, 0) + _tmp107 * sqrt_info(2, 1) + _tmp54 * sqrt_info(2, 2);
    _res_D_y(0, 5) =
        _tmp103 * sqrt_info(0, 0) + _tmp108 * sqrt_info(0, 1) + _tmp64 * sqrt_info(0, 2);
    _res_D_y(1, 5) =
        _tmp103 * sqrt_info(1, 0) + _tmp108 * sqrt_info(1, 1) + _tmp64 * sqrt_info(1, 2);
    _res_D_y(2, 5) =
        _tmp103 * sqrt_info(2, 0) + _tmp108 * sqrt_info(2, 1) + _tmp64 * sqrt_info(2, 2);
    _res_D_y(0, 6) =
        _tmp105 * sqrt_info(0, 1) + _tmp14 * sqrt_info(0, 2) + _tmp97 * sqrt_info(0, 0);
    _res_D_y(1, 6) =
        _tmp105 * sqrt_info(1, 1) + _tmp14 * sqrt_info(1, 2) + _tmp97 * sqrt_info(1, 0);
    _res_D_y(2, 6) =
        _tmp105 * sqrt_info(2, 1) + _tmp14 * sqrt_info(2, 2) + _tmp97 * sqrt_info(2, 0);
  }

  if (res_D_y_T_b != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 7, Eigen::RowMajor>> _res_D_y_T_b{res_D_y_T_b};

    _res_D_y_T_b.setZero();

    _res_D_y_T_b(0, 4) =
        _tmp435 * sqrt_info(0, 1) + _tmp436 * sqrt_info(0, 0) + _tmp437 * sqrt_info(0, 2);
    _res_D_y_T_b(1, 4) =
        _tmp435 * sqrt_info(1, 1) + _tmp436 * sqrt_info(1, 0) + _tmp437 * sqrt_info(1, 2);
    _res_D_y_T_b(2, 4) =
        _tmp435 * sqrt_info(2, 1) + _tmp436 * sqrt_info(2, 0) + _tmp437 * sqrt_info(2, 2);
    _res_D_y_T_b(0, 5) =
        _tmp438 * sqrt_info(0, 2) + _tmp439 * sqrt_info(0, 1) + _tmp440 * sqrt_info(0, 0);
    _res_D_y_T_b(1, 5) =
        _tmp438 * sqrt_info(1, 2) + _tmp439 * sqrt_info(1, 1) + _tmp440 * sqrt_info(1, 0);
    _res_D_y_T_b(2, 5) =
        _tmp438 * sqrt_info(2, 2) + _tmp439 * sqrt_info(2, 1) + _tmp440 * sqrt_info(2, 0);
    _res_D_y_T_b(0, 6) =
        _tmp441 * sqrt_info(0, 0) + _tmp442 * sqrt_info(0, 1) + _tmp443 * sqrt_info(0, 2);
    _res_D_y_T_b(1, 6) =
        _tmp441 * sqrt_info(1, 0) + _tmp442 * sqrt_info(1, 1) + _tmp443 * sqrt_info(1, 2);
    _res_D_y_T_b(2, 6) =
        _tmp441 * sqrt_info(2, 0) + _tmp442 * sqrt_info(2, 1) + _tmp443 * sqrt_info(2, 2);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
