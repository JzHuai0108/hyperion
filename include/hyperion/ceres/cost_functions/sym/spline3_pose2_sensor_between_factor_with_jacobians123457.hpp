// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose2_sensor_between_factor
 *
 * Args:
 *     lambdas: Matrix31
 *     x0: Pose2
 *     x1: Pose2
 *     x2: Pose2
 *     x3: Pose2
 *     x_T_s: Pose2
 *     s_T_y: Pose2
 *     y: Pose2
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x0: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x0 (4) (row-major)
 *     res_D_x1: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x1 (4) (row-major)
 *     res_D_x2: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x2 (4) (row-major)
 *     res_D_x3: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x3 (4) (row-major)
 *     res_D_x_T_s: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x_T_s (4)
 * (row-major) res_D_y: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg y (4)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Pose2SensorBetweenFactorWithJacobians123457(
    const Eigen::Matrix<Scalar, 3, 1>& lambdas, const sym::Pose2<Scalar>& x0,
    const sym::Pose2<Scalar>& x1, const sym::Pose2<Scalar>& x2, const sym::Pose2<Scalar>& x3,
    const sym::Pose2<Scalar>& x_T_s, const sym::Pose2<Scalar>& s_T_y, const sym::Pose2<Scalar>& y,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr,
    Scalar* const res_D_x_T_s = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 797

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _s_T_y = s_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (204)
  const Scalar _tmp0 = _x2[1] * _x3[0];
  const Scalar _tmp1 = _x2[0] * _x3[1];
  const Scalar _tmp2 = -_tmp0 + _tmp1;
  const Scalar _tmp3 = _x2[0] * _x3[0];
  const Scalar _tmp4 = _x2[1] * _x3[1];
  const Scalar _tmp5 = _tmp3 + _tmp4;
  const Scalar _tmp6 = _tmp5 + epsilon * ((((_tmp5) > 0) - ((_tmp5) < 0)) + Scalar(0.5));
  const Scalar _tmp7 = lambdas(2, 0) * std::atan2(_tmp2, _tmp6);
  const Scalar _tmp8 = std::sin(_tmp7);
  const Scalar _tmp9 = _x1[0] * _x2[1];
  const Scalar _tmp10 = _x1[1] * _x2[0];
  const Scalar _tmp11 = -_tmp10 + _tmp9;
  const Scalar _tmp12 = _x1[0] * _x2[0];
  const Scalar _tmp13 = _x1[1] * _x2[1];
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = _tmp14 + epsilon * ((((_tmp14) > 0) - ((_tmp14) < 0)) + Scalar(0.5));
  const Scalar _tmp16 = lambdas(1, 0) * std::atan2(_tmp11, _tmp15);
  const Scalar _tmp17 = std::sin(_tmp16);
  const Scalar _tmp18 = _tmp17 * _tmp8;
  const Scalar _tmp19 = std::cos(_tmp7);
  const Scalar _tmp20 = std::cos(_tmp16);
  const Scalar _tmp21 = _tmp19 * _tmp20;
  const Scalar _tmp22 = -_tmp18 + _tmp21;
  const Scalar _tmp23 = _x0[1] * _x1[0];
  const Scalar _tmp24 = _x0[0] * _x1[1];
  const Scalar _tmp25 = -_tmp23 + _tmp24;
  const Scalar _tmp26 = _x0[1] * _x1[1];
  const Scalar _tmp27 = _x0[0] * _x1[0];
  const Scalar _tmp28 = _tmp26 + _tmp27;
  const Scalar _tmp29 = _tmp28 + epsilon * ((((_tmp28) > 0) - ((_tmp28) < 0)) + Scalar(0.5));
  const Scalar _tmp30 = lambdas(0, 0) * std::atan2(_tmp25, _tmp29);
  const Scalar _tmp31 = std::cos(_tmp30);
  const Scalar _tmp32 = _tmp22 * _tmp31;
  const Scalar _tmp33 = _tmp20 * _tmp8;
  const Scalar _tmp34 = _tmp17 * _tmp19;
  const Scalar _tmp35 = _tmp33 + _tmp34;
  const Scalar _tmp36 = std::sin(_tmp30);
  const Scalar _tmp37 = _tmp35 * _tmp36;
  const Scalar _tmp38 = _tmp32 - _tmp37;
  const Scalar _tmp39 = _tmp38 * _x0[1];
  const Scalar _tmp40 = _tmp22 * _tmp36;
  const Scalar _tmp41 = _tmp31 * _tmp35;
  const Scalar _tmp42 = _tmp40 + _tmp41;
  const Scalar _tmp43 = _tmp42 * _x0[0];
  const Scalar _tmp44 = _tmp39 + _tmp43;
  const Scalar _tmp45 = _tmp38 * _x0[0] - _tmp42 * _x0[1];
  const Scalar _tmp46 = -_tmp44 * _x_T_s[1] + _tmp45 * _x_T_s[0];
  const Scalar _tmp47 = -_tmp44 * _x_T_s[3] + _tmp45 * _x_T_s[2] + _x0[2] +
                        lambdas(0, 0) * (-_x0[2] + _x1[2]) + lambdas(1, 0) * (-_x1[2] + _x2[2]) +
                        lambdas(2, 0) * (-_x2[2] + _x3[2]);
  const Scalar _tmp48 = _tmp46 * _tmp47;
  const Scalar _tmp49 = _tmp44 * _x_T_s[0];
  const Scalar _tmp50 = _tmp45 * _x_T_s[1];
  const Scalar _tmp51 = _tmp49 + _tmp50;
  const Scalar _tmp52 = _tmp44 * _x_T_s[2] + _tmp45 * _x_T_s[3] + _x0[3] +
                        lambdas(0, 0) * (-_x0[3] + _x1[3]) + lambdas(1, 0) * (-_x1[3] + _x2[3]) +
                        lambdas(2, 0) * (-_x2[3] + _x3[3]);
  const Scalar _tmp53 = _tmp46 * _y[2];
  const Scalar _tmp54 = -_s_T_y[2] - _tmp48 - _tmp51 * _tmp52 + _tmp51 * _y[3] + _tmp53;
  const Scalar _tmp55 = _tmp46 * _tmp52;
  const Scalar _tmp56 = _tmp46 * _y[3];
  const Scalar _tmp57 = -_s_T_y[3] + _tmp47 * _tmp51 - _tmp51 * _y[2] - _tmp55 + _tmp56;
  const Scalar _tmp58 = _tmp51 * _y[0];
  const Scalar _tmp59 = _tmp46 * _y[1];
  const Scalar _tmp60 = -_tmp58 + _tmp59;
  const Scalar _tmp61 = _tmp46 * _y[0];
  const Scalar _tmp62 = _tmp51 * _y[1] + _tmp61;
  const Scalar _tmp63 = _s_T_y[1] * _tmp62;
  const Scalar _tmp64 = _s_T_y[0] * _tmp60 - _tmp63;
  const Scalar _tmp65 = _s_T_y[0] * _tmp62;
  const Scalar _tmp66 = _s_T_y[1] * _tmp60 + _tmp65;
  const Scalar _tmp67 = _tmp66 + epsilon * ((((_tmp66) > 0) - ((_tmp66) < 0)) + Scalar(0.5));
  const Scalar _tmp68 = std::atan2(_tmp64, _tmp67);
  const Scalar _tmp69 = std::pow(_tmp25, Scalar(2));
  const Scalar _tmp70 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp71 = Scalar(1.0) / (_tmp70);
  const Scalar _tmp72 = Scalar(1.0) / (_tmp29);
  const Scalar _tmp73 = _tmp70 * lambdas(0, 0) / (_tmp69 + _tmp70);
  const Scalar _tmp74 = _tmp73 * (-_tmp69 * _tmp71 + _tmp72 * (-_tmp26 - _tmp27));
  const Scalar _tmp75 = _tmp32 * _tmp74 - _tmp37 * _tmp74;
  const Scalar _tmp76 = -_tmp40 * _tmp74 - _tmp41 * _tmp74;
  const Scalar _tmp77 = -_tmp39 - _tmp43;
  const Scalar _tmp78 = -_tmp75 * _x0[1] + _tmp76 * _x0[0] + _tmp77;
  const Scalar _tmp79 = _tmp45 + _tmp75 * _x0[0] + _tmp76 * _x0[1];
  const Scalar _tmp80 = _tmp78 * _x_T_s[2] - _tmp79 * _x_T_s[3];
  const Scalar _tmp81 = _tmp78 * _x_T_s[1] + _tmp79 * _x_T_s[0];
  const Scalar _tmp82 = _tmp78 * _x_T_s[0] - _tmp79 * _x_T_s[1];
  const Scalar _tmp83 = _tmp78 * _x_T_s[3] + _tmp79 * _x_T_s[2];
  const Scalar _tmp84 = -_tmp46 * _tmp83 + _tmp47 * _tmp81 + _tmp51 * _tmp80 - _tmp52 * _tmp82 -
                        _tmp81 * _y[2] + _tmp82 * _y[3];
  const Scalar _tmp85 = _tmp81 * _y[1] + _tmp82 * _y[0];
  const Scalar _tmp86 = -_tmp81 * _y[0] + _tmp82 * _y[1];
  const Scalar _tmp87 = Scalar(1.0) / (_tmp67);
  const Scalar _tmp88 = std::pow(_tmp67, Scalar(2));
  const Scalar _tmp89 = _tmp64 / _tmp88;
  const Scalar _tmp90 = _tmp87 * (_s_T_y[0] * _tmp86 - _s_T_y[1] * _tmp85) -
                        _tmp89 * (_s_T_y[0] * _tmp85 + _s_T_y[1] * _tmp86);
  const Scalar _tmp91 = _tmp88 / (std::pow(_tmp64, Scalar(2)) + _tmp88);
  const Scalar _tmp92 = _tmp91 * sqrt_info(0, 0);
  const Scalar _tmp93 = -_tmp46 * _tmp80 - _tmp47 * _tmp82 - _tmp51 * _tmp83 - _tmp52 * _tmp81 +
                        _tmp81 * _y[3] + _tmp82 * _y[2];
  const Scalar _tmp94 = _tmp84 * sqrt_info(0, 2) + _tmp90 * _tmp92 + _tmp93 * sqrt_info(0, 1);
  const Scalar _tmp95 = _tmp91 * sqrt_info(1, 0);
  const Scalar _tmp96 = _tmp84 * sqrt_info(1, 2) + _tmp90 * _tmp95 + _tmp93 * sqrt_info(1, 1);
  const Scalar _tmp97 = _tmp91 * sqrt_info(2, 0);
  const Scalar _tmp98 = _tmp84 * sqrt_info(2, 2) + _tmp90 * _tmp97 + _tmp93 * sqrt_info(2, 1);
  const Scalar _tmp99 = 1 - lambdas(0, 0);
  const Scalar _tmp100 = _tmp46 * sqrt_info(0, 1);
  const Scalar _tmp101 = _tmp51 * sqrt_info(0, 2);
  const Scalar _tmp102 = _tmp46 * sqrt_info(1, 1);
  const Scalar _tmp103 = _tmp51 * _tmp99;
  const Scalar _tmp104 = _tmp46 * sqrt_info(2, 1);
  const Scalar _tmp105 = _tmp46 * sqrt_info(0, 2);
  const Scalar _tmp106 = _tmp51 * sqrt_info(0, 1);
  const Scalar _tmp107 = _tmp46 * sqrt_info(1, 2);
  const Scalar _tmp108 = _tmp51 * sqrt_info(1, 1);
  const Scalar _tmp109 = _tmp46 * sqrt_info(2, 2);
  const Scalar _tmp110 = _tmp51 * sqrt_info(2, 1);
  const Scalar _tmp111 = std::pow(_tmp11, Scalar(2));
  const Scalar _tmp112 = std::pow(_tmp15, Scalar(2));
  const Scalar _tmp113 = Scalar(1.0) / (_tmp112);
  const Scalar _tmp114 = Scalar(1.0) / (_tmp15);
  const Scalar _tmp115 = _tmp112 * lambdas(1, 0) / (_tmp111 + _tmp112);
  const Scalar _tmp116 = _tmp115 * (-_tmp111 * _tmp113 + _tmp114 * (-_tmp12 - _tmp13));
  const Scalar _tmp117 = -_tmp116 * _tmp18 + _tmp116 * _tmp21;
  const Scalar _tmp118 = -_tmp116 * _tmp33 - _tmp116 * _tmp34;
  const Scalar _tmp119 = _tmp73 * (-_tmp25 * _tmp71 * (_tmp23 - _tmp24) + _tmp28 * _tmp72);
  const Scalar _tmp120 = _tmp117 * _tmp31 + _tmp118 * _tmp36 + _tmp119 * _tmp32 - _tmp119 * _tmp37;
  const Scalar _tmp121 = -_tmp117 * _tmp36 + _tmp118 * _tmp31 - _tmp119 * _tmp40 - _tmp119 * _tmp41;
  const Scalar _tmp122 = -_tmp120 * _x0[1] + _tmp121 * _x0[0];
  const Scalar _tmp123 = _tmp120 * _x0[0] + _tmp121 * _x0[1];
  const Scalar _tmp124 = _tmp122 * _x_T_s[2] - _tmp123 * _x_T_s[3];
  const Scalar _tmp125 = _tmp122 * _x_T_s[3] + _tmp123 * _x_T_s[2];
  const Scalar _tmp126 = _tmp122 * _x_T_s[1] + _tmp123 * _x_T_s[0];
  const Scalar _tmp127 = _tmp122 * _x_T_s[0] - _tmp123 * _x_T_s[1];
  const Scalar _tmp128 = -_tmp124 * _tmp46 - _tmp125 * _tmp51 - _tmp126 * _tmp52 + _tmp126 * _y[3] -
                         _tmp127 * _tmp47 + _tmp127 * _y[2];
  const Scalar _tmp129 = _tmp124 * _tmp51 - _tmp125 * _tmp46 + _tmp126 * _tmp47 - _tmp126 * _y[2] -
                         _tmp127 * _tmp52 + _tmp127 * _y[3];
  const Scalar _tmp130 = _tmp126 * _y[1] + _tmp127 * _y[0];
  const Scalar _tmp131 = -_tmp126 * _y[0] + _tmp127 * _y[1];
  const Scalar _tmp132 = _tmp87 * (_s_T_y[0] * _tmp131 - _s_T_y[1] * _tmp130) -
                         _tmp89 * (_s_T_y[0] * _tmp130 + _s_T_y[1] * _tmp131);
  const Scalar _tmp133 = _tmp128 * sqrt_info(0, 1) + _tmp129 * sqrt_info(0, 2) + _tmp132 * _tmp92;
  const Scalar _tmp134 = _tmp128 * sqrt_info(1, 1) + _tmp129 * sqrt_info(1, 2) + _tmp132 * _tmp95;
  const Scalar _tmp135 = _tmp128 * sqrt_info(2, 1) + _tmp129 * sqrt_info(2, 2) + _tmp132 * _tmp97;
  const Scalar _tmp136 = lambdas(0, 0) - lambdas(1, 0);
  const Scalar _tmp137 = _tmp136 * _tmp51;
  const Scalar _tmp138 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp139 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp140 = Scalar(1.0) / (_tmp139);
  const Scalar _tmp141 = Scalar(1.0) / (_tmp6);
  const Scalar _tmp142 = _tmp139 * lambdas(2, 0) / (_tmp138 + _tmp139);
  const Scalar _tmp143 = _tmp142 * (-_tmp138 * _tmp140 + _tmp141 * (-_tmp3 - _tmp4));
  const Scalar _tmp144 = _tmp115 * (-_tmp11 * _tmp113 * (_tmp10 - _tmp9) + _tmp114 * _tmp14);
  const Scalar _tmp145 = -_tmp143 * _tmp33 - _tmp143 * _tmp34 - _tmp144 * _tmp33 - _tmp144 * _tmp34;
  const Scalar _tmp146 = -_tmp143 * _tmp18 + _tmp143 * _tmp21 - _tmp144 * _tmp18 + _tmp144 * _tmp21;
  const Scalar _tmp147 = _tmp145 * _tmp36 + _tmp146 * _tmp31;
  const Scalar _tmp148 = _tmp145 * _tmp31 - _tmp146 * _tmp36;
  const Scalar _tmp149 = _tmp147 * _x0[0] + _tmp148 * _x0[1];
  const Scalar _tmp150 = -_tmp147 * _x0[1] + _tmp148 * _x0[0];
  const Scalar _tmp151 = _tmp149 * _x_T_s[0] + _tmp150 * _x_T_s[1];
  const Scalar _tmp152 = -_tmp149 * _x_T_s[1] + _tmp150 * _x_T_s[0];
  const Scalar _tmp153 = -_tmp151 * _y[0] + _tmp152 * _y[1];
  const Scalar _tmp154 = _tmp151 * _y[1] + _tmp152 * _y[0];
  const Scalar _tmp155 = _tmp91 * (_tmp87 * (_s_T_y[0] * _tmp153 - _s_T_y[1] * _tmp154) -
                                   _tmp89 * (_s_T_y[0] * _tmp154 + _s_T_y[1] * _tmp153));
  const Scalar _tmp156 = -_tmp149 * _x_T_s[3] + _tmp150 * _x_T_s[2];
  const Scalar _tmp157 = _tmp149 * _x_T_s[2] + _tmp150 * _x_T_s[3];
  const Scalar _tmp158 = _tmp151 * _tmp47 - _tmp151 * _y[2] - _tmp152 * _tmp52 + _tmp152 * _y[3] +
                         _tmp156 * _tmp51 - _tmp157 * _tmp46;
  const Scalar _tmp159 = -_tmp151 * _tmp52 + _tmp151 * _y[3] - _tmp152 * _tmp47 + _tmp152 * _y[2] -
                         _tmp156 * _tmp46 - _tmp157 * _tmp51;
  const Scalar _tmp160 =
      _tmp155 * sqrt_info(0, 0) + _tmp158 * sqrt_info(0, 2) + _tmp159 * sqrt_info(0, 1);
  const Scalar _tmp161 =
      _tmp155 * sqrt_info(1, 0) + _tmp158 * sqrt_info(1, 2) + _tmp159 * sqrt_info(1, 1);
  const Scalar _tmp162 =
      _tmp155 * sqrt_info(2, 0) + _tmp158 * sqrt_info(2, 2) + _tmp159 * sqrt_info(2, 1);
  const Scalar _tmp163 = lambdas(1, 0) - lambdas(2, 0);
  const Scalar _tmp164 = _tmp163 * _tmp51;
  const Scalar _tmp165 = _tmp142 * (-_tmp140 * _tmp2 * (_tmp0 - _tmp1) + _tmp141 * _tmp5);
  const Scalar _tmp166 = -_tmp165 * _tmp18 + _tmp165 * _tmp21;
  const Scalar _tmp167 = -_tmp165 * _tmp33 - _tmp165 * _tmp34;
  const Scalar _tmp168 = -_tmp166 * _tmp36 + _tmp167 * _tmp31;
  const Scalar _tmp169 = _tmp166 * _tmp31 + _tmp167 * _tmp36;
  const Scalar _tmp170 = _tmp168 * _x0[1] + _tmp169 * _x0[0];
  const Scalar _tmp171 = _tmp168 * _x0[0] - _tmp169 * _x0[1];
  const Scalar _tmp172 = -_tmp170 * _x_T_s[3] + _tmp171 * _x_T_s[2];
  const Scalar _tmp173 = _tmp170 * _x_T_s[2] + _tmp171 * _x_T_s[3];
  const Scalar _tmp174 = -_tmp170 * _x_T_s[1] + _tmp171 * _x_T_s[0];
  const Scalar _tmp175 = _tmp170 * _x_T_s[0] + _tmp171 * _x_T_s[1];
  const Scalar _tmp176 = _tmp172 * _tmp51 - _tmp173 * _tmp46 - _tmp174 * _tmp52 + _tmp174 * _y[3] +
                         _tmp175 * _tmp47 - _tmp175 * _y[2];
  const Scalar _tmp177 = _tmp174 * _y[1] - _tmp175 * _y[0];
  const Scalar _tmp178 = _tmp174 * _y[0] + _tmp175 * _y[1];
  const Scalar _tmp179 = _tmp87 * (_s_T_y[0] * _tmp177 - _s_T_y[1] * _tmp178) -
                         _tmp89 * (_s_T_y[0] * _tmp178 + _s_T_y[1] * _tmp177);
  const Scalar _tmp180 = -_tmp172 * _tmp46 - _tmp173 * _tmp51 - _tmp174 * _tmp47 + _tmp174 * _y[2] -
                         _tmp175 * _tmp52 + _tmp175 * _y[3];
  const Scalar _tmp181 = _tmp176 * sqrt_info(0, 2) + _tmp179 * _tmp92 + _tmp180 * sqrt_info(0, 1);
  const Scalar _tmp182 = _tmp176 * sqrt_info(1, 2) + _tmp179 * _tmp95 + _tmp180 * sqrt_info(1, 1);
  const Scalar _tmp183 = _tmp176 * sqrt_info(2, 2) + _tmp179 * _tmp97 + _tmp180 * sqrt_info(2, 1);
  const Scalar _tmp184 = _tmp51 * lambdas(2, 0);
  const Scalar _tmp185 = -_tmp49 - _tmp50;
  const Scalar _tmp186 = _tmp185 * _y[0] + _tmp59;
  const Scalar _tmp187 = _tmp185 * _y[1] - _tmp61;
  const Scalar _tmp188 = _tmp87 * (_s_T_y[0] * _tmp187 - _s_T_y[1] * _tmp186) -
                         _tmp89 * (_s_T_y[0] * _tmp186 + _s_T_y[1] * _tmp187);
  const Scalar _tmp189 = -_tmp185 * _tmp47 + _tmp185 * _y[2] - _tmp55 + _tmp56;
  const Scalar _tmp190 = -_tmp185 * _tmp52 + _tmp185 * _y[3] + _tmp48 - _tmp53;
  const Scalar _tmp191 = _tmp188 * _tmp92 + _tmp189 * sqrt_info(0, 1) + _tmp190 * sqrt_info(0, 2);
  const Scalar _tmp192 = _tmp188 * _tmp95 + _tmp189 * sqrt_info(1, 1) + _tmp190 * sqrt_info(1, 2);
  const Scalar _tmp193 = _tmp188 * _tmp97 + _tmp189 * sqrt_info(2, 1) + _tmp190 * sqrt_info(2, 2);
  const Scalar _tmp194 = _tmp45 * _tmp51;
  const Scalar _tmp195 = _tmp194 - _tmp44 * _tmp46;
  const Scalar _tmp196 = -_tmp45 * _tmp46;
  const Scalar _tmp197 = _tmp196 - _tmp44 * _tmp51;
  const Scalar _tmp198 = -_tmp194 - _tmp46 * _tmp77;
  const Scalar _tmp199 = _tmp196 + _tmp51 * _tmp77;
  const Scalar _tmp200 = _tmp58 - _tmp59;
  const Scalar _tmp201 =
      _tmp87 * (-_s_T_y[1] * _tmp200 + _tmp65) - _tmp89 * (_s_T_y[0] * _tmp200 + _tmp63);
  const Scalar _tmp202 = _tmp201 * _y[1];
  const Scalar _tmp203 = _tmp201 * _y[0];

  // Output terms (7)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp54 * sqrt_info(0, 1) + _tmp57 * sqrt_info(0, 2) + _tmp68 * sqrt_info(0, 0);
  _res(1, 0) = _tmp54 * sqrt_info(1, 1) + _tmp57 * sqrt_info(1, 2) + _tmp68 * sqrt_info(1, 0);
  _res(2, 0) = _tmp54 * sqrt_info(2, 1) + _tmp57 * sqrt_info(2, 2) + _tmp68 * sqrt_info(2, 0);

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = -_tmp94 * _x0[1];
    _res_D_x0(1, 0) = -_tmp96 * _x0[1];
    _res_D_x0(2, 0) = -_tmp98 * _x0[1];
    _res_D_x0(0, 1) = _tmp94 * _x0[0];
    _res_D_x0(1, 1) = _tmp96 * _x0[0];
    _res_D_x0(2, 1) = _tmp98 * _x0[0];
    _res_D_x0(0, 2) = -_tmp100 * _tmp99 + _tmp101 * _tmp99;
    _res_D_x0(1, 2) = -_tmp102 * _tmp99 + _tmp103 * sqrt_info(1, 2);
    _res_D_x0(2, 2) = _tmp103 * sqrt_info(2, 2) - _tmp104 * _tmp99;
    _res_D_x0(0, 3) = -_tmp105 * _tmp99 - _tmp106 * _tmp99;
    _res_D_x0(1, 3) = -_tmp107 * _tmp99 - _tmp108 * _tmp99;
    _res_D_x0(2, 3) = -_tmp109 * _tmp99 - _tmp110 * _tmp99;
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = -_tmp133 * _x1[1];
    _res_D_x1(1, 0) = -_tmp134 * _x1[1];
    _res_D_x1(2, 0) = -_tmp135 * _x1[1];
    _res_D_x1(0, 1) = _tmp133 * _x1[0];
    _res_D_x1(1, 1) = _tmp134 * _x1[0];
    _res_D_x1(2, 1) = _tmp135 * _x1[0];
    _res_D_x1(0, 2) = -_tmp100 * _tmp136 + _tmp137 * sqrt_info(0, 2);
    _res_D_x1(1, 2) = -_tmp102 * _tmp136 + _tmp137 * sqrt_info(1, 2);
    _res_D_x1(2, 2) = -_tmp104 * _tmp136 + _tmp137 * sqrt_info(2, 2);
    _res_D_x1(0, 3) = -_tmp105 * _tmp136 - _tmp106 * _tmp136;
    _res_D_x1(1, 3) = -_tmp107 * _tmp136 - _tmp108 * _tmp136;
    _res_D_x1(2, 3) = -_tmp109 * _tmp136 - _tmp110 * _tmp136;
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = -_tmp160 * _x2[1];
    _res_D_x2(1, 0) = -_tmp161 * _x2[1];
    _res_D_x2(2, 0) = -_tmp162 * _x2[1];
    _res_D_x2(0, 1) = _tmp160 * _x2[0];
    _res_D_x2(1, 1) = _tmp161 * _x2[0];
    _res_D_x2(2, 1) = _tmp162 * _x2[0];
    _res_D_x2(0, 2) = -_tmp100 * _tmp163 + _tmp164 * sqrt_info(0, 2);
    _res_D_x2(1, 2) = -_tmp102 * _tmp163 + _tmp164 * sqrt_info(1, 2);
    _res_D_x2(2, 2) = -_tmp104 * _tmp163 + _tmp164 * sqrt_info(2, 2);
    _res_D_x2(0, 3) = -_tmp105 * _tmp163 - _tmp106 * _tmp163;
    _res_D_x2(1, 3) = -_tmp107 * _tmp163 - _tmp108 * _tmp163;
    _res_D_x2(2, 3) = -_tmp109 * _tmp163 - _tmp110 * _tmp163;
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) = -_tmp181 * _x3[1];
    _res_D_x3(1, 0) = -_tmp182 * _x3[1];
    _res_D_x3(2, 0) = -_tmp183 * _x3[1];
    _res_D_x3(0, 1) = _tmp181 * _x3[0];
    _res_D_x3(1, 1) = _tmp182 * _x3[0];
    _res_D_x3(2, 1) = _tmp183 * _x3[0];
    _res_D_x3(0, 2) = -_tmp100 * lambdas(2, 0) + _tmp101 * lambdas(2, 0);
    _res_D_x3(1, 2) = -_tmp102 * lambdas(2, 0) + _tmp184 * sqrt_info(1, 2);
    _res_D_x3(2, 2) = -_tmp104 * lambdas(2, 0) + _tmp184 * sqrt_info(2, 2);
    _res_D_x3(0, 3) = -_tmp105 * lambdas(2, 0) - _tmp106 * lambdas(2, 0);
    _res_D_x3(1, 3) = -_tmp107 * lambdas(2, 0) - _tmp108 * lambdas(2, 0);
    _res_D_x3(2, 3) = -_tmp109 * lambdas(2, 0) - _tmp110 * lambdas(2, 0);
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s(0, 0) = -_tmp191 * _x_T_s[1];
    _res_D_x_T_s(1, 0) = -_tmp192 * _x_T_s[1];
    _res_D_x_T_s(2, 0) = -_tmp193 * _x_T_s[1];
    _res_D_x_T_s(0, 1) = _tmp191 * _x_T_s[0];
    _res_D_x_T_s(1, 1) = _tmp192 * _x_T_s[0];
    _res_D_x_T_s(2, 1) = _tmp193 * _x_T_s[0];
    _res_D_x_T_s(0, 2) = _tmp195 * sqrt_info(0, 2) + _tmp197 * sqrt_info(0, 1);
    _res_D_x_T_s(1, 2) = _tmp195 * sqrt_info(1, 2) + _tmp197 * sqrt_info(1, 1);
    _res_D_x_T_s(2, 2) = _tmp195 * sqrt_info(2, 2) + _tmp197 * sqrt_info(2, 1);
    _res_D_x_T_s(0, 3) = _tmp198 * sqrt_info(0, 1) + _tmp199 * sqrt_info(0, 2);
    _res_D_x_T_s(1, 3) = _tmp198 * sqrt_info(1, 1) + _tmp199 * sqrt_info(1, 2);
    _res_D_x_T_s(2, 3) = _tmp198 * sqrt_info(2, 1) + _tmp199 * sqrt_info(2, 2);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = -_tmp202 * _tmp92;
    _res_D_y(1, 0) = -_tmp202 * _tmp95;
    _res_D_y(2, 0) = -_tmp202 * _tmp97;
    _res_D_y(0, 1) = _tmp203 * _tmp92;
    _res_D_y(1, 1) = _tmp203 * _tmp95;
    _res_D_y(2, 1) = _tmp203 * _tmp97;
    _res_D_y(0, 2) = _tmp100 + _tmp185 * sqrt_info(0, 2);
    _res_D_y(1, 2) = _tmp102 + _tmp185 * sqrt_info(1, 2);
    _res_D_y(2, 2) = _tmp104 + _tmp185 * sqrt_info(2, 2);
    _res_D_y(0, 3) = _tmp105 + _tmp106;
    _res_D_y(1, 3) = _tmp107 + _tmp108;
    _res_D_y(2, 3) = _tmp109 + _tmp110;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
