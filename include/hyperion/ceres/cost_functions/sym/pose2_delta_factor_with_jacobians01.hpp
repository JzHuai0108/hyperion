// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_delta_factor
 *
 * Args:
 *     x: Pose2
 *     y: Pose2
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x (4) (row-major)
 *     res_D_y: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg y (4) (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose2DeltaFactorWithJacobians01(
    const sym::Pose2<Scalar>& x, const sym::Pose2<Scalar>& y,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 77

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (26)
  const Scalar _tmp0 = _x[0] * _y[1];
  const Scalar _tmp1 = _x[1] * _y[0];
  const Scalar _tmp2 = _tmp0 - _tmp1;
  const Scalar _tmp3 = _x[0] * _y[0];
  const Scalar _tmp4 = _x[1] * _y[1];
  const Scalar _tmp5 = _tmp3 + _tmp4;
  const Scalar _tmp6 = _tmp5 + epsilon * ((((_tmp5) > 0) - ((_tmp5) < 0)) + Scalar(0.5));
  const Scalar _tmp7 = std::atan2(_tmp2, _tmp6);
  const Scalar _tmp8 = -_x[3] + _y[3];
  const Scalar _tmp9 = -_x[2] + _y[2];
  const Scalar _tmp10 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp11 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp12 = _tmp10 / (_tmp10 + _tmp11);
  const Scalar _tmp13 = _tmp12 * sqrt_info(0, 0);
  const Scalar _tmp14 = Scalar(1.0) / (_tmp6);
  const Scalar _tmp15 = Scalar(1.0) / (_tmp10);
  const Scalar _tmp16 = -_tmp11 * _tmp15 + _tmp14 * (-_tmp3 - _tmp4);
  const Scalar _tmp17 = _tmp16 * _x[1];
  const Scalar _tmp18 = _tmp12 * _tmp17;
  const Scalar _tmp19 = _tmp16 * _x[0];
  const Scalar _tmp20 = _tmp12 * sqrt_info(1, 0);
  const Scalar _tmp21 = _tmp12 * sqrt_info(2, 0);
  const Scalar _tmp22 = _tmp14 * _tmp5 - _tmp15 * _tmp2 * (-_tmp0 + _tmp1);
  const Scalar _tmp23 = _tmp22 * _y[1];
  const Scalar _tmp24 = _tmp22 * _y[0];
  const Scalar _tmp25 = _tmp12 * _tmp24;

  // Output terms (3)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp7 * sqrt_info(0, 0) + _tmp8 * sqrt_info(0, 2) + _tmp9 * sqrt_info(0, 1);
  _res(1, 0) = _tmp7 * sqrt_info(1, 0) + _tmp8 * sqrt_info(1, 2) + _tmp9 * sqrt_info(1, 1);
  _res(2, 0) = _tmp7 * sqrt_info(2, 0) + _tmp8 * sqrt_info(2, 2) + _tmp9 * sqrt_info(2, 1);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = -_tmp13 * _tmp17;
    _res_D_x(1, 0) = -_tmp18 * sqrt_info(1, 0);
    _res_D_x(2, 0) = -_tmp18 * sqrt_info(2, 0);
    _res_D_x(0, 1) = _tmp13 * _tmp19;
    _res_D_x(1, 1) = _tmp19 * _tmp20;
    _res_D_x(2, 1) = _tmp19 * _tmp21;
    _res_D_x(0, 2) = -sqrt_info(0, 1);
    _res_D_x(1, 2) = -sqrt_info(1, 1);
    _res_D_x(2, 2) = -sqrt_info(2, 1);
    _res_D_x(0, 3) = -sqrt_info(0, 2);
    _res_D_x(1, 3) = -sqrt_info(1, 2);
    _res_D_x(2, 3) = -sqrt_info(2, 2);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = -_tmp13 * _tmp23;
    _res_D_y(1, 0) = -_tmp20 * _tmp23;
    _res_D_y(2, 0) = -_tmp21 * _tmp23;
    _res_D_y(0, 1) = _tmp13 * _tmp24;
    _res_D_y(1, 1) = _tmp25 * sqrt_info(1, 0);
    _res_D_y(2, 1) = _tmp25 * sqrt_info(2, 0);
    _res_D_y(0, 2) = sqrt_info(0, 1);
    _res_D_y(1, 2) = sqrt_info(1, 1);
    _res_D_y(2, 2) = sqrt_info(2, 1);
    _res_D_y(0, 3) = sqrt_info(0, 2);
    _res_D_y(1, 3) = sqrt_info(1, 2);
    _res_D_y(2, 3) = sqrt_info(2, 2);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
