// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_sensor_relative_euclidean_distance_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_a: Pose2
 *     a_d_b: Matrix11
 *     y: Pose2
 *     y_T_b: Pose2
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x (4) (row-major)
 *     res_D_x_T_a: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x_T_a (4)
 * (row-major) res_D_y: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg y (4)
 * (row-major) res_D_y_T_b: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg y_T_b (4)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose2SensorRelativeEuclideanDistanceFactorWithJacobians0134(
    const sym::Pose2<Scalar>& x, const sym::Pose2<Scalar>& x_T_a,
    const Eigen::Matrix<Scalar, 1, 1>& a_d_b, const sym::Pose2<Scalar>& y,
    const sym::Pose2<Scalar>& y_T_b, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info,
    const Scalar epsilon, Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_a = nullptr,
    Scalar* const res_D_y = nullptr, Scalar* const res_D_y_T_b = nullptr) {
  // Total ops: 67

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (17)
  const Scalar _tmp0 = _x[0] * _x_T_a[3] + _x[1] * _x_T_a[2];
  const Scalar _tmp1 = _y[0] * _y_T_b[3];
  const Scalar _tmp2 = _y[1] * _y_T_b[2];
  const Scalar _tmp3 = -_tmp0 + _tmp1 + _tmp2 - _x[3] + _y[3];
  const Scalar _tmp4 = _x[1] * _x_T_a[3];
  const Scalar _tmp5 = _x[0] * _x_T_a[2];
  const Scalar _tmp6 = _y[0] * _y_T_b[2] - _y[1] * _y_T_b[3];
  const Scalar _tmp7 = _tmp4 - _tmp5 + _tmp6 - _x[2] + _y[2];
  const Scalar _tmp8 =
      std::sqrt(Scalar(std::pow(_tmp3, Scalar(2)) + std::pow(_tmp7, Scalar(2)) + epsilon));
  const Scalar _tmp9 = 2 * _tmp3;
  const Scalar _tmp10 = 2 * _tmp7;
  const Scalar _tmp11 = sqrt_info(0, 0) / _tmp8;
  const Scalar _tmp12 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp13 = _tmp12 * (_tmp0 * _tmp10 + _tmp9 * (_tmp4 - _tmp5));
  const Scalar _tmp14 = _tmp11 * _tmp7;
  const Scalar _tmp15 = _tmp11 * _tmp3;
  const Scalar _tmp16 = _tmp12 * (_tmp10 * (-_tmp1 - _tmp2) + _tmp6 * _tmp9);

  // Output terms (5)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) * (_tmp8 - a_d_b(0, 0));

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = -_tmp13 * _x[1];
    _res_D_x(0, 1) = _tmp13 * _x[0];
    _res_D_x(0, 2) = -_tmp14;
    _res_D_x(0, 3) = -_tmp15;
  }

  if (res_D_x_T_a != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x_T_a{res_D_x_T_a};

    _res_D_x_T_a(0, 0) = 0;
    _res_D_x_T_a(0, 1) = 0;
    _res_D_x_T_a(0, 2) = _tmp12 * (-_tmp10 * _x[0] - _tmp9 * _x[1]);
    _res_D_x_T_a(0, 3) = _tmp12 * (_tmp10 * _x[1] - _tmp9 * _x[0]);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = -_tmp16 * _y[1];
    _res_D_y(0, 1) = _tmp16 * _y[0];
    _res_D_y(0, 2) = _tmp14;
    _res_D_y(0, 3) = _tmp15;
  }

  if (res_D_y_T_b != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_y_T_b{res_D_y_T_b};

    _res_D_y_T_b(0, 0) = 0;
    _res_D_y_T_b(0, 1) = 0;
    _res_D_y_T_b(0, 2) = _tmp12 * (_tmp10 * _y[0] + _tmp9 * _y[1]);
    _res_D_y_T_b(0, 3) = _tmp12 * (-_tmp10 * _y[1] + _tmp9 * _y[0]);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
