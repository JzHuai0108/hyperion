// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_rot3_velocity_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix32
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     velocity: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Rot3VelocityGlobalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 2>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const Eigen::Matrix<Scalar, 3, 1>& velocity, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 352

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();

  // Intermediate terms (100)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = -2 * std::pow(_x0[1], Scalar(2));
  const Scalar _tmp2 = -2 * std::pow(_x0[2], Scalar(2));
  const Scalar _tmp3 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp4 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp5 = _x1[3] * _x2[3];
  const Scalar _tmp6 = 1 - epsilon;
  const Scalar _tmp7 = std::min<Scalar>(_tmp6, std::fabs(_tmp4 - _tmp5));
  const Scalar _tmp8 = 1 - std::pow(_tmp7, Scalar(2));
  const Scalar _tmp9 = std::acos(_tmp7);
  const Scalar _tmp10 =
      2 * std::min<Scalar>(0, (((-_tmp4 + _tmp5) > 0) - ((-_tmp4 + _tmp5) < 0))) + 1;
  const Scalar _tmp11 = _tmp10 * _tmp9 / std::sqrt(_tmp8);
  const Scalar _tmp12 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp13 = std::pow(_tmp10, Scalar(2)) * std::pow(_tmp9, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp8;
  const Scalar _tmp14 = 4 * _tmp13;
  const Scalar _tmp15 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp16 = std::pow(_tmp15, Scalar(2));
  const Scalar _tmp17 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp18 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp19 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp20 = _tmp12 * _tmp14 + _tmp14 * _tmp16 + _tmp14 * _tmp18 + _tmp19;
  const Scalar _tmp21 = std::sqrt(_tmp20);
  const Scalar _tmp22 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp23 = std::sin(_tmp22);
  const Scalar _tmp24 = 4 * _tmp23 * lambdas(1, 0) * std::cos(_tmp22) / _tmp21;
  const Scalar _tmp25 = _tmp11 * _tmp24;
  const Scalar _tmp26 = _tmp25 * _tmp3;
  const Scalar _tmp27 = 8 * _tmp13 * std::pow(_tmp23, Scalar(2)) / _tmp20;
  const Scalar _tmp28 = _tmp17 * _tmp27;
  const Scalar _tmp29 = _tmp15 * _tmp28;
  const Scalar _tmp30 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp31 = _x2[3] * _x3[3];
  const Scalar _tmp32 = std::min<Scalar>(_tmp6, std::fabs(_tmp30 - _tmp31));
  const Scalar _tmp33 =
      2 * lambdas(2, 1) *
      (2 * std::min<Scalar>(0, (((-_tmp30 + _tmp31) > 0) - ((-_tmp30 + _tmp31) < 0))) + 1) *
      std::acos(_tmp32) / std::sqrt(Scalar(1 - std::pow(_tmp32, Scalar(2))));
  const Scalar _tmp34 =
      _tmp33 * (-_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0]);
  const Scalar _tmp35 = _tmp11 * _tmp15;
  const Scalar _tmp36 = 2 * lambdas(1, 1);
  const Scalar _tmp37 = -_tmp12 * _tmp27;
  const Scalar _tmp38 = -_tmp18 * _tmp27 + 1;
  const Scalar _tmp39 =
      _tmp33 * (-_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2]);
  const Scalar _tmp40 = _tmp15 * _tmp27 * _tmp3;
  const Scalar _tmp41 = _tmp17 * _tmp25;
  const Scalar _tmp42 =
      _tmp33 * (_x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1]);
  const Scalar _tmp43 = _tmp34 * (-_tmp26 + _tmp29) + _tmp35 * _tmp36 + _tmp39 * (_tmp37 + _tmp38) +
                        _tmp42 * (_tmp40 + _tmp41);
  const Scalar _tmp44 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp45 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp46 = _x0[3] * _x1[3];
  const Scalar _tmp47 = std::min<Scalar>(_tmp6, std::fabs(_tmp45 - _tmp46));
  const Scalar _tmp48 = 1 - std::pow(_tmp47, Scalar(2));
  const Scalar _tmp49 = std::acos(_tmp47);
  const Scalar _tmp50 =
      2 * std::min<Scalar>(0, (((-_tmp45 + _tmp46) > 0) - ((-_tmp45 + _tmp46) < 0))) + 1;
  const Scalar _tmp51 = _tmp49 * _tmp50 / std::sqrt(_tmp48);
  const Scalar _tmp52 = std::pow(_tmp44, Scalar(2));
  const Scalar _tmp53 = std::pow(_tmp49, Scalar(2)) * std::pow(_tmp50, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp48;
  const Scalar _tmp54 = 4 * _tmp53;
  const Scalar _tmp55 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp56 = std::pow(_tmp55, Scalar(2));
  const Scalar _tmp57 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp58 = std::pow(_tmp57, Scalar(2));
  const Scalar _tmp59 = _tmp19 + _tmp52 * _tmp54 + _tmp54 * _tmp56 + _tmp54 * _tmp58;
  const Scalar _tmp60 = std::sqrt(_tmp59);
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp60;
  const Scalar _tmp62 = std::sin(_tmp61);
  const Scalar _tmp63 = 4 * _tmp62 * lambdas(0, 0) * std::cos(_tmp61) / _tmp60;
  const Scalar _tmp64 = _tmp51 * _tmp63;
  const Scalar _tmp65 = _tmp44 * _tmp64;
  const Scalar _tmp66 = 8 * _tmp53 * std::pow(_tmp62, Scalar(2)) / _tmp59;
  const Scalar _tmp67 = _tmp57 * _tmp66;
  const Scalar _tmp68 = _tmp55 * _tmp67;
  const Scalar _tmp69 = _tmp24 * _tmp35;
  const Scalar _tmp70 = _tmp28 * _tmp3;
  const Scalar _tmp71 = _tmp11 * _tmp36;
  const Scalar _tmp72 = -_tmp16 * _tmp27;
  const Scalar _tmp73 = _tmp17 * _tmp71 + _tmp34 * (_tmp37 + _tmp72 + 1) +
                        _tmp39 * (_tmp26 + _tmp29) + _tmp42 * (-_tmp69 + _tmp70);
  const Scalar _tmp74 = -_tmp52 * _tmp66;
  const Scalar _tmp75 = -_tmp58 * _tmp66 + 1;
  const Scalar _tmp76 = _tmp51 * _tmp55;
  const Scalar _tmp77 = 2 * lambdas(0, 1);
  const Scalar _tmp78 = _tmp57 * _tmp64;
  const Scalar _tmp79 = _tmp44 * _tmp55 * _tmp66;
  const Scalar _tmp80 = _tmp3 * _tmp71 + _tmp34 * (_tmp69 + _tmp70) + _tmp39 * (_tmp40 - _tmp41) +
                        _tmp42 * (_tmp38 + _tmp72);
  const Scalar _tmp81 = _tmp43 * (_tmp65 + _tmp68) + _tmp73 * (_tmp74 + _tmp75) + _tmp76 * _tmp77 +
                        _tmp80 * (-_tmp78 + _tmp79);
  const Scalar _tmp82 = 2 * _x0[1];
  const Scalar _tmp83 = _tmp82 * _x0[3];
  const Scalar _tmp84 = 2 * _x0[0];
  const Scalar _tmp85 = _tmp84 * _x0[2];
  const Scalar _tmp86 = _tmp51 * _tmp77;
  const Scalar _tmp87 = _tmp44 * _tmp67;
  const Scalar _tmp88 = _tmp63 * _tmp76;
  const Scalar _tmp89 = -_tmp56 * _tmp66;
  const Scalar _tmp90 = _tmp43 * (_tmp74 + _tmp89 + 1) + _tmp57 * _tmp86 +
                        _tmp73 * (-_tmp65 + _tmp68) + _tmp80 * (_tmp87 + _tmp88);
  const Scalar _tmp91 = 2 * _x0[2] * _x0[3];
  const Scalar _tmp92 = _tmp84 * _x0[1];
  const Scalar _tmp93 = _tmp43 * (_tmp87 - _tmp88) + _tmp44 * _tmp86 + _tmp73 * (_tmp78 + _tmp79) +
                        _tmp80 * (_tmp75 + _tmp89);
  const Scalar _tmp94 = _tmp0 * (_tmp81 * (_tmp1 + _tmp2 + 1) + _tmp90 * (_tmp83 + _tmp85) +
                                 _tmp93 * (-_tmp91 + _tmp92)) -
                        velocity(0, 0);
  const Scalar _tmp95 = 1 - 2 * std::pow(_x0[0], Scalar(2));
  const Scalar _tmp96 = _tmp84 * _x0[3];
  const Scalar _tmp97 = _tmp82 * _x0[2];
  const Scalar _tmp98 = _tmp0 * (_tmp81 * (-_tmp83 + _tmp85) + _tmp90 * (_tmp1 + _tmp95) +
                                 _tmp93 * (_tmp96 + _tmp97)) -
                        velocity(2, 0);
  const Scalar _tmp99 = _tmp0 * (_tmp81 * (_tmp91 + _tmp92) + _tmp90 * (-_tmp96 + _tmp97) +
                                 _tmp93 * (_tmp2 + _tmp95)) -
                        velocity(1, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp94 * sqrt_info(0, 0) + _tmp98 * sqrt_info(0, 2) + _tmp99 * sqrt_info(0, 1);
  _res(1, 0) = _tmp94 * sqrt_info(1, 0) + _tmp98 * sqrt_info(1, 2) + _tmp99 * sqrt_info(1, 1);
  _res(2, 0) = _tmp94 * sqrt_info(2, 0) + _tmp98 * sqrt_info(2, 2) + _tmp99 * sqrt_info(2, 1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
