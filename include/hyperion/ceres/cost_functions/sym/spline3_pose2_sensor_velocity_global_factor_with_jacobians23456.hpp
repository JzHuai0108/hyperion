// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose2_sensor_velocity_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix32
 *     x0: Pose2
 *     x1: Pose2
 *     x2: Pose2
 *     x3: Pose2
 *     x_T_s: Pose2
 *     velocity: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x0: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x0 (4) (row-major)
 *     res_D_x1: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x1 (4) (row-major)
 *     res_D_x2: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x2 (4) (row-major)
 *     res_D_x3: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x3 (4) (row-major)
 *     res_D_x_T_s: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x_T_s (4)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Pose2SensorVelocityGlobalFactorWithJacobians23456(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 2>& lambdas, const sym::Pose2<Scalar>& x0,
    const sym::Pose2<Scalar>& x1, const sym::Pose2<Scalar>& x2, const sym::Pose2<Scalar>& x3,
    const sym::Pose2<Scalar>& x_T_s, const Eigen::Matrix<Scalar, 3, 1>& velocity,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr,
    Scalar* const res_D_x_T_s = nullptr) {
  // Total ops: 348

  // Unused inputs
  (void)x_T_s;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();

  // Intermediate terms (98)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = -_x2[2] + _x3[2];
  const Scalar _tmp2 = -_x1[2] + _x2[2];
  const Scalar _tmp3 = -_x0[2] + _x1[2];
  const Scalar _tmp4 = _x2[1] * _x3[0];
  const Scalar _tmp5 = _x2[0] * _x3[1];
  const Scalar _tmp6 = -_tmp4 + _tmp5;
  const Scalar _tmp7 = _x2[0] * _x3[0];
  const Scalar _tmp8 = _x2[1] * _x3[1];
  const Scalar _tmp9 = _tmp7 + _tmp8;
  const Scalar _tmp10 = _tmp9 + epsilon * ((((_tmp9) > 0) - ((_tmp9) < 0)) + Scalar(0.5));
  const Scalar _tmp11 = _x1[0] * _x2[1];
  const Scalar _tmp12 = _x1[1] * _x2[0];
  const Scalar _tmp13 = _tmp11 - _tmp12;
  const Scalar _tmp14 = _x1[0] * _x2[0];
  const Scalar _tmp15 = _x1[1] * _x2[1];
  const Scalar _tmp16 = _tmp14 + _tmp15;
  const Scalar _tmp17 = _tmp16 + epsilon * ((((_tmp16) > 0) - ((_tmp16) < 0)) + Scalar(0.5));
  const Scalar _tmp18 = _x0[1] * _x1[0];
  const Scalar _tmp19 = _x0[0] * _x1[1];
  const Scalar _tmp20 = -_tmp18 + _tmp19;
  const Scalar _tmp21 = _x0[1] * _x1[1];
  const Scalar _tmp22 = _x0[0] * _x1[0];
  const Scalar _tmp23 = _tmp21 + _tmp22;
  const Scalar _tmp24 = _tmp23 + epsilon * ((((_tmp23) > 0) - ((_tmp23) < 0)) + Scalar(0.5));
  const Scalar _tmp25 = lambdas(0, 1) * std::atan2(_tmp20, _tmp24) +
                        lambdas(1, 1) * std::atan2(_tmp13, _tmp17) +
                        lambdas(2, 1) * std::atan2(_tmp6, _tmp10);
  const Scalar _tmp26 = -_x2[3] + _x3[3];
  const Scalar _tmp27 = -_x1[3] + _x2[3];
  const Scalar _tmp28 = -_x0[3] + _x1[3];
  const Scalar _tmp29 =
      _tmp26 * lambdas(2, 0) + _tmp27 * lambdas(1, 0) + _tmp28 * lambdas(0, 0) + _x0[3];
  const Scalar _tmp30 = _tmp0 * (_tmp1 * lambdas(2, 1) + _tmp2 * lambdas(1, 1) + _tmp25 * _tmp29 +
                                 _tmp3 * lambdas(0, 1)) -
                        velocity(1, 0);
  const Scalar _tmp31 = _tmp0 * _tmp25;
  const Scalar _tmp32 = _tmp31 - velocity(0, 0);
  const Scalar _tmp33 =
      _tmp1 * lambdas(2, 0) + _tmp2 * lambdas(1, 0) + _tmp3 * lambdas(0, 0) + _x0[2];
  const Scalar _tmp34 = _tmp0 * (-_tmp25 * _tmp33 + _tmp26 * lambdas(2, 1) +
                                 _tmp27 * lambdas(1, 1) + _tmp28 * lambdas(0, 1)) -
                        velocity(2, 0);
  const Scalar _tmp35 = _tmp0 * lambdas(0, 1);
  const Scalar _tmp36 = _tmp35 * sqrt_info(0, 1);
  const Scalar _tmp37 = std::pow(_tmp20, Scalar(2));
  const Scalar _tmp38 = std::pow(_tmp24, Scalar(2));
  const Scalar _tmp39 = Scalar(1.0) / (_tmp38);
  const Scalar _tmp40 = Scalar(1.0) / (_tmp24);
  const Scalar _tmp41 = _tmp38 / (_tmp37 + _tmp38);
  const Scalar _tmp42 = _tmp41 * (-_tmp37 * _tmp39 + _tmp40 * (-_tmp21 - _tmp22));
  const Scalar _tmp43 = _tmp29 * _tmp42;
  const Scalar _tmp44 = _tmp35 * sqrt_info(0, 2);
  const Scalar _tmp45 = _tmp33 * _tmp42;
  const Scalar _tmp46 = _tmp35 * _tmp42;
  const Scalar _tmp47 = _tmp36 * _tmp43 - _tmp44 * _tmp45 + _tmp46 * sqrt_info(0, 0);
  const Scalar _tmp48 = _tmp35 * sqrt_info(1, 1);
  const Scalar _tmp49 = _tmp35 * sqrt_info(1, 2);
  const Scalar _tmp50 = _tmp43 * _tmp48 - _tmp45 * _tmp49 + _tmp46 * sqrt_info(1, 0);
  const Scalar _tmp51 = _tmp35 * sqrt_info(2, 1);
  const Scalar _tmp52 = _tmp35 * sqrt_info(2, 2);
  const Scalar _tmp53 = _tmp43 * _tmp51 - _tmp45 * _tmp52 + _tmp46 * sqrt_info(2, 0);
  const Scalar _tmp54 = _tmp31 * (1 - lambdas(0, 0));
  const Scalar _tmp55 = std::pow(_tmp13, Scalar(2));
  const Scalar _tmp56 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp57 = Scalar(1.0) / (_tmp56);
  const Scalar _tmp58 = Scalar(1.0) / (_tmp17);
  const Scalar _tmp59 = _tmp56 * lambdas(1, 1) / (_tmp55 + _tmp56);
  const Scalar _tmp60 =
      _tmp0 * (_tmp41 * lambdas(0, 1) * (-_tmp20 * _tmp39 * (_tmp18 - _tmp19) + _tmp23 * _tmp40) +
               _tmp59 * (-_tmp55 * _tmp57 + _tmp58 * (-_tmp14 - _tmp15)));
  const Scalar _tmp61 = _tmp33 * _tmp60;
  const Scalar _tmp62 = _tmp29 * _tmp60;
  const Scalar _tmp63 =
      _tmp60 * sqrt_info(0, 0) - _tmp61 * sqrt_info(0, 2) + _tmp62 * sqrt_info(0, 1);
  const Scalar _tmp64 =
      _tmp60 * sqrt_info(1, 0) - _tmp61 * sqrt_info(1, 2) + _tmp62 * sqrt_info(1, 1);
  const Scalar _tmp65 =
      _tmp60 * sqrt_info(2, 0) - _tmp61 * sqrt_info(2, 2) + _tmp62 * sqrt_info(2, 1);
  const Scalar _tmp66 = _tmp31 * (lambdas(0, 0) - lambdas(1, 0));
  const Scalar _tmp67 = _tmp0 * (lambdas(0, 1) - lambdas(1, 1));
  const Scalar _tmp68 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp69 = std::pow(_tmp10, Scalar(2));
  const Scalar _tmp70 = Scalar(1.0) / (_tmp69);
  const Scalar _tmp71 = Scalar(1.0) / (_tmp10);
  const Scalar _tmp72 = _tmp69 / (_tmp68 + _tmp69);
  const Scalar _tmp73 =
      _tmp0 * (_tmp59 * (-_tmp13 * _tmp57 * (-_tmp11 + _tmp12) + _tmp16 * _tmp58) +
               _tmp72 * lambdas(2, 1) * (-_tmp68 * _tmp70 + _tmp71 * (-_tmp7 - _tmp8)));
  const Scalar _tmp74 = _tmp29 * _tmp73;
  const Scalar _tmp75 = _tmp33 * _tmp73;
  const Scalar _tmp76 =
      _tmp73 * sqrt_info(0, 0) + _tmp74 * sqrt_info(0, 1) - _tmp75 * sqrt_info(0, 2);
  const Scalar _tmp77 =
      _tmp73 * sqrt_info(1, 0) + _tmp74 * sqrt_info(1, 1) - _tmp75 * sqrt_info(1, 2);
  const Scalar _tmp78 =
      _tmp73 * sqrt_info(2, 0) + _tmp74 * sqrt_info(2, 1) - _tmp75 * sqrt_info(2, 2);
  const Scalar _tmp79 = lambdas(1, 0) - lambdas(2, 0);
  const Scalar _tmp80 = _tmp31 * _tmp79;
  const Scalar _tmp81 = _tmp0 * (lambdas(1, 1) - lambdas(2, 1));
  const Scalar _tmp82 = _tmp31 * sqrt_info(0, 1);
  const Scalar _tmp83 = _tmp0 * lambdas(2, 1);
  const Scalar _tmp84 = _tmp83 * sqrt_info(0, 1);
  const Scalar _tmp85 = _tmp72 * (-_tmp6 * _tmp70 * (_tmp4 - _tmp5) + _tmp71 * _tmp9);
  const Scalar _tmp86 = _tmp29 * _tmp85;
  const Scalar _tmp87 = _tmp83 * _tmp85;
  const Scalar _tmp88 = _tmp83 * sqrt_info(0, 2);
  const Scalar _tmp89 = _tmp33 * _tmp85;
  const Scalar _tmp90 = _tmp84 * _tmp86 + _tmp87 * sqrt_info(0, 0) - _tmp88 * _tmp89;
  const Scalar _tmp91 = _tmp83 * sqrt_info(1, 1);
  const Scalar _tmp92 = _tmp83 * sqrt_info(1, 2);
  const Scalar _tmp93 = _tmp86 * _tmp91 + _tmp87 * sqrt_info(1, 0) - _tmp89 * _tmp92;
  const Scalar _tmp94 = _tmp83 * sqrt_info(2, 1);
  const Scalar _tmp95 = _tmp83 * sqrt_info(2, 2);
  const Scalar _tmp96 = _tmp86 * _tmp94 + _tmp87 * sqrt_info(2, 0) - _tmp89 * _tmp95;
  const Scalar _tmp97 = _tmp31 * lambdas(2, 0);

  // Output terms (6)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp30 * sqrt_info(0, 1) + _tmp32 * sqrt_info(0, 0) + _tmp34 * sqrt_info(0, 2);
  _res(1, 0) = _tmp30 * sqrt_info(1, 1) + _tmp32 * sqrt_info(1, 0) + _tmp34 * sqrt_info(1, 2);
  _res(2, 0) = _tmp30 * sqrt_info(2, 1) + _tmp32 * sqrt_info(2, 0) + _tmp34 * sqrt_info(2, 2);

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = -_tmp47 * _x0[1];
    _res_D_x0(1, 0) = -_tmp50 * _x0[1];
    _res_D_x0(2, 0) = -_tmp53 * _x0[1];
    _res_D_x0(0, 1) = _tmp47 * _x0[0];
    _res_D_x0(1, 1) = _tmp50 * _x0[0];
    _res_D_x0(2, 1) = _tmp53 * _x0[0];
    _res_D_x0(0, 2) = -_tmp36 - _tmp54 * sqrt_info(0, 2);
    _res_D_x0(1, 2) = -_tmp48 - _tmp54 * sqrt_info(1, 2);
    _res_D_x0(2, 2) = -_tmp51 - _tmp54 * sqrt_info(2, 2);
    _res_D_x0(0, 3) = -_tmp44 + _tmp54 * sqrt_info(0, 1);
    _res_D_x0(1, 3) = -_tmp49 + _tmp54 * sqrt_info(1, 1);
    _res_D_x0(2, 3) = -_tmp52 + _tmp54 * sqrt_info(2, 1);
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = -_tmp63 * _x1[1];
    _res_D_x1(1, 0) = -_tmp64 * _x1[1];
    _res_D_x1(2, 0) = -_tmp65 * _x1[1];
    _res_D_x1(0, 1) = _tmp63 * _x1[0];
    _res_D_x1(1, 1) = _tmp64 * _x1[0];
    _res_D_x1(2, 1) = _tmp65 * _x1[0];
    _res_D_x1(0, 2) = -_tmp66 * sqrt_info(0, 2) + _tmp67 * sqrt_info(0, 1);
    _res_D_x1(1, 2) = -_tmp66 * sqrt_info(1, 2) + _tmp67 * sqrt_info(1, 1);
    _res_D_x1(2, 2) = -_tmp66 * sqrt_info(2, 2) + _tmp67 * sqrt_info(2, 1);
    _res_D_x1(0, 3) = _tmp66 * sqrt_info(0, 1) + _tmp67 * sqrt_info(0, 2);
    _res_D_x1(1, 3) = _tmp66 * sqrt_info(1, 1) + _tmp67 * sqrt_info(1, 2);
    _res_D_x1(2, 3) = _tmp66 * sqrt_info(2, 1) + _tmp67 * sqrt_info(2, 2);
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = -_tmp76 * _x2[1];
    _res_D_x2(1, 0) = -_tmp77 * _x2[1];
    _res_D_x2(2, 0) = -_tmp78 * _x2[1];
    _res_D_x2(0, 1) = _tmp76 * _x2[0];
    _res_D_x2(1, 1) = _tmp77 * _x2[0];
    _res_D_x2(2, 1) = _tmp78 * _x2[0];
    _res_D_x2(0, 2) = -_tmp80 * sqrt_info(0, 2) + _tmp81 * sqrt_info(0, 1);
    _res_D_x2(1, 2) = -_tmp80 * sqrt_info(1, 2) + _tmp81 * sqrt_info(1, 1);
    _res_D_x2(2, 2) = -_tmp80 * sqrt_info(2, 2) + _tmp81 * sqrt_info(2, 1);
    _res_D_x2(0, 3) = _tmp79 * _tmp82 + _tmp81 * sqrt_info(0, 2);
    _res_D_x2(1, 3) = _tmp80 * sqrt_info(1, 1) + _tmp81 * sqrt_info(1, 2);
    _res_D_x2(2, 3) = _tmp80 * sqrt_info(2, 1) + _tmp81 * sqrt_info(2, 2);
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) = -_tmp90 * _x3[1];
    _res_D_x3(1, 0) = -_tmp93 * _x3[1];
    _res_D_x3(2, 0) = -_tmp96 * _x3[1];
    _res_D_x3(0, 1) = _tmp90 * _x3[0];
    _res_D_x3(1, 1) = _tmp93 * _x3[0];
    _res_D_x3(2, 1) = _tmp96 * _x3[0];
    _res_D_x3(0, 2) = _tmp84 - _tmp97 * sqrt_info(0, 2);
    _res_D_x3(1, 2) = _tmp91 - _tmp97 * sqrt_info(1, 2);
    _res_D_x3(2, 2) = _tmp94 - _tmp97 * sqrt_info(2, 2);
    _res_D_x3(0, 3) = _tmp82 * lambdas(2, 0) + _tmp88;
    _res_D_x3(1, 3) = _tmp92 + _tmp97 * sqrt_info(1, 1);
    _res_D_x3(2, 3) = _tmp95 + _tmp97 * sqrt_info(2, 1);
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s.setZero();
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
