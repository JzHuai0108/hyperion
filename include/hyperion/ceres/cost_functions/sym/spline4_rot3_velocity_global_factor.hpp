// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline4_rot3_velocity_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix42
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     x4: Rot3
 *     velocity: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline4Rot3VelocityGlobalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 4, 2>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const sym::Rot3<Scalar>& x4, const Eigen::Matrix<Scalar, 3, 1>& velocity,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon) {
  // Total ops: 471

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x4 = x4.Data();

  // Intermediate terms (138)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = 2 * _x0[0];
  const Scalar _tmp2 = _tmp1 * _x0[3];
  const Scalar _tmp3 = 2 * _x0[1] * _x0[2];
  const Scalar _tmp4 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp5 = std::pow(_tmp4, Scalar(2));
  const Scalar _tmp6 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp7 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp8 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp9 = _x0[3] * _x1[3];
  const Scalar _tmp10 = 1 - epsilon;
  const Scalar _tmp11 = std::min<Scalar>(_tmp10, std::fabs(_tmp8 - _tmp9));
  const Scalar _tmp12 = 1 - std::pow(_tmp11, Scalar(2));
  const Scalar _tmp13 = std::acos(_tmp11);
  const Scalar _tmp14 =
      2 * std::min<Scalar>(0, (((-_tmp8 + _tmp9) > 0) - ((-_tmp8 + _tmp9) < 0))) + 1;
  const Scalar _tmp15 = std::pow(_tmp13, Scalar(2)) * std::pow(_tmp14, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp12;
  const Scalar _tmp16 = 4 * _tmp15;
  const Scalar _tmp17 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp18 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp19 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp20 = _tmp16 * _tmp18 + _tmp16 * _tmp5 + _tmp16 * _tmp7 + _tmp19;
  const Scalar _tmp21 = std::sqrt(_tmp20);
  const Scalar _tmp22 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp23 = std::sin(_tmp22);
  const Scalar _tmp24 = 8 * _tmp15 * std::pow(_tmp23, Scalar(2)) / _tmp20;
  const Scalar _tmp25 = -_tmp24 * _tmp5;
  const Scalar _tmp26 = -_tmp18 * _tmp24 + 1;
  const Scalar _tmp27 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp28 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp29 = _x2[3] * _x3[3];
  const Scalar _tmp30 = std::min<Scalar>(_tmp10, std::fabs(_tmp28 - _tmp29));
  const Scalar _tmp31 = std::acos(_tmp30);
  const Scalar _tmp32 =
      2 * std::min<Scalar>(0, (((-_tmp28 + _tmp29) > 0) - ((-_tmp28 + _tmp29) < 0))) + 1;
  const Scalar _tmp33 = 1 - std::pow(_tmp30, Scalar(2));
  const Scalar _tmp34 = _tmp31 * _tmp32 / std::sqrt(_tmp33);
  const Scalar _tmp35 = 2 * lambdas(2, 1);
  const Scalar _tmp36 = _tmp34 * _tmp35;
  const Scalar _tmp37 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp38 = std::pow(_tmp27, Scalar(2));
  const Scalar _tmp39 = std::pow(_tmp31, Scalar(2)) * std::pow(_tmp32, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp33;
  const Scalar _tmp40 = 4 * _tmp39;
  const Scalar _tmp41 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp42 = std::pow(_tmp41, Scalar(2));
  const Scalar _tmp43 = std::pow(_tmp37, Scalar(2));
  const Scalar _tmp44 = _tmp19 + _tmp38 * _tmp40 + _tmp40 * _tmp42 + _tmp40 * _tmp43;
  const Scalar _tmp45 = std::sqrt(_tmp44);
  const Scalar _tmp46 = (Scalar(1) / Scalar(2)) * _tmp45;
  const Scalar _tmp47 = std::sin(_tmp46);
  const Scalar _tmp48 = 4 * _tmp47 * lambdas(2, 0) * std::cos(_tmp46) / _tmp45;
  const Scalar _tmp49 = _tmp34 * _tmp48;
  const Scalar _tmp50 = _tmp37 * _tmp49;
  const Scalar _tmp51 = 8 * _tmp39 * std::pow(_tmp47, Scalar(2)) / _tmp44;
  const Scalar _tmp52 = _tmp27 * _tmp41 * _tmp51;
  const Scalar _tmp53 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp54 = _x3[3] * _x4[3];
  const Scalar _tmp55 = std::min<Scalar>(_tmp10, std::fabs(_tmp53 - _tmp54));
  const Scalar _tmp56 =
      2 * lambdas(3, 1) *
      (2 * std::min<Scalar>(0, (((-_tmp53 + _tmp54) > 0) - ((-_tmp53 + _tmp54) < 0))) + 1) *
      std::acos(_tmp55) / std::sqrt(Scalar(1 - std::pow(_tmp55, Scalar(2))));
  const Scalar _tmp57 =
      _tmp56 * (_x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1]);
  const Scalar _tmp58 = -_tmp43 * _tmp51;
  const Scalar _tmp59 = -_tmp42 * _tmp51;
  const Scalar _tmp60 =
      _tmp56 * (-_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2]);
  const Scalar _tmp61 = _tmp37 * _tmp51;
  const Scalar _tmp62 = _tmp27 * _tmp61;
  const Scalar _tmp63 = _tmp34 * _tmp41;
  const Scalar _tmp64 = _tmp48 * _tmp63;
  const Scalar _tmp65 =
      _tmp56 * (-_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0]);
  const Scalar _tmp66 = _tmp27 * _tmp36 + _tmp57 * (_tmp50 + _tmp52) +
                        _tmp60 * (_tmp58 + _tmp59 + 1) + _tmp65 * (_tmp62 - _tmp64);
  const Scalar _tmp67 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp68 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp69 = std::pow(_tmp67, Scalar(2));
  const Scalar _tmp70 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp71 = _x1[3] * _x2[3];
  const Scalar _tmp72 = std::min<Scalar>(_tmp10, std::fabs(_tmp70 - _tmp71));
  const Scalar _tmp73 = 1 - std::pow(_tmp72, Scalar(2));
  const Scalar _tmp74 = std::acos(_tmp72);
  const Scalar _tmp75 =
      2 * std::min<Scalar>(0, (((-_tmp70 + _tmp71) > 0) - ((-_tmp70 + _tmp71) < 0))) + 1;
  const Scalar _tmp76 = std::pow(_tmp74, Scalar(2)) * std::pow(_tmp75, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp73;
  const Scalar _tmp77 = 4 * _tmp76;
  const Scalar _tmp78 = std::pow(_tmp68, Scalar(2));
  const Scalar _tmp79 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp80 = std::pow(_tmp79, Scalar(2));
  const Scalar _tmp81 = _tmp19 + _tmp69 * _tmp77 + _tmp77 * _tmp78 + _tmp77 * _tmp80;
  const Scalar _tmp82 = std::sqrt(_tmp81);
  const Scalar _tmp83 = (Scalar(1) / Scalar(2)) * _tmp82;
  const Scalar _tmp84 = std::sin(_tmp83);
  const Scalar _tmp85 = 8 * _tmp76 * std::pow(_tmp84, Scalar(2)) / _tmp81;
  const Scalar _tmp86 = _tmp67 * _tmp68 * _tmp85;
  const Scalar _tmp87 = _tmp74 * _tmp75 / std::sqrt(_tmp73);
  const Scalar _tmp88 = _tmp79 * _tmp87;
  const Scalar _tmp89 = 4 * _tmp84 * lambdas(1, 0) * std::cos(_tmp83) / _tmp82;
  const Scalar _tmp90 = _tmp88 * _tmp89;
  const Scalar _tmp91 = 2 * lambdas(1, 1);
  const Scalar _tmp92 = _tmp87 * _tmp91;
  const Scalar _tmp93 = _tmp27 * _tmp49;
  const Scalar _tmp94 = _tmp41 * _tmp61;
  const Scalar _tmp95 = -_tmp38 * _tmp51 + 1;
  const Scalar _tmp96 = _tmp36 * _tmp37 + _tmp57 * (-_tmp93 + _tmp94) + _tmp60 * (_tmp62 + _tmp64) +
                        _tmp65 * (_tmp59 + _tmp95);
  const Scalar _tmp97 = _tmp87 * _tmp89;
  const Scalar _tmp98 = _tmp68 * _tmp97;
  const Scalar _tmp99 = _tmp79 * _tmp85;
  const Scalar _tmp100 = _tmp67 * _tmp99;
  const Scalar _tmp101 = -_tmp78 * _tmp85;
  const Scalar _tmp102 = -_tmp80 * _tmp85 + 1;
  const Scalar _tmp103 = _tmp35 * _tmp63 + _tmp57 * (_tmp58 + _tmp95) +
                         _tmp60 * (-_tmp50 + _tmp52) + _tmp65 * (_tmp93 + _tmp94);
  const Scalar _tmp104 = _tmp103 * (_tmp101 + _tmp102) + _tmp66 * (_tmp86 - _tmp90) +
                         _tmp67 * _tmp92 + _tmp96 * (_tmp100 + _tmp98);
  const Scalar _tmp105 = _tmp67 * _tmp97;
  const Scalar _tmp106 = _tmp68 * _tmp99;
  const Scalar _tmp107 = -_tmp69 * _tmp85;
  const Scalar _tmp108 = _tmp103 * (_tmp86 + _tmp90) + _tmp66 * (_tmp102 + _tmp107) +
                         _tmp68 * _tmp92 + _tmp96 * (-_tmp105 + _tmp106);
  const Scalar _tmp109 = _tmp17 * _tmp24 * _tmp6;
  const Scalar _tmp110 = _tmp13 * _tmp14 / std::sqrt(_tmp12);
  const Scalar _tmp111 = 4 * _tmp23 * lambdas(0, 0) * std::cos(_tmp22) / _tmp21;
  const Scalar _tmp112 = _tmp110 * _tmp111;
  const Scalar _tmp113 = _tmp112 * _tmp4;
  const Scalar _tmp114 = _tmp103 * (_tmp100 - _tmp98) + _tmp66 * (_tmp105 + _tmp106) +
                         _tmp88 * _tmp91 + _tmp96 * (_tmp101 + _tmp107 + 1);
  const Scalar _tmp115 = _tmp110 * _tmp17;
  const Scalar _tmp116 = _tmp111 * _tmp115;
  const Scalar _tmp117 = _tmp24 * _tmp4;
  const Scalar _tmp118 = _tmp117 * _tmp6;
  const Scalar _tmp119 = 2 * lambdas(0, 1);
  const Scalar _tmp120 = _tmp110 * _tmp119;
  const Scalar _tmp121 = _tmp104 * (_tmp25 + _tmp26) + _tmp108 * (_tmp109 - _tmp113) +
                         _tmp114 * (_tmp116 + _tmp118) + _tmp120 * _tmp6;
  const Scalar _tmp122 = 2 * _x0[3];
  const Scalar _tmp123 = _tmp122 * _x0[1];
  const Scalar _tmp124 = _tmp1 * _x0[2];
  const Scalar _tmp125 = -_tmp24 * _tmp7;
  const Scalar _tmp126 = _tmp112 * _tmp6;
  const Scalar _tmp127 = _tmp117 * _tmp17;
  const Scalar _tmp128 = _tmp104 * (-_tmp116 + _tmp118) + _tmp108 * (_tmp126 + _tmp127) +
                         _tmp114 * (_tmp125 + _tmp26) + _tmp120 * _tmp4;
  const Scalar _tmp129 = -2 * std::pow(_x0[0], Scalar(2));
  const Scalar _tmp130 = 1 - 2 * std::pow(_x0[1], Scalar(2));
  const Scalar _tmp131 = _tmp104 * (_tmp109 + _tmp113) + _tmp108 * (_tmp125 + _tmp25 + 1) +
                         _tmp114 * (-_tmp126 + _tmp127) + _tmp115 * _tmp119;
  const Scalar _tmp132 = _tmp0 * (_tmp121 * (_tmp2 + _tmp3) + _tmp128 * (-_tmp123 + _tmp124) +
                                  _tmp131 * (_tmp129 + _tmp130)) -
                         velocity(2, 0);
  const Scalar _tmp133 = _tmp122 * _x0[2];
  const Scalar _tmp134 = _tmp1 * _x0[1];
  const Scalar _tmp135 = -2 * std::pow(_x0[2], Scalar(2));
  const Scalar _tmp136 = _tmp0 * (_tmp121 * (-_tmp133 + _tmp134) + _tmp128 * (_tmp130 + _tmp135) +
                                  _tmp131 * (_tmp123 + _tmp124)) -
                         velocity(0, 0);
  const Scalar _tmp137 = _tmp0 * (_tmp121 * (_tmp129 + _tmp135 + 1) +
                                  _tmp128 * (_tmp133 + _tmp134) + _tmp131 * (-_tmp2 + _tmp3)) -
                         velocity(1, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp132 * sqrt_info(0, 2) + _tmp136 * sqrt_info(0, 0) + _tmp137 * sqrt_info(0, 1);
  _res(1, 0) = _tmp132 * sqrt_info(1, 2) + _tmp136 * sqrt_info(1, 0) + _tmp137 * sqrt_info(1, 1);
  _res(2, 0) = _tmp132 * sqrt_info(2, 2) + _tmp136 * sqrt_info(2, 0) + _tmp137 * sqrt_info(2, 1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
