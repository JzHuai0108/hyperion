// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_r2_sensor_between_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_s: Pose2
 *     s_T_y: Matrix21
 *     y: Pose2
 *     sqrt_info: Matrix22
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix21
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> Pose2R2SensorBetweenFactor(const sym::Pose2<Scalar>& x,
                                                       const sym::Pose2<Scalar>& x_T_s,
                                                       const Eigen::Matrix<Scalar, 2, 1>& s_T_y,
                                                       const sym::Pose2<Scalar>& y,
                                                       const Eigen::Matrix<Scalar, 2, 2>& sqrt_info,
                                                       const Scalar epsilon) {
  // Total ops: 36

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (6)
  const Scalar _tmp0 = _x[0] * _x_T_s[0] - _x[1] * _x_T_s[1];
  const Scalar _tmp1 = _x[0] * _x_T_s[3] + _x[1] * _x_T_s[2] + _x[3];
  const Scalar _tmp2 = _x[0] * _x_T_s[1] + _x[1] * _x_T_s[0];
  const Scalar _tmp3 = _x[0] * _x_T_s[2] - _x[1] * _x_T_s[3] + _x[2];
  const Scalar _tmp4 = -_tmp0 * _tmp1 + _tmp0 * _y[3] + _tmp2 * _tmp3 - _tmp2 * _y[2] - s_T_y(1, 0);
  const Scalar _tmp5 = -_tmp0 * _tmp3 + _tmp0 * _y[2] - _tmp1 * _tmp2 + _tmp2 * _y[3] - s_T_y(0, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) = _tmp4 * sqrt_info(0, 1) + _tmp5 * sqrt_info(0, 0);
  _res(1, 0) = _tmp4 * sqrt_info(1, 1) + _tmp5 * sqrt_info(1, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
