// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: rot3_between_factor
 *
 * Args:
 *     x: Rot3
 *     x_T_y: Rot3
 *     y: Rot3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x (4) (row-major)
 *     res_D_y: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg y (4) (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Rot3BetweenFactorWithJacobians02(
    const sym::Rot3<Scalar>& x, const sym::Rot3<Scalar>& x_T_y, const sym::Rot3<Scalar>& y,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 830

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_y = x_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (215)
  const Scalar _tmp0 = _x[3] * _y[3];
  const Scalar _tmp1 = _x[1] * _y[1];
  const Scalar _tmp2 = _x[0] * _y[0];
  const Scalar _tmp3 = _x[2] * _y[2];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _x[3] * _y[2];
  const Scalar _tmp6 = _x[1] * _y[0];
  const Scalar _tmp7 = _x[0] * _y[1];
  const Scalar _tmp8 = _x[2] * _y[3];
  const Scalar _tmp9 = _tmp5 + _tmp6 - _tmp7 - _tmp8;
  const Scalar _tmp10 = _x[3] * _y[1];
  const Scalar _tmp11 = _x[1] * _y[3];
  const Scalar _tmp12 = _x[0] * _y[2];
  const Scalar _tmp13 = _x[2] * _y[0];
  const Scalar _tmp14 = _tmp10 - _tmp11 + _tmp12 - _tmp13;
  const Scalar _tmp15 = _x[3] * _y[0];
  const Scalar _tmp16 = _x[1] * _y[2];
  const Scalar _tmp17 = _x[0] * _y[3];
  const Scalar _tmp18 = _x[2] * _y[1];
  const Scalar _tmp19 = _tmp15 - _tmp16 - _tmp17 + _tmp18;
  const Scalar _tmp20 =
      _tmp14 * _x_T_y[2] + _tmp19 * _x_T_y[3] - _tmp4 * _x_T_y[0] - _tmp9 * _x_T_y[1];
  const Scalar _tmp21 = _tmp9 * _x_T_y[2];
  const Scalar _tmp22 = _tmp14 * _x_T_y[1];
  const Scalar _tmp23 = _tmp19 * _x_T_y[0];
  const Scalar _tmp24 = -_tmp21 - _tmp22 - _tmp23;
  const Scalar _tmp25 = _tmp4 * _x_T_y[3];
  const Scalar _tmp26 =
      2 * std::min<Scalar>(0, (((-_tmp24 + _tmp25) > 0) - ((-_tmp24 + _tmp25) < 0))) + 1;
  const Scalar _tmp27 = 2 * _tmp26;
  const Scalar _tmp28 = 1 - epsilon;
  const Scalar _tmp29 = std::min<Scalar>(_tmp28, std::fabs(_tmp24 - _tmp25));
  const Scalar _tmp30 = std::acos(_tmp29) / std::sqrt(Scalar(1 - std::pow(_tmp29, Scalar(2))));
  const Scalar _tmp31 = _tmp27 * _tmp30;
  const Scalar _tmp32 = _tmp20 * _tmp31;
  const Scalar _tmp33 =
      _tmp14 * _x_T_y[3] - _tmp19 * _x_T_y[2] - _tmp4 * _x_T_y[1] + _tmp9 * _x_T_y[0];
  const Scalar _tmp34 = _tmp27 * sqrt_info(0, 1);
  const Scalar _tmp35 =
      -_tmp14 * _x_T_y[0] + _tmp19 * _x_T_y[1] - _tmp4 * _x_T_y[2] + _tmp9 * _x_T_y[3];
  const Scalar _tmp36 = _tmp31 * _tmp35;
  const Scalar _tmp37 = _tmp31 * _tmp33;
  const Scalar _tmp38 = _tmp35 * sqrt_info(2, 2);
  const Scalar _tmp39 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp40 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp41 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp43 = _tmp39 - _tmp40 - _tmp41 + _tmp42;
  const Scalar _tmp44 = _tmp43 * _x_T_y[3];
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp46 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp49 = -_tmp45 - _tmp46 - _tmp47 - _tmp48;
  const Scalar _tmp50 = _tmp49 * _x_T_y[0];
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp52 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp55 = _tmp51 + _tmp52 - _tmp53 - _tmp54;
  const Scalar _tmp56 = _tmp55 * _x_T_y[1];
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp61 = -_tmp57 + _tmp58 - _tmp59 + _tmp60;
  const Scalar _tmp62 = _tmp61 * _x_T_y[2];
  const Scalar _tmp63 = _tmp56 + _tmp62;
  const Scalar _tmp64 = _tmp44 + _tmp50 + _tmp63;
  const Scalar _tmp65 = _tmp21 + _tmp22 + _tmp23 + _tmp25;
  const Scalar _tmp66 = std::fabs(_tmp65);
  const Scalar _tmp67 = std::min<Scalar>(_tmp28, _tmp66);
  const Scalar _tmp68 = std::acos(_tmp67);
  const Scalar _tmp69 = 1 - std::pow(_tmp67, Scalar(2));
  const Scalar _tmp70 = _tmp26 * ((((_tmp28 - _tmp66) > 0) - ((_tmp28 - _tmp66) < 0)) + 1) *
                        (((_tmp65) > 0) - ((_tmp65) < 0));
  const Scalar _tmp71 = _tmp67 * _tmp68 * _tmp70 / (_tmp69 * std::sqrt(_tmp69));
  const Scalar _tmp72 = _tmp20 * _tmp71;
  const Scalar _tmp73 = _tmp64 * _tmp72;
  const Scalar _tmp74 = _tmp35 * sqrt_info(0, 2);
  const Scalar _tmp75 = _tmp70 / _tmp69;
  const Scalar _tmp76 = _tmp64 * _tmp75;
  const Scalar _tmp77 = _tmp33 * sqrt_info(0, 1);
  const Scalar _tmp78 = _tmp71 * _tmp77;
  const Scalar _tmp79 = _tmp49 * _x_T_y[1];
  const Scalar _tmp80 = _tmp43 * _x_T_y[2];
  const Scalar _tmp81 = -_tmp55 * _x_T_y[0];
  const Scalar _tmp82 = _tmp61 * _x_T_y[3];
  const Scalar _tmp83 = _tmp81 + _tmp82;
  const Scalar _tmp84 = _tmp79 - _tmp80 + _tmp83;
  const Scalar _tmp85 = _tmp68 / std::sqrt(_tmp69);
  const Scalar _tmp86 = _tmp27 * _tmp85;
  const Scalar _tmp87 = _tmp84 * _tmp86;
  const Scalar _tmp88 = _tmp64 * _tmp71;
  const Scalar _tmp89 = -_tmp43 * _x_T_y[1];
  const Scalar _tmp90 = _tmp49 * _x_T_y[2];
  const Scalar _tmp91 = _tmp55 * _x_T_y[3];
  const Scalar _tmp92 = _tmp61 * _x_T_y[0];
  const Scalar _tmp93 = _tmp91 + _tmp92;
  const Scalar _tmp94 = _tmp89 - _tmp90 + _tmp93;
  const Scalar _tmp95 = _tmp34 * _tmp85;
  const Scalar _tmp96 = _tmp20 * _tmp75;
  const Scalar _tmp97 = _tmp64 * _tmp96;
  const Scalar _tmp98 = _tmp49 * _x_T_y[3];
  const Scalar _tmp99 = _tmp43 * _x_T_y[0];
  const Scalar _tmp100 = _tmp55 * _x_T_y[2];
  const Scalar _tmp101 = -_tmp61 * _x_T_y[1];
  const Scalar _tmp102 = _tmp100 + _tmp101;
  const Scalar _tmp103 = _tmp86 * (_tmp102 + _tmp98 - _tmp99);
  const Scalar _tmp104 = _tmp103 * sqrt_info(0, 0) + _tmp64 * _tmp78 + _tmp73 * sqrt_info(0, 0) -
                         _tmp74 * _tmp76 + _tmp74 * _tmp88 - _tmp76 * _tmp77 +
                         _tmp87 * sqrt_info(0, 2) + _tmp94 * _tmp95 - _tmp97 * sqrt_info(0, 0);
  const Scalar _tmp105 = 2 * _x[3];
  const Scalar _tmp106 = _tmp57 - _tmp58 + _tmp59 - _tmp60;
  const Scalar _tmp107 = -_tmp106 * _x_T_y[2];
  const Scalar _tmp108 = -_tmp39 + _tmp40 + _tmp41 - _tmp42;
  const Scalar _tmp109 = _tmp108 * _x_T_y[3];
  const Scalar _tmp110 = _tmp107 + _tmp109 + _tmp50 - _tmp56;
  const Scalar _tmp111 = _tmp106 * _x_T_y[0];
  const Scalar _tmp112 = _tmp108 * _x_T_y[1];
  const Scalar _tmp113 = _tmp111 + _tmp112;
  const Scalar _tmp114 = _tmp113 + _tmp90 + _tmp91;
  const Scalar _tmp115 = _tmp114 * _tmp96;
  const Scalar _tmp116 = _tmp106 * _x_T_y[1];
  const Scalar _tmp117 = -_tmp108 * _x_T_y[0];
  const Scalar _tmp118 = -_tmp100 + _tmp116 + _tmp117 + _tmp98;
  const Scalar _tmp119 = _tmp86 * sqrt_info(0, 2);
  const Scalar _tmp120 = _tmp114 * _tmp72;
  const Scalar _tmp121 = _tmp114 * _tmp75;
  const Scalar _tmp122 = _tmp114 * _tmp71;
  const Scalar _tmp123 = _tmp106 * _x_T_y[3];
  const Scalar _tmp124 = _tmp108 * _x_T_y[2];
  const Scalar _tmp125 = _tmp123 + _tmp124;
  const Scalar _tmp126 = _tmp86 * (_tmp125 - _tmp79 + _tmp81);
  const Scalar _tmp127 = _tmp110 * _tmp95 + _tmp114 * _tmp78 - _tmp115 * sqrt_info(0, 0) +
                         _tmp118 * _tmp119 + _tmp120 * sqrt_info(0, 0) - _tmp121 * _tmp74 -
                         _tmp121 * _tmp77 + _tmp122 * _tmp74 + _tmp126 * sqrt_info(0, 0);
  const Scalar _tmp128 = 2 * _tmp127;
  const Scalar _tmp129 = -_tmp51 - _tmp52 + _tmp53 + _tmp54;
  const Scalar _tmp130 = _tmp129 * _x_T_y[0];
  const Scalar _tmp131 = _tmp130 + _tmp80;
  const Scalar _tmp132 = _tmp123 + _tmp131 + _tmp79;
  const Scalar _tmp133 = _tmp132 * _tmp71;
  const Scalar _tmp134 = _tmp132 * _tmp75;
  const Scalar _tmp135 = _tmp134 * _tmp20;
  const Scalar _tmp136 = _tmp132 * _tmp72;
  const Scalar _tmp137 = _tmp129 * _x_T_y[1];
  const Scalar _tmp138 = _tmp137 + _tmp44;
  const Scalar _tmp139 = _tmp107 + _tmp138 - _tmp50;
  const Scalar _tmp140 = _tmp129 * _x_T_y[3];
  const Scalar _tmp141 = _tmp140 + _tmp89;
  const Scalar _tmp142 = _tmp86 * (-_tmp111 + _tmp141 + _tmp90);
  const Scalar _tmp143 = -_tmp129 * _x_T_y[2];
  const Scalar _tmp144 = _tmp143 + _tmp99;
  const Scalar _tmp145 = _tmp85 * (-_tmp116 + _tmp144 + _tmp98);
  const Scalar _tmp146 = _tmp119 * _tmp139 + _tmp132 * _tmp78 + _tmp133 * _tmp74 -
                         _tmp134 * _tmp74 - _tmp134 * _tmp77 - _tmp135 * sqrt_info(0, 0) +
                         _tmp136 * sqrt_info(0, 0) + _tmp142 * sqrt_info(0, 0) + _tmp145 * _tmp34;
  const Scalar _tmp147 = 2 * _x[2];
  const Scalar _tmp148 = _tmp35 * sqrt_info(1, 2);
  const Scalar _tmp149 = _tmp33 * sqrt_info(1, 1);
  const Scalar _tmp150 = _tmp86 * sqrt_info(1, 2);
  const Scalar _tmp151 = _tmp86 * _tmp94;
  const Scalar _tmp152 = _tmp103 * sqrt_info(1, 0) - _tmp148 * _tmp76 + _tmp148 * _tmp88 -
                         _tmp149 * _tmp76 + _tmp149 * _tmp88 + _tmp150 * _tmp84 +
                         _tmp151 * sqrt_info(1, 1) + _tmp73 * sqrt_info(1, 0) -
                         _tmp97 * sqrt_info(1, 0);
  const Scalar _tmp153 = _tmp110 * _tmp86;
  const Scalar _tmp154 = -_tmp115 * sqrt_info(1, 0) + _tmp118 * _tmp150 +
                         _tmp120 * sqrt_info(1, 0) - _tmp121 * _tmp148 - _tmp121 * _tmp149 +
                         _tmp122 * _tmp148 + _tmp122 * _tmp149 + _tmp126 * sqrt_info(1, 0) +
                         _tmp153 * sqrt_info(1, 1);
  const Scalar _tmp155 = 2 * _tmp154;
  const Scalar _tmp156 = _tmp145 * _tmp27;
  const Scalar _tmp157 = _tmp133 * _tmp148 + _tmp133 * _tmp149 - _tmp134 * _tmp148 -
                         _tmp134 * _tmp149 - _tmp135 * sqrt_info(1, 0) + _tmp136 * sqrt_info(1, 0) +
                         _tmp139 * _tmp150 + _tmp142 * sqrt_info(1, 0) + _tmp156 * sqrt_info(1, 1);
  const Scalar _tmp158 = _tmp33 * sqrt_info(2, 1);
  const Scalar _tmp159 = _tmp103 * sqrt_info(2, 0) + _tmp151 * sqrt_info(2, 1) - _tmp158 * _tmp76 +
                         _tmp158 * _tmp88 - _tmp38 * _tmp76 + _tmp38 * _tmp88 +
                         _tmp73 * sqrt_info(2, 0) + _tmp87 * sqrt_info(2, 2) -
                         _tmp97 * sqrt_info(2, 0);
  const Scalar _tmp160 = _tmp86 * sqrt_info(2, 2);
  const Scalar _tmp161 = -_tmp115 * sqrt_info(2, 0) + _tmp118 * _tmp160 +
                         _tmp120 * sqrt_info(2, 0) - _tmp121 * _tmp158 - _tmp121 * _tmp38 +
                         _tmp122 * _tmp158 + _tmp122 * _tmp38 + _tmp126 * sqrt_info(2, 0) +
                         _tmp153 * sqrt_info(2, 1);
  const Scalar _tmp162 = 2 * _tmp161;
  const Scalar _tmp163 = _tmp133 * _tmp158 + _tmp133 * _tmp38 - _tmp134 * _tmp158 -
                         _tmp134 * _tmp38 - _tmp135 * sqrt_info(2, 0) + _tmp136 * sqrt_info(2, 0) +
                         _tmp139 * _tmp160 + _tmp142 * sqrt_info(2, 0) + _tmp156 * sqrt_info(2, 1);
  const Scalar _tmp164 = 2 * _tmp104;
  const Scalar _tmp165 = 2 * _x[0];
  const Scalar _tmp166 = 2 * _tmp152;
  const Scalar _tmp167 = 2 * _tmp159;
  const Scalar _tmp168 = 2 * _x[1];
  const Scalar _tmp169 = _tmp45 + _tmp46 + _tmp47 + _tmp48;
  const Scalar _tmp170 = _tmp169 * _x_T_y[0];
  const Scalar _tmp171 = _tmp109 + _tmp170;
  const Scalar _tmp172 = _tmp171 + _tmp63;
  const Scalar _tmp173 = _tmp172 * _tmp75;
  const Scalar _tmp174 = _tmp173 * _tmp20;
  const Scalar _tmp175 = _tmp172 * _tmp72;
  const Scalar _tmp176 = _tmp172 * _tmp71;
  const Scalar _tmp177 = _tmp169 * _x_T_y[2];
  const Scalar _tmp178 = -_tmp112 - _tmp177 + _tmp93;
  const Scalar _tmp179 = _tmp169 * _x_T_y[3];
  const Scalar _tmp180 = _tmp117 + _tmp179;
  const Scalar _tmp181 = _tmp86 * (_tmp102 + _tmp180);
  const Scalar _tmp182 = _tmp169 * _x_T_y[1];
  const Scalar _tmp183 = -_tmp124 + _tmp182 + _tmp83;
  const Scalar _tmp184 = _tmp183 * _tmp86;
  const Scalar _tmp185 = 2 * _tmp172 * _tmp78 - 2 * _tmp173 * _tmp74 - 2 * _tmp173 * _tmp77 -
                         2 * _tmp174 * sqrt_info(0, 0) + 2 * _tmp175 * sqrt_info(0, 0) +
                         2 * _tmp176 * _tmp74 + 2 * _tmp178 * _tmp95 +
                         2 * _tmp181 * sqrt_info(0, 0) + 2 * _tmp184 * sqrt_info(0, 2);
  const Scalar _tmp186 = _tmp131 + _tmp182 + _tmp82;
  const Scalar _tmp187 = _tmp186 * _tmp71;
  const Scalar _tmp188 = _tmp86 * (_tmp141 + _tmp177 - _tmp92);
  const Scalar _tmp189 = _tmp138 - _tmp170 - _tmp62;
  const Scalar _tmp190 = _tmp189 * _tmp86;
  const Scalar _tmp191 = _tmp186 * _tmp72;
  const Scalar _tmp192 = _tmp186 * _tmp75;
  const Scalar _tmp193 = _tmp101 + _tmp144 + _tmp179;
  const Scalar _tmp194 = _tmp186 * _tmp96;
  const Scalar _tmp195 =
      2 * _tmp186 * _tmp78 + 2 * _tmp187 * _tmp74 + 2 * _tmp188 * sqrt_info(0, 0) +
      2 * _tmp190 * sqrt_info(0, 2) + 2 * _tmp191 * sqrt_info(0, 0) - 2 * _tmp192 * _tmp74 -
      2 * _tmp192 * _tmp77 + 2 * _tmp193 * _tmp95 - 2 * _tmp194 * sqrt_info(0, 0);
  const Scalar _tmp196 = _tmp113 + _tmp140 + _tmp177;
  const Scalar _tmp197 = _tmp196 * _tmp96;
  const Scalar _tmp198 = _tmp86 * (_tmp125 - _tmp130 - _tmp182);
  const Scalar _tmp199 = _tmp196 * _tmp71;
  const Scalar _tmp200 = _tmp116 + _tmp143 + _tmp180;
  const Scalar _tmp201 = _tmp200 * _tmp86;
  const Scalar _tmp202 = _tmp196 * _tmp75;
  const Scalar _tmp203 = _tmp196 * _tmp72;
  const Scalar _tmp204 = _tmp107 - _tmp137 + _tmp171;
  const Scalar _tmp205 =
      2 * _tmp196 * _tmp78 - 2 * _tmp197 * sqrt_info(0, 0) + 2 * _tmp198 * sqrt_info(0, 0) +
      2 * _tmp199 * _tmp74 + 2 * _tmp201 * sqrt_info(0, 2) - 2 * _tmp202 * _tmp74 -
      2 * _tmp202 * _tmp77 + 2 * _tmp203 * sqrt_info(0, 0) + 2 * _tmp204 * _tmp95;
  const Scalar _tmp206 = _tmp178 * _tmp86;
  const Scalar _tmp207 = -2 * _tmp148 * _tmp173 + 2 * _tmp148 * _tmp176 - 2 * _tmp149 * _tmp173 +
                         2 * _tmp149 * _tmp176 + 2 * _tmp150 * _tmp183 -
                         2 * _tmp174 * sqrt_info(1, 0) + 2 * _tmp175 * sqrt_info(1, 0) +
                         2 * _tmp181 * sqrt_info(1, 0) + 2 * _tmp206 * sqrt_info(1, 1);
  const Scalar _tmp208 = _tmp193 * _tmp86;
  const Scalar _tmp209 = 2 * _tmp148 * _tmp187 - 2 * _tmp148 * _tmp192 + 2 * _tmp149 * _tmp187 -
                         2 * _tmp149 * _tmp192 + 2 * _tmp150 * _tmp189 +
                         2 * _tmp188 * sqrt_info(1, 0) + 2 * _tmp191 * sqrt_info(1, 0) -
                         2 * _tmp194 * sqrt_info(1, 0) + 2 * _tmp208 * sqrt_info(1, 1);
  const Scalar _tmp210 = _tmp204 * _tmp86;
  const Scalar _tmp211 = 2 * _tmp148 * _tmp199 - 2 * _tmp148 * _tmp202 + 2 * _tmp149 * _tmp199 -
                         2 * _tmp149 * _tmp202 + 2 * _tmp150 * _tmp200 -
                         2 * _tmp197 * sqrt_info(1, 0) + 2 * _tmp198 * sqrt_info(1, 0) +
                         2 * _tmp203 * sqrt_info(1, 0) + 2 * _tmp210 * sqrt_info(1, 1);
  const Scalar _tmp212 = -2 * _tmp158 * _tmp173 + 2 * _tmp158 * _tmp176 - 2 * _tmp173 * _tmp38 -
                         2 * _tmp174 * sqrt_info(2, 0) + 2 * _tmp175 * sqrt_info(2, 0) +
                         2 * _tmp176 * _tmp38 + 2 * _tmp181 * sqrt_info(2, 0) +
                         2 * _tmp184 * sqrt_info(2, 2) + 2 * _tmp206 * sqrt_info(2, 1);
  const Scalar _tmp213 = 2 * _tmp158 * _tmp187 - 2 * _tmp158 * _tmp192 + 2 * _tmp187 * _tmp38 +
                         2 * _tmp188 * sqrt_info(2, 0) + 2 * _tmp190 * sqrt_info(2, 2) +
                         2 * _tmp191 * sqrt_info(2, 0) - 2 * _tmp192 * _tmp38 -
                         2 * _tmp194 * sqrt_info(2, 0) + 2 * _tmp208 * sqrt_info(2, 1);
  const Scalar _tmp214 =
      2 * _tmp158 * _tmp199 - 2 * _tmp158 * _tmp202 - 2 * _tmp197 * sqrt_info(2, 0) +
      2 * _tmp198 * sqrt_info(2, 0) + 2 * _tmp199 * _tmp38 + 2 * _tmp201 * sqrt_info(2, 2) -
      2 * _tmp202 * _tmp38 + 2 * _tmp203 * sqrt_info(2, 0) + 2 * _tmp210 * sqrt_info(2, 1);

  // Output terms (3)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp30 * _tmp33 * _tmp34 + _tmp32 * sqrt_info(0, 0) + _tmp36 * sqrt_info(0, 2);
  _res(1, 0) = _tmp32 * sqrt_info(1, 0) + _tmp36 * sqrt_info(1, 2) + _tmp37 * sqrt_info(1, 1);
  _res(2, 0) = _tmp31 * _tmp38 + _tmp32 * sqrt_info(2, 0) + _tmp37 * sqrt_info(2, 1);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp104 * _tmp105 + _tmp128 * _x[1] - _tmp146 * _tmp147;
    _res_D_x(1, 0) = _tmp105 * _tmp152 - _tmp147 * _tmp157 + _tmp155 * _x[1];
    _res_D_x(2, 0) = _tmp105 * _tmp159 - _tmp147 * _tmp163 + _tmp162 * _x[1];
    _res_D_x(0, 1) = _tmp104 * _tmp147 + _tmp105 * _tmp146 - _tmp128 * _x[0];
    _res_D_x(1, 1) = _tmp105 * _tmp157 + _tmp147 * _tmp152 - _tmp155 * _x[0];
    _res_D_x(2, 1) = _tmp105 * _tmp163 + _tmp147 * _tmp159 - _tmp162 * _x[0];
    _res_D_x(0, 2) = _tmp105 * _tmp127 + _tmp146 * _tmp165 - _tmp164 * _x[1];
    _res_D_x(1, 2) = _tmp105 * _tmp154 + _tmp157 * _tmp165 - _tmp166 * _x[1];
    _res_D_x(2, 2) = _tmp105 * _tmp161 + _tmp163 * _tmp165 - _tmp167 * _x[1];
    _res_D_x(0, 3) = -_tmp127 * _tmp147 - _tmp146 * _tmp168 - _tmp164 * _x[0];
    _res_D_x(1, 3) = -_tmp147 * _tmp154 - _tmp157 * _tmp168 - _tmp166 * _x[0];
    _res_D_x(2, 3) = -_tmp147 * _tmp161 - _tmp163 * _tmp168 - _tmp167 * _x[0];
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp185 * _y[3] - _tmp195 * _y[2] + _tmp205 * _y[1];
    _res_D_y(1, 0) = _tmp207 * _y[3] - _tmp209 * _y[2] + _tmp211 * _y[1];
    _res_D_y(2, 0) = _tmp212 * _y[3] - _tmp213 * _y[2] + _tmp214 * _y[1];
    _res_D_y(0, 1) = _tmp185 * _y[2] + _tmp195 * _y[3] - _tmp205 * _y[0];
    _res_D_y(1, 1) = _tmp207 * _y[2] + _tmp209 * _y[3] - _tmp211 * _y[0];
    _res_D_y(2, 1) = _tmp212 * _y[2] + _tmp213 * _y[3] - _tmp214 * _y[0];
    _res_D_y(0, 2) = -_tmp185 * _y[1] + _tmp195 * _y[0] + _tmp205 * _y[3];
    _res_D_y(1, 2) = -_tmp207 * _y[1] + _tmp209 * _y[0] + _tmp211 * _y[3];
    _res_D_y(2, 2) = -_tmp212 * _y[1] + _tmp213 * _y[0] + _tmp214 * _y[3];
    _res_D_y(0, 3) = -_tmp185 * _y[0] - _tmp195 * _y[1] - _tmp205 * _y[2];
    _res_D_y(1, 3) = -_tmp207 * _y[0] - _tmp209 * _y[1] - _tmp211 * _y[2];
    _res_D_y(2, 3) = -_tmp212 * _y[0] - _tmp213 * _y[1] - _tmp214 * _y[2];
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
