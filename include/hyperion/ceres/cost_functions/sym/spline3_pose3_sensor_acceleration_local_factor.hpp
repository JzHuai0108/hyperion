// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose3_sensor_acceleration_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix33
 *     x0: Pose3
 *     x1: Pose3
 *     x2: Pose3
 *     x3: Pose3
 *     x_T_s: Pose3
 *     acceleration: Matrix61
 *     sqrt_info: Matrix66
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Spline3Pose3SensorAccelerationLocalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 3>& lambdas, const sym::Pose3<Scalar>& x0,
    const sym::Pose3<Scalar>& x1, const sym::Pose3<Scalar>& x2, const sym::Pose3<Scalar>& x3,
    const sym::Pose3<Scalar>& x_T_s, const Eigen::Matrix<Scalar, 6, 1>& acceleration,
    const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon) {
  // Total ops: 787

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_s = x_T_s.Data();

  // Intermediate terms (229)
  const Scalar _tmp0 = 2 * _x_T_s[1];
  const Scalar _tmp1 = _tmp0 * _x_T_s[3];
  const Scalar _tmp2 = 2 * _x_T_s[2];
  const Scalar _tmp3 = _tmp2 * _x_T_s[0];
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = std::pow(dt, Scalar(-2));
  const Scalar _tmp6 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp7 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp8 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp9 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp10 = _x0[3] * _x1[3];
  const Scalar _tmp11 =
      2 * std::min<Scalar>(0, (((_tmp10 - _tmp9) > 0) - ((_tmp10 - _tmp9) < 0))) + 1;
  const Scalar _tmp12 = 1 - epsilon;
  const Scalar _tmp13 = std::min<Scalar>(_tmp12, std::fabs(_tmp10 - _tmp9));
  const Scalar _tmp14 = std::acos(_tmp13);
  const Scalar _tmp15 = 1 - std::pow(_tmp13, Scalar(2));
  const Scalar _tmp16 = 4 * std::pow(_tmp11, Scalar(2)) * std::pow(_tmp14, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp15;
  const Scalar _tmp17 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp18 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp19 =
      std::sqrt(Scalar(_tmp16 * std::pow(_tmp17, Scalar(2)) + _tmp16 * std::pow(_tmp7, Scalar(2)) +
                       _tmp16 * std::pow(_tmp8, Scalar(2)) + _tmp18));
  const Scalar _tmp20 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp21 = 2 * _tmp11 * _tmp14 / std::sqrt(_tmp15);
  const Scalar _tmp22 = _tmp21 * lambdas(0, 0) * std::sin(_tmp20) / _tmp19;
  const Scalar _tmp23 = _tmp22 * _tmp7;
  const Scalar _tmp24 = std::cos(_tmp20);
  const Scalar _tmp25 = _tmp22 * _tmp8;
  const Scalar _tmp26 = _tmp17 * _tmp22;
  const Scalar _tmp27 = _tmp23 * _x0[0] + _tmp24 * _x0[2] - _tmp25 * _x0[1] + _tmp26 * _x0[3];
  const Scalar _tmp28 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp29 = _x1[3] * _x2[3];
  const Scalar _tmp30 = std::min<Scalar>(_tmp12, std::fabs(_tmp28 - _tmp29));
  const Scalar _tmp31 = 1 - std::pow(_tmp30, Scalar(2));
  const Scalar _tmp32 =
      2 * std::min<Scalar>(0, (((-_tmp28 + _tmp29) > 0) - ((-_tmp28 + _tmp29) < 0))) + 1;
  const Scalar _tmp33 = std::acos(_tmp30);
  const Scalar _tmp34 = _tmp32 * _tmp33 / std::sqrt(_tmp31);
  const Scalar _tmp35 = 2 * _tmp34;
  const Scalar _tmp36 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp37 = std::pow(_tmp32, Scalar(2)) * std::pow(_tmp33, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp31;
  const Scalar _tmp38 = 4 * _tmp37;
  const Scalar _tmp39 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp40 = std::pow(_tmp39, Scalar(2));
  const Scalar _tmp41 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp42 = std::pow(_tmp41, Scalar(2));
  const Scalar _tmp43 = _tmp18 + _tmp36 * _tmp38 + _tmp38 * _tmp40 + _tmp38 * _tmp42;
  const Scalar _tmp44 = std::sqrt(_tmp43);
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp44;
  const Scalar _tmp46 = std::sin(_tmp45);
  const Scalar _tmp47 = _tmp46 * lambdas(1, 0) / _tmp44;
  const Scalar _tmp48 = _tmp35 * _tmp47;
  const Scalar _tmp49 = _tmp27 * _tmp48;
  const Scalar _tmp50 = -_tmp23 * _x0[2] + _tmp24 * _x0[0] + _tmp25 * _x0[3] + _tmp26 * _x0[1];
  const Scalar _tmp51 = _tmp48 * _tmp50;
  const Scalar _tmp52 = std::cos(_tmp45);
  const Scalar _tmp53 = _tmp23 * _x0[3] + _tmp24 * _x0[1] + _tmp25 * _x0[2] - _tmp26 * _x0[0];
  const Scalar _tmp54 = -_tmp23 * _x0[1] + _tmp24 * _x0[3] - _tmp25 * _x0[0] - _tmp26 * _x0[2];
  const Scalar _tmp55 = _tmp48 * _tmp54;
  const Scalar _tmp56 = -_tmp39 * _tmp51 + _tmp41 * _tmp55 + _tmp49 * _tmp6 + _tmp52 * _tmp53;
  const Scalar _tmp57 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp58 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp59 = _x2[3] * _x3[3];
  const Scalar _tmp60 = std::min<Scalar>(_tmp12, std::fabs(_tmp58 - _tmp59));
  const Scalar _tmp61 = 1 - std::pow(_tmp60, Scalar(2));
  const Scalar _tmp62 =
      2 * std::min<Scalar>(0, (((-_tmp58 + _tmp59) > 0) - ((-_tmp58 + _tmp59) < 0))) + 1;
  const Scalar _tmp63 = std::acos(_tmp60);
  const Scalar _tmp64 = _tmp62 * _tmp63 / std::sqrt(_tmp61);
  const Scalar _tmp65 = 2 * _tmp64;
  const Scalar _tmp66 = _tmp57 * _tmp65;
  const Scalar _tmp67 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp68 = std::pow(_tmp67, Scalar(2));
  const Scalar _tmp69 = std::pow(_tmp62, Scalar(2)) * std::pow(_tmp63, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp61;
  const Scalar _tmp70 = 4 * _tmp69;
  const Scalar _tmp71 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp72 = std::pow(_tmp71, Scalar(2));
  const Scalar _tmp73 = std::pow(_tmp57, Scalar(2));
  const Scalar _tmp74 = _tmp18 + _tmp68 * _tmp70 + _tmp70 * _tmp72 + _tmp70 * _tmp73;
  const Scalar _tmp75 = std::sqrt(_tmp74);
  const Scalar _tmp76 = (Scalar(1) / Scalar(2)) * _tmp75;
  const Scalar _tmp77 = std::sin(_tmp76);
  const Scalar _tmp78 = _tmp77 * lambdas(2, 0) / _tmp75;
  const Scalar _tmp79 = _tmp66 * _tmp78;
  const Scalar _tmp80 = std::cos(_tmp76);
  const Scalar _tmp81 = _tmp48 * _tmp53;
  const Scalar _tmp82 = _tmp39 * _tmp81 - _tmp41 * _tmp49 + _tmp50 * _tmp52 + _tmp55 * _tmp6;
  const Scalar _tmp83 = -_tmp39 * _tmp49 - _tmp41 * _tmp81 - _tmp51 * _tmp6 + _tmp52 * _tmp54;
  const Scalar _tmp84 = _tmp65 * _tmp71;
  const Scalar _tmp85 = _tmp78 * _tmp84;
  const Scalar _tmp86 = _tmp27 * _tmp52 + _tmp39 * _tmp55 + _tmp41 * _tmp51 - _tmp6 * _tmp81;
  const Scalar _tmp87 = _tmp65 * _tmp67;
  const Scalar _tmp88 = _tmp78 * _tmp87;
  const Scalar _tmp89 = _tmp56 * _tmp79 + _tmp80 * _tmp82 + _tmp83 * _tmp85 - _tmp86 * _tmp88;
  const Scalar _tmp90 = -_tmp56 * _tmp85 + _tmp79 * _tmp83 + _tmp80 * _tmp86 + _tmp82 * _tmp88;
  const Scalar _tmp91 = 2 * _tmp90;
  const Scalar _tmp92 = _tmp89 * _tmp91;
  const Scalar _tmp93 = _tmp56 * _tmp80 - _tmp79 * _tmp82 + _tmp83 * _tmp88 + _tmp85 * _tmp86;
  const Scalar _tmp94 =
      -2 * _tmp56 * _tmp88 - 2 * _tmp79 * _tmp86 + 2 * _tmp80 * _tmp83 - 2 * _tmp82 * _tmp85;
  const Scalar _tmp95 = _tmp93 * _tmp94;
  const Scalar _tmp96 = _tmp92 - _tmp95;
  const Scalar _tmp97 = -_x1[6] + _x2[6];
  const Scalar _tmp98 = -_x2[6] + _x3[6];
  const Scalar _tmp99 = -_x0[6] + _x1[6];
  const Scalar _tmp100 = _tmp97 * lambdas(1, 2) + _tmp98 * lambdas(2, 2) + _tmp99 * lambdas(0, 2);
  const Scalar _tmp101 = _tmp90 * _tmp94;
  const Scalar _tmp102 = 2 * _tmp89 * _tmp93;
  const Scalar _tmp103 = _tmp101 + _tmp102;
  const Scalar _tmp104 = -_x1[5] + _x2[5];
  const Scalar _tmp105 = -_x2[5] + _x3[5];
  const Scalar _tmp106 = -_x0[5] + _x1[5];
  const Scalar _tmp107 =
      _tmp104 * lambdas(1, 2) + _tmp105 * lambdas(2, 2) + _tmp106 * lambdas(0, 2);
  const Scalar _tmp108 = -_x1[4] + _x2[4];
  const Scalar _tmp109 = -_x2[4] + _x3[4];
  const Scalar _tmp110 = -_x0[4] + _x1[4];
  const Scalar _tmp111 =
      _tmp108 * lambdas(1, 2) + _tmp109 * lambdas(2, 2) + _tmp110 * lambdas(0, 2);
  const Scalar _tmp112 = -2 * std::pow(_tmp90, Scalar(2));
  const Scalar _tmp113 = 1 - 2 * std::pow(_tmp93, Scalar(2));
  const Scalar _tmp114 = _tmp112 + _tmp113;
  const Scalar _tmp115 = _tmp92 + _tmp95;
  const Scalar _tmp116 =
      _tmp108 * lambdas(1, 1) + _tmp109 * lambdas(2, 1) + _tmp110 * lambdas(0, 1);
  const Scalar _tmp117 = -2 * std::pow(_tmp89, Scalar(2));
  const Scalar _tmp118 = _tmp113 + _tmp117;
  const Scalar _tmp119 = _tmp97 * lambdas(1, 1) + _tmp98 * lambdas(2, 1) + _tmp99 * lambdas(0, 1);
  const Scalar _tmp120 = _tmp91 * _tmp93;
  const Scalar _tmp121 = _tmp89 * _tmp94;
  const Scalar _tmp122 = _tmp120 - _tmp121;
  const Scalar _tmp123 =
      _tmp104 * lambdas(1, 1) + _tmp105 * lambdas(2, 1) + _tmp106 * lambdas(0, 1);
  const Scalar _tmp124 = _tmp115 * _tmp116 + _tmp118 * _tmp119 + _tmp122 * _tmp123;
  const Scalar _tmp125 = _tmp87 * lambdas(2, 1);
  const Scalar _tmp126 = 4 * _tmp64 * _tmp78 * _tmp80;
  const Scalar _tmp127 = _tmp126 * _tmp71;
  const Scalar _tmp128 = 8 * _tmp69 * std::pow(_tmp77, Scalar(2)) / _tmp74;
  const Scalar _tmp129 = _tmp128 * _tmp57 * _tmp67;
  const Scalar _tmp130 = _tmp127 + _tmp129;
  const Scalar _tmp131 = _tmp35 * lambdas(1, 1);
  const Scalar _tmp132 = _tmp131 * _tmp39;
  const Scalar _tmp133 = 8 * _tmp37 * std::pow(_tmp46, Scalar(2)) / _tmp43;
  const Scalar _tmp134 = -_tmp133 * _tmp42;
  const Scalar _tmp135 = -_tmp133 * _tmp36;
  const Scalar _tmp136 = _tmp17 * (_tmp134 + _tmp135 + 1);
  const Scalar _tmp137 = _tmp21 * lambdas(0, 1);
  const Scalar _tmp138 = 4 * _tmp34 * _tmp47 * _tmp52;
  const Scalar _tmp139 = _tmp138 * _tmp41;
  const Scalar _tmp140 = _tmp133 * _tmp39 * _tmp6;
  const Scalar _tmp141 = _tmp8 * (_tmp139 + _tmp140);
  const Scalar _tmp142 = _tmp133 * _tmp41;
  const Scalar _tmp143 = _tmp142 * _tmp39;
  const Scalar _tmp144 = _tmp138 * _tmp6;
  const Scalar _tmp145 = _tmp143 - _tmp144;
  const Scalar _tmp146 = _tmp137 * _tmp7;
  const Scalar _tmp147 = _tmp136 * _tmp137 + _tmp137 * _tmp141 + _tmp145 * _tmp146;
  const Scalar _tmp148 = _tmp132 + _tmp147;
  const Scalar _tmp149 = _tmp131 * _tmp6;
  const Scalar _tmp150 = _tmp17 * (-_tmp139 + _tmp140);
  const Scalar _tmp151 = -_tmp133 * _tmp40 + 1;
  const Scalar _tmp152 = _tmp8 * (_tmp134 + _tmp151);
  const Scalar _tmp153 = _tmp142 * _tmp6;
  const Scalar _tmp154 = _tmp138 * _tmp39;
  const Scalar _tmp155 = _tmp153 + _tmp154;
  const Scalar _tmp156 = _tmp137 * _tmp150 + _tmp137 * _tmp152 + _tmp146 * _tmp155;
  const Scalar _tmp157 = _tmp149 + _tmp156;
  const Scalar _tmp158 = _tmp128 * _tmp71;
  const Scalar _tmp159 = _tmp158 * _tmp67;
  const Scalar _tmp160 = _tmp126 * _tmp57;
  const Scalar _tmp161 = _tmp159 - _tmp160;
  const Scalar _tmp162 = -_tmp128 * _tmp72;
  const Scalar _tmp163 = -_tmp128 * _tmp73 + 1;
  const Scalar _tmp164 = _tmp162 + _tmp163;
  const Scalar _tmp165 = _tmp131 * _tmp41;
  const Scalar _tmp166 = _tmp8 * (_tmp153 - _tmp154);
  const Scalar _tmp167 = _tmp17 * (_tmp143 + _tmp144);
  const Scalar _tmp168 = _tmp135 + _tmp151;
  const Scalar _tmp169 = _tmp137 * _tmp166 + _tmp137 * _tmp167 + _tmp146 * _tmp168;
  const Scalar _tmp170 = _tmp165 + _tmp169;
  const Scalar _tmp171 = _tmp130 * _tmp148 + _tmp157 * _tmp161 + _tmp164 * _tmp170;
  const Scalar _tmp172 = _tmp125 + _tmp171;
  const Scalar _tmp173 = _tmp66 * lambdas(2, 1);
  const Scalar _tmp174 = -_tmp127 + _tmp129;
  const Scalar _tmp175 = _tmp126 * _tmp67;
  const Scalar _tmp176 = _tmp158 * _tmp57;
  const Scalar _tmp177 = _tmp175 + _tmp176;
  const Scalar _tmp178 = -_tmp128 * _tmp68;
  const Scalar _tmp179 = _tmp162 + _tmp178 + 1;
  const Scalar _tmp180 = _tmp148 * _tmp179 + _tmp157 * _tmp177 + _tmp170 * _tmp174;
  const Scalar _tmp181 = _tmp173 + _tmp180;
  const Scalar _tmp182 = _tmp112 + _tmp117 + 1;
  const Scalar _tmp183 = -_tmp101 + _tmp102;
  const Scalar _tmp184 = _tmp120 + _tmp121;
  const Scalar _tmp185 = _tmp116 * _tmp183 + _tmp119 * _tmp184 + _tmp123 * _tmp182;
  const Scalar _tmp186 = _tmp5 * (_tmp100 * _tmp96 + _tmp103 * _tmp107 + _tmp111 * _tmp114 -
                                  _tmp124 * _tmp172 + _tmp181 * _tmp185);
  const Scalar _tmp187 = -2 * std::pow(_x_T_s[0], Scalar(2));
  const Scalar _tmp188 = 1 - 2 * std::pow(_x_T_s[2], Scalar(2));
  const Scalar _tmp189 = _tmp187 + _tmp188;
  const Scalar _tmp190 = -_tmp1 + _tmp3;
  const Scalar _tmp191 = _tmp0 * _x_T_s[0];
  const Scalar _tmp192 = _tmp2 * _x_T_s[3];
  const Scalar _tmp193 = _tmp191 + _tmp192;
  const Scalar _tmp194 = -2 * std::pow(_x_T_s[1], Scalar(2));
  const Scalar _tmp195 = _tmp188 + _tmp194;
  const Scalar _tmp196 = _tmp190 * _x_T_s[6] + _tmp193 * _x_T_s[5] + _tmp195 * _x_T_s[4];
  const Scalar _tmp197 = _tmp191 - _tmp192;
  const Scalar _tmp198 = _tmp0 * _x_T_s[2];
  const Scalar _tmp199 = 2 * _x_T_s[0] * _x_T_s[3];
  const Scalar _tmp200 = _tmp198 + _tmp199;
  const Scalar _tmp201 = _tmp189 * _x_T_s[5] + _tmp197 * _x_T_s[4] + _tmp200 * _x_T_s[6];
  const Scalar _tmp202 = _tmp84 * lambdas(2, 1);
  const Scalar _tmp203 = _tmp21 * lambdas(0, 2);
  const Scalar _tmp204 = _tmp35 * lambdas(1, 2);
  const Scalar _tmp205 = _tmp203 * _tmp7;
  const Scalar _tmp206 = _tmp132 * _tmp169 - _tmp147 * _tmp165 + _tmp150 * _tmp203 +
                         _tmp152 * _tmp203 + _tmp155 * _tmp205 + _tmp204 * _tmp6;
  const Scalar _tmp207 = _tmp159 + _tmp160;
  const Scalar _tmp208 = _tmp163 + _tmp178;
  const Scalar _tmp209 = -_tmp175 + _tmp176;
  const Scalar _tmp210 = _tmp148 * _tmp209 + _tmp157 * _tmp208 + _tmp170 * _tmp207;
  const Scalar _tmp211 = -_tmp132 * _tmp156 + _tmp147 * _tmp149 + _tmp166 * _tmp203 +
                         _tmp167 * _tmp203 + _tmp168 * _tmp205 + _tmp204 * _tmp41;
  const Scalar _tmp212 = _tmp136 * _tmp203 + _tmp141 * _tmp203 + _tmp145 * _tmp205 -
                         _tmp149 * _tmp169 + _tmp156 * _tmp165 + _tmp204 * _tmp39;
  const Scalar _tmp213 = _tmp5 * (_tmp130 * _tmp212 + _tmp161 * _tmp206 + _tmp164 * _tmp211 -
                                  _tmp173 * _tmp210 + _tmp180 * _tmp202 + _tmp87 * lambdas(2, 2));
  const Scalar _tmp214 = _tmp198 - _tmp199;
  const Scalar _tmp215 = _tmp103 * _tmp123 + _tmp114 * _tmp116 + _tmp119 * _tmp96;
  const Scalar _tmp216 = _tmp202 + _tmp210;
  const Scalar _tmp217 = _tmp5 * (_tmp100 * _tmp184 + _tmp107 * _tmp182 + _tmp111 * _tmp183 +
                                  _tmp124 * _tmp216 - _tmp181 * _tmp215);
  const Scalar _tmp218 = _tmp5 * (_tmp125 * _tmp210 - _tmp171 * _tmp202 + _tmp174 * _tmp211 +
                                  _tmp177 * _tmp206 + _tmp179 * _tmp212 + _tmp66 * lambdas(2, 2));
  const Scalar _tmp219 = _tmp187 + _tmp194 + 1;
  const Scalar _tmp220 = _tmp5 * (_tmp100 * _tmp118 + _tmp107 * _tmp122 + _tmp111 * _tmp115 +
                                  _tmp172 * _tmp215 - _tmp185 * _tmp216);
  const Scalar _tmp221 = _tmp5 * (-_tmp125 * _tmp180 + _tmp171 * _tmp173 + _tmp206 * _tmp208 +
                                  _tmp207 * _tmp211 + _tmp209 * _tmp212 + _tmp84 * lambdas(2, 2));
  const Scalar _tmp222 = _tmp186 * _tmp4 + _tmp213 * (-_tmp189 * _tmp196 + _tmp193 * _tmp201) +
                         _tmp214 * _tmp217 + _tmp218 * (_tmp190 * _tmp201 - _tmp196 * _tmp200) +
                         _tmp219 * _tmp220 + _tmp221 * (_tmp195 * _tmp201 - _tmp196 * _tmp197) -
                         acceleration(5, 0);
  const Scalar _tmp223 =
      _tmp190 * _tmp218 + _tmp193 * _tmp213 + _tmp195 * _tmp221 - acceleration(0, 0);
  const Scalar _tmp224 = _tmp214 * _x_T_s[5] + _tmp219 * _x_T_s[6] + _tmp4 * _x_T_s[4];
  const Scalar _tmp225 = _tmp186 * _tmp195 + _tmp190 * _tmp220 + _tmp193 * _tmp217 +
                         _tmp213 * (_tmp189 * _tmp224 - _tmp201 * _tmp214) +
                         _tmp218 * (_tmp200 * _tmp224 - _tmp201 * _tmp219) +
                         _tmp221 * (_tmp197 * _tmp224 - _tmp201 * _tmp4) - acceleration(3, 0);
  const Scalar _tmp226 = _tmp186 * _tmp197 + _tmp189 * _tmp217 + _tmp200 * _tmp220 +
                         _tmp213 * (-_tmp193 * _tmp224 + _tmp196 * _tmp214) +
                         _tmp218 * (-_tmp190 * _tmp224 + _tmp196 * _tmp219) +
                         _tmp221 * (-_tmp195 * _tmp224 + _tmp196 * _tmp4) - acceleration(4, 0);
  const Scalar _tmp227 =
      _tmp213 * _tmp214 + _tmp218 * _tmp219 + _tmp221 * _tmp4 - acceleration(2, 0);
  const Scalar _tmp228 =
      _tmp189 * _tmp213 + _tmp197 * _tmp221 + _tmp200 * _tmp218 - acceleration(1, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp222 * sqrt_info(0, 5) + _tmp223 * sqrt_info(0, 0) + _tmp225 * sqrt_info(0, 3) +
               _tmp226 * sqrt_info(0, 4) + _tmp227 * sqrt_info(0, 2) + _tmp228 * sqrt_info(0, 1);
  _res(1, 0) = _tmp222 * sqrt_info(1, 5) + _tmp223 * sqrt_info(1, 0) + _tmp225 * sqrt_info(1, 3) +
               _tmp226 * sqrt_info(1, 4) + _tmp227 * sqrt_info(1, 2) + _tmp228 * sqrt_info(1, 1);
  _res(2, 0) = _tmp222 * sqrt_info(2, 5) + _tmp223 * sqrt_info(2, 0) + _tmp225 * sqrt_info(2, 3) +
               _tmp226 * sqrt_info(2, 4) + _tmp227 * sqrt_info(2, 2) + _tmp228 * sqrt_info(2, 1);
  _res(3, 0) = _tmp222 * sqrt_info(3, 5) + _tmp223 * sqrt_info(3, 0) + _tmp225 * sqrt_info(3, 3) +
               _tmp226 * sqrt_info(3, 4) + _tmp227 * sqrt_info(3, 2) + _tmp228 * sqrt_info(3, 1);
  _res(4, 0) = _tmp222 * sqrt_info(4, 5) + _tmp223 * sqrt_info(4, 0) + _tmp225 * sqrt_info(4, 3) +
               _tmp226 * sqrt_info(4, 4) + _tmp227 * sqrt_info(4, 2) + _tmp228 * sqrt_info(4, 1);
  _res(5, 0) = _tmp222 * sqrt_info(5, 5) + _tmp223 * sqrt_info(5, 0) + _tmp225 * sqrt_info(5, 3) +
               _tmp226 * sqrt_info(5, 4) + _tmp227 * sqrt_info(5, 2) + _tmp228 * sqrt_info(5, 1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
