// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/linear_camera_cal.h>
#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_camera_linear_bearing_factor
 *
 * Args:
 *     w_T_b: Pose3
 *     b_T_c: Pose3
 *     calibration: LinearCameraCal
 *     l_w: Matrix31
 *     pixel: Matrix21
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose3CameraLinearBearingFactor(
    const sym::Pose3<Scalar>& w_T_b, const sym::Pose3<Scalar>& b_T_c,
    const sym::LinearCameraCal<Scalar>& calibration, const Eigen::Matrix<Scalar, 3, 1>& l_w,
    const Eigen::Matrix<Scalar, 2, 1>& pixel, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 163

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _w_T_b = w_T_b.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b_T_c = b_T_c.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _calibration = calibration.Data();

  // Intermediate terms (44)
  const Scalar _tmp0 =
      _b_T_c[0] * _w_T_b[3] - _b_T_c[1] * _w_T_b[2] + _b_T_c[2] * _w_T_b[1] + _b_T_c[3] * _w_T_b[0];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 =
      _b_T_c[0] * _w_T_b[2] + _b_T_c[1] * _w_T_b[3] - _b_T_c[2] * _w_T_b[0] + _b_T_c[3] * _w_T_b[1];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = -_b_T_c[0] * _w_T_b[1] + _b_T_c[1] * _w_T_b[0] + _b_T_c[2] * _w_T_b[3] +
                       _b_T_c[3] * _w_T_b[2];
  const Scalar _tmp6 = 2 * _tmp0;
  const Scalar _tmp7 = _tmp5 * _tmp6;
  const Scalar _tmp8 = -_b_T_c[0] * _w_T_b[0] - _b_T_c[1] * _w_T_b[1] - _b_T_c[2] * _w_T_b[2] +
                       _b_T_c[3] * _w_T_b[3];
  const Scalar _tmp9 = 2 * _tmp2;
  const Scalar _tmp10 = _tmp8 * _tmp9;
  const Scalar _tmp11 = _tmp10 + _tmp7;
  const Scalar _tmp12 = _tmp5 * _tmp9;
  const Scalar _tmp13 = _tmp6 * _tmp8;
  const Scalar _tmp14 = _tmp12 - _tmp13;
  const Scalar _tmp15 = -2 * std::pow(_w_T_b[0], Scalar(2));
  const Scalar _tmp16 = 1 - 2 * std::pow(_w_T_b[2], Scalar(2));
  const Scalar _tmp17 = 2 * _w_T_b[0] * _w_T_b[1];
  const Scalar _tmp18 = 2 * _w_T_b[2];
  const Scalar _tmp19 = _tmp18 * _w_T_b[3];
  const Scalar _tmp20 = 2 * _w_T_b[3];
  const Scalar _tmp21 = _tmp20 * _w_T_b[0];
  const Scalar _tmp22 = _tmp18 * _w_T_b[1];
  const Scalar _tmp23 = _b_T_c[4] * (_tmp17 + _tmp19) + _b_T_c[5] * (_tmp15 + _tmp16) +
                        _b_T_c[6] * (-_tmp21 + _tmp22) + _w_T_b[5];
  const Scalar _tmp24 = -2 * std::pow(_w_T_b[1], Scalar(2));
  const Scalar _tmp25 = _tmp18 * _w_T_b[0];
  const Scalar _tmp26 = _tmp20 * _w_T_b[1];
  const Scalar _tmp27 = _b_T_c[4] * (_tmp16 + _tmp24) + _b_T_c[5] * (_tmp17 - _tmp19) +
                        _b_T_c[6] * (_tmp25 + _tmp26) + _w_T_b[4];
  const Scalar _tmp28 = _b_T_c[4] * (_tmp25 - _tmp26) + _b_T_c[5] * (_tmp21 + _tmp22) +
                        _b_T_c[6] * (_tmp15 + _tmp24 + 1) + _w_T_b[6];
  const Scalar _tmp29 = -_tmp11 * _tmp27 + _tmp11 * l_w(0, 0) - _tmp14 * _tmp23 +
                        _tmp14 * l_w(1, 0) - _tmp28 * _tmp4 + _tmp4 * l_w(2, 0);
  const Scalar _tmp30 = (-_calibration[3] + pixel(1, 0)) / _calibration[1];
  const Scalar _tmp31 = -2 * std::pow(_tmp5, Scalar(2));
  const Scalar _tmp32 = _tmp1 + _tmp31 + 1;
  const Scalar _tmp33 = _tmp2 * _tmp6;
  const Scalar _tmp34 = 2 * _tmp5 * _tmp8;
  const Scalar _tmp35 = _tmp33 - _tmp34;
  const Scalar _tmp36 = _tmp12 + _tmp13;
  const Scalar _tmp37 = -_tmp23 * _tmp32 - _tmp27 * _tmp35 - _tmp28 * _tmp36 + _tmp32 * l_w(1, 0) +
                        _tmp35 * l_w(0, 0) + _tmp36 * l_w(2, 0);
  const Scalar _tmp38 = (-_calibration[2] + pixel(0, 0)) / _calibration[0];
  const Scalar _tmp39 = _tmp3 + _tmp31;
  const Scalar _tmp40 = -_tmp10 + _tmp7;
  const Scalar _tmp41 = _tmp33 + _tmp34;
  const Scalar _tmp42 = -_tmp23 * _tmp41 - _tmp27 * _tmp39 - _tmp28 * _tmp40 + _tmp39 * l_w(0, 0) +
                        _tmp40 * l_w(2, 0) + _tmp41 * l_w(1, 0);
  const Scalar _tmp43 = _tmp29 + _tmp30 * _tmp37 + _tmp38 * _tmp42;

  // Output terms (1)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) =
      sqrt_info(0, 0) *
      std::atan2(std::sqrt(Scalar(epsilon + std::pow(Scalar(_tmp29 * _tmp30 - _tmp37), Scalar(2)) +
                                  std::pow(Scalar(-_tmp29 * _tmp38 + _tmp42), Scalar(2)) +
                                  std::pow(Scalar(-_tmp30 * _tmp42 + _tmp37 * _tmp38), Scalar(2)))),
                 _tmp43 + epsilon * ((((_tmp43) > 0) - ((_tmp43) < 0)) + Scalar(0.5)));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
