// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_relative_euclidean_distance_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_a: Pose3
 *     a_d_b: Matrix11
 *     y: Pose3
 *     y_T_b: Pose3
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x: (1x7) jacobian (result_dim x storage_dim) of res (1) wrt arg x (7) (row-major)
 *     res_D_x_T_a: (1x7) jacobian (result_dim x storage_dim) of res (1) wrt arg x_T_a (7)
 * (row-major) res_D_y: (1x7) jacobian (result_dim x storage_dim) of res (1) wrt arg y (7)
 * (row-major) res_D_y_T_b: (1x7) jacobian (result_dim x storage_dim) of res (1) wrt arg y_T_b (7)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose3SensorRelativeEuclideanDistanceFactorWithJacobians0134(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_a,
    const Eigen::Matrix<Scalar, 1, 1>& a_d_b, const sym::Pose3<Scalar>& y,
    const sym::Pose3<Scalar>& y_T_b, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info,
    const Scalar epsilon, Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_a = nullptr,
    Scalar* const res_D_y = nullptr, Scalar* const res_D_y_T_b = nullptr) {
  // Total ops: 360

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (105)
  const Scalar _tmp0 = 2 * _y[3];
  const Scalar _tmp1 = _tmp0 * _y[1];
  const Scalar _tmp2 = 2 * _y[0];
  const Scalar _tmp3 = _tmp2 * _y[2];
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = std::pow(_y[2], Scalar(2));
  const Scalar _tmp6 = -2 * _tmp5;
  const Scalar _tmp7 = std::pow(_y[1], Scalar(2));
  const Scalar _tmp8 = 1 - 2 * _tmp7;
  const Scalar _tmp9 = _tmp6 + _tmp8;
  const Scalar _tmp10 = _tmp0 * _y[2];
  const Scalar _tmp11 = -_tmp10;
  const Scalar _tmp12 = _tmp2 * _y[1];
  const Scalar _tmp13 = _tmp11 + _tmp12;
  const Scalar _tmp14 = 2 * _x[1];
  const Scalar _tmp15 = _tmp14 * _x[0];
  const Scalar _tmp16 = 2 * _x[2] * _x[3];
  const Scalar _tmp17 = -_tmp16;
  const Scalar _tmp18 = _tmp15 + _tmp17;
  const Scalar _tmp19 = 2 * _x[0];
  const Scalar _tmp20 = _tmp19 * _x[2];
  const Scalar _tmp21 = _tmp14 * _x[3];
  const Scalar _tmp22 = _tmp20 + _tmp21;
  const Scalar _tmp23 = std::pow(_x[1], Scalar(2));
  const Scalar _tmp24 = 2 * _tmp23;
  const Scalar _tmp25 = -_tmp24;
  const Scalar _tmp26 = std::pow(_x[2], Scalar(2));
  const Scalar _tmp27 = 2 * _tmp26;
  const Scalar _tmp28 = 1 - _tmp27;
  const Scalar _tmp29 = _tmp13 * _y_T_b[5] - _tmp18 * _x_T_a[5] - _tmp22 * _x_T_a[6] +
                        _tmp4 * _y_T_b[6] + _tmp9 * _y_T_b[4] - _x[4] -
                        _x_T_a[4] * (_tmp25 + _tmp28) + _y[4];
  const Scalar _tmp30 = -_tmp1;
  const Scalar _tmp31 = _tmp3 + _tmp30;
  const Scalar _tmp32 = 2 * _y[1] * _y[2];
  const Scalar _tmp33 = _tmp2 * _y[3];
  const Scalar _tmp34 = _tmp32 + _tmp33;
  const Scalar _tmp35 = std::pow(_y[0], Scalar(2));
  const Scalar _tmp36 = -2 * _tmp35;
  const Scalar _tmp37 = _tmp36 + _tmp8;
  const Scalar _tmp38 = -_tmp21;
  const Scalar _tmp39 = _tmp20 + _tmp38;
  const Scalar _tmp40 = _tmp19 * _x[3];
  const Scalar _tmp41 = _tmp14 * _x[2];
  const Scalar _tmp42 = _tmp40 + _tmp41;
  const Scalar _tmp43 = std::pow(_x[0], Scalar(2));
  const Scalar _tmp44 = 2 * _tmp43;
  const Scalar _tmp45 = -_tmp44;
  const Scalar _tmp46 = _tmp31 * _y_T_b[4] + _tmp34 * _y_T_b[5] + _tmp37 * _y_T_b[6] -
                        _tmp39 * _x_T_a[4] - _tmp42 * _x_T_a[5] - _x[6] -
                        _x_T_a[6] * (_tmp25 + _tmp45 + 1) + _y[6];
  const Scalar _tmp47 = -_tmp33;
  const Scalar _tmp48 = _tmp32 + _tmp47;
  const Scalar _tmp49 = _tmp36 + _tmp6 + 1;
  const Scalar _tmp50 = _tmp10 + _tmp12;
  const Scalar _tmp51 = _tmp15 + _tmp16;
  const Scalar _tmp52 = -_tmp40;
  const Scalar _tmp53 = _tmp41 + _tmp52;
  const Scalar _tmp54 = _tmp48 * _y_T_b[6] + _tmp49 * _y_T_b[5] + _tmp50 * _y_T_b[4] -
                        _tmp51 * _x_T_a[4] - _tmp53 * _x_T_a[6] - _x[5] -
                        _x_T_a[5] * (_tmp28 + _tmp45) + _y[5];
  const Scalar _tmp55 = std::sqrt(Scalar(std::pow(_tmp29, Scalar(2)) + std::pow(_tmp46, Scalar(2)) +
                                         std::pow(_tmp54, Scalar(2)) + epsilon));
  const Scalar _tmp56 = -_tmp20;
  const Scalar _tmp57 = _tmp38 + _tmp56;
  const Scalar _tmp58 = -_tmp26;
  const Scalar _tmp59 = _tmp43 + _tmp58;
  const Scalar _tmp60 = std::pow(_x[3], Scalar(2));
  const Scalar _tmp61 = -_tmp23;
  const Scalar _tmp62 = _tmp60 + _tmp61;
  const Scalar _tmp63 = 2 * _tmp29;
  const Scalar _tmp64 = -_tmp41;
  const Scalar _tmp65 = _tmp40 + _tmp64;
  const Scalar _tmp66 = 2 * _tmp54;
  const Scalar _tmp67 = -_tmp60;
  const Scalar _tmp68 = _tmp23 + _tmp67;
  const Scalar _tmp69 = 2 * _tmp46;
  const Scalar _tmp70 = _tmp63 * (-_tmp57 * _x_T_a[4] - _x_T_a[6] * (_tmp59 + _tmp62)) +
                        _tmp66 * (-_tmp51 * _x_T_a[6] - _tmp65 * _x_T_a[4]) +
                        _tmp69 * (-_tmp39 * _x_T_a[6] - _x_T_a[4] * (_tmp59 + _tmp68));
  const Scalar _tmp71 = sqrt_info(0, 0) / _tmp55;
  const Scalar _tmp72 = _tmp71 * _x[2];
  const Scalar _tmp73 = -_tmp43;
  const Scalar _tmp74 = _tmp26 + _tmp73;
  const Scalar _tmp75 = _tmp52 + _tmp64;
  const Scalar _tmp76 = -_tmp15;
  const Scalar _tmp77 = _tmp16 + _tmp76;
  const Scalar _tmp78 =
      _tmp63 * (-_tmp22 * _x_T_a[5] - _tmp77 * _x_T_a[6]) +
      _tmp66 * (-_tmp53 * _x_T_a[5] - _x_T_a[6] * (_tmp26 + _tmp43 + _tmp61 + _tmp67)) +
      _tmp69 * (-_tmp75 * _x_T_a[6] - _x_T_a[5] * (_tmp62 + _tmp74));
  const Scalar _tmp79 = _tmp71 * _tmp78;
  const Scalar _tmp80 = _tmp17 + _tmp76;
  const Scalar _tmp81 = _tmp21 + _tmp56;
  const Scalar _tmp82 =
      _tmp63 * (-_tmp18 * _x_T_a[4] - _x_T_a[5] * (_tmp68 + _tmp74)) +
      _tmp66 * (-_tmp80 * _x_T_a[5] - _x_T_a[4] * (_tmp23 + _tmp58 + _tmp60 + _tmp73)) +
      _tmp69 * (-_tmp42 * _x_T_a[4] - _tmp81 * _x_T_a[5]);
  const Scalar _tmp83 = _tmp71 * _tmp82;
  const Scalar _tmp84 = _tmp70 * _tmp71;
  const Scalar _tmp85 = _tmp29 * _tmp71;
  const Scalar _tmp86 = _tmp54 * _tmp71;
  const Scalar _tmp87 = _tmp46 * _tmp71;
  const Scalar _tmp88 = _tmp27 - 1;
  const Scalar _tmp89 = (Scalar(1) / Scalar(2)) * _tmp71;
  const Scalar _tmp90 = -_tmp5;
  const Scalar _tmp91 = _tmp35 + _tmp90;
  const Scalar _tmp92 = std::pow(_y[3], Scalar(2));
  const Scalar _tmp93 = -_tmp92;
  const Scalar _tmp94 = _tmp7 + _tmp93;
  const Scalar _tmp95 = -_tmp32;
  const Scalar _tmp96 = -_tmp3;
  const Scalar _tmp97 = -_tmp7;
  const Scalar _tmp98 = _tmp92 + _tmp97;
  const Scalar _tmp99 =
      _tmp71 * (_tmp63 * (_y_T_b[4] * (_tmp30 + _tmp96) + _y_T_b[6] * (_tmp91 + _tmp98)) +
                _tmp66 * (_tmp50 * _y_T_b[6] + _y_T_b[4] * (_tmp33 + _tmp95)) +
                _tmp69 * (_tmp31 * _y_T_b[6] + _y_T_b[4] * (_tmp91 + _tmp94)));
  const Scalar _tmp100 = -_tmp35;
  const Scalar _tmp101 = -_tmp12;
  const Scalar _tmp102 = _tmp100 + _tmp5;
  const Scalar _tmp103 =
      _tmp71 *
      (_tmp63 * (_tmp13 * _y_T_b[4] + _y_T_b[5] * (_tmp102 + _tmp94)) +
       _tmp66 * (_y_T_b[4] * (_tmp100 + _tmp7 + _tmp90 + _tmp92) + _y_T_b[5] * (_tmp101 + _tmp11)) +
       _tmp69 * (_tmp34 * _y_T_b[4] + _y_T_b[5] * (_tmp1 + _tmp96)));
  const Scalar _tmp104 =
      _tmp71 * (_tmp63 * (_tmp4 * _y_T_b[5] + _y_T_b[6] * (_tmp10 + _tmp101)) +
                _tmp66 * (_tmp48 * _y_T_b[5] + _y_T_b[6] * (_tmp35 + _tmp5 + _tmp93 + _tmp97)) +
                _tmp69 * (_y_T_b[5] * (_tmp102 + _tmp98) + _y_T_b[6] * (_tmp47 + _tmp95)));

  // Output terms (5)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) * (_tmp55 - a_d_b(0, 0));

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 7>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = -_tmp70 * _tmp72 + _tmp79 * _x[3] + _tmp83 * _x[1];
    _res_D_x(0, 1) = _tmp72 * _tmp78 - _tmp83 * _x[0] + _tmp84 * _x[3];
    _res_D_x(0, 2) = -_tmp79 * _x[1] + _tmp83 * _x[3] + _tmp84 * _x[0];
    _res_D_x(0, 3) = -_tmp72 * _tmp82 - _tmp79 * _x[0] - _tmp84 * _x[1];
    _res_D_x(0, 4) = -_tmp85;
    _res_D_x(0, 5) = -_tmp86;
    _res_D_x(0, 6) = -_tmp87;
  }

  if (res_D_x_T_a != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 7>> _res_D_x_T_a{res_D_x_T_a};

    _res_D_x_T_a.setZero();

    _res_D_x_T_a(0, 4) = _tmp89 * (_tmp63 * (_tmp24 + _tmp88) + _tmp66 * _tmp80 + _tmp69 * _tmp81);
    _res_D_x_T_a(0, 5) = _tmp89 * (_tmp63 * _tmp77 + _tmp66 * (_tmp44 + _tmp88) + _tmp69 * _tmp75);
    _res_D_x_T_a(0, 6) =
        _tmp89 * (_tmp57 * _tmp63 + _tmp65 * _tmp66 + _tmp69 * (_tmp24 + _tmp44 - 1));
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 7>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp103 * _y[1] + _tmp104 * _y[3] - _tmp99 * _y[2];
    _res_D_y(0, 1) = -_tmp103 * _y[0] + _tmp104 * _y[2] + _tmp99 * _y[3];
    _res_D_y(0, 2) = _tmp103 * _y[3] - _tmp104 * _y[1] + _tmp99 * _y[0];
    _res_D_y(0, 3) = -_tmp103 * _y[2] - _tmp104 * _y[0] - _tmp99 * _y[1];
    _res_D_y(0, 4) = _tmp85;
    _res_D_y(0, 5) = _tmp86;
    _res_D_y(0, 6) = _tmp87;
  }

  if (res_D_y_T_b != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 7>> _res_D_y_T_b{res_D_y_T_b};

    _res_D_y_T_b.setZero();

    _res_D_y_T_b(0, 4) = _tmp89 * (_tmp31 * _tmp69 + _tmp50 * _tmp66 + _tmp63 * _tmp9);
    _res_D_y_T_b(0, 5) = _tmp89 * (_tmp13 * _tmp63 + _tmp34 * _tmp69 + _tmp49 * _tmp66);
    _res_D_y_T_b(0, 6) = _tmp89 * (_tmp37 * _tmp69 + _tmp4 * _tmp63 + _tmp48 * _tmp66);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
