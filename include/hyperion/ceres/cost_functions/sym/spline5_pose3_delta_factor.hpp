// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline5_pose3_delta_factor
 *
 * Args:
 *     lambdas: Matrix51
 *     x0: Pose3
 *     x1: Pose3
 *     x2: Pose3
 *     x3: Pose3
 *     x4: Pose3
 *     x5: Pose3
 *     y: Pose3
 *     sqrt_info: Matrix66
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Spline5Pose3DeltaFactor(
    const Eigen::Matrix<Scalar, 5, 1>& lambdas, const sym::Pose3<Scalar>& x0,
    const sym::Pose3<Scalar>& x1, const sym::Pose3<Scalar>& x2, const sym::Pose3<Scalar>& x3,
    const sym::Pose3<Scalar>& x4, const sym::Pose3<Scalar>& x5, const sym::Pose3<Scalar>& y,
    const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon) {
  // Total ops: 652

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x4 = x4.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x5 = x5.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();

  // Intermediate terms (125)
  const Scalar _tmp0 = _x0[5] - _y[5] + lambdas(0, 0) * (-_x0[5] + _x1[5]) +
                       lambdas(1, 0) * (-_x1[5] + _x2[5]) + lambdas(2, 0) * (-_x2[5] + _x3[5]) +
                       lambdas(3, 0) * (-_x3[5] + _x4[5]) + lambdas(4, 0) * (-_x4[5] + _x5[5]);
  const Scalar _tmp1 = _x0[4] - _y[4] + lambdas(0, 0) * (-_x0[4] + _x1[4]) +
                       lambdas(1, 0) * (-_x1[4] + _x2[4]) + lambdas(2, 0) * (-_x2[4] + _x3[4]) +
                       lambdas(3, 0) * (-_x3[4] + _x4[4]) + lambdas(4, 0) * (-_x4[4] + _x5[4]);
  const Scalar _tmp2 = _x0[6] - _y[6] + lambdas(0, 0) * (-_x0[6] + _x1[6]) +
                       lambdas(1, 0) * (-_x1[6] + _x2[6]) + lambdas(2, 0) * (-_x2[6] + _x3[6]) +
                       lambdas(3, 0) * (-_x3[6] + _x4[6]) + lambdas(4, 0) * (-_x4[6] + _x5[6]);
  const Scalar _tmp3 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp4 = -_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2];
  const Scalar _tmp5 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp6 = _x3[3] * _x4[3];
  const Scalar _tmp7 = 1 - epsilon;
  const Scalar _tmp8 = std::min<Scalar>(_tmp7, std::fabs(_tmp5 - _tmp6));
  const Scalar _tmp9 = std::acos(_tmp8);
  const Scalar _tmp10 =
      2 * std::min<Scalar>(0, (((-_tmp5 + _tmp6) > 0) - ((-_tmp5 + _tmp6) < 0))) + 1;
  const Scalar _tmp11 = 1 - std::pow(_tmp8, Scalar(2));
  const Scalar _tmp12 = 4 * std::pow(_tmp10, Scalar(2)) * std::pow(_tmp9, Scalar(2)) *
                        std::pow(lambdas(3, 0), Scalar(2)) / _tmp11;
  const Scalar _tmp13 = _x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1];
  const Scalar _tmp14 = -_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0];
  const Scalar _tmp15 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp16 =
      std::sqrt(Scalar(_tmp12 * std::pow(_tmp13, Scalar(2)) + _tmp12 * std::pow(_tmp14, Scalar(2)) +
                       _tmp12 * std::pow(_tmp4, Scalar(2)) + _tmp15));
  const Scalar _tmp17 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp18 = std::cos(_tmp17);
  const Scalar _tmp19 = _x4[0] * _x5[2] - _x4[1] * _x5[3] - _x4[2] * _x5[0] + _x4[3] * _x5[1];
  const Scalar _tmp20 = -_x4[0] * _x5[0] - _x4[1] * _x5[1] - _x4[2] * _x5[2];
  const Scalar _tmp21 = _x4[3] * _x5[3];
  const Scalar _tmp22 =
      2 * std::min<Scalar>(0, (((-_tmp20 + _tmp21) > 0) - ((-_tmp20 + _tmp21) < 0))) + 1;
  const Scalar _tmp23 = std::min<Scalar>(_tmp7, std::fabs(_tmp20 - _tmp21));
  const Scalar _tmp24 = 1 - std::pow(_tmp23, Scalar(2));
  const Scalar _tmp25 = std::acos(_tmp23);
  const Scalar _tmp26 = 4 * std::pow(_tmp22, Scalar(2)) * std::pow(_tmp25, Scalar(2)) *
                        std::pow(lambdas(4, 0), Scalar(2)) / _tmp24;
  const Scalar _tmp27 = -_x4[0] * _x5[1] + _x4[1] * _x5[0] - _x4[2] * _x5[3] + _x4[3] * _x5[2];
  const Scalar _tmp28 = -_x4[0] * _x5[3] - _x4[1] * _x5[2] + _x4[2] * _x5[1] + _x4[3] * _x5[0];
  const Scalar _tmp29 = std::sqrt(Scalar(_tmp15 + std::pow(_tmp19, Scalar(2)) * _tmp26 +
                                         _tmp26 * std::pow(_tmp27, Scalar(2)) +
                                         _tmp26 * std::pow(_tmp28, Scalar(2))));
  const Scalar _tmp30 = (Scalar(1) / Scalar(2)) * _tmp29;
  const Scalar _tmp31 = std::cos(_tmp30);
  const Scalar _tmp32 =
      _tmp10 * _tmp9 * lambdas(3, 0) * std::sin(_tmp17) / (std::sqrt(_tmp11) * _tmp16);
  const Scalar _tmp33 = _tmp13 * _tmp32;
  const Scalar _tmp34 =
      _tmp22 * _tmp25 * lambdas(4, 0) * std::sin(_tmp30) / (std::sqrt(_tmp24) * _tmp29);
  const Scalar _tmp35 = _tmp19 * _tmp34;
  const Scalar _tmp36 = 4 * _tmp35;
  const Scalar _tmp37 = _tmp32 * _tmp4;
  const Scalar _tmp38 = 4 * _tmp34;
  const Scalar _tmp39 = _tmp27 * _tmp38;
  const Scalar _tmp40 = _tmp14 * _tmp32;
  const Scalar _tmp41 = _tmp28 * _tmp38;
  const Scalar _tmp42 = _tmp18 * _tmp31 - _tmp33 * _tmp36 - _tmp37 * _tmp39 - _tmp40 * _tmp41;
  const Scalar _tmp43 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp44 = _x2[3] * _x3[3];
  const Scalar _tmp45 = std::min<Scalar>(_tmp7, std::fabs(_tmp43 - _tmp44));
  const Scalar _tmp46 = 1 - std::pow(_tmp45, Scalar(2));
  const Scalar _tmp47 =
      2 * std::min<Scalar>(0, (((-_tmp43 + _tmp44) > 0) - ((-_tmp43 + _tmp44) < 0))) + 1;
  const Scalar _tmp48 = std::acos(_tmp45);
  const Scalar _tmp49 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp50 = 4 * std::pow(_tmp47, Scalar(2)) * std::pow(_tmp48, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp46;
  const Scalar _tmp51 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp52 = std::sqrt(Scalar(_tmp15 + std::pow(_tmp3, Scalar(2)) * _tmp50 +
                                         std::pow(_tmp49, Scalar(2)) * _tmp50 +
                                         _tmp50 * std::pow(_tmp51, Scalar(2))));
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp52;
  const Scalar _tmp54 =
      2 * _tmp47 * _tmp48 * lambdas(2, 0) * std::sin(_tmp53) / (std::sqrt(_tmp46) * _tmp52);
  const Scalar _tmp55 = _tmp42 * _tmp54;
  const Scalar _tmp56 = 2 * _tmp31;
  const Scalar _tmp57 = _tmp32 * _tmp56;
  const Scalar _tmp58 = 2 * _tmp18;
  const Scalar _tmp59 = _tmp34 * _tmp58;
  const Scalar _tmp60 = _tmp14 * _tmp57 + _tmp28 * _tmp59 + _tmp33 * _tmp39 - _tmp36 * _tmp37;
  const Scalar _tmp61 = _tmp54 * _tmp60;
  const Scalar _tmp62 = _tmp27 * _tmp59 - _tmp33 * _tmp41 + _tmp36 * _tmp40 + _tmp37 * _tmp56;
  const Scalar _tmp63 = _tmp54 * _tmp62;
  const Scalar _tmp64 = _tmp13 * _tmp57 + _tmp35 * _tmp58 + _tmp37 * _tmp41 - _tmp39 * _tmp40;
  const Scalar _tmp65 = std::cos(_tmp53);
  const Scalar _tmp66 = _tmp3 * _tmp55 + _tmp49 * _tmp61 - _tmp51 * _tmp63 + _tmp64 * _tmp65;
  const Scalar _tmp67 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp68 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp69 = _x1[3] * _x2[3];
  const Scalar _tmp70 = std::min<Scalar>(_tmp7, std::fabs(_tmp68 - _tmp69));
  const Scalar _tmp71 = 1 - std::pow(_tmp70, Scalar(2));
  const Scalar _tmp72 =
      2 * std::min<Scalar>(0, (((-_tmp68 + _tmp69) > 0) - ((-_tmp68 + _tmp69) < 0))) + 1;
  const Scalar _tmp73 = std::acos(_tmp70);
  const Scalar _tmp74 = 4 * std::pow(_tmp72, Scalar(2)) * std::pow(_tmp73, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp71;
  const Scalar _tmp75 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp76 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp77 = std::sqrt(Scalar(_tmp15 + std::pow(_tmp67, Scalar(2)) * _tmp74 +
                                         _tmp74 * std::pow(_tmp75, Scalar(2)) +
                                         _tmp74 * std::pow(_tmp76, Scalar(2))));
  const Scalar _tmp78 = (Scalar(1) / Scalar(2)) * _tmp77;
  const Scalar _tmp79 = std::cos(_tmp78);
  const Scalar _tmp80 = _tmp51 * _tmp54;
  const Scalar _tmp81 = _tmp54 * _tmp64;
  const Scalar _tmp82 = _tmp3 * _tmp63 + _tmp42 * _tmp80 - _tmp49 * _tmp81 + _tmp60 * _tmp65;
  const Scalar _tmp83 =
      2 * _tmp72 * _tmp73 * lambdas(1, 0) * std::sin(_tmp78) / (std::sqrt(_tmp71) * _tmp77);
  const Scalar _tmp84 = _tmp82 * _tmp83;
  const Scalar _tmp85 = -_tmp3 * _tmp81 + _tmp42 * _tmp65 - _tmp49 * _tmp63 - _tmp51 * _tmp61;
  const Scalar _tmp86 = _tmp83 * _tmp85;
  const Scalar _tmp87 = -_tmp3 * _tmp61 + _tmp49 * _tmp55 + _tmp62 * _tmp65 + _tmp64 * _tmp80;
  const Scalar _tmp88 = _tmp83 * _tmp87;
  const Scalar _tmp89 = _tmp66 * _tmp79 + _tmp67 * _tmp86 + _tmp75 * _tmp84 - _tmp76 * _tmp88;
  const Scalar _tmp90 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp91 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp92 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp93 = _x0[3] * _x1[3];
  const Scalar _tmp94 =
      2 * std::min<Scalar>(0, (((-_tmp92 + _tmp93) > 0) - ((-_tmp92 + _tmp93) < 0))) + 1;
  const Scalar _tmp95 = std::min<Scalar>(_tmp7, std::fabs(_tmp92 - _tmp93));
  const Scalar _tmp96 = std::acos(_tmp95);
  const Scalar _tmp97 = 1 - std::pow(_tmp95, Scalar(2));
  const Scalar _tmp98 = 4 * std::pow(_tmp94, Scalar(2)) * std::pow(_tmp96, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp97;
  const Scalar _tmp99 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp100 = std::sqrt(Scalar(_tmp15 + std::pow(_tmp90, Scalar(2)) * _tmp98 +
                                          std::pow(_tmp91, Scalar(2)) * _tmp98 +
                                          _tmp98 * std::pow(_tmp99, Scalar(2))));
  const Scalar _tmp101 = (Scalar(1) / Scalar(2)) * _tmp100;
  const Scalar _tmp102 =
      2 * _tmp94 * _tmp96 * lambdas(0, 0) * std::sin(_tmp101) / (_tmp100 * std::sqrt(_tmp97));
  const Scalar _tmp103 = _tmp102 * _tmp90;
  const Scalar _tmp104 = _tmp66 * _tmp83;
  const Scalar _tmp105 = -_tmp104 * _tmp75 + _tmp67 * _tmp88 + _tmp76 * _tmp86 + _tmp79 * _tmp82;
  const Scalar _tmp106 = _tmp102 * _tmp99;
  const Scalar _tmp107 = _tmp104 * _tmp76 - _tmp67 * _tmp84 + _tmp75 * _tmp86 + _tmp79 * _tmp87;
  const Scalar _tmp108 = _tmp102 * _tmp91;
  const Scalar _tmp109 = std::cos(_tmp101);
  const Scalar _tmp110 = -_tmp104 * _tmp67 - _tmp75 * _tmp88 - _tmp76 * _tmp84 + _tmp79 * _tmp85;
  const Scalar _tmp111 =
      -_tmp103 * _tmp89 - _tmp105 * _tmp106 - _tmp107 * _tmp108 + _tmp109 * _tmp110;
  const Scalar _tmp112 =
      -_tmp103 * _tmp105 + _tmp106 * _tmp89 + _tmp107 * _tmp109 + _tmp108 * _tmp110;
  const Scalar _tmp113 =
      _tmp103 * _tmp107 + _tmp105 * _tmp109 + _tmp106 * _tmp110 - _tmp108 * _tmp89;
  const Scalar _tmp114 =
      _tmp103 * _tmp110 + _tmp105 * _tmp108 - _tmp106 * _tmp107 + _tmp109 * _tmp89;
  const Scalar _tmp115 = _tmp111 * _x0[0] + _tmp112 * _x0[1] + _tmp113 * _x0[3] - _tmp114 * _x0[2];
  const Scalar _tmp116 = _tmp111 * _x0[2] + _tmp112 * _x0[3] - _tmp113 * _x0[1] + _tmp114 * _x0[0];
  const Scalar _tmp117 = _tmp111 * _x0[1] - _tmp112 * _x0[0] + _tmp113 * _x0[2] + _tmp114 * _x0[3];
  const Scalar _tmp118 = _tmp111 * _x0[3] - _tmp112 * _x0[2] - _tmp113 * _x0[0] - _tmp114 * _x0[1];
  const Scalar _tmp119 = _tmp115 * _y[0] + _tmp116 * _y[2] + _tmp117 * _y[1] + _tmp118 * _y[3];
  const Scalar _tmp120 = std::min<Scalar>(_tmp7, std::fabs(_tmp119));
  const Scalar _tmp121 = 2 * (2 * std::min<Scalar>(0, (((_tmp119) > 0) - ((_tmp119) < 0))) + 1) *
                         std::acos(_tmp120) / std::sqrt(Scalar(1 - std::pow(_tmp120, Scalar(2))));
  const Scalar _tmp122 =
      _tmp121 * (_tmp115 * _y[3] - _tmp116 * _y[1] + _tmp117 * _y[2] - _tmp118 * _y[0]);
  const Scalar _tmp123 =
      _tmp121 * (_tmp115 * _y[1] + _tmp116 * _y[3] - _tmp117 * _y[0] - _tmp118 * _y[2]);
  const Scalar _tmp124 =
      _tmp121 * (-_tmp115 * _y[2] + _tmp116 * _y[0] + _tmp117 * _y[3] - _tmp118 * _y[1]);

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp0 * sqrt_info(0, 4) + _tmp1 * sqrt_info(0, 3) + _tmp122 * sqrt_info(0, 0) +
               _tmp123 * sqrt_info(0, 2) + _tmp124 * sqrt_info(0, 1) + _tmp2 * sqrt_info(0, 5);
  _res(1, 0) = _tmp0 * sqrt_info(1, 4) + _tmp1 * sqrt_info(1, 3) + _tmp122 * sqrt_info(1, 0) +
               _tmp123 * sqrt_info(1, 2) + _tmp124 * sqrt_info(1, 1) + _tmp2 * sqrt_info(1, 5);
  _res(2, 0) = _tmp0 * sqrt_info(2, 4) + _tmp1 * sqrt_info(2, 3) + _tmp122 * sqrt_info(2, 0) +
               _tmp123 * sqrt_info(2, 2) + _tmp124 * sqrt_info(2, 1) + _tmp2 * sqrt_info(2, 5);
  _res(3, 0) = _tmp0 * sqrt_info(3, 4) + _tmp1 * sqrt_info(3, 3) + _tmp122 * sqrt_info(3, 0) +
               _tmp123 * sqrt_info(3, 2) + _tmp124 * sqrt_info(3, 1) + _tmp2 * sqrt_info(3, 5);
  _res(4, 0) = _tmp0 * sqrt_info(4, 4) + _tmp1 * sqrt_info(4, 3) + _tmp122 * sqrt_info(4, 0) +
               _tmp123 * sqrt_info(4, 2) + _tmp124 * sqrt_info(4, 1) + _tmp2 * sqrt_info(4, 5);
  _res(5, 0) = _tmp0 * sqrt_info(5, 4) + _tmp1 * sqrt_info(5, 3) + _tmp122 * sqrt_info(5, 0) +
               _tmp123 * sqrt_info(5, 2) + _tmp124 * sqrt_info(5, 1) + _tmp2 * sqrt_info(5, 5);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
