// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_angle_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_s: Pose3
 *     s_d_y: Matrix11
 *     y: Pose3
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x: (1x7) jacobian (result_dim x storage_dim) of res (1) wrt arg x (7) (row-major)
 *     res_D_x_T_s: (1x7) jacobian (result_dim x storage_dim) of res (1) wrt arg x_T_s (7)
 * (row-major) res_D_y: (1x7) jacobian (result_dim x storage_dim) of res (1) wrt arg y (7)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose3SensorAngleBetweenFactorWithJacobians013(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_s,
    const Eigen::Matrix<Scalar, 1, 1>& s_d_y, const sym::Pose3<Scalar>& y,
    const Eigen::Matrix<Scalar, 1, 1>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_s = nullptr,
    Scalar* const res_D_y = nullptr) {
  // Total ops: 615

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();

  // Intermediate terms (187)
  const Scalar _tmp0 = _x[3] * _x_T_s[2];
  const Scalar _tmp1 = _x[2] * _x_T_s[3];
  const Scalar _tmp2 = _x[1] * _x_T_s[0];
  const Scalar _tmp3 = _x[0] * _x_T_s[1];
  const Scalar _tmp4 = _tmp0 + _tmp1 - _tmp2 + _tmp3;
  const Scalar _tmp5 = _tmp4 * _y[3];
  const Scalar _tmp6 = _x[3] * _x_T_s[1];
  const Scalar _tmp7 = _x[2] * _x_T_s[0];
  const Scalar _tmp8 = _x[1] * _x_T_s[3];
  const Scalar _tmp9 = _x[0] * _x_T_s[2];
  const Scalar _tmp10 = _tmp6 + _tmp7 + _tmp8 - _tmp9;
  const Scalar _tmp11 = _tmp10 * _y[0];
  const Scalar _tmp12 = _x[3] * _x_T_s[0];
  const Scalar _tmp13 = _x[2] * _x_T_s[1];
  const Scalar _tmp14 = _x[1] * _x_T_s[2];
  const Scalar _tmp15 = _x[0] * _x_T_s[3];
  const Scalar _tmp16 = _tmp12 - _tmp13 + _tmp14 + _tmp15;
  const Scalar _tmp17 = _tmp16 * _y[1];
  const Scalar _tmp18 = _x[3] * _x_T_s[3];
  const Scalar _tmp19 = _x[2] * _x_T_s[2];
  const Scalar _tmp20 = _x[1] * _x_T_s[1];
  const Scalar _tmp21 = _x[0] * _x_T_s[0];
  const Scalar _tmp22 = _tmp18 - _tmp19 - _tmp20 - _tmp21;
  const Scalar _tmp23 = _tmp22 * _y[2];
  const Scalar _tmp24 = _tmp11 - _tmp17 + _tmp23 - _tmp5;
  const Scalar _tmp25 = _tmp4 * _y[2];
  const Scalar _tmp26 = _tmp10 * _y[1];
  const Scalar _tmp27 = _tmp16 * _y[0];
  const Scalar _tmp28 = -_tmp25 - _tmp26 - _tmp27;
  const Scalar _tmp29 = _tmp22 * _y[3];
  const Scalar _tmp30 = std::pow(
      Scalar(2 * std::min<Scalar>(0, (((-_tmp28 + _tmp29) > 0) - ((-_tmp28 + _tmp29) < 0))) + 1),
      Scalar(2));
  const Scalar _tmp31 = 4 * _tmp30;
  const Scalar _tmp32 = std::pow(_tmp24, Scalar(2)) * _tmp31;
  const Scalar _tmp33 = 1 - epsilon;
  const Scalar _tmp34 = std::min<Scalar>(_tmp33, std::fabs(_tmp28 - _tmp29));
  const Scalar _tmp35 =
      std::pow(Scalar(std::acos(_tmp34)), Scalar(2)) / (1 - std::pow(_tmp34, Scalar(2)));
  const Scalar _tmp36 = _tmp4 * _y[1];
  const Scalar _tmp37 = _tmp10 * _y[2];
  const Scalar _tmp38 = _tmp16 * _y[3];
  const Scalar _tmp39 = _tmp22 * _y[0];
  const Scalar _tmp40 = _tmp36 - _tmp37 - _tmp38 + _tmp39;
  const Scalar _tmp41 = std::pow(_tmp40, Scalar(2));
  const Scalar _tmp42 = _tmp31 * _tmp35;
  const Scalar _tmp43 = _tmp4 * _y[0];
  const Scalar _tmp44 = _tmp10 * _y[3];
  const Scalar _tmp45 = _tmp16 * _y[2];
  const Scalar _tmp46 = _tmp22 * _y[1];
  const Scalar _tmp47 = -_tmp43 - _tmp44 + _tmp45 + _tmp46;
  const Scalar _tmp48 = std::pow(_tmp47, Scalar(2));
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp50 = -_tmp49;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp52 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp54 = _tmp52 + _tmp53;
  const Scalar _tmp55 = _tmp50 + _tmp51 + _tmp54;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp57 = -_tmp56;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp60 = -_tmp59;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp62 = -_tmp61;
  const Scalar _tmp63 = _tmp60 + _tmp62;
  const Scalar _tmp64 = _tmp57 + _tmp58 + _tmp63;
  const Scalar _tmp65 = (Scalar(1) / Scalar(2)) * _tmp14;
  const Scalar _tmp66 = -_tmp65;
  const Scalar _tmp67 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp69 = -_tmp68;
  const Scalar _tmp70 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp71 = -_tmp70;
  const Scalar _tmp72 = _tmp69 + _tmp71;
  const Scalar _tmp73 = _tmp66 + _tmp67 + _tmp72;
  const Scalar _tmp74 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp75 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp76 = -_tmp75;
  const Scalar _tmp77 = _tmp74 + _tmp76;
  const Scalar _tmp78 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp79 = -_tmp78;
  const Scalar _tmp80 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp81 = -_tmp80;
  const Scalar _tmp82 = _tmp79 + _tmp81;
  const Scalar _tmp83 = _tmp77 + _tmp82;
  const Scalar _tmp84 = _tmp25 + _tmp26 + _tmp27 + _tmp29;
  const Scalar _tmp85 = std::fabs(_tmp84);
  const Scalar _tmp86 = std::min<Scalar>(_tmp33, _tmp85);
  const Scalar _tmp87 = 1 - std::pow(_tmp86, Scalar(2));
  const Scalar _tmp88 = std::acos(_tmp86);
  const Scalar _tmp89 = std::pow(_tmp88, Scalar(2));
  const Scalar _tmp90 = _tmp89 / _tmp87;
  const Scalar _tmp91 = 8 * _tmp30 * _tmp90;
  const Scalar _tmp92 = _tmp47 * _tmp91;
  const Scalar _tmp93 = _tmp55 * _y[1] + _tmp64 * _y[3] + _tmp73 * _y[2] + _tmp83 * _y[0];
  const Scalar _tmp94 =
      ((((_tmp33 - _tmp85) > 0) - ((_tmp33 - _tmp85) < 0)) + 1) * (((_tmp84) > 0) - ((_tmp84) < 0));
  const Scalar _tmp95 = _tmp32 * _tmp94;
  const Scalar _tmp96 = _tmp88 / (_tmp87 * std::sqrt(_tmp87));
  const Scalar _tmp97 = _tmp95 * _tmp96;
  const Scalar _tmp98 = _tmp31 * _tmp94;
  const Scalar _tmp99 = _tmp96 * _tmp98;
  const Scalar _tmp100 = _tmp48 * _tmp99;
  const Scalar _tmp101 = _tmp41 * _tmp99;
  const Scalar _tmp102 = _tmp24 * _tmp91;
  const Scalar _tmp103 = _tmp86 * _tmp89 / std::pow(_tmp87, Scalar(2));
  const Scalar _tmp104 = _tmp103 * _tmp95;
  const Scalar _tmp105 = _tmp103 * _tmp98;
  const Scalar _tmp106 = _tmp105 * _tmp48;
  const Scalar _tmp107 = _tmp105 * _tmp41;
  const Scalar _tmp108 = _tmp40 * _tmp91;
  const Scalar _tmp109 = _tmp31 * _tmp90;
  const Scalar _tmp110 =
      sqrt_info(0, 0) /
      std::sqrt(Scalar(_tmp109 * _tmp41 + _tmp109 * _tmp48 + _tmp32 * _tmp90 + epsilon));
  const Scalar _tmp111 =
      _tmp110 * (-_tmp100 * _tmp93 - _tmp101 * _tmp93 +
                 _tmp102 * (_tmp55 * _y[0] + _tmp64 * _y[2] - _tmp73 * _y[3] - _tmp83 * _y[1]) +
                 _tmp104 * _tmp93 + _tmp106 * _tmp93 + _tmp107 * _tmp93 +
                 _tmp108 * (-_tmp55 * _y[2] + _tmp64 * _y[0] + _tmp73 * _y[1] - _tmp83 * _y[3]) +
                 _tmp92 * (-_tmp55 * _y[3] + _tmp64 * _y[1] - _tmp73 * _y[0] + _tmp83 * _y[2]) -
                 _tmp93 * _tmp97);
  const Scalar _tmp112 = -_tmp74;
  const Scalar _tmp113 = _tmp112 + _tmp76;
  const Scalar _tmp114 = _tmp113 + _tmp79 + _tmp80;
  const Scalar _tmp115 = -_tmp51;
  const Scalar _tmp116 = _tmp115 + _tmp49 + _tmp54;
  const Scalar _tmp117 = -_tmp58;
  const Scalar _tmp118 = _tmp117 + _tmp56 + _tmp63;
  const Scalar _tmp119 = _tmp69 + _tmp70;
  const Scalar _tmp120 = -_tmp67;
  const Scalar _tmp121 = _tmp120 + _tmp66;
  const Scalar _tmp122 = _tmp119 + _tmp121;
  const Scalar _tmp123 = _tmp114 * _y[3] + _tmp116 * _y[2] + _tmp118 * _y[0] + _tmp122 * _y[1];
  const Scalar _tmp124 =
      _tmp110 * (-_tmp100 * _tmp123 - _tmp101 * _tmp123 +
                 _tmp102 * (_tmp114 * _y[2] - _tmp116 * _y[3] - _tmp118 * _y[1] + _tmp122 * _y[0]) +
                 _tmp104 * _tmp123 + _tmp106 * _tmp123 + _tmp107 * _tmp123 +
                 _tmp108 * (_tmp114 * _y[0] + _tmp116 * _y[1] - _tmp118 * _y[3] - _tmp122 * _y[2]) -
                 _tmp123 * _tmp97 +
                 _tmp92 * (_tmp114 * _y[1] - _tmp116 * _y[0] + _tmp118 * _y[2] - _tmp122 * _y[3]));
  const Scalar _tmp125 = _tmp113 + _tmp78 + _tmp81;
  const Scalar _tmp126 = _tmp52 - _tmp53;
  const Scalar _tmp127 = _tmp126 + _tmp49 + _tmp51;
  const Scalar _tmp128 = _tmp117 + _tmp57;
  const Scalar _tmp129 = _tmp59 + _tmp62;
  const Scalar _tmp130 = _tmp128 + _tmp129;
  const Scalar _tmp131 = _tmp120 + _tmp65 + _tmp72;
  const Scalar _tmp132 = _tmp125 * _y[1] + _tmp127 * _y[0] + _tmp130 * _y[2] + _tmp131 * _y[3];
  const Scalar _tmp133 =
      _tmp110 *
      (-_tmp100 * _tmp132 - _tmp101 * _tmp132 +
       _tmp102 * (_tmp125 * _y[0] - _tmp127 * _y[1] - _tmp130 * _y[3] + _tmp131 * _y[2]) +
       _tmp104 * _tmp132 + _tmp106 * _tmp132 + _tmp107 * _tmp132 +
       _tmp108 * (-_tmp125 * _y[2] - _tmp127 * _y[3] + _tmp130 * _y[1] + _tmp131 * _y[0]) -
       _tmp132 * _tmp97 +
       _tmp92 * (-_tmp125 * _y[3] + _tmp127 * _y[2] - _tmp130 * _y[0] + _tmp131 * _y[1]));
  const Scalar _tmp134 = _tmp112 + _tmp75 + _tmp82;
  const Scalar _tmp135 = _tmp134 * _y[2];
  const Scalar _tmp136 = _tmp119 + _tmp65 + _tmp67;
  const Scalar _tmp137 = _tmp115 + _tmp126 + _tmp50;
  const Scalar _tmp138 = -_tmp137 * _y[3];
  const Scalar _tmp139 = _tmp128 + _tmp60 + _tmp61;
  const Scalar _tmp140 = _tmp138 + _tmp139 * _y[1];
  const Scalar _tmp141 = _tmp134 * _y[1];
  const Scalar _tmp142 = _tmp137 * _y[0];
  const Scalar _tmp143 = _tmp139 * _y[2] + _tmp142;
  const Scalar _tmp144 = _tmp134 * _y[3];
  const Scalar _tmp145 = _tmp137 * _y[2];
  const Scalar _tmp146 = _tmp139 * _y[0];
  const Scalar _tmp147 = _tmp139 * _y[3];
  const Scalar _tmp148 = _tmp137 * _y[1];
  const Scalar _tmp149 = _tmp134 * _y[0] + _tmp148;
  const Scalar _tmp150 = _tmp136 * _y[2] + _tmp147 + _tmp149;
  const Scalar _tmp151 = _tmp150 * _tmp95;
  const Scalar _tmp152 =
      _tmp110 *
      (-_tmp100 * _tmp150 - _tmp101 * _tmp150 + _tmp102 * (-_tmp136 * _y[3] - _tmp141 + _tmp143) +
       _tmp103 * _tmp151 + _tmp106 * _tmp150 + _tmp107 * _tmp150 +
       _tmp108 * (_tmp136 * _y[1] - _tmp144 - _tmp145 + _tmp146) - _tmp151 * _tmp96 +
       _tmp92 * (_tmp135 - _tmp136 * _y[0] + _tmp140));
  const Scalar _tmp153 = _tmp121 + _tmp68 + _tmp71;
  const Scalar _tmp154 = _tmp153 * _y[2];
  const Scalar _tmp155 = _tmp129 + _tmp56 + _tmp58;
  const Scalar _tmp156 = _tmp145 + _tmp153 * _y[1];
  const Scalar _tmp157 = _tmp144 + _tmp155 * _y[0] + _tmp156;
  const Scalar _tmp158 = _tmp153 * _y[0];
  const Scalar _tmp159 = _tmp153 * _y[3];
  const Scalar _tmp160 =
      _tmp110 *
      (-_tmp100 * _tmp157 - _tmp101 * _tmp157 +
       _tmp102 * (_tmp135 + _tmp138 - _tmp155 * _y[1] + _tmp158) + _tmp104 * _tmp157 +
       _tmp106 * _tmp157 + _tmp107 * _tmp157 + _tmp108 * (_tmp149 - _tmp154 - _tmp155 * _y[3]) -
       _tmp157 * _tmp97 + _tmp92 * (_tmp141 - _tmp142 + _tmp155 * _y[2] - _tmp159));
  const Scalar _tmp161 = _tmp77 + _tmp78 + _tmp80;
  const Scalar _tmp162 = _tmp143 + _tmp159 + _tmp161 * _y[1];
  const Scalar _tmp163 =
      _tmp110 *
      (-_tmp100 * _tmp162 - _tmp101 * _tmp162 +
       _tmp102 * (-_tmp147 - _tmp148 + _tmp154 + _tmp161 * _y[0]) + _tmp104 * _tmp162 +
       _tmp106 * _tmp162 + _tmp107 * _tmp162 + _tmp108 * (_tmp140 + _tmp158 - _tmp161 * _y[2]) -
       _tmp162 * _tmp97 + _tmp92 * (-_tmp146 + _tmp156 - _tmp161 * _y[3]));
  const Scalar _tmp164 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp165 = (Scalar(1) / Scalar(2)) * _tmp37;
  const Scalar _tmp166 = (Scalar(1) / Scalar(2)) * _tmp38;
  const Scalar _tmp167 = (Scalar(1) / Scalar(2)) * _tmp39;
  const Scalar _tmp168 = -_tmp164 + _tmp165 + _tmp166 - _tmp167;
  const Scalar _tmp169 = (Scalar(1) / Scalar(2)) * _tmp43;
  const Scalar _tmp170 = (Scalar(1) / Scalar(2)) * _tmp44;
  const Scalar _tmp171 = (Scalar(1) / Scalar(2)) * _tmp45;
  const Scalar _tmp172 = (Scalar(1) / Scalar(2)) * _tmp46;
  const Scalar _tmp173 = _tmp169 + _tmp170 - _tmp171 - _tmp172;
  const Scalar _tmp174 = (Scalar(1) / Scalar(2)) * _tmp25 + (Scalar(1) / Scalar(2)) * _tmp26 +
                         (Scalar(1) / Scalar(2)) * _tmp27 + (Scalar(1) / Scalar(2)) * _tmp29;
  const Scalar _tmp175 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp176 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp177 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp178 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp179 = -_tmp100 * _tmp168 - _tmp101 * _tmp168 + _tmp102 * _tmp173 +
                         _tmp104 * _tmp168 + _tmp106 * _tmp168 + _tmp107 * _tmp168 +
                         _tmp108 * _tmp174 - _tmp168 * _tmp97 +
                         _tmp92 * (-_tmp175 + _tmp176 - _tmp177 + _tmp178);
  const Scalar _tmp180 = _tmp110 * _y[3];
  const Scalar _tmp181 = _tmp175 - _tmp176 + _tmp177 - _tmp178;
  const Scalar _tmp182 = -_tmp100 * _tmp181 - _tmp101 * _tmp181 + _tmp102 * _tmp174 +
                         _tmp104 * _tmp181 + _tmp106 * _tmp181 + _tmp107 * _tmp181 +
                         _tmp108 * (-_tmp169 - _tmp170 + _tmp171 + _tmp172) + _tmp168 * _tmp92 -
                         _tmp181 * _tmp97;
  const Scalar _tmp183 = _tmp110 * _y[1];
  const Scalar _tmp184 = -_tmp100 * _tmp173 - _tmp101 * _tmp173 +
                         _tmp102 * (_tmp164 - _tmp165 - _tmp166 + _tmp167) + _tmp104 * _tmp173 +
                         _tmp106 * _tmp173 + _tmp107 * _tmp173 + _tmp108 * _tmp181 -
                         _tmp173 * _tmp97 + _tmp174 * _tmp92;
  const Scalar _tmp185 = _tmp110 * _y[2];
  const Scalar _tmp186 = _tmp110 * _y[0];

  // Output terms (4)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) *
               (-s_d_y(0, 0) +
                std::sqrt(Scalar(_tmp32 * _tmp35 + _tmp41 * _tmp42 + _tmp42 * _tmp48 + epsilon)));

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 7>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = -_tmp111 * _x[2] + _tmp124 * _x[1] + _tmp133 * _x[3];
    _res_D_x(0, 1) = _tmp111 * _x[3] - _tmp124 * _x[0] + _tmp133 * _x[2];
    _res_D_x(0, 2) = _tmp111 * _x[0] + _tmp124 * _x[3] - _tmp133 * _x[1];
    _res_D_x(0, 3) = -_tmp111 * _x[1] - _tmp124 * _x[2] - _tmp133 * _x[0];
    _res_D_x(0, 4) = 0;
    _res_D_x(0, 5) = 0;
    _res_D_x(0, 6) = 0;
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 7>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s(0, 0) = -_tmp152 * _x_T_s[2] + _tmp160 * _x_T_s[1] + _tmp163 * _x_T_s[3];
    _res_D_x_T_s(0, 1) = _tmp152 * _x_T_s[3] - _tmp160 * _x_T_s[0] + _tmp163 * _x_T_s[2];
    _res_D_x_T_s(0, 2) = _tmp152 * _x_T_s[0] + _tmp160 * _x_T_s[3] - _tmp163 * _x_T_s[1];
    _res_D_x_T_s(0, 3) = -_tmp152 * _x_T_s[1] - _tmp160 * _x_T_s[2] - _tmp163 * _x_T_s[0];
    _res_D_x_T_s(0, 4) = 0;
    _res_D_x_T_s(0, 5) = 0;
    _res_D_x_T_s(0, 6) = 0;
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 7>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp179 * _tmp180 + _tmp182 * _tmp183 - _tmp184 * _tmp185;
    _res_D_y(0, 1) = _tmp179 * _tmp185 + _tmp180 * _tmp184 - _tmp182 * _tmp186;
    _res_D_y(0, 2) = -_tmp179 * _tmp183 + _tmp180 * _tmp182 + _tmp184 * _tmp186;
    _res_D_y(0, 3) = -_tmp179 * _tmp186 - _tmp182 * _tmp185 - _tmp183 * _tmp184;
    _res_D_y(0, 4) = 0;
    _res_D_y(0, 5) = 0;
    _res_D_y(0, 6) = 0;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
