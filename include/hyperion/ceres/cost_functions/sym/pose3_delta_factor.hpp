// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_delta_factor
 *
 * Args:
 *     x: Pose3
 *     y: Pose3
 *     sqrt_info: Matrix66
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Pose3DeltaFactor(const sym::Pose3<Scalar>& x,
                                             const sym::Pose3<Scalar>& y,
                                             const Eigen::Matrix<Scalar, 6, 6>& sqrt_info,
                                             const Scalar epsilon) {
  // Total ops: 116

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();

  // Intermediate terms (10)
  const Scalar _tmp0 = -_x[0] * _y[0] - _x[1] * _y[1] - _x[2] * _y[2];
  const Scalar _tmp1 = _x[3] * _y[3];
  const Scalar _tmp2 = std::min<Scalar>(1 - epsilon, std::fabs(_tmp0 - _tmp1));
  const Scalar _tmp3 =
      2 * (2 * std::min<Scalar>(0, (((-_tmp0 + _tmp1) > 0) - ((-_tmp0 + _tmp1) < 0))) + 1) *
      std::acos(_tmp2) / std::sqrt(Scalar(1 - std::pow(_tmp2, Scalar(2))));
  const Scalar _tmp4 = _tmp3 * (_x[0] * _y[2] - _x[1] * _y[3] - _x[2] * _y[0] + _x[3] * _y[1]);
  const Scalar _tmp5 = _tmp3 * (-_x[0] * _y[3] - _x[1] * _y[2] + _x[2] * _y[1] + _x[3] * _y[0]);
  const Scalar _tmp6 = _tmp3 * (-_x[0] * _y[1] + _x[1] * _y[0] - _x[2] * _y[3] + _x[3] * _y[2]);
  const Scalar _tmp7 = -_x[4] + _y[4];
  const Scalar _tmp8 = -_x[6] + _y[6];
  const Scalar _tmp9 = -_x[5] + _y[5];

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp4 * sqrt_info(0, 1) + _tmp5 * sqrt_info(0, 0) + _tmp6 * sqrt_info(0, 2) +
               _tmp7 * sqrt_info(0, 3) + _tmp8 * sqrt_info(0, 5) + _tmp9 * sqrt_info(0, 4);
  _res(1, 0) = _tmp4 * sqrt_info(1, 1) + _tmp5 * sqrt_info(1, 0) + _tmp6 * sqrt_info(1, 2) +
               _tmp7 * sqrt_info(1, 3) + _tmp8 * sqrt_info(1, 5) + _tmp9 * sqrt_info(1, 4);
  _res(2, 0) = _tmp4 * sqrt_info(2, 1) + _tmp5 * sqrt_info(2, 0) + _tmp6 * sqrt_info(2, 2) +
               _tmp7 * sqrt_info(2, 3) + _tmp8 * sqrt_info(2, 5) + _tmp9 * sqrt_info(2, 4);
  _res(3, 0) = _tmp4 * sqrt_info(3, 1) + _tmp5 * sqrt_info(3, 0) + _tmp6 * sqrt_info(3, 2) +
               _tmp7 * sqrt_info(3, 3) + _tmp8 * sqrt_info(3, 5) + _tmp9 * sqrt_info(3, 4);
  _res(4, 0) = _tmp4 * sqrt_info(4, 1) + _tmp5 * sqrt_info(4, 0) + _tmp6 * sqrt_info(4, 2) +
               _tmp7 * sqrt_info(4, 3) + _tmp8 * sqrt_info(4, 5) + _tmp9 * sqrt_info(4, 4);
  _res(5, 0) = _tmp4 * sqrt_info(5, 1) + _tmp5 * sqrt_info(5, 0) + _tmp6 * sqrt_info(5, 2) +
               _tmp7 * sqrt_info(5, 3) + _tmp8 * sqrt_info(5, 5) + _tmp9 * sqrt_info(5, 4);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
