// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline4_pose3_acceleration_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix43
 *     x0: Pose3
 *     x1: Pose3
 *     x2: Pose3
 *     x3: Pose3
 *     x4: Pose3
 *     acceleration: Matrix61
 *     sqrt_info: Matrix66
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Spline4Pose3AccelerationGlobalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 4, 3>& lambdas, const sym::Pose3<Scalar>& x0,
    const sym::Pose3<Scalar>& x1, const sym::Pose3<Scalar>& x2, const sym::Pose3<Scalar>& x3,
    const sym::Pose3<Scalar>& x4, const Eigen::Matrix<Scalar, 6, 1>& acceleration,
    const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon) {
  // Total ops: 754

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x4 = x4.Data();

  // Intermediate terms (232)
  const Scalar _tmp0 = std::pow(dt, Scalar(-2));
  const Scalar _tmp1 = 2 * _x0[1] * _x0[3];
  const Scalar _tmp2 = 2 * _x0[2];
  const Scalar _tmp3 = _tmp2 * _x0[0];
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp6 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp7 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp8 = std::pow(_tmp7, Scalar(2));
  const Scalar _tmp9 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp10 = _x0[3] * _x1[3];
  const Scalar _tmp11 =
      2 * std::min<Scalar>(0, (((_tmp10 - _tmp9) > 0) - ((_tmp10 - _tmp9) < 0))) + 1;
  const Scalar _tmp12 = 1 - epsilon;
  const Scalar _tmp13 = std::min<Scalar>(_tmp12, std::fabs(_tmp10 - _tmp9));
  const Scalar _tmp14 = std::acos(_tmp13);
  const Scalar _tmp15 = 1 - std::pow(_tmp13, Scalar(2));
  const Scalar _tmp16 = std::pow(_tmp11, Scalar(2)) * std::pow(_tmp14, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp15;
  const Scalar _tmp17 = 4 * _tmp16;
  const Scalar _tmp18 = std::pow(_tmp5, Scalar(2));
  const Scalar _tmp19 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp20 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp21 = _tmp17 * _tmp18 + _tmp17 * _tmp19 + _tmp17 * _tmp8 + _tmp20;
  const Scalar _tmp22 = std::sqrt(_tmp21);
  const Scalar _tmp23 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp24 = std::sin(_tmp23);
  const Scalar _tmp25 = 8 * _tmp16 * std::pow(_tmp24, Scalar(2)) / _tmp21;
  const Scalar _tmp26 = _tmp25 * _tmp5 * _tmp6;
  const Scalar _tmp27 = _tmp11 * _tmp14 / std::sqrt(_tmp15);
  const Scalar _tmp28 = 4 * _tmp24 * _tmp27 * lambdas(0, 0) * std::cos(_tmp23) / _tmp22;
  const Scalar _tmp29 = _tmp28 * _tmp7;
  const Scalar _tmp30 = _tmp26 - _tmp29;
  const Scalar _tmp31 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp32 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp33 = _x1[3] * _x2[3];
  const Scalar _tmp34 = std::min<Scalar>(_tmp12, std::fabs(_tmp32 - _tmp33));
  const Scalar _tmp35 = 1 - std::pow(_tmp34, Scalar(2));
  const Scalar _tmp36 =
      2 * std::min<Scalar>(0, (((-_tmp32 + _tmp33) > 0) - ((-_tmp32 + _tmp33) < 0))) + 1;
  const Scalar _tmp37 = std::acos(_tmp34);
  const Scalar _tmp38 = _tmp36 * _tmp37 / std::sqrt(_tmp35);
  const Scalar _tmp39 = 2 * _tmp38;
  const Scalar _tmp40 = _tmp31 * _tmp39;
  const Scalar _tmp41 = _tmp40 * lambdas(1, 1);
  const Scalar _tmp42 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp43 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp44 = std::pow(_tmp43, Scalar(2));
  const Scalar _tmp45 = std::pow(_tmp36, Scalar(2)) * std::pow(_tmp37, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp35;
  const Scalar _tmp46 = 4 * _tmp45;
  const Scalar _tmp47 = std::pow(_tmp31, Scalar(2));
  const Scalar _tmp48 = std::pow(_tmp42, Scalar(2));
  const Scalar _tmp49 = _tmp20 + _tmp44 * _tmp46 + _tmp46 * _tmp47 + _tmp46 * _tmp48;
  const Scalar _tmp50 = std::sqrt(_tmp49);
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp50;
  const Scalar _tmp52 = std::sin(_tmp51);
  const Scalar _tmp53 = 4 * _tmp38 * _tmp52 * lambdas(1, 0) * std::cos(_tmp51) / _tmp50;
  const Scalar _tmp54 = _tmp42 * _tmp53;
  const Scalar _tmp55 = 8 * _tmp45 * std::pow(_tmp52, Scalar(2)) / _tmp49;
  const Scalar _tmp56 = _tmp31 * _tmp43 * _tmp55;
  const Scalar _tmp57 = -_tmp54 + _tmp56;
  const Scalar _tmp58 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp59 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp60 = _x2[3] * _x3[3];
  const Scalar _tmp61 = std::min<Scalar>(_tmp12, std::fabs(_tmp59 - _tmp60));
  const Scalar _tmp62 = 1 - std::pow(_tmp61, Scalar(2));
  const Scalar _tmp63 =
      2 * std::min<Scalar>(0, (((-_tmp59 + _tmp60) > 0) - ((-_tmp59 + _tmp60) < 0))) + 1;
  const Scalar _tmp64 = std::acos(_tmp61);
  const Scalar _tmp65 = _tmp63 * _tmp64 / std::sqrt(_tmp62);
  const Scalar _tmp66 = 2 * _tmp65;
  const Scalar _tmp67 = _tmp58 * _tmp66;
  const Scalar _tmp68 = _tmp67 * lambdas(2, 1);
  const Scalar _tmp69 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp70 = _x3[3] * _x4[3];
  const Scalar _tmp71 = std::min<Scalar>(_tmp12, std::fabs(_tmp69 - _tmp70));
  const Scalar _tmp72 =
      2 * (2 * std::min<Scalar>(0, (((-_tmp69 + _tmp70) > 0) - ((-_tmp69 + _tmp70) < 0))) + 1) *
      std::acos(_tmp71) / std::sqrt(Scalar(1 - std::pow(_tmp71, Scalar(2))));
  const Scalar _tmp73 = _tmp72 * lambdas(3, 1);
  const Scalar _tmp74 = -_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0];
  const Scalar _tmp75 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp76 = std::pow(_tmp75, Scalar(2));
  const Scalar _tmp77 = std::pow(_tmp63, Scalar(2)) * std::pow(_tmp64, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp62;
  const Scalar _tmp78 = 4 * _tmp77;
  const Scalar _tmp79 = std::pow(_tmp58, Scalar(2));
  const Scalar _tmp80 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp81 = std::pow(_tmp80, Scalar(2));
  const Scalar _tmp82 = _tmp20 + _tmp76 * _tmp78 + _tmp78 * _tmp79 + _tmp78 * _tmp81;
  const Scalar _tmp83 = std::sqrt(_tmp82);
  const Scalar _tmp84 = (Scalar(1) / Scalar(2)) * _tmp83;
  const Scalar _tmp85 = std::sin(_tmp84);
  const Scalar _tmp86 = 8 * _tmp77 * std::pow(_tmp85, Scalar(2)) / _tmp82;
  const Scalar _tmp87 = -_tmp76 * _tmp86;
  const Scalar _tmp88 = -_tmp81 * _tmp86 + 1;
  const Scalar _tmp89 = _tmp74 * (_tmp87 + _tmp88);
  const Scalar _tmp90 = _tmp58 * _tmp75 * _tmp86;
  const Scalar _tmp91 = 4 * _tmp65 * _tmp85 * lambdas(2, 0) * std::cos(_tmp84) / _tmp83;
  const Scalar _tmp92 = _tmp80 * _tmp91;
  const Scalar _tmp93 = _tmp90 - _tmp92;
  const Scalar _tmp94 = _x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1];
  const Scalar _tmp95 = _tmp73 * _tmp94;
  const Scalar _tmp96 = -_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2];
  const Scalar _tmp97 = _tmp75 * _tmp91;
  const Scalar _tmp98 = _tmp80 * _tmp86;
  const Scalar _tmp99 = _tmp58 * _tmp98;
  const Scalar _tmp100 = _tmp96 * (_tmp97 + _tmp99);
  const Scalar _tmp101 = _tmp100 * _tmp73 + _tmp73 * _tmp89 + _tmp93 * _tmp95;
  const Scalar _tmp102 = _tmp101 + _tmp68;
  const Scalar _tmp103 = _tmp66 * _tmp75;
  const Scalar _tmp104 = _tmp103 * lambdas(2, 1);
  const Scalar _tmp105 = _tmp74 * (_tmp90 + _tmp92);
  const Scalar _tmp106 = _tmp58 * _tmp91;
  const Scalar _tmp107 = _tmp75 * _tmp98;
  const Scalar _tmp108 = _tmp96 * (-_tmp106 + _tmp107);
  const Scalar _tmp109 = -_tmp79 * _tmp86;
  const Scalar _tmp110 = _tmp94 * (_tmp109 + _tmp88);
  const Scalar _tmp111 = _tmp105 * _tmp73 + _tmp108 * _tmp73 + _tmp110 * _tmp73;
  const Scalar _tmp112 = _tmp104 + _tmp111;
  const Scalar _tmp113 = _tmp42 * _tmp55;
  const Scalar _tmp114 = _tmp113 * _tmp31;
  const Scalar _tmp115 = _tmp43 * _tmp53;
  const Scalar _tmp116 = _tmp114 + _tmp115;
  const Scalar _tmp117 = -_tmp44 * _tmp55;
  const Scalar _tmp118 = -_tmp48 * _tmp55 + 1;
  const Scalar _tmp119 = _tmp117 + _tmp118;
  const Scalar _tmp120 = _tmp66 * _tmp80;
  const Scalar _tmp121 = _tmp120 * lambdas(2, 1);
  const Scalar _tmp122 = _tmp96 * (_tmp109 + _tmp87 + 1);
  const Scalar _tmp123 = _tmp106 + _tmp107;
  const Scalar _tmp124 = _tmp74 * (-_tmp97 + _tmp99);
  const Scalar _tmp125 = _tmp122 * _tmp73 + _tmp123 * _tmp95 + _tmp124 * _tmp73;
  const Scalar _tmp126 = _tmp121 + _tmp125;
  const Scalar _tmp127 = _tmp102 * _tmp57 + _tmp112 * _tmp116 + _tmp119 * _tmp126;
  const Scalar _tmp128 = _tmp127 + _tmp41;
  const Scalar _tmp129 = _tmp39 * _tmp43;
  const Scalar _tmp130 = _tmp129 * lambdas(1, 1);
  const Scalar _tmp131 = _tmp54 + _tmp56;
  const Scalar _tmp132 = -_tmp47 * _tmp55;
  const Scalar _tmp133 = _tmp118 + _tmp132;
  const Scalar _tmp134 = _tmp113 * _tmp43;
  const Scalar _tmp135 = _tmp31 * _tmp53;
  const Scalar _tmp136 = _tmp134 - _tmp135;
  const Scalar _tmp137 = _tmp102 * _tmp133 + _tmp112 * _tmp136 + _tmp126 * _tmp131;
  const Scalar _tmp138 = _tmp130 + _tmp137;
  const Scalar _tmp139 = _tmp25 * _tmp7;
  const Scalar _tmp140 = _tmp139 * _tmp5;
  const Scalar _tmp141 = _tmp28 * _tmp6;
  const Scalar _tmp142 = _tmp140 + _tmp141;
  const Scalar _tmp143 = _tmp39 * _tmp42;
  const Scalar _tmp144 = _tmp143 * lambdas(1, 1);
  const Scalar _tmp145 = _tmp114 - _tmp115;
  const Scalar _tmp146 = _tmp134 + _tmp135;
  const Scalar _tmp147 = _tmp117 + _tmp132 + 1;
  const Scalar _tmp148 = _tmp102 * _tmp146 + _tmp112 * _tmp147 + _tmp126 * _tmp145;
  const Scalar _tmp149 = _tmp144 + _tmp148;
  const Scalar _tmp150 = -_tmp25 * _tmp8;
  const Scalar _tmp151 = -_tmp19 * _tmp25 + 1;
  const Scalar _tmp152 = _tmp150 + _tmp151;
  const Scalar _tmp153 = _tmp128 * _tmp30 + _tmp138 * _tmp142 + _tmp149 * _tmp152;
  const Scalar _tmp154 = 2 * _tmp27;
  const Scalar _tmp155 = _tmp154 * _tmp7;
  const Scalar _tmp156 = _tmp155 * lambdas(0, 1);
  const Scalar _tmp157 = _tmp140 - _tmp141;
  const Scalar _tmp158 = _tmp28 * _tmp5;
  const Scalar _tmp159 = _tmp139 * _tmp6;
  const Scalar _tmp160 = _tmp158 + _tmp159;
  const Scalar _tmp161 = -_tmp18 * _tmp25;
  const Scalar _tmp162 = _tmp151 + _tmp161;
  const Scalar _tmp163 = _tmp128 * _tmp160 + _tmp138 * _tmp162 + _tmp149 * _tmp157;
  const Scalar _tmp164 = _tmp154 * _tmp5;
  const Scalar _tmp165 = _tmp164 * lambdas(0, 1);
  const Scalar _tmp166 = _tmp150 + _tmp161 + 1;
  const Scalar _tmp167 = _tmp72 * lambdas(3, 2);
  const Scalar _tmp168 = _tmp167 * _tmp94;
  const Scalar _tmp169 = -_tmp101 * _tmp104 + _tmp111 * _tmp68 + _tmp120 * lambdas(2, 2) +
                         _tmp122 * _tmp167 + _tmp123 * _tmp168 + _tmp124 * _tmp167;
  const Scalar _tmp170 = _tmp101 * _tmp121 + _tmp103 * lambdas(2, 2) + _tmp105 * _tmp167 +
                         _tmp108 * _tmp167 + _tmp110 * _tmp167 - _tmp125 * _tmp68;
  const Scalar _tmp171 = _tmp100 * _tmp167 + _tmp104 * _tmp125 - _tmp111 * _tmp121 +
                         _tmp167 * _tmp89 + _tmp168 * _tmp93 + _tmp67 * lambdas(2, 2);
  const Scalar _tmp172 = _tmp116 * _tmp170 + _tmp119 * _tmp169 + _tmp130 * _tmp148 -
                         _tmp137 * _tmp144 + _tmp171 * _tmp57 + _tmp40 * lambdas(1, 2);
  const Scalar _tmp173 = _tmp127 * _tmp144 + _tmp129 * lambdas(1, 2) + _tmp131 * _tmp169 +
                         _tmp133 * _tmp171 + _tmp136 * _tmp170 - _tmp148 * _tmp41;
  const Scalar _tmp174 = -_tmp158 + _tmp159;
  const Scalar _tmp175 = _tmp154 * _tmp6;
  const Scalar _tmp176 = -_tmp127 * _tmp130 + _tmp137 * _tmp41 + _tmp143 * lambdas(1, 2) +
                         _tmp145 * _tmp169 + _tmp146 * _tmp171 + _tmp147 * _tmp170;
  const Scalar _tmp177 = _tmp26 + _tmp29;
  const Scalar _tmp178 = _tmp153 * _tmp156 - _tmp163 * _tmp165 + _tmp166 * _tmp172 +
                         _tmp173 * _tmp174 + _tmp175 * lambdas(0, 2) + _tmp176 * _tmp177;
  const Scalar _tmp179 = 2 * _x0[0];
  const Scalar _tmp180 = _tmp179 * _x0[1];
  const Scalar _tmp181 = _tmp2 * _x0[3];
  const Scalar _tmp182 = _tmp180 - _tmp181;
  const Scalar _tmp183 = _tmp175 * lambdas(0, 1);
  const Scalar _tmp184 = _tmp128 * _tmp166 + _tmp138 * _tmp174 + _tmp149 * _tmp177;
  const Scalar _tmp185 = _tmp142 * _tmp173 + _tmp152 * _tmp176 - _tmp156 * _tmp184 +
                         _tmp163 * _tmp183 + _tmp164 * lambdas(0, 2) + _tmp172 * _tmp30;
  const Scalar _tmp186 = -2 * std::pow(_x0[1], Scalar(2));
  const Scalar _tmp187 = 1 - 2 * std::pow(_x0[2], Scalar(2));
  const Scalar _tmp188 = _tmp186 + _tmp187;
  const Scalar _tmp189 = -_tmp153 * _tmp183 + _tmp155 * lambdas(0, 2) + _tmp157 * _tmp176 +
                         _tmp160 * _tmp172 + _tmp162 * _tmp173 + _tmp165 * _tmp184;
  const Scalar _tmp190 = _tmp178 * _tmp4 + _tmp182 * _tmp185 + _tmp188 * _tmp189;
  const Scalar _tmp191 = _tmp0 * _tmp190 - acceleration(0, 0);
  const Scalar _tmp192 = -2 * std::pow(_x0[0], Scalar(2));
  const Scalar _tmp193 = _tmp186 + _tmp192 + 1;
  const Scalar _tmp194 = _tmp179 * _x0[3];
  const Scalar _tmp195 = _tmp2 * _x0[1];
  const Scalar _tmp196 = _tmp194 + _tmp195;
  const Scalar _tmp197 = -_tmp1 + _tmp3;
  const Scalar _tmp198 = _tmp178 * _tmp193 + _tmp185 * _tmp196 + _tmp189 * _tmp197;
  const Scalar _tmp199 = _tmp0 * _tmp198 - acceleration(2, 0);
  const Scalar _tmp200 = -_x1[5] + _x2[5];
  const Scalar _tmp201 = -_x3[5] + _x4[5];
  const Scalar _tmp202 = -_x2[5] + _x3[5];
  const Scalar _tmp203 = -_x0[5] + _x1[5];
  const Scalar _tmp204 = -_x1[6] + _x2[6];
  const Scalar _tmp205 = -_x3[6] + _x4[6];
  const Scalar _tmp206 = -_x2[6] + _x3[6];
  const Scalar _tmp207 = -_x0[6] + _x1[6];
  const Scalar _tmp208 = _tmp204 * lambdas(1, 0) + _tmp205 * lambdas(3, 0) +
                         _tmp206 * lambdas(2, 0) + _tmp207 * lambdas(0, 0) + _x0[6];
  const Scalar _tmp209 = _tmp204 * lambdas(1, 1) + _tmp205 * lambdas(3, 1) +
                         _tmp206 * lambdas(2, 1) + _tmp207 * lambdas(0, 1);
  const Scalar _tmp210 = _tmp156 + _tmp163;
  const Scalar _tmp211 = _tmp153 + _tmp165;
  const Scalar _tmp212 = _tmp183 + _tmp184;
  const Scalar _tmp213 = _tmp182 * _tmp211 + _tmp188 * _tmp210 + _tmp212 * _tmp4;
  const Scalar _tmp214 = -_x1[4] + _x2[4];
  const Scalar _tmp215 = -_x3[4] + _x4[4];
  const Scalar _tmp216 = -_x2[4] + _x3[4];
  const Scalar _tmp217 = -_x0[4] + _x1[4];
  const Scalar _tmp218 = _tmp214 * lambdas(1, 1) + _tmp215 * lambdas(3, 1) +
                         _tmp216 * lambdas(2, 1) + _tmp217 * lambdas(0, 1);
  const Scalar _tmp219 = _tmp193 * _tmp212 + _tmp196 * _tmp211 + _tmp197 * _tmp210;
  const Scalar _tmp220 = _tmp214 * lambdas(1, 0) + _tmp215 * lambdas(3, 0) +
                         _tmp216 * lambdas(2, 0) + _tmp217 * lambdas(0, 0) + _x0[4];
  const Scalar _tmp221 = _tmp0 * (_tmp190 * _tmp208 - _tmp198 * _tmp220 + _tmp200 * lambdas(1, 2) +
                                  _tmp201 * lambdas(3, 2) + _tmp202 * lambdas(2, 2) +
                                  _tmp203 * lambdas(0, 2) + _tmp209 * _tmp213 - _tmp218 * _tmp219) -
                         acceleration(4, 0);
  const Scalar _tmp222 = -_tmp194 + _tmp195;
  const Scalar _tmp223 = _tmp187 + _tmp192;
  const Scalar _tmp224 = _tmp180 + _tmp181;
  const Scalar _tmp225 = _tmp178 * _tmp222 + _tmp185 * _tmp223 + _tmp189 * _tmp224;
  const Scalar _tmp226 = _tmp0 * _tmp225 - acceleration(1, 0);
  const Scalar _tmp227 = _tmp210 * _tmp224 + _tmp211 * _tmp223 + _tmp212 * _tmp222;
  const Scalar _tmp228 = _tmp200 * lambdas(1, 0) + _tmp201 * lambdas(3, 0) +
                         _tmp202 * lambdas(2, 0) + _tmp203 * lambdas(0, 0) + _x0[5];
  const Scalar _tmp229 = _tmp200 * lambdas(1, 1) + _tmp201 * lambdas(3, 1) +
                         _tmp202 * lambdas(2, 1) + _tmp203 * lambdas(0, 1);
  const Scalar _tmp230 =
      _tmp0 * (_tmp198 * _tmp228 - _tmp208 * _tmp225 - _tmp209 * _tmp227 + _tmp214 * lambdas(1, 2) +
               _tmp215 * lambdas(3, 2) + _tmp216 * lambdas(2, 2) + _tmp217 * lambdas(0, 2) +
               _tmp219 * _tmp229) -
      acceleration(3, 0);
  const Scalar _tmp231 =
      _tmp0 * (-_tmp190 * _tmp228 + _tmp204 * lambdas(1, 2) + _tmp205 * lambdas(3, 2) +
               _tmp206 * lambdas(2, 2) + _tmp207 * lambdas(0, 2) - _tmp213 * _tmp229 +
               _tmp218 * _tmp227 + _tmp220 * _tmp225) -
      acceleration(5, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp191 * sqrt_info(0, 0) + _tmp199 * sqrt_info(0, 2) + _tmp221 * sqrt_info(0, 4) +
               _tmp226 * sqrt_info(0, 1) + _tmp230 * sqrt_info(0, 3) + _tmp231 * sqrt_info(0, 5);
  _res(1, 0) = _tmp191 * sqrt_info(1, 0) + _tmp199 * sqrt_info(1, 2) + _tmp221 * sqrt_info(1, 4) +
               _tmp226 * sqrt_info(1, 1) + _tmp230 * sqrt_info(1, 3) + _tmp231 * sqrt_info(1, 5);
  _res(2, 0) = _tmp191 * sqrt_info(2, 0) + _tmp199 * sqrt_info(2, 2) + _tmp221 * sqrt_info(2, 4) +
               _tmp226 * sqrt_info(2, 1) + _tmp230 * sqrt_info(2, 3) + _tmp231 * sqrt_info(2, 5);
  _res(3, 0) = _tmp191 * sqrt_info(3, 0) + _tmp199 * sqrt_info(3, 2) + _tmp221 * sqrt_info(3, 4) +
               _tmp226 * sqrt_info(3, 1) + _tmp230 * sqrt_info(3, 3) + _tmp231 * sqrt_info(3, 5);
  _res(4, 0) = _tmp191 * sqrt_info(4, 0) + _tmp199 * sqrt_info(4, 2) + _tmp221 * sqrt_info(4, 4) +
               _tmp226 * sqrt_info(4, 1) + _tmp230 * sqrt_info(4, 3) + _tmp231 * sqrt_info(4, 5);
  _res(5, 0) = _tmp191 * sqrt_info(5, 0) + _tmp199 * sqrt_info(5, 2) + _tmp221 * sqrt_info(5, 4) +
               _tmp226 * sqrt_info(5, 1) + _tmp230 * sqrt_info(5, 3) + _tmp231 * sqrt_info(5, 5);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
