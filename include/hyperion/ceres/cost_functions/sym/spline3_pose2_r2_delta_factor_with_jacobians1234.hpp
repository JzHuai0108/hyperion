// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose2_r2_delta_factor
 *
 * Args:
 *     lambdas: Matrix31
 *     x0: Pose2
 *     x1: Pose2
 *     x2: Pose2
 *     x3: Pose2
 *     y: Matrix21
 *     sqrt_info: Matrix22
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix21
 *     res_D_x0: (2x4) jacobian (result_dim x storage_dim) of res (2) wrt arg x0 (4) (row-major)
 *     res_D_x1: (2x4) jacobian (result_dim x storage_dim) of res (2) wrt arg x1 (4) (row-major)
 *     res_D_x2: (2x4) jacobian (result_dim x storage_dim) of res (2) wrt arg x2 (4) (row-major)
 *     res_D_x3: (2x4) jacobian (result_dim x storage_dim) of res (2) wrt arg x3 (4) (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> Spline3Pose2R2DeltaFactorWithJacobians1234(
    const Eigen::Matrix<Scalar, 3, 1>& lambdas, const sym::Pose2<Scalar>& x0,
    const sym::Pose2<Scalar>& x1, const sym::Pose2<Scalar>& x2, const sym::Pose2<Scalar>& x3,
    const Eigen::Matrix<Scalar, 2, 1>& y, const Eigen::Matrix<Scalar, 2, 2>& sqrt_info,
    const Scalar epsilon, Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr) {
  // Total ops: 45

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();

  // Intermediate terms (5)
  const Scalar _tmp0 = _x0[3] + lambdas(0, 0) * (-_x0[3] + _x1[3]) +
                       lambdas(1, 0) * (-_x1[3] + _x2[3]) + lambdas(2, 0) * (-_x2[3] + _x3[3]) -
                       y(1, 0);
  const Scalar _tmp1 = _x0[2] + lambdas(0, 0) * (-_x0[2] + _x1[2]) +
                       lambdas(1, 0) * (-_x1[2] + _x2[2]) + lambdas(2, 0) * (-_x2[2] + _x3[2]) -
                       y(0, 0);
  const Scalar _tmp2 = 1 - lambdas(0, 0);
  const Scalar _tmp3 = lambdas(0, 0) - lambdas(1, 0);
  const Scalar _tmp4 = lambdas(1, 0) - lambdas(2, 0);

  // Output terms (5)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) = _tmp0 * sqrt_info(0, 1) + _tmp1 * sqrt_info(0, 0);
  _res(1, 0) = _tmp0 * sqrt_info(1, 1) + _tmp1 * sqrt_info(1, 0);

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 4, Eigen::RowMajor>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = 0;
    _res_D_x0(1, 0) = 0;
    _res_D_x0(0, 1) = 0;
    _res_D_x0(1, 1) = 0;
    _res_D_x0(0, 2) = _tmp2 * sqrt_info(0, 0);
    _res_D_x0(1, 2) = _tmp2 * sqrt_info(1, 0);
    _res_D_x0(0, 3) = _tmp2 * sqrt_info(0, 1);
    _res_D_x0(1, 3) = _tmp2 * sqrt_info(1, 1);
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 4, Eigen::RowMajor>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = 0;
    _res_D_x1(1, 0) = 0;
    _res_D_x1(0, 1) = 0;
    _res_D_x1(1, 1) = 0;
    _res_D_x1(0, 2) = _tmp3 * sqrt_info(0, 0);
    _res_D_x1(1, 2) = _tmp3 * sqrt_info(1, 0);
    _res_D_x1(0, 3) = _tmp3 * sqrt_info(0, 1);
    _res_D_x1(1, 3) = _tmp3 * sqrt_info(1, 1);
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 4, Eigen::RowMajor>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = 0;
    _res_D_x2(1, 0) = 0;
    _res_D_x2(0, 1) = 0;
    _res_D_x2(1, 1) = 0;
    _res_D_x2(0, 2) = _tmp4 * sqrt_info(0, 0);
    _res_D_x2(1, 2) = _tmp4 * sqrt_info(1, 0);
    _res_D_x2(0, 3) = _tmp4 * sqrt_info(0, 1);
    _res_D_x2(1, 3) = _tmp4 * sqrt_info(1, 1);
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 4, Eigen::RowMajor>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) = 0;
    _res_D_x3(1, 0) = 0;
    _res_D_x3(0, 1) = 0;
    _res_D_x3(1, 1) = 0;
    _res_D_x3(0, 2) = lambdas(2, 0) * sqrt_info(0, 0);
    _res_D_x3(1, 2) = lambdas(2, 0) * sqrt_info(1, 0);
    _res_D_x3(0, 3) = lambdas(2, 0) * sqrt_info(0, 1);
    _res_D_x3(1, 3) = lambdas(2, 0) * sqrt_info(1, 1);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
