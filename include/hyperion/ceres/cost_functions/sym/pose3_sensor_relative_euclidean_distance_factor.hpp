// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_relative_euclidean_distance_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_a: Pose3
 *     a_d_b: Matrix11
 *     y: Pose3
 *     y_T_b: Pose3
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose3SensorRelativeEuclideanDistanceFactor(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_a,
    const Eigen::Matrix<Scalar, 1, 1>& a_d_b, const sym::Pose3<Scalar>& y,
    const sym::Pose3<Scalar>& y_T_b, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 104

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (22)
  const Scalar _tmp0 = 2 * _y[1];
  const Scalar _tmp1 = _tmp0 * _y[3];
  const Scalar _tmp2 = 2 * _y[2];
  const Scalar _tmp3 = _tmp2 * _y[0];
  const Scalar _tmp4 = -2 * std::pow(_y[2], Scalar(2));
  const Scalar _tmp5 = 1 - 2 * std::pow(_y[1], Scalar(2));
  const Scalar _tmp6 = _tmp2 * _y[3];
  const Scalar _tmp7 = _tmp0 * _y[0];
  const Scalar _tmp8 = 2 * _x[1];
  const Scalar _tmp9 = _tmp8 * _x[0];
  const Scalar _tmp10 = 2 * _x[2];
  const Scalar _tmp11 = _tmp10 * _x[3];
  const Scalar _tmp12 = _tmp10 * _x[0];
  const Scalar _tmp13 = _tmp8 * _x[3];
  const Scalar _tmp14 = -2 * std::pow(_x[2], Scalar(2));
  const Scalar _tmp15 = 1 - 2 * std::pow(_x[1], Scalar(2));
  const Scalar _tmp16 = _tmp0 * _y[2];
  const Scalar _tmp17 = 2 * _y[0] * _y[3];
  const Scalar _tmp18 = -2 * std::pow(_y[0], Scalar(2));
  const Scalar _tmp19 = 2 * _x[0] * _x[3];
  const Scalar _tmp20 = _tmp8 * _x[2];
  const Scalar _tmp21 = -2 * std::pow(_x[0], Scalar(2));

  // Output terms (1)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) =
      sqrt_info(0, 0) *
      (-a_d_b(0, 0) +
       std::sqrt(Scalar(
           epsilon +
           std::pow(Scalar(-_x[4] - _x_T_a[4] * (_tmp14 + _tmp15) - _x_T_a[5] * (-_tmp11 + _tmp9) -
                           _x_T_a[6] * (_tmp12 + _tmp13) + _y[4] + _y_T_b[4] * (_tmp4 + _tmp5) +
                           _y_T_b[5] * (-_tmp6 + _tmp7) + _y_T_b[6] * (_tmp1 + _tmp3)),
                    Scalar(2)) +
           std::pow(
               Scalar(-_x[5] - _x_T_a[4] * (_tmp11 + _tmp9) - _x_T_a[5] * (_tmp14 + _tmp21 + 1) -
                      _x_T_a[6] * (-_tmp19 + _tmp20) + _y[5] + _y_T_b[4] * (_tmp6 + _tmp7) +
                      _y_T_b[5] * (_tmp18 + _tmp4 + 1) + _y_T_b[6] * (_tmp16 - _tmp17)),
               Scalar(2)) +
           std::pow(Scalar(-_x[6] - _x_T_a[4] * (_tmp12 - _tmp13) - _x_T_a[5] * (_tmp19 + _tmp20) -
                           _x_T_a[6] * (_tmp15 + _tmp21) + _y[6] + _y_T_b[4] * (-_tmp1 + _tmp3) +
                           _y_T_b[5] * (_tmp16 + _tmp17) + _y_T_b[6] * (_tmp18 + _tmp5)),
                    Scalar(2)))));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
