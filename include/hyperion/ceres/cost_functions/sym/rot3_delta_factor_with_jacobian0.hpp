// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: rot3_delta_factor
 *
 * Args:
 *     x: Rot3
 *     y: Rot3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x (4) (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Rot3DeltaFactorWithJacobian0(
    const sym::Rot3<Scalar>& x, const sym::Rot3<Scalar>& y,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr) {
  // Total ops: 389

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (120)
  const Scalar _tmp0 = _x[3] * _y[3];
  const Scalar _tmp1 = _x[1] * _y[1];
  const Scalar _tmp2 = _x[0] * _y[0];
  const Scalar _tmp3 = _x[2] * _y[2];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = 2 * std::min<Scalar>(0, (((_tmp4) > 0) - ((_tmp4) < 0))) + 1;
  const Scalar _tmp6 = 2 * _tmp5;
  const Scalar _tmp7 = _tmp6 * sqrt_info(0, 2);
  const Scalar _tmp8 = _x[3] * _y[2];
  const Scalar _tmp9 = _x[1] * _y[0];
  const Scalar _tmp10 = _x[0] * _y[1];
  const Scalar _tmp11 = _x[2] * _y[3];
  const Scalar _tmp12 = -_tmp10 - _tmp11 + _tmp8 + _tmp9;
  const Scalar _tmp13 = 1 - epsilon;
  const Scalar _tmp14 = std::min<Scalar>(_tmp13, std::fabs(_tmp4));
  const Scalar _tmp15 = std::acos(_tmp14) / std::sqrt(Scalar(1 - std::pow(_tmp14, Scalar(2))));
  const Scalar _tmp16 = _tmp12 * _tmp15;
  const Scalar _tmp17 = _x[3] * _y[1];
  const Scalar _tmp18 = _x[1] * _y[3];
  const Scalar _tmp19 = _x[0] * _y[2];
  const Scalar _tmp20 = _x[2] * _y[0];
  const Scalar _tmp21 = _tmp17 - _tmp18 + _tmp19 - _tmp20;
  const Scalar _tmp22 = _tmp15 * _tmp21;
  const Scalar _tmp23 = _tmp22 * _tmp6;
  const Scalar _tmp24 = _tmp6 * sqrt_info(0, 0);
  const Scalar _tmp25 = _x[3] * _y[0];
  const Scalar _tmp26 = _x[1] * _y[2];
  const Scalar _tmp27 = _x[0] * _y[3];
  const Scalar _tmp28 = _x[2] * _y[1];
  const Scalar _tmp29 = _tmp25 - _tmp26 - _tmp27 + _tmp28;
  const Scalar _tmp30 = _tmp15 * _tmp29;
  const Scalar _tmp31 = _tmp6 * sqrt_info(1, 2);
  const Scalar _tmp32 = _tmp6 * sqrt_info(1, 1);
  const Scalar _tmp33 = _tmp30 * _tmp6;
  const Scalar _tmp34 = _tmp6 * sqrt_info(2, 2);
  const Scalar _tmp35 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp36 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp37 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp38 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp39 = _tmp35 + _tmp36 - _tmp37 - _tmp38;
  const Scalar _tmp40 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp41 = std::fabs(_tmp40);
  const Scalar _tmp42 = std::min<Scalar>(_tmp13, _tmp41);
  const Scalar _tmp43 = std::acos(_tmp42);
  const Scalar _tmp44 = 1 - std::pow(_tmp42, Scalar(2));
  const Scalar _tmp45 = _tmp5 * ((((_tmp13 - _tmp41) > 0) - ((_tmp13 - _tmp41) < 0)) + 1) *
                        (((_tmp40) > 0) - ((_tmp40) < 0));
  const Scalar _tmp46 = _tmp42 * _tmp45 / (_tmp44 * std::sqrt(_tmp44));
  const Scalar _tmp47 = _tmp43 * _tmp46;
  const Scalar _tmp48 = _tmp39 * _tmp47;
  const Scalar _tmp49 = _tmp21 * sqrt_info(0, 1);
  const Scalar _tmp50 = _tmp12 * _tmp46;
  const Scalar _tmp51 = _tmp43 * _tmp50;
  const Scalar _tmp52 = _tmp39 * _tmp51;
  const Scalar _tmp53 = _tmp45 / _tmp44;
  const Scalar _tmp54 = _tmp29 * _tmp53;
  const Scalar _tmp55 = _tmp39 * _tmp54;
  const Scalar _tmp56 = _tmp12 * _tmp53;
  const Scalar _tmp57 = _tmp39 * _tmp56;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp62 = -_tmp58 + _tmp59 + _tmp60 - _tmp61;
  const Scalar _tmp63 = std::pow(_tmp44, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp64 = _tmp43 * _tmp63;
  const Scalar _tmp65 = _tmp6 * _tmp64;
  const Scalar _tmp66 = _tmp62 * _tmp65;
  const Scalar _tmp67 = _tmp21 * _tmp53;
  const Scalar _tmp68 = _tmp67 * sqrt_info(0, 1);
  const Scalar _tmp69 = _tmp29 * sqrt_info(0, 0);
  const Scalar _tmp70 = -Scalar(1) / Scalar(2) * _tmp0 - Scalar(1) / Scalar(2) * _tmp1 -
                        Scalar(1) / Scalar(2) * _tmp2 - Scalar(1) / Scalar(2) * _tmp3;
  const Scalar _tmp71 = _tmp64 * _tmp70;
  const Scalar _tmp72 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp73 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp74 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp75 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp76 = _tmp72 - _tmp73 + _tmp74 - _tmp75;
  const Scalar _tmp77 = _tmp64 * _tmp76;
  const Scalar _tmp78 = _tmp24 * _tmp77 - _tmp39 * _tmp68 + _tmp48 * _tmp49 + _tmp48 * _tmp69 +
                        _tmp52 * sqrt_info(0, 2) - _tmp55 * sqrt_info(0, 0) -
                        _tmp57 * sqrt_info(0, 2) + _tmp66 * sqrt_info(0, 1) + _tmp7 * _tmp71;
  const Scalar _tmp79 = 2 * _x[1];
  const Scalar _tmp80 = _tmp54 * _tmp76;
  const Scalar _tmp81 = _tmp58 - _tmp59 - _tmp60 + _tmp61;
  const Scalar _tmp82 = _tmp43 * _tmp81;
  const Scalar _tmp83 = _tmp63 * _tmp82;
  const Scalar _tmp84 = _tmp6 * _tmp83;
  const Scalar _tmp85 = _tmp47 * _tmp76;
  const Scalar _tmp86 = _tmp29 * _tmp85;
  const Scalar _tmp87 = -_tmp35 - _tmp36 + _tmp37 + _tmp38;
  const Scalar _tmp88 = _tmp56 * _tmp76;
  const Scalar _tmp89 = _tmp51 * _tmp76;
  const Scalar _tmp90 = _tmp65 * _tmp70;
  const Scalar _tmp91 = _tmp24 * _tmp64 * _tmp87 + _tmp49 * _tmp85 - _tmp68 * _tmp76 -
                        _tmp80 * sqrt_info(0, 0) + _tmp84 * sqrt_info(0, 2) +
                        _tmp86 * sqrt_info(0, 0) - _tmp88 * sqrt_info(0, 2) +
                        _tmp89 * sqrt_info(0, 2) + _tmp90 * sqrt_info(0, 1);
  const Scalar _tmp92 = 2 * _x[2];
  const Scalar _tmp93 = _tmp50 * _tmp82;
  const Scalar _tmp94 = _tmp56 * _tmp81;
  const Scalar _tmp95 = _tmp46 * _tmp82;
  const Scalar _tmp96 = _tmp64 * (-_tmp72 + _tmp73 - _tmp74 + _tmp75);
  const Scalar _tmp97 = _tmp39 * _tmp64;
  const Scalar _tmp98 = _tmp6 * _tmp97;
  const Scalar _tmp99 = _tmp54 * _tmp81;
  const Scalar _tmp100 = _tmp24 * _tmp71 + _tmp49 * _tmp95 - _tmp68 * _tmp81 + _tmp69 * _tmp95 +
                         _tmp7 * _tmp96 + _tmp93 * sqrt_info(0, 2) - _tmp94 * sqrt_info(0, 2) +
                         _tmp98 * sqrt_info(0, 1) - _tmp99 * sqrt_info(0, 0);
  const Scalar _tmp101 = 2 * _x[3];
  const Scalar _tmp102 = _tmp21 * sqrt_info(1, 1);
  const Scalar _tmp103 = _tmp54 * sqrt_info(1, 0);
  const Scalar _tmp104 = _tmp32 * _tmp64;
  const Scalar _tmp105 = _tmp39 * _tmp67;
  const Scalar _tmp106 = _tmp29 * sqrt_info(1, 0);
  const Scalar _tmp107 = _tmp6 * _tmp77;
  const Scalar _tmp108 = _tmp102 * _tmp48 - _tmp103 * _tmp39 + _tmp104 * _tmp62 -
                         _tmp105 * sqrt_info(1, 1) + _tmp106 * _tmp48 + _tmp107 * sqrt_info(1, 0) +
                         _tmp31 * _tmp71 + _tmp52 * sqrt_info(1, 2) - _tmp57 * sqrt_info(1, 2);
  const Scalar _tmp109 = _tmp67 * _tmp76;
  const Scalar _tmp110 = _tmp65 * _tmp87;
  const Scalar _tmp111 = _tmp102 * _tmp85 - _tmp103 * _tmp76 + _tmp104 * _tmp70 -
                         _tmp109 * sqrt_info(1, 1) + _tmp110 * sqrt_info(1, 0) + _tmp31 * _tmp83 +
                         _tmp86 * sqrt_info(1, 0) - _tmp88 * sqrt_info(1, 2) +
                         _tmp89 * sqrt_info(1, 2);
  const Scalar _tmp112 = _tmp67 * _tmp81;
  const Scalar _tmp113 = _tmp102 * _tmp95 - _tmp103 * _tmp81 + _tmp106 * _tmp95 -
                         _tmp112 * sqrt_info(1, 1) + _tmp31 * _tmp96 + _tmp32 * _tmp97 +
                         _tmp90 * sqrt_info(1, 0) + _tmp93 * sqrt_info(1, 2) -
                         _tmp94 * sqrt_info(1, 2);
  const Scalar _tmp114 = _tmp21 * sqrt_info(2, 1);
  const Scalar _tmp115 = _tmp29 * sqrt_info(2, 0);
  const Scalar _tmp116 = -_tmp105 * sqrt_info(2, 1) + _tmp107 * sqrt_info(2, 0) + _tmp114 * _tmp48 +
                         _tmp115 * _tmp48 + _tmp34 * _tmp71 + _tmp52 * sqrt_info(2, 2) -
                         _tmp55 * sqrt_info(2, 0) - _tmp57 * sqrt_info(2, 2) +
                         _tmp66 * sqrt_info(2, 1);
  const Scalar _tmp117 = -_tmp109 * sqrt_info(2, 1) + _tmp110 * sqrt_info(2, 0) + _tmp114 * _tmp85 -
                         _tmp80 * sqrt_info(2, 0) + _tmp84 * sqrt_info(2, 2) +
                         _tmp86 * sqrt_info(2, 0) - _tmp88 * sqrt_info(2, 2) +
                         _tmp89 * sqrt_info(2, 2) + _tmp90 * sqrt_info(2, 1);
  const Scalar _tmp118 = -_tmp112 * sqrt_info(2, 1) + _tmp114 * _tmp95 + _tmp115 * _tmp95 +
                         _tmp34 * _tmp96 + _tmp90 * sqrt_info(2, 0) + _tmp93 * sqrt_info(2, 2) -
                         _tmp94 * sqrt_info(2, 2) + _tmp98 * sqrt_info(2, 1) -
                         _tmp99 * sqrt_info(2, 0);
  const Scalar _tmp119 = 2 * _x[0];

  // Output terms (2)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp16 * _tmp7 + _tmp23 * sqrt_info(0, 1) + _tmp24 * _tmp30;
  _res(1, 0) = _tmp16 * _tmp31 + _tmp22 * _tmp32 + _tmp33 * sqrt_info(1, 0);
  _res(2, 0) = _tmp16 * _tmp34 + _tmp23 * sqrt_info(2, 1) + _tmp33 * sqrt_info(2, 0);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp100 * _tmp101 + _tmp78 * _tmp79 - _tmp91 * _tmp92;
    _res_D_x(1, 0) = _tmp101 * _tmp113 + _tmp108 * _tmp79 - _tmp111 * _tmp92;
    _res_D_x(2, 0) = _tmp101 * _tmp118 + _tmp116 * _tmp79 - _tmp117 * _tmp92;
    _res_D_x(0, 1) = _tmp100 * _tmp92 + _tmp101 * _tmp91 - _tmp119 * _tmp78;
    _res_D_x(1, 1) = _tmp101 * _tmp111 - _tmp108 * _tmp119 + _tmp113 * _tmp92;
    _res_D_x(2, 1) = _tmp101 * _tmp117 - _tmp116 * _tmp119 + _tmp118 * _tmp92;
    _res_D_x(0, 2) = -_tmp100 * _tmp79 + _tmp101 * _tmp78 + _tmp119 * _tmp91;
    _res_D_x(1, 2) = _tmp101 * _tmp108 + _tmp111 * _tmp119 - _tmp113 * _tmp79;
    _res_D_x(2, 2) = _tmp101 * _tmp116 + _tmp117 * _tmp119 - _tmp118 * _tmp79;
    _res_D_x(0, 3) = -_tmp100 * _tmp119 - _tmp78 * _tmp92 - _tmp79 * _tmp91;
    _res_D_x(1, 3) = -_tmp108 * _tmp92 - _tmp111 * _tmp79 - _tmp113 * _tmp119;
    _res_D_x(2, 3) = -_tmp116 * _tmp92 - _tmp117 * _tmp79 - _tmp118 * _tmp119;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
