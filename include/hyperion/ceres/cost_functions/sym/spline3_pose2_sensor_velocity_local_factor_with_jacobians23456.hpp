// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose2_sensor_velocity_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix32
 *     x0: Pose2
 *     x1: Pose2
 *     x2: Pose2
 *     x3: Pose2
 *     x_T_s: Pose2
 *     velocity: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x0: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x0 (4) (row-major)
 *     res_D_x1: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x1 (4) (row-major)
 *     res_D_x2: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x2 (4) (row-major)
 *     res_D_x3: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x3 (4) (row-major)
 *     res_D_x_T_s: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x_T_s (4)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Pose2SensorVelocityLocalFactorWithJacobians23456(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 2>& lambdas, const sym::Pose2<Scalar>& x0,
    const sym::Pose2<Scalar>& x1, const sym::Pose2<Scalar>& x2, const sym::Pose2<Scalar>& x3,
    const sym::Pose2<Scalar>& x_T_s, const Eigen::Matrix<Scalar, 3, 1>& velocity,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr,
    Scalar* const res_D_x_T_s = nullptr) {
  // Total ops: 596

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_s = x_T_s.Data();

  // Intermediate terms (194)
  const Scalar _tmp0 = _x_T_s[1] * _x_T_s[3];
  const Scalar _tmp1 = _x_T_s[0] * _x_T_s[2];
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = Scalar(1.0) / (dt);
  const Scalar _tmp4 = _x2[1] * _x3[0];
  const Scalar _tmp5 = _x2[0] * _x3[1];
  const Scalar _tmp6 = -_tmp4 + _tmp5;
  const Scalar _tmp7 = _x2[0] * _x3[0];
  const Scalar _tmp8 = _x2[1] * _x3[1];
  const Scalar _tmp9 = _tmp7 + _tmp8;
  const Scalar _tmp10 = _tmp9 + epsilon * ((((_tmp9) > 0) - ((_tmp9) < 0)) + Scalar(0.5));
  const Scalar _tmp11 = std::atan2(_tmp6, _tmp10);
  const Scalar _tmp12 = _x1[0] * _x2[1];
  const Scalar _tmp13 = _x1[1] * _x2[0];
  const Scalar _tmp14 = _tmp12 - _tmp13;
  const Scalar _tmp15 = _x1[0] * _x2[0];
  const Scalar _tmp16 = _x1[1] * _x2[1];
  const Scalar _tmp17 = _tmp15 + _tmp16;
  const Scalar _tmp18 = _tmp17 + epsilon * ((((_tmp17) > 0) - ((_tmp17) < 0)) + Scalar(0.5));
  const Scalar _tmp19 = std::atan2(_tmp14, _tmp18);
  const Scalar _tmp20 = _x0[1] * _x1[0];
  const Scalar _tmp21 = _x0[0] * _x1[1];
  const Scalar _tmp22 = -_tmp20 + _tmp21;
  const Scalar _tmp23 = _x0[1] * _x1[1];
  const Scalar _tmp24 = _x0[0] * _x1[0];
  const Scalar _tmp25 = _tmp23 + _tmp24;
  const Scalar _tmp26 = _tmp25 + epsilon * ((((_tmp25) > 0) - ((_tmp25) < 0)) + Scalar(0.5));
  const Scalar _tmp27 = std::atan2(_tmp22, _tmp26);
  const Scalar _tmp28 =
      _tmp3 * (_tmp11 * lambdas(2, 1) + _tmp19 * lambdas(1, 1) + _tmp27 * lambdas(0, 1));
  const Scalar _tmp29 = _tmp27 * lambdas(0, 0);
  const Scalar _tmp30 = std::cos(_tmp29);
  const Scalar _tmp31 = _tmp30 * _x0[0];
  const Scalar _tmp32 = std::sin(_tmp29);
  const Scalar _tmp33 = _tmp32 * _x0[1];
  const Scalar _tmp34 = _tmp31 - _tmp33;
  const Scalar _tmp35 = _tmp19 * lambdas(1, 0);
  const Scalar _tmp36 = std::sin(_tmp35);
  const Scalar _tmp37 = _tmp34 * _tmp36;
  const Scalar _tmp38 = _tmp32 * _x0[0];
  const Scalar _tmp39 = _tmp30 * _x0[1];
  const Scalar _tmp40 = _tmp38 + _tmp39;
  const Scalar _tmp41 = std::cos(_tmp35);
  const Scalar _tmp42 = _tmp40 * _tmp41;
  const Scalar _tmp43 = _tmp37 + _tmp42;
  const Scalar _tmp44 = _tmp11 * lambdas(2, 0);
  const Scalar _tmp45 = std::sin(_tmp44);
  const Scalar _tmp46 = _tmp43 * _tmp45;
  const Scalar _tmp47 = _tmp34 * _tmp41;
  const Scalar _tmp48 = _tmp36 * _tmp40;
  const Scalar _tmp49 = _tmp47 - _tmp48;
  const Scalar _tmp50 = std::cos(_tmp44);
  const Scalar _tmp51 = _tmp49 * _tmp50;
  const Scalar _tmp52 = -_tmp46 + _tmp51;
  const Scalar _tmp53 = lambdas(0, 1) * (-_x0[2] + _x1[2]) + lambdas(1, 1) * (-_x1[2] + _x2[2]) +
                        lambdas(2, 1) * (-_x2[2] + _x3[2]);
  const Scalar _tmp54 = _tmp43 * _tmp50;
  const Scalar _tmp55 = _tmp45 * _tmp49;
  const Scalar _tmp56 = _tmp54 + _tmp55;
  const Scalar _tmp57 = lambdas(0, 1) * (-_x0[3] + _x1[3]) + lambdas(1, 1) * (-_x1[3] + _x2[3]) +
                        lambdas(2, 1) * (-_x2[3] + _x3[3]);
  const Scalar _tmp58 = _tmp52 * _tmp53 + _tmp56 * _tmp57;
  const Scalar _tmp59 = _tmp3 * _x_T_s[1];
  const Scalar _tmp60 = _tmp52 * _tmp57 - _tmp53 * _tmp56;
  const Scalar _tmp61 = _tmp3 * _x_T_s[0];
  const Scalar _tmp62 = -_tmp58 * _tmp59 + _tmp60 * _tmp61;
  const Scalar _tmp63 = _tmp2 * _tmp28 + _tmp62 - velocity(2, 0);
  const Scalar _tmp64 = _tmp28 - velocity(0, 0);
  const Scalar _tmp65 = _tmp58 * _tmp61;
  const Scalar _tmp66 = _tmp59 * _tmp60;
  const Scalar _tmp67 = _x_T_s[0] * _x_T_s[3] - _x_T_s[1] * _x_T_s[2];
  const Scalar _tmp68 = _tmp28 * _tmp67;
  const Scalar _tmp69 = _tmp65 + _tmp66 - _tmp68 - velocity(1, 0);
  const Scalar _tmp70 = _tmp3 * _tmp67;
  const Scalar _tmp71 = std::pow(_tmp22, Scalar(2));
  const Scalar _tmp72 = std::pow(_tmp26, Scalar(2));
  const Scalar _tmp73 = Scalar(1.0) / (_tmp72);
  const Scalar _tmp74 = Scalar(1.0) / (_tmp26);
  const Scalar _tmp75 = _tmp72 / (_tmp71 + _tmp72);
  const Scalar _tmp76 = _tmp75 * (-_tmp71 * _tmp73 + _tmp74 * (-_tmp23 - _tmp24));
  const Scalar _tmp77 = _tmp76 * lambdas(0, 1);
  const Scalar _tmp78 = _tmp76 * lambdas(0, 0);
  const Scalar _tmp79 = -_tmp38 * _tmp78 - _tmp38 - _tmp39 * _tmp78 - _tmp39;
  const Scalar _tmp80 = _tmp31 * lambdas(0, 0);
  const Scalar _tmp81 = -_tmp33 * _tmp78 + _tmp34 + _tmp76 * _tmp80;
  const Scalar _tmp82 = -_tmp36 * _tmp81 + _tmp41 * _tmp79;
  const Scalar _tmp83 = _tmp36 * _tmp79 + _tmp41 * _tmp81;
  const Scalar _tmp84 = _tmp45 * _tmp82 + _tmp50 * _tmp83;
  const Scalar _tmp85 = -_tmp45 * _tmp83 + _tmp50 * _tmp82;
  const Scalar _tmp86 = _tmp53 * _tmp85 + _tmp57 * _tmp84;
  const Scalar _tmp87 = -_tmp53 * _tmp84 + _tmp57 * _tmp85;
  const Scalar _tmp88 = _tmp59 * _tmp87 + _tmp61 * _tmp86 - _tmp70 * _tmp77;
  const Scalar _tmp89 = _tmp3 * _tmp77;
  const Scalar _tmp90 = _tmp2 * _tmp89 - _tmp59 * _tmp86 + _tmp61 * _tmp87;
  const Scalar _tmp91 = _tmp3 * sqrt_info(0, 0);
  const Scalar _tmp92 = _tmp77 * _tmp91 + _tmp88 * sqrt_info(0, 1) + _tmp90 * sqrt_info(0, 2);
  const Scalar _tmp93 =
      _tmp88 * sqrt_info(1, 1) + _tmp89 * sqrt_info(1, 0) + _tmp90 * sqrt_info(1, 2);
  const Scalar _tmp94 = _tmp3 * sqrt_info(2, 0);
  const Scalar _tmp95 = _tmp77 * _tmp94 + _tmp88 * sqrt_info(2, 1) + _tmp90 * sqrt_info(2, 2);
  const Scalar _tmp96 = _tmp56 * _tmp61;
  const Scalar _tmp97 = _tmp96 * lambdas(0, 1);
  const Scalar _tmp98 = _tmp52 * _tmp59;
  const Scalar _tmp99 = _tmp98 * lambdas(0, 1);
  const Scalar _tmp100 = _tmp97 + _tmp99;
  const Scalar _tmp101 = _tmp56 * _tmp59;
  const Scalar _tmp102 = _tmp52 * _tmp61;
  const Scalar _tmp103 = _tmp101 * lambdas(0, 1) - _tmp102 * lambdas(0, 1);
  const Scalar _tmp104 = -_tmp97 - _tmp99;
  const Scalar _tmp105 = std::pow(_tmp14, Scalar(2));
  const Scalar _tmp106 = std::pow(_tmp18, Scalar(2));
  const Scalar _tmp107 = Scalar(1.0) / (_tmp106);
  const Scalar _tmp108 = Scalar(1.0) / (_tmp18);
  const Scalar _tmp109 = -_tmp105 * _tmp107 + _tmp108 * (-_tmp15 - _tmp16);
  const Scalar _tmp110 = _tmp106 / (_tmp105 + _tmp106);
  const Scalar _tmp111 = _tmp110 * lambdas(1, 0);
  const Scalar _tmp112 = _tmp109 * _tmp111;
  const Scalar _tmp113 = _tmp75 * (-_tmp22 * _tmp73 * (_tmp20 - _tmp21) + _tmp25 * _tmp74);
  const Scalar _tmp114 = _tmp113 * lambdas(0, 0);
  const Scalar _tmp115 = _tmp113 * _tmp80 - _tmp114 * _tmp33;
  const Scalar _tmp116 = -_tmp114 * _tmp38 - _tmp114 * _tmp39;
  const Scalar _tmp117 = _tmp112 * _tmp47 - _tmp112 * _tmp48 + _tmp115 * _tmp41 + _tmp116 * _tmp36;
  const Scalar _tmp118 = -_tmp112 * _tmp37 - _tmp112 * _tmp42 - _tmp115 * _tmp36 + _tmp116 * _tmp41;
  const Scalar _tmp119 = _tmp117 * _tmp50 + _tmp118 * _tmp45;
  const Scalar _tmp120 = -_tmp117 * _tmp45 + _tmp118 * _tmp50;
  const Scalar _tmp121 = _tmp119 * _tmp57 + _tmp120 * _tmp53;
  const Scalar _tmp122 = _tmp110 * lambdas(1, 1);
  const Scalar _tmp123 = _tmp3 * (_tmp109 * _tmp122 + _tmp113 * lambdas(0, 1));
  const Scalar _tmp124 = -_tmp119 * _tmp53 + _tmp120 * _tmp57;
  const Scalar _tmp125 = -_tmp121 * _tmp59 + _tmp123 * _tmp2 + _tmp124 * _tmp61;
  const Scalar _tmp126 = _tmp121 * _tmp61 - _tmp123 * _tmp67 + _tmp124 * _tmp59;
  const Scalar _tmp127 =
      _tmp123 * sqrt_info(0, 0) + _tmp125 * sqrt_info(0, 2) + _tmp126 * sqrt_info(0, 1);
  const Scalar _tmp128 =
      _tmp123 * sqrt_info(1, 0) + _tmp125 * sqrt_info(1, 2) + _tmp126 * sqrt_info(1, 1);
  const Scalar _tmp129 =
      _tmp123 * sqrt_info(2, 0) + _tmp125 * sqrt_info(2, 2) + _tmp126 * sqrt_info(2, 1);
  const Scalar _tmp130 = lambdas(0, 1) - lambdas(1, 1);
  const Scalar _tmp131 = _tmp130 * _tmp56;
  const Scalar _tmp132 = _tmp102 * _tmp130 - _tmp131 * _tmp59;
  const Scalar _tmp133 = _tmp130 * _tmp98;
  const Scalar _tmp134 = _tmp131 * _tmp61;
  const Scalar _tmp135 = -_tmp133 - _tmp134;
  const Scalar _tmp136 = _tmp133 + _tmp134;
  const Scalar _tmp137 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp138 = std::pow(_tmp10, Scalar(2));
  const Scalar _tmp139 = Scalar(1.0) / (_tmp138);
  const Scalar _tmp140 = Scalar(1.0) / (_tmp10);
  const Scalar _tmp141 = -_tmp137 * _tmp139 + _tmp140 * (-_tmp7 - _tmp8);
  const Scalar _tmp142 = _tmp138 / (_tmp137 + _tmp138);
  const Scalar _tmp143 = _tmp142 * lambdas(2, 1);
  const Scalar _tmp144 = -_tmp107 * _tmp14 * (-_tmp12 + _tmp13) + _tmp108 * _tmp17;
  const Scalar _tmp145 = _tmp3 * (_tmp122 * _tmp144 + _tmp141 * _tmp143);
  const Scalar _tmp146 = _tmp111 * _tmp144;
  const Scalar _tmp147 = _tmp146 * _tmp47 - _tmp146 * _tmp48;
  const Scalar _tmp148 = _tmp142 * lambdas(2, 0);
  const Scalar _tmp149 = _tmp148 * _tmp54;
  const Scalar _tmp150 = -_tmp146 * _tmp37 - _tmp146 * _tmp42;
  const Scalar _tmp151 = _tmp141 * _tmp148;
  const Scalar _tmp152 =
      -_tmp141 * _tmp149 - _tmp147 * _tmp45 + _tmp150 * _tmp50 - _tmp151 * _tmp55;
  const Scalar _tmp153 = _tmp147 * _tmp50 + _tmp150 * _tmp45 - _tmp151 * _tmp46 + _tmp151 * _tmp51;
  const Scalar _tmp154 = _tmp152 * _tmp57 - _tmp153 * _tmp53;
  const Scalar _tmp155 = _tmp152 * _tmp53 + _tmp153 * _tmp57;
  const Scalar _tmp156 = -_tmp145 * _tmp67 + _tmp154 * _tmp59 + _tmp155 * _tmp61;
  const Scalar _tmp157 = _tmp145 * _tmp2 + _tmp154 * _tmp61 - _tmp155 * _tmp59;
  const Scalar _tmp158 =
      _tmp145 * sqrt_info(0, 0) + _tmp156 * sqrt_info(0, 1) + _tmp157 * sqrt_info(0, 2);
  const Scalar _tmp159 =
      _tmp145 * sqrt_info(1, 0) + _tmp156 * sqrt_info(1, 1) + _tmp157 * sqrt_info(1, 2);
  const Scalar _tmp160 =
      _tmp145 * sqrt_info(2, 0) + _tmp156 * sqrt_info(2, 1) + _tmp157 * sqrt_info(2, 2);
  const Scalar _tmp161 = lambdas(1, 1) - lambdas(2, 1);
  const Scalar _tmp162 = _tmp161 * _tmp52;
  const Scalar _tmp163 = _tmp162 * _tmp59;
  const Scalar _tmp164 = _tmp161 * _tmp56;
  const Scalar _tmp165 = _tmp164 * _tmp61;
  const Scalar _tmp166 = -_tmp163 - _tmp165;
  const Scalar _tmp167 = _tmp162 * _tmp61 - _tmp164 * _tmp59;
  const Scalar _tmp168 = _tmp163 + _tmp165;
  const Scalar _tmp169 = -_tmp139 * _tmp6 * (_tmp4 - _tmp5) + _tmp140 * _tmp9;
  const Scalar _tmp170 = _tmp148 * _tmp169;
  const Scalar _tmp171 = -_tmp170 * _tmp46 + _tmp170 * _tmp51;
  const Scalar _tmp172 = -_tmp149 * _tmp169 - _tmp170 * _tmp55;
  const Scalar _tmp173 = _tmp171 * _tmp57 + _tmp172 * _tmp53;
  const Scalar _tmp174 = _tmp143 * _tmp169;
  const Scalar _tmp175 = -_tmp171 * _tmp53 + _tmp172 * _tmp57;
  const Scalar _tmp176 = _tmp173 * _tmp61 - _tmp174 * _tmp70 + _tmp175 * _tmp59;
  const Scalar _tmp177 = _tmp174 * _tmp3;
  const Scalar _tmp178 = -_tmp173 * _tmp59 + _tmp175 * _tmp61 + _tmp177 * _tmp2;
  const Scalar _tmp179 = _tmp174 * _tmp91 + _tmp176 * sqrt_info(0, 1) + _tmp178 * sqrt_info(0, 2);
  const Scalar _tmp180 =
      _tmp176 * sqrt_info(1, 1) + _tmp177 * sqrt_info(1, 0) + _tmp178 * sqrt_info(1, 2);
  const Scalar _tmp181 = _tmp174 * _tmp94 + _tmp176 * sqrt_info(2, 1) + _tmp178 * sqrt_info(2, 2);
  const Scalar _tmp182 = _tmp96 * lambdas(2, 1);
  const Scalar _tmp183 = _tmp98 * lambdas(2, 1);
  const Scalar _tmp184 = -_tmp182 - _tmp183;
  const Scalar _tmp185 = -_tmp101 * lambdas(2, 1) + _tmp102 * lambdas(2, 1);
  const Scalar _tmp186 = _tmp182 + _tmp183;
  const Scalar _tmp187 = -_tmp28 * (-_tmp0 - _tmp1) + _tmp62;
  const Scalar _tmp188 = -_tmp65 - _tmp66 + _tmp68;
  const Scalar _tmp189 = _tmp187 * sqrt_info(0, 1) + _tmp188 * sqrt_info(0, 2);
  const Scalar _tmp190 = _tmp187 * sqrt_info(1, 1) + _tmp188 * sqrt_info(1, 2);
  const Scalar _tmp191 = _tmp187 * sqrt_info(2, 1) + _tmp188 * sqrt_info(2, 2);
  const Scalar _tmp192 = _tmp28 * _x_T_s[1];
  const Scalar _tmp193 = _tmp28 * _x_T_s[0];

  // Output terms (6)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp63 * sqrt_info(0, 2) + _tmp64 * sqrt_info(0, 0) + _tmp69 * sqrt_info(0, 1);
  _res(1, 0) = _tmp63 * sqrt_info(1, 2) + _tmp64 * sqrt_info(1, 0) + _tmp69 * sqrt_info(1, 1);
  _res(2, 0) = _tmp63 * sqrt_info(2, 2) + _tmp64 * sqrt_info(2, 0) + _tmp69 * sqrt_info(2, 1);

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = -_tmp92 * _x0[1];
    _res_D_x0(1, 0) = -_tmp93 * _x0[1];
    _res_D_x0(2, 0) = -_tmp95 * _x0[1];
    _res_D_x0(0, 1) = _tmp92 * _x0[0];
    _res_D_x0(1, 1) = _tmp93 * _x0[0];
    _res_D_x0(2, 1) = _tmp95 * _x0[0];
    _res_D_x0(0, 2) = _tmp100 * sqrt_info(0, 2) + _tmp103 * sqrt_info(0, 1);
    _res_D_x0(1, 2) = _tmp100 * sqrt_info(1, 2) + _tmp103 * sqrt_info(1, 1);
    _res_D_x0(2, 2) = _tmp100 * sqrt_info(2, 2) + _tmp103 * sqrt_info(2, 1);
    _res_D_x0(0, 3) = _tmp103 * sqrt_info(0, 2) + _tmp104 * sqrt_info(0, 1);
    _res_D_x0(1, 3) = _tmp103 * sqrt_info(1, 2) + _tmp104 * sqrt_info(1, 1);
    _res_D_x0(2, 3) = _tmp103 * sqrt_info(2, 2) + _tmp104 * sqrt_info(2, 1);
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = -_tmp127 * _x1[1];
    _res_D_x1(1, 0) = -_tmp128 * _x1[1];
    _res_D_x1(2, 0) = -_tmp129 * _x1[1];
    _res_D_x1(0, 1) = _tmp127 * _x1[0];
    _res_D_x1(1, 1) = _tmp128 * _x1[0];
    _res_D_x1(2, 1) = _tmp129 * _x1[0];
    _res_D_x1(0, 2) = _tmp132 * sqrt_info(0, 1) + _tmp135 * sqrt_info(0, 2);
    _res_D_x1(1, 2) = _tmp132 * sqrt_info(1, 1) + _tmp135 * sqrt_info(1, 2);
    _res_D_x1(2, 2) = _tmp132 * sqrt_info(2, 1) + _tmp135 * sqrt_info(2, 2);
    _res_D_x1(0, 3) = _tmp132 * sqrt_info(0, 2) + _tmp136 * sqrt_info(0, 1);
    _res_D_x1(1, 3) = _tmp132 * sqrt_info(1, 2) + _tmp136 * sqrt_info(1, 1);
    _res_D_x1(2, 3) = _tmp132 * sqrt_info(2, 2) + _tmp136 * sqrt_info(2, 1);
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = -_tmp158 * _x2[1];
    _res_D_x2(1, 0) = -_tmp159 * _x2[1];
    _res_D_x2(2, 0) = -_tmp160 * _x2[1];
    _res_D_x2(0, 1) = _tmp158 * _x2[0];
    _res_D_x2(1, 1) = _tmp159 * _x2[0];
    _res_D_x2(2, 1) = _tmp160 * _x2[0];
    _res_D_x2(0, 2) = _tmp166 * sqrt_info(0, 2) + _tmp167 * sqrt_info(0, 1);
    _res_D_x2(1, 2) = _tmp166 * sqrt_info(1, 2) + _tmp167 * sqrt_info(1, 1);
    _res_D_x2(2, 2) = _tmp166 * sqrt_info(2, 2) + _tmp167 * sqrt_info(2, 1);
    _res_D_x2(0, 3) = _tmp167 * sqrt_info(0, 2) + _tmp168 * sqrt_info(0, 1);
    _res_D_x2(1, 3) = _tmp167 * sqrt_info(1, 2) + _tmp168 * sqrt_info(1, 1);
    _res_D_x2(2, 3) = _tmp167 * sqrt_info(2, 2) + _tmp168 * sqrt_info(2, 1);
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) = -_tmp179 * _x3[1];
    _res_D_x3(1, 0) = -_tmp180 * _x3[1];
    _res_D_x3(2, 0) = -_tmp181 * _x3[1];
    _res_D_x3(0, 1) = _tmp179 * _x3[0];
    _res_D_x3(1, 1) = _tmp180 * _x3[0];
    _res_D_x3(2, 1) = _tmp181 * _x3[0];
    _res_D_x3(0, 2) = _tmp184 * sqrt_info(0, 2) + _tmp185 * sqrt_info(0, 1);
    _res_D_x3(1, 2) = _tmp184 * sqrt_info(1, 2) + _tmp185 * sqrt_info(1, 1);
    _res_D_x3(2, 2) = _tmp184 * sqrt_info(2, 2) + _tmp185 * sqrt_info(2, 1);
    _res_D_x3(0, 3) = _tmp185 * sqrt_info(0, 2) + _tmp186 * sqrt_info(0, 1);
    _res_D_x3(1, 3) = _tmp185 * sqrt_info(1, 2) + _tmp186 * sqrt_info(1, 1);
    _res_D_x3(2, 3) = _tmp185 * sqrt_info(2, 2) + _tmp186 * sqrt_info(2, 1);
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s(0, 0) = -_tmp189 * _x_T_s[1];
    _res_D_x_T_s(1, 0) = -_tmp190 * _x_T_s[1];
    _res_D_x_T_s(2, 0) = -_tmp191 * _x_T_s[1];
    _res_D_x_T_s(0, 1) = _tmp189 * _x_T_s[0];
    _res_D_x_T_s(1, 1) = _tmp190 * _x_T_s[0];
    _res_D_x_T_s(2, 1) = _tmp191 * _x_T_s[0];
    _res_D_x_T_s(0, 2) = _tmp192 * sqrt_info(0, 1) + _tmp193 * sqrt_info(0, 2);
    _res_D_x_T_s(1, 2) = _tmp192 * sqrt_info(1, 1) + _tmp193 * sqrt_info(1, 2);
    _res_D_x_T_s(2, 2) = _tmp192 * sqrt_info(2, 1) + _tmp193 * sqrt_info(2, 2);
    _res_D_x_T_s(0, 3) = _tmp192 * sqrt_info(0, 2) - _tmp193 * sqrt_info(0, 1);
    _res_D_x_T_s(1, 3) = _tmp192 * sqrt_info(1, 2) - _tmp193 * sqrt_info(1, 1);
    _res_D_x_T_s(2, 3) = _tmp192 * sqrt_info(2, 2) - _tmp193 * sqrt_info(2, 1);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
