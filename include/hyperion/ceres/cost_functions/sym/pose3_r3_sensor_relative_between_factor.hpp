// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_r3_sensor_relative_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_a: Pose3
 *     a_T_b: Matrix31
 *     y: Pose3
 *     y_T_b: Pose3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose3R3SensorRelativeBetweenFactor(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_a,
    const Eigen::Matrix<Scalar, 3, 1>& a_T_b, const sym::Pose3<Scalar>& y,
    const sym::Pose3<Scalar>& y_T_b, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 199

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (55)
  const Scalar _tmp0 =
      _x[0] * _x_T_a[3] + _x[1] * _x_T_a[2] - _x[2] * _x_T_a[1] + _x[3] * _x_T_a[0];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 =
      -_x[0] * _x_T_a[2] + _x[1] * _x_T_a[3] + _x[2] * _x_T_a[0] + _x[3] * _x_T_a[1];
  const Scalar _tmp3 = -2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = _tmp1 + _tmp3 + 1;
  const Scalar _tmp5 = 2 * _y[3];
  const Scalar _tmp6 = _tmp5 * _y[1];
  const Scalar _tmp7 = 2 * _y[0] * _y[2];
  const Scalar _tmp8 = 2 * _y[1];
  const Scalar _tmp9 = _tmp8 * _y[2];
  const Scalar _tmp10 = _tmp5 * _y[0];
  const Scalar _tmp11 = -2 * std::pow(_y[1], Scalar(2));
  const Scalar _tmp12 = 1 - 2 * std::pow(_y[0], Scalar(2));
  const Scalar _tmp13 = _y[6] + _y_T_b[4] * (-_tmp6 + _tmp7) + _y_T_b[5] * (_tmp10 + _tmp9) +
                        _y_T_b[6] * (_tmp11 + _tmp12);
  const Scalar _tmp14 = -2 * std::pow(_y[2], Scalar(2));
  const Scalar _tmp15 = _tmp5 * _y[2];
  const Scalar _tmp16 = _tmp8 * _y[0];
  const Scalar _tmp17 = _y[4] + _y_T_b[4] * (_tmp11 + _tmp14 + 1) + _y_T_b[5] * (-_tmp15 + _tmp16) +
                        _y_T_b[6] * (_tmp6 + _tmp7);
  const Scalar _tmp18 =
      _x[0] * _x_T_a[1] - _x[1] * _x_T_a[0] + _x[2] * _x_T_a[3] + _x[3] * _x_T_a[2];
  const Scalar _tmp19 = 2 * _tmp0;
  const Scalar _tmp20 = _tmp18 * _tmp19;
  const Scalar _tmp21 =
      -_x[0] * _x_T_a[0] - _x[1] * _x_T_a[1] - _x[2] * _x_T_a[2] + _x[3] * _x_T_a[3];
  const Scalar _tmp22 = 2 * _tmp2;
  const Scalar _tmp23 = _tmp21 * _tmp22;
  const Scalar _tmp24 = _tmp20 + _tmp23;
  const Scalar _tmp25 = _y[5] + _y_T_b[4] * (_tmp15 + _tmp16) + _y_T_b[5] * (_tmp12 + _tmp14) +
                        _y_T_b[6] * (-_tmp10 + _tmp9);
  const Scalar _tmp26 = _tmp18 * _tmp22;
  const Scalar _tmp27 = _tmp19 * _tmp21;
  const Scalar _tmp28 = _tmp26 - _tmp27;
  const Scalar _tmp29 = 2 * _x[2];
  const Scalar _tmp30 = _tmp29 * _x[0];
  const Scalar _tmp31 = 2 * _x[1];
  const Scalar _tmp32 = _tmp31 * _x[3];
  const Scalar _tmp33 = 2 * _x[0] * _x[3];
  const Scalar _tmp34 = _tmp31 * _x[2];
  const Scalar _tmp35 = -2 * std::pow(_x[1], Scalar(2));
  const Scalar _tmp36 = 1 - 2 * std::pow(_x[0], Scalar(2));
  const Scalar _tmp37 = _x[6] + _x_T_a[4] * (_tmp30 - _tmp32) + _x_T_a[5] * (_tmp33 + _tmp34) +
                        _x_T_a[6] * (_tmp35 + _tmp36);
  const Scalar _tmp38 = _tmp31 * _x[0];
  const Scalar _tmp39 = _tmp29 * _x[3];
  const Scalar _tmp40 = -2 * std::pow(_x[2], Scalar(2));
  const Scalar _tmp41 = _x[4] + _x_T_a[4] * (_tmp35 + _tmp40 + 1) + _x_T_a[5] * (_tmp38 - _tmp39) +
                        _x_T_a[6] * (_tmp30 + _tmp32);
  const Scalar _tmp42 = _x[5] + _x_T_a[4] * (_tmp38 + _tmp39) + _x_T_a[5] * (_tmp36 + _tmp40) +
                        _x_T_a[6] * (-_tmp33 + _tmp34);
  const Scalar _tmp43 = _tmp13 * _tmp4 + _tmp17 * _tmp24 - _tmp24 * _tmp41 + _tmp25 * _tmp28 -
                        _tmp28 * _tmp42 - _tmp37 * _tmp4 - a_T_b(2, 0);
  const Scalar _tmp44 = _tmp20 - _tmp23;
  const Scalar _tmp45 = 1 - 2 * std::pow(_tmp18, Scalar(2));
  const Scalar _tmp46 = _tmp3 + _tmp45;
  const Scalar _tmp47 = _tmp19 * _tmp2;
  const Scalar _tmp48 = 2 * _tmp18 * _tmp21;
  const Scalar _tmp49 = _tmp47 + _tmp48;
  const Scalar _tmp50 = _tmp13 * _tmp44 + _tmp17 * _tmp46 + _tmp25 * _tmp49 - _tmp37 * _tmp44 -
                        _tmp41 * _tmp46 - _tmp42 * _tmp49 - a_T_b(0, 0);
  const Scalar _tmp51 = _tmp26 + _tmp27;
  const Scalar _tmp52 = _tmp47 - _tmp48;
  const Scalar _tmp53 = _tmp1 + _tmp45;
  const Scalar _tmp54 = _tmp13 * _tmp51 + _tmp17 * _tmp52 + _tmp25 * _tmp53 - _tmp37 * _tmp51 -
                        _tmp41 * _tmp52 - _tmp42 * _tmp53 - a_T_b(1, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp43 * sqrt_info(0, 2) + _tmp50 * sqrt_info(0, 0) + _tmp54 * sqrt_info(0, 1);
  _res(1, 0) = _tmp43 * sqrt_info(1, 2) + _tmp50 * sqrt_info(1, 0) + _tmp54 * sqrt_info(1, 1);
  _res(2, 0) = _tmp43 * sqrt_info(2, 2) + _tmp50 * sqrt_info(2, 0) + _tmp54 * sqrt_info(2, 1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
