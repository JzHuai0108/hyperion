// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose2_r2_sensor_between_factor
 *
 * Args:
 *     lambdas: Matrix31
 *     x0: Pose2
 *     x1: Pose2
 *     x2: Pose2
 *     x3: Pose2
 *     x_T_s: Pose2
 *     s_T_y: Matrix21
 *     y: Pose2
 *     sqrt_info: Matrix22
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix21
 *     res_D_x0: (2x4) jacobian (result_dim x storage_dim) of res (2) wrt arg x0 (4) (row-major)
 *     res_D_x1: (2x4) jacobian (result_dim x storage_dim) of res (2) wrt arg x1 (4) (row-major)
 *     res_D_x2: (2x4) jacobian (result_dim x storage_dim) of res (2) wrt arg x2 (4) (row-major)
 *     res_D_x3: (2x4) jacobian (result_dim x storage_dim) of res (2) wrt arg x3 (4) (row-major)
 *     res_D_x_T_s: (2x4) jacobian (result_dim x storage_dim) of res (2) wrt arg x_T_s (4)
 * (row-major) res_D_y: (2x4) jacobian (result_dim x storage_dim) of res (2) wrt arg y (4)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> Spline3Pose2R2SensorBetweenFactorWithJacobians123457(
    const Eigen::Matrix<Scalar, 3, 1>& lambdas, const sym::Pose2<Scalar>& x0,
    const sym::Pose2<Scalar>& x1, const sym::Pose2<Scalar>& x2, const sym::Pose2<Scalar>& x3,
    const sym::Pose2<Scalar>& x_T_s, const Eigen::Matrix<Scalar, 2, 1>& s_T_y,
    const sym::Pose2<Scalar>& y, const Eigen::Matrix<Scalar, 2, 2>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr,
    Scalar* const res_D_x_T_s = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 569

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (161)
  const Scalar _tmp0 = _x2[1] * _x3[0];
  const Scalar _tmp1 = _x2[0] * _x3[1];
  const Scalar _tmp2 = -_tmp0 + _tmp1;
  const Scalar _tmp3 = _x2[0] * _x3[0];
  const Scalar _tmp4 = _x2[1] * _x3[1];
  const Scalar _tmp5 = _tmp3 + _tmp4;
  const Scalar _tmp6 = _tmp5 + epsilon * ((((_tmp5) > 0) - ((_tmp5) < 0)) + Scalar(0.5));
  const Scalar _tmp7 = lambdas(2, 0) * std::atan2(_tmp2, _tmp6);
  const Scalar _tmp8 = std::sin(_tmp7);
  const Scalar _tmp9 = _x1[0] * _x2[1];
  const Scalar _tmp10 = _x1[1] * _x2[0];
  const Scalar _tmp11 = -_tmp10 + _tmp9;
  const Scalar _tmp12 = _x1[0] * _x2[0];
  const Scalar _tmp13 = _x1[1] * _x2[1];
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = _tmp14 + epsilon * ((((_tmp14) > 0) - ((_tmp14) < 0)) + Scalar(0.5));
  const Scalar _tmp16 = lambdas(1, 0) * std::atan2(_tmp11, _tmp15);
  const Scalar _tmp17 = std::sin(_tmp16);
  const Scalar _tmp18 = _tmp17 * _tmp8;
  const Scalar _tmp19 = std::cos(_tmp7);
  const Scalar _tmp20 = std::cos(_tmp16);
  const Scalar _tmp21 = _tmp19 * _tmp20;
  const Scalar _tmp22 = -_tmp18 + _tmp21;
  const Scalar _tmp23 = _x0[1] * _x1[0];
  const Scalar _tmp24 = _x0[0] * _x1[1];
  const Scalar _tmp25 = -_tmp23 + _tmp24;
  const Scalar _tmp26 = _x0[1] * _x1[1];
  const Scalar _tmp27 = _x0[0] * _x1[0];
  const Scalar _tmp28 = _tmp26 + _tmp27;
  const Scalar _tmp29 = _tmp28 + epsilon * ((((_tmp28) > 0) - ((_tmp28) < 0)) + Scalar(0.5));
  const Scalar _tmp30 = lambdas(0, 0) * std::atan2(_tmp25, _tmp29);
  const Scalar _tmp31 = std::cos(_tmp30);
  const Scalar _tmp32 = _tmp22 * _tmp31;
  const Scalar _tmp33 = _tmp20 * _tmp8;
  const Scalar _tmp34 = _tmp17 * _tmp19;
  const Scalar _tmp35 = _tmp33 + _tmp34;
  const Scalar _tmp36 = std::sin(_tmp30);
  const Scalar _tmp37 = _tmp35 * _tmp36;
  const Scalar _tmp38 = _tmp32 - _tmp37;
  const Scalar _tmp39 = _tmp38 * _x0[1];
  const Scalar _tmp40 = _tmp22 * _tmp36;
  const Scalar _tmp41 = _tmp31 * _tmp35;
  const Scalar _tmp42 = _tmp40 + _tmp41;
  const Scalar _tmp43 = _tmp42 * _x0[0];
  const Scalar _tmp44 = _tmp39 + _tmp43;
  const Scalar _tmp45 = _tmp44 * _x_T_s[0];
  const Scalar _tmp46 = _tmp38 * _x0[0] - _tmp42 * _x0[1];
  const Scalar _tmp47 = _tmp46 * _x_T_s[1];
  const Scalar _tmp48 = _tmp45 + _tmp47;
  const Scalar _tmp49 = -_tmp44 * _x_T_s[3] + _tmp46 * _x_T_s[2] + _x0[2] +
                        lambdas(0, 0) * (-_x0[2] + _x1[2]) + lambdas(1, 0) * (-_x1[2] + _x2[2]) +
                        lambdas(2, 0) * (-_x2[2] + _x3[2]);
  const Scalar _tmp50 = -_tmp44 * _x_T_s[1] + _tmp46 * _x_T_s[0];
  const Scalar _tmp51 = _tmp44 * _x_T_s[2] + _tmp46 * _x_T_s[3] + _x0[3] +
                        lambdas(0, 0) * (-_x0[3] + _x1[3]) + lambdas(1, 0) * (-_x1[3] + _x2[3]) +
                        lambdas(2, 0) * (-_x2[3] + _x3[3]);
  const Scalar _tmp52 = _tmp50 * _tmp51;
  const Scalar _tmp53 = _tmp50 * _y[3];
  const Scalar _tmp54 = _tmp48 * _tmp49 - _tmp48 * _y[2] - _tmp52 + _tmp53 - s_T_y(1, 0);
  const Scalar _tmp55 = _tmp49 * _tmp50;
  const Scalar _tmp56 = _tmp50 * _y[2];
  const Scalar _tmp57 = -_tmp48 * _tmp51 + _tmp48 * _y[3] - _tmp55 + _tmp56 - s_T_y(0, 0);
  const Scalar _tmp58 = std::pow(_tmp25, Scalar(2));
  const Scalar _tmp59 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp60 = Scalar(1.0) / (_tmp59);
  const Scalar _tmp61 = Scalar(1.0) / (_tmp29);
  const Scalar _tmp62 = _tmp59 * lambdas(0, 0) / (_tmp58 + _tmp59);
  const Scalar _tmp63 = _tmp62 * (-_tmp58 * _tmp60 + _tmp61 * (-_tmp26 - _tmp27));
  const Scalar _tmp64 = _tmp32 * _tmp63 - _tmp37 * _tmp63;
  const Scalar _tmp65 = -_tmp40 * _tmp63 - _tmp41 * _tmp63;
  const Scalar _tmp66 = -_tmp39 - _tmp43;
  const Scalar _tmp67 = -_tmp64 * _x0[1] + _tmp65 * _x0[0] + _tmp66;
  const Scalar _tmp68 = _tmp46 + _tmp64 * _x0[0] + _tmp65 * _x0[1];
  const Scalar _tmp69 = _tmp67 * _x_T_s[2] - _tmp68 * _x_T_s[3];
  const Scalar _tmp70 = _tmp67 * _x_T_s[1] + _tmp68 * _x_T_s[0];
  const Scalar _tmp71 = _tmp67 * _x_T_s[0] - _tmp68 * _x_T_s[1];
  const Scalar _tmp72 = _tmp67 * _x_T_s[3] + _tmp68 * _x_T_s[2];
  const Scalar _tmp73 = _tmp48 * _tmp69 + _tmp49 * _tmp70 - _tmp50 * _tmp72 - _tmp51 * _tmp71 -
                        _tmp70 * _y[2] + _tmp71 * _y[3];
  const Scalar _tmp74 = -_tmp48 * _tmp72 - _tmp49 * _tmp71 - _tmp50 * _tmp69 - _tmp51 * _tmp70 +
                        _tmp70 * _y[3] + _tmp71 * _y[2];
  const Scalar _tmp75 = _tmp73 * sqrt_info(0, 1) + _tmp74 * sqrt_info(0, 0);
  const Scalar _tmp76 = _tmp73 * sqrt_info(1, 1) + _tmp74 * sqrt_info(1, 0);
  const Scalar _tmp77 = 1 - lambdas(0, 0);
  const Scalar _tmp78 = _tmp50 * sqrt_info(0, 0);
  const Scalar _tmp79 = _tmp48 * _tmp77;
  const Scalar _tmp80 = _tmp50 * sqrt_info(1, 0);
  const Scalar _tmp81 = _tmp50 * sqrt_info(0, 1);
  const Scalar _tmp82 = _tmp48 * sqrt_info(0, 0);
  const Scalar _tmp83 = _tmp50 * sqrt_info(1, 1);
  const Scalar _tmp84 = _tmp48 * sqrt_info(1, 0);
  const Scalar _tmp85 = std::pow(_tmp11, Scalar(2));
  const Scalar _tmp86 = std::pow(_tmp15, Scalar(2));
  const Scalar _tmp87 = Scalar(1.0) / (_tmp86);
  const Scalar _tmp88 = Scalar(1.0) / (_tmp15);
  const Scalar _tmp89 = _tmp86 * lambdas(1, 0) / (_tmp85 + _tmp86);
  const Scalar _tmp90 = _tmp89 * (-_tmp85 * _tmp87 + _tmp88 * (-_tmp12 - _tmp13));
  const Scalar _tmp91 = -_tmp18 * _tmp90 + _tmp21 * _tmp90;
  const Scalar _tmp92 = -_tmp33 * _tmp90 - _tmp34 * _tmp90;
  const Scalar _tmp93 = _tmp62 * (-_tmp25 * _tmp60 * (_tmp23 - _tmp24) + _tmp28 * _tmp61);
  const Scalar _tmp94 = _tmp31 * _tmp91 + _tmp32 * _tmp93 + _tmp36 * _tmp92 - _tmp37 * _tmp93;
  const Scalar _tmp95 = _tmp31 * _tmp92 - _tmp36 * _tmp91 - _tmp40 * _tmp93 - _tmp41 * _tmp93;
  const Scalar _tmp96 = -_tmp94 * _x0[1] + _tmp95 * _x0[0];
  const Scalar _tmp97 = _tmp94 * _x0[0] + _tmp95 * _x0[1];
  const Scalar _tmp98 = _tmp96 * _x_T_s[2] - _tmp97 * _x_T_s[3];
  const Scalar _tmp99 = _tmp96 * _x_T_s[3] + _tmp97 * _x_T_s[2];
  const Scalar _tmp100 = _tmp96 * _x_T_s[1] + _tmp97 * _x_T_s[0];
  const Scalar _tmp101 = _tmp96 * _x_T_s[0] - _tmp97 * _x_T_s[1];
  const Scalar _tmp102 = -_tmp100 * _tmp51 + _tmp100 * _y[3] - _tmp101 * _tmp49 + _tmp101 * _y[2] -
                         _tmp48 * _tmp99 - _tmp50 * _tmp98;
  const Scalar _tmp103 = _tmp100 * _tmp49 - _tmp100 * _y[2] - _tmp101 * _tmp51 + _tmp101 * _y[3] +
                         _tmp48 * _tmp98 - _tmp50 * _tmp99;
  const Scalar _tmp104 = _tmp102 * sqrt_info(0, 0) + _tmp103 * sqrt_info(0, 1);
  const Scalar _tmp105 = _tmp102 * sqrt_info(1, 0) + _tmp103 * sqrt_info(1, 1);
  const Scalar _tmp106 = lambdas(0, 0) - lambdas(1, 0);
  const Scalar _tmp107 = _tmp106 * _tmp48;
  const Scalar _tmp108 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp109 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp110 = Scalar(1.0) / (_tmp109);
  const Scalar _tmp111 = Scalar(1.0) / (_tmp6);
  const Scalar _tmp112 = -_tmp108 * _tmp110 + _tmp111 * (-_tmp3 - _tmp4);
  const Scalar _tmp113 = _tmp109 * lambdas(2, 0) / (_tmp108 + _tmp109);
  const Scalar _tmp114 = _tmp113 * _tmp33;
  const Scalar _tmp115 = _tmp112 * _tmp113;
  const Scalar _tmp116 = _tmp89 * (-_tmp11 * _tmp87 * (_tmp10 - _tmp9) + _tmp14 * _tmp88);
  const Scalar _tmp117 =
      -_tmp112 * _tmp114 - _tmp115 * _tmp34 - _tmp116 * _tmp33 - _tmp116 * _tmp34;
  const Scalar _tmp118 = -_tmp115 * _tmp18 + _tmp115 * _tmp21 - _tmp116 * _tmp18 + _tmp116 * _tmp21;
  const Scalar _tmp119 = _tmp117 * _tmp36 + _tmp118 * _tmp31;
  const Scalar _tmp120 = _tmp117 * _tmp31 - _tmp118 * _tmp36;
  const Scalar _tmp121 = _tmp119 * _x0[0] + _tmp120 * _x0[1];
  const Scalar _tmp122 = -_tmp119 * _x0[1] + _tmp120 * _x0[0];
  const Scalar _tmp123 = -_tmp121 * _x_T_s[3] + _tmp122 * _x_T_s[2];
  const Scalar _tmp124 = _tmp121 * _x_T_s[2] + _tmp122 * _x_T_s[3];
  const Scalar _tmp125 = _tmp121 * _x_T_s[0] + _tmp122 * _x_T_s[1];
  const Scalar _tmp126 = -_tmp121 * _x_T_s[1] + _tmp122 * _x_T_s[0];
  const Scalar _tmp127 = _tmp123 * _tmp48 - _tmp124 * _tmp50 + _tmp125 * _tmp49 - _tmp125 * _y[2] -
                         _tmp126 * _tmp51 + _tmp126 * _y[3];
  const Scalar _tmp128 = -_tmp123 * _tmp50 - _tmp124 * _tmp48 - _tmp125 * _tmp51 + _tmp125 * _y[3] -
                         _tmp126 * _tmp49 + _tmp126 * _y[2];
  const Scalar _tmp129 = _tmp127 * sqrt_info(0, 1) + _tmp128 * sqrt_info(0, 0);
  const Scalar _tmp130 = _tmp127 * sqrt_info(1, 1) + _tmp128 * sqrt_info(1, 0);
  const Scalar _tmp131 = lambdas(1, 0) - lambdas(2, 0);
  const Scalar _tmp132 = _tmp131 * _tmp48;
  const Scalar _tmp133 = -_tmp110 * _tmp2 * (_tmp0 - _tmp1) + _tmp111 * _tmp5;
  const Scalar _tmp134 = _tmp113 * _tmp133;
  const Scalar _tmp135 = -_tmp134 * _tmp18 + _tmp134 * _tmp21;
  const Scalar _tmp136 = -_tmp114 * _tmp133 - _tmp134 * _tmp34;
  const Scalar _tmp137 = -_tmp135 * _tmp36 + _tmp136 * _tmp31;
  const Scalar _tmp138 = _tmp135 * _tmp31 + _tmp136 * _tmp36;
  const Scalar _tmp139 = _tmp137 * _x0[1] + _tmp138 * _x0[0];
  const Scalar _tmp140 = _tmp137 * _x0[0] - _tmp138 * _x0[1];
  const Scalar _tmp141 = -_tmp139 * _x_T_s[3] + _tmp140 * _x_T_s[2];
  const Scalar _tmp142 = _tmp139 * _x_T_s[2] + _tmp140 * _x_T_s[3];
  const Scalar _tmp143 = -_tmp139 * _x_T_s[1] + _tmp140 * _x_T_s[0];
  const Scalar _tmp144 = _tmp139 * _x_T_s[0] + _tmp140 * _x_T_s[1];
  const Scalar _tmp145 = _tmp141 * _tmp48 - _tmp142 * _tmp50 - _tmp143 * _tmp51 + _tmp143 * _y[3] +
                         _tmp144 * _tmp49 - _tmp144 * _y[2];
  const Scalar _tmp146 = -_tmp141 * _tmp50 - _tmp142 * _tmp48 - _tmp143 * _tmp49 + _tmp143 * _y[2] -
                         _tmp144 * _tmp51 + _tmp144 * _y[3];
  const Scalar _tmp147 = _tmp145 * sqrt_info(0, 1) + _tmp146 * sqrt_info(0, 0);
  const Scalar _tmp148 = _tmp145 * sqrt_info(1, 1) + _tmp146 * sqrt_info(1, 0);
  const Scalar _tmp149 = _tmp48 * lambdas(2, 0);
  const Scalar _tmp150 = -_tmp45 - _tmp47;
  const Scalar _tmp151 = -_tmp150 * _tmp49 + _tmp150 * _y[2] - _tmp52 + _tmp53;
  const Scalar _tmp152 = -_tmp150 * _tmp51 + _tmp150 * _y[3] + _tmp55 - _tmp56;
  const Scalar _tmp153 = _tmp151 * sqrt_info(0, 0) + _tmp152 * sqrt_info(0, 1);
  const Scalar _tmp154 = _tmp151 * sqrt_info(1, 0) + _tmp152 * sqrt_info(1, 1);
  const Scalar _tmp155 = _tmp46 * _tmp48;
  const Scalar _tmp156 = _tmp155 - _tmp44 * _tmp50;
  const Scalar _tmp157 = -_tmp46 * _tmp50;
  const Scalar _tmp158 = _tmp157 - _tmp44 * _tmp48;
  const Scalar _tmp159 = -_tmp155 - _tmp50 * _tmp66;
  const Scalar _tmp160 = _tmp157 + _tmp48 * _tmp66;

  // Output terms (7)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) = _tmp54 * sqrt_info(0, 1) + _tmp57 * sqrt_info(0, 0);
  _res(1, 0) = _tmp54 * sqrt_info(1, 1) + _tmp57 * sqrt_info(1, 0);

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 4, Eigen::RowMajor>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = -_tmp75 * _x0[1];
    _res_D_x0(1, 0) = -_tmp76 * _x0[1];
    _res_D_x0(0, 1) = _tmp75 * _x0[0];
    _res_D_x0(1, 1) = _tmp76 * _x0[0];
    _res_D_x0(0, 2) = -_tmp77 * _tmp78 + _tmp79 * sqrt_info(0, 1);
    _res_D_x0(1, 2) = -_tmp77 * _tmp80 + _tmp79 * sqrt_info(1, 1);
    _res_D_x0(0, 3) = -_tmp77 * _tmp81 - _tmp77 * _tmp82;
    _res_D_x0(1, 3) = -_tmp77 * _tmp83 - _tmp77 * _tmp84;
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 4, Eigen::RowMajor>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = -_tmp104 * _x1[1];
    _res_D_x1(1, 0) = -_tmp105 * _x1[1];
    _res_D_x1(0, 1) = _tmp104 * _x1[0];
    _res_D_x1(1, 1) = _tmp105 * _x1[0];
    _res_D_x1(0, 2) = -_tmp106 * _tmp78 + _tmp107 * sqrt_info(0, 1);
    _res_D_x1(1, 2) = -_tmp106 * _tmp80 + _tmp107 * sqrt_info(1, 1);
    _res_D_x1(0, 3) = -_tmp106 * _tmp81 - _tmp106 * _tmp82;
    _res_D_x1(1, 3) = -_tmp106 * _tmp83 - _tmp106 * _tmp84;
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 4, Eigen::RowMajor>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = -_tmp129 * _x2[1];
    _res_D_x2(1, 0) = -_tmp130 * _x2[1];
    _res_D_x2(0, 1) = _tmp129 * _x2[0];
    _res_D_x2(1, 1) = _tmp130 * _x2[0];
    _res_D_x2(0, 2) = -_tmp131 * _tmp78 + _tmp132 * sqrt_info(0, 1);
    _res_D_x2(1, 2) = -_tmp131 * _tmp80 + _tmp132 * sqrt_info(1, 1);
    _res_D_x2(0, 3) = -_tmp131 * _tmp81 - _tmp131 * _tmp82;
    _res_D_x2(1, 3) = -_tmp131 * _tmp83 - _tmp131 * _tmp84;
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 4, Eigen::RowMajor>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) = -_tmp147 * _x3[1];
    _res_D_x3(1, 0) = -_tmp148 * _x3[1];
    _res_D_x3(0, 1) = _tmp147 * _x3[0];
    _res_D_x3(1, 1) = _tmp148 * _x3[0];
    _res_D_x3(0, 2) = _tmp149 * sqrt_info(0, 1) - _tmp78 * lambdas(2, 0);
    _res_D_x3(1, 2) = _tmp149 * sqrt_info(1, 1) - _tmp80 * lambdas(2, 0);
    _res_D_x3(0, 3) = -_tmp81 * lambdas(2, 0) - _tmp82 * lambdas(2, 0);
    _res_D_x3(1, 3) = -_tmp83 * lambdas(2, 0) - _tmp84 * lambdas(2, 0);
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 4, Eigen::RowMajor>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s(0, 0) = -_tmp153 * _x_T_s[1];
    _res_D_x_T_s(1, 0) = -_tmp154 * _x_T_s[1];
    _res_D_x_T_s(0, 1) = _tmp153 * _x_T_s[0];
    _res_D_x_T_s(1, 1) = _tmp154 * _x_T_s[0];
    _res_D_x_T_s(0, 2) = _tmp156 * sqrt_info(0, 1) + _tmp158 * sqrt_info(0, 0);
    _res_D_x_T_s(1, 2) = _tmp156 * sqrt_info(1, 1) + _tmp158 * sqrt_info(1, 0);
    _res_D_x_T_s(0, 3) = _tmp159 * sqrt_info(0, 0) + _tmp160 * sqrt_info(0, 1);
    _res_D_x_T_s(1, 3) = _tmp159 * sqrt_info(1, 0) + _tmp160 * sqrt_info(1, 1);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 4, Eigen::RowMajor>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = 0;
    _res_D_y(1, 0) = 0;
    _res_D_y(0, 1) = 0;
    _res_D_y(1, 1) = 0;
    _res_D_y(0, 2) = _tmp150 * sqrt_info(0, 1) + _tmp78;
    _res_D_y(1, 2) = _tmp150 * sqrt_info(1, 1) + _tmp80;
    _res_D_y(0, 3) = _tmp81 + _tmp82;
    _res_D_y(1, 3) = _tmp83 + _tmp84;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
