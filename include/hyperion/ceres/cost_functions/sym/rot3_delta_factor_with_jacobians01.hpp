// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: rot3_delta_factor
 *
 * Args:
 *     x: Rot3
 *     y: Rot3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg x (4) (row-major)
 *     res_D_y: (3x4) jacobian (result_dim x storage_dim) of res (3) wrt arg y (4) (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Rot3DeltaFactorWithJacobians01(
    const sym::Rot3<Scalar>& x, const sym::Rot3<Scalar>& y,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 601

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (160)
  const Scalar _tmp0 = _x[3] * _y[2];
  const Scalar _tmp1 = _x[1] * _y[0];
  const Scalar _tmp2 = _x[0] * _y[1];
  const Scalar _tmp3 = _x[2] * _y[3];
  const Scalar _tmp4 = _tmp0 + _tmp1 - _tmp2 - _tmp3;
  const Scalar _tmp5 = _x[3] * _y[3];
  const Scalar _tmp6 = _x[1] * _y[1];
  const Scalar _tmp7 = _x[0] * _y[0];
  const Scalar _tmp8 = _x[2] * _y[2];
  const Scalar _tmp9 = _tmp5 + _tmp6 + _tmp7 + _tmp8;
  const Scalar _tmp10 = 2 * std::min<Scalar>(0, (((_tmp9) > 0) - ((_tmp9) < 0))) + 1;
  const Scalar _tmp11 = 2 * _tmp10;
  const Scalar _tmp12 = 1 - epsilon;
  const Scalar _tmp13 = std::min<Scalar>(_tmp12, std::fabs(_tmp9));
  const Scalar _tmp14 = std::acos(_tmp13) / std::sqrt(Scalar(1 - std::pow(_tmp13, Scalar(2))));
  const Scalar _tmp15 = _tmp11 * _tmp14;
  const Scalar _tmp16 = _tmp15 * _tmp4;
  const Scalar _tmp17 = _x[3] * _y[1];
  const Scalar _tmp18 = _x[1] * _y[3];
  const Scalar _tmp19 = _x[0] * _y[2];
  const Scalar _tmp20 = _x[2] * _y[0];
  const Scalar _tmp21 = _tmp17 - _tmp18 + _tmp19 - _tmp20;
  const Scalar _tmp22 = _tmp15 * _tmp21;
  const Scalar _tmp23 = _x[3] * _y[0];
  const Scalar _tmp24 = _x[1] * _y[2];
  const Scalar _tmp25 = _x[0] * _y[3];
  const Scalar _tmp26 = _x[2] * _y[1];
  const Scalar _tmp27 = _tmp23 - _tmp24 - _tmp25 + _tmp26;
  const Scalar _tmp28 = _tmp15 * _tmp27;
  const Scalar _tmp29 = _tmp11 * sqrt_info(1, 1);
  const Scalar _tmp30 = _tmp4 * sqrt_info(2, 2);
  const Scalar _tmp31 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp32 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp33 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp34 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp35 = _tmp31 + _tmp32 - _tmp33 - _tmp34;
  const Scalar _tmp36 = _tmp5 + _tmp6 + _tmp7 + _tmp8;
  const Scalar _tmp37 = std::fabs(_tmp36);
  const Scalar _tmp38 = std::min<Scalar>(_tmp12, _tmp37);
  const Scalar _tmp39 = std::acos(_tmp38);
  const Scalar _tmp40 = 1 - std::pow(_tmp38, Scalar(2));
  const Scalar _tmp41 = _tmp10 * ((((_tmp12 - _tmp37) > 0) - ((_tmp12 - _tmp37) < 0)) + 1) *
                        (((_tmp36) > 0) - ((_tmp36) < 0));
  const Scalar _tmp42 = _tmp38 * _tmp39 * _tmp41 / (_tmp40 * std::sqrt(_tmp40));
  const Scalar _tmp43 = _tmp21 * _tmp42;
  const Scalar _tmp44 = _tmp35 * _tmp43;
  const Scalar _tmp45 = _tmp4 * sqrt_info(0, 2);
  const Scalar _tmp46 = _tmp42 * _tmp45;
  const Scalar _tmp47 = _tmp41 / _tmp40;
  const Scalar _tmp48 = _tmp27 * _tmp47;
  const Scalar _tmp49 = _tmp48 * sqrt_info(0, 0);
  const Scalar _tmp50 = _tmp35 * _tmp47;
  const Scalar _tmp51 = _tmp21 * _tmp50;
  const Scalar _tmp52 = _tmp27 * sqrt_info(0, 0);
  const Scalar _tmp53 = _tmp35 * _tmp42;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp58 = -_tmp54 - _tmp55 - _tmp56 - _tmp57;
  const Scalar _tmp59 = _tmp39 / std::sqrt(_tmp40);
  const Scalar _tmp60 = _tmp11 * _tmp59;
  const Scalar _tmp61 = _tmp58 * _tmp60;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp63 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp65 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp66 = -_tmp62 + _tmp63 + _tmp64 - _tmp65;
  const Scalar _tmp67 = _tmp60 * _tmp66;
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp69 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp70 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp71 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp72 = _tmp68 - _tmp69 + _tmp70 - _tmp71;
  const Scalar _tmp73 = _tmp72 * sqrt_info(0, 0);
  const Scalar _tmp74 = _tmp60 * _tmp73 + _tmp67 * sqrt_info(0, 1);
  const Scalar _tmp75 = _tmp35 * _tmp46 - _tmp35 * _tmp49 + _tmp44 * sqrt_info(0, 1) -
                        _tmp45 * _tmp50 - _tmp51 * sqrt_info(0, 1) + _tmp52 * _tmp53 +
                        _tmp61 * sqrt_info(0, 2) + _tmp74;
  const Scalar _tmp76 = 2 * _x[1];
  const Scalar _tmp77 = _tmp47 * _tmp72;
  const Scalar _tmp78 = _tmp21 * _tmp77;
  const Scalar _tmp79 = _tmp42 * _tmp72;
  const Scalar _tmp80 = _tmp21 * _tmp79;
  const Scalar _tmp81 = _tmp62 - _tmp63 - _tmp64 + _tmp65;
  const Scalar _tmp82 = _tmp60 * _tmp81;
  const Scalar _tmp83 = -_tmp31 - _tmp32 + _tmp33 + _tmp34;
  const Scalar _tmp84 = _tmp60 * _tmp83;
  const Scalar _tmp85 = _tmp82 * sqrt_info(0, 2) + _tmp84 * sqrt_info(0, 0);
  const Scalar _tmp86 = _tmp27 * _tmp42 * _tmp73 - _tmp45 * _tmp77 + _tmp45 * _tmp79 -
                        _tmp48 * _tmp73 + _tmp61 * sqrt_info(0, 1) - _tmp78 * sqrt_info(0, 1) +
                        _tmp80 * sqrt_info(0, 1) + _tmp85;
  const Scalar _tmp87 = 2 * _x[2];
  const Scalar _tmp88 = _tmp47 * _tmp81;
  const Scalar _tmp89 = _tmp21 * _tmp47;
  const Scalar _tmp90 = _tmp81 * _tmp89;
  const Scalar _tmp91 = _tmp42 * _tmp81;
  const Scalar _tmp92 = _tmp43 * _tmp81;
  const Scalar _tmp93 = -_tmp68 + _tmp69 - _tmp70 + _tmp71;
  const Scalar _tmp94 = _tmp60 * _tmp93;
  const Scalar _tmp95 = _tmp35 * _tmp60;
  const Scalar _tmp96 = _tmp94 * sqrt_info(0, 2) + _tmp95 * sqrt_info(0, 1);
  const Scalar _tmp97 = -_tmp45 * _tmp88 + _tmp46 * _tmp81 - _tmp49 * _tmp81 + _tmp52 * _tmp91 +
                        _tmp61 * sqrt_info(0, 0) - _tmp90 * sqrt_info(0, 1) +
                        _tmp92 * sqrt_info(0, 1) + _tmp96;
  const Scalar _tmp98 = 2 * _tmp97;
  const Scalar _tmp99 = _tmp4 * sqrt_info(1, 2);
  const Scalar _tmp100 = _tmp42 * _tmp99;
  const Scalar _tmp101 = _tmp48 * sqrt_info(1, 0);
  const Scalar _tmp102 = _tmp27 * sqrt_info(1, 0);
  const Scalar _tmp103 = _tmp29 * _tmp59;
  const Scalar _tmp104 = _tmp60 * _tmp72;
  const Scalar _tmp105 = _tmp103 * _tmp66 + _tmp104 * sqrt_info(1, 0);
  const Scalar _tmp106 = _tmp100 * _tmp35 - _tmp101 * _tmp35 + _tmp102 * _tmp53 + _tmp105 +
                         _tmp44 * sqrt_info(1, 1) - _tmp50 * _tmp99 - _tmp51 * sqrt_info(1, 1) +
                         _tmp61 * sqrt_info(1, 2);
  const Scalar _tmp107 = _tmp82 * sqrt_info(1, 2) + _tmp84 * sqrt_info(1, 0);
  const Scalar _tmp108 = -_tmp101 * _tmp72 + _tmp102 * _tmp79 + _tmp103 * _tmp58 + _tmp107 -
                         _tmp77 * _tmp99 - _tmp78 * sqrt_info(1, 1) + _tmp79 * _tmp99 +
                         _tmp80 * sqrt_info(1, 1);
  const Scalar _tmp109 = _tmp47 * _tmp99;
  const Scalar _tmp110 = _tmp103 * _tmp35 + _tmp94 * sqrt_info(1, 2);
  const Scalar _tmp111 = _tmp100 * _tmp81 - _tmp101 * _tmp81 + _tmp102 * _tmp91 - _tmp109 * _tmp81 +
                         _tmp110 + _tmp61 * sqrt_info(1, 0) - _tmp90 * sqrt_info(1, 1) +
                         _tmp92 * sqrt_info(1, 1);
  const Scalar _tmp112 = 2 * _tmp111;
  const Scalar _tmp113 = _tmp30 * _tmp42;
  const Scalar _tmp114 = _tmp48 * sqrt_info(2, 0);
  const Scalar _tmp115 = _tmp27 * sqrt_info(2, 0);
  const Scalar _tmp116 = _tmp104 * sqrt_info(2, 0) + _tmp67 * sqrt_info(2, 1);
  const Scalar _tmp117 = _tmp113 * _tmp35 - _tmp114 * _tmp35 + _tmp115 * _tmp53 + _tmp116 -
                         _tmp30 * _tmp50 + _tmp44 * sqrt_info(2, 1) - _tmp51 * sqrt_info(2, 1) +
                         _tmp61 * sqrt_info(2, 2);
  const Scalar _tmp118 = _tmp82 * sqrt_info(2, 2) + _tmp84 * sqrt_info(2, 0);
  const Scalar _tmp119 = -_tmp114 * _tmp72 + _tmp115 * _tmp79 + _tmp118 - _tmp30 * _tmp77 +
                         _tmp30 * _tmp79 + _tmp61 * sqrt_info(2, 1) - _tmp78 * sqrt_info(2, 1) +
                         _tmp80 * sqrt_info(2, 1);
  const Scalar _tmp120 = _tmp94 * sqrt_info(2, 2) + _tmp95 * sqrt_info(2, 1);
  const Scalar _tmp121 = _tmp113 * _tmp81 - _tmp114 * _tmp81 + _tmp115 * _tmp91 + _tmp120 -
                         _tmp30 * _tmp88 + _tmp61 * sqrt_info(2, 0) - _tmp90 * sqrt_info(2, 1) +
                         _tmp92 * sqrt_info(2, 1);
  const Scalar _tmp122 = 2 * _tmp121;
  const Scalar _tmp123 = 2 * _x[0];
  const Scalar _tmp124 = 2 * _tmp86;
  const Scalar _tmp125 = 2 * _tmp106;
  const Scalar _tmp126 = 2 * _tmp108;
  const Scalar _tmp127 = 2 * _tmp119;
  const Scalar _tmp128 = 2 * _x[3];
  const Scalar _tmp129 = _tmp42 * _tmp93;
  const Scalar _tmp130 = _tmp47 * _tmp93;
  const Scalar _tmp131 = _tmp130 * _tmp21;
  const Scalar _tmp132 = _tmp43 * _tmp93;
  const Scalar _tmp133 = _tmp59 * (_tmp54 + _tmp55 + _tmp56 + _tmp57);
  const Scalar _tmp134 = _tmp11 * _tmp133;
  const Scalar _tmp135 = _tmp129 * _tmp52 - _tmp130 * _tmp45 - _tmp131 * sqrt_info(0, 1) +
                         _tmp132 * sqrt_info(0, 1) + _tmp134 * sqrt_info(0, 1) + _tmp46 * _tmp93 -
                         _tmp49 * _tmp93 + _tmp85;
  const Scalar _tmp136 = 2 * _tmp135;
  const Scalar _tmp137 = _tmp42 * _tmp66;
  const Scalar _tmp138 = _tmp66 * _tmp89;
  const Scalar _tmp139 = _tmp137 * _tmp21;
  const Scalar _tmp140 = _tmp47 * _tmp66;
  const Scalar _tmp141 = _tmp134 * sqrt_info(0, 0) + _tmp137 * _tmp52 - _tmp138 * sqrt_info(0, 1) +
                         _tmp139 * sqrt_info(0, 1) - _tmp140 * _tmp45 + _tmp46 * _tmp66 -
                         _tmp49 * _tmp66 + _tmp96;
  const Scalar _tmp142 = 2 * _tmp141;
  const Scalar _tmp143 = _tmp42 * _tmp83;
  const Scalar _tmp144 = _tmp143 * _tmp21;
  const Scalar _tmp145 = _tmp47 * _tmp83;
  const Scalar _tmp146 = _tmp83 * _tmp89;
  const Scalar _tmp147 = _tmp134 * sqrt_info(0, 2) + _tmp143 * _tmp52 + _tmp144 * sqrt_info(0, 1) -
                         _tmp145 * _tmp45 - _tmp146 * sqrt_info(0, 1) + _tmp46 * _tmp83 -
                         _tmp49 * _tmp83 + _tmp74;
  const Scalar _tmp148 = 2 * _y[1];
  const Scalar _tmp149 = _tmp100 * _tmp93 - _tmp101 * _tmp93 + _tmp102 * _tmp129 + _tmp107 -
                         _tmp130 * _tmp99 - _tmp131 * sqrt_info(1, 1) + _tmp132 * sqrt_info(1, 1) +
                         _tmp133 * _tmp29;
  const Scalar _tmp150 = 2 * _y[2];
  const Scalar _tmp151 = _tmp100 * _tmp66 - _tmp101 * _tmp66 + _tmp102 * _tmp137 -
                         _tmp109 * _tmp66 + _tmp110 + _tmp134 * sqrt_info(1, 0) -
                         _tmp138 * sqrt_info(1, 1) + _tmp139 * sqrt_info(1, 1);
  const Scalar _tmp152 = 2 * _tmp151;
  const Scalar _tmp153 = -_tmp101 * _tmp83 + _tmp102 * _tmp143 + _tmp105 - _tmp109 * _tmp83 +
                         _tmp134 * sqrt_info(1, 2) + _tmp143 * _tmp99 + _tmp144 * sqrt_info(1, 1) -
                         _tmp146 * sqrt_info(1, 1);
  const Scalar _tmp154 = _tmp113 * _tmp93 - _tmp114 * _tmp93 + _tmp115 * _tmp129 + _tmp118 -
                         _tmp130 * _tmp30 - _tmp131 * sqrt_info(2, 1) + _tmp132 * sqrt_info(2, 1) +
                         _tmp134 * sqrt_info(2, 1);
  const Scalar _tmp155 = _tmp113 * _tmp66 - _tmp114 * _tmp66 + _tmp115 * _tmp137 + _tmp120 +
                         _tmp134 * sqrt_info(2, 0) - _tmp138 * sqrt_info(2, 1) +
                         _tmp139 * sqrt_info(2, 1) - _tmp140 * _tmp30;
  const Scalar _tmp156 = 2 * _tmp155;
  const Scalar _tmp157 = _tmp113 * _tmp83 - _tmp114 * _tmp83 + _tmp115 * _tmp143 + _tmp116 +
                         _tmp134 * sqrt_info(2, 2) + _tmp144 * sqrt_info(2, 1) - _tmp145 * _tmp30 -
                         _tmp146 * sqrt_info(2, 1);
  const Scalar _tmp158 = 2 * _y[0];
  const Scalar _tmp159 = 2 * _y[3];

  // Output terms (3)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp16 * sqrt_info(0, 2) + _tmp22 * sqrt_info(0, 1) + _tmp28 * sqrt_info(0, 0);
  _res(1, 0) = _tmp14 * _tmp21 * _tmp29 + _tmp16 * sqrt_info(1, 2) + _tmp28 * sqrt_info(1, 0);
  _res(2, 0) = _tmp15 * _tmp30 + _tmp22 * sqrt_info(2, 1) + _tmp28 * sqrt_info(2, 0);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp75 * _tmp76 - _tmp86 * _tmp87 + _tmp98 * _x[3];
    _res_D_x(1, 0) = _tmp106 * _tmp76 - _tmp108 * _tmp87 + _tmp112 * _x[3];
    _res_D_x(2, 0) = _tmp117 * _tmp76 - _tmp119 * _tmp87 + _tmp122 * _x[3];
    _res_D_x(0, 1) = -_tmp123 * _tmp75 + _tmp124 * _x[3] + _tmp87 * _tmp97;
    _res_D_x(1, 1) = _tmp111 * _tmp87 - _tmp125 * _x[0] + _tmp126 * _x[3];
    _res_D_x(2, 1) = -_tmp117 * _tmp123 + _tmp121 * _tmp87 + _tmp127 * _x[3];
    _res_D_x(0, 2) = _tmp124 * _x[0] + _tmp128 * _tmp75 - _tmp98 * _x[1];
    _res_D_x(1, 2) = -_tmp112 * _x[1] + _tmp125 * _x[3] + _tmp126 * _x[0];
    _res_D_x(2, 2) = _tmp117 * _tmp128 - _tmp122 * _x[1] + _tmp127 * _x[0];
    _res_D_x(0, 3) = -_tmp124 * _x[1] - _tmp75 * _tmp87 - _tmp98 * _x[0];
    _res_D_x(1, 3) = -_tmp106 * _tmp87 - _tmp112 * _x[0] - _tmp126 * _x[1];
    _res_D_x(2, 3) = -_tmp117 * _tmp87 - _tmp122 * _x[0] - _tmp127 * _x[1];
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 4, Eigen::RowMajor>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = -_tmp136 * _y[2] + _tmp142 * _y[3] + _tmp147 * _tmp148;
    _res_D_y(1, 0) = _tmp148 * _tmp153 - _tmp149 * _tmp150 + _tmp152 * _y[3];
    _res_D_y(2, 0) = _tmp148 * _tmp157 - _tmp150 * _tmp154 + _tmp156 * _y[3];
    _res_D_y(0, 1) = _tmp136 * _y[3] + _tmp142 * _y[2] - _tmp147 * _tmp158;
    _res_D_y(1, 1) = _tmp149 * _tmp159 + _tmp152 * _y[2] - _tmp153 * _tmp158;
    _res_D_y(2, 1) = _tmp154 * _tmp159 + _tmp156 * _y[2] - _tmp157 * _tmp158;
    _res_D_y(0, 2) = _tmp136 * _y[0] - _tmp141 * _tmp148 + _tmp147 * _tmp159;
    _res_D_y(1, 2) = -_tmp148 * _tmp151 + _tmp149 * _tmp158 + _tmp153 * _tmp159;
    _res_D_y(2, 2) = -_tmp148 * _tmp155 + _tmp154 * _tmp158 + _tmp157 * _tmp159;
    _res_D_y(0, 3) = -_tmp135 * _tmp148 - _tmp142 * _y[0] - _tmp147 * _tmp150;
    _res_D_y(1, 3) = -_tmp148 * _tmp149 - _tmp150 * _tmp153 - _tmp151 * _tmp158;
    _res_D_y(2, 3) = -_tmp148 * _tmp154 - _tmp150 * _tmp157 - _tmp155 * _tmp158;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
