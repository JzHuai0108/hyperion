// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_r3_sensor_delta_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_y: Matrix31
 *     y: Pose3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose3R3SensorDeltaFactor(const sym::Pose3<Scalar>& x,
                                                     const Eigen::Matrix<Scalar, 3, 1>& x_T_y,
                                                     const sym::Pose3<Scalar>& y,
                                                     const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
                                                     const Scalar epsilon) {
  // Total ops: 79

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();

  // Intermediate terms (23)
  const Scalar _tmp0 = 2 * _x[0];
  const Scalar _tmp1 = _tmp0 * _x[2];
  const Scalar _tmp2 = 2 * _x[3];
  const Scalar _tmp3 = _tmp2 * _x[1];
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = -2 * std::pow(_x[1], Scalar(2));
  const Scalar _tmp6 = 1 - 2 * std::pow(_x[0], Scalar(2));
  const Scalar _tmp7 = _tmp5 + _tmp6;
  const Scalar _tmp8 = _tmp0 * _x[3];
  const Scalar _tmp9 = 2 * _x[1] * _x[2];
  const Scalar _tmp10 = -_tmp8 + _tmp9;
  const Scalar _tmp11 = -_tmp10 * _x[5] + _tmp10 * _y[5] - _tmp4 * _x[4] + _tmp4 * _y[4] -
                        _tmp7 * _x[6] + _tmp7 * _y[6] - x_T_y(2, 0);
  const Scalar _tmp12 = _tmp0 * _x[1];
  const Scalar _tmp13 = _tmp2 * _x[2];
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = _tmp1 - _tmp3;
  const Scalar _tmp16 = -2 * std::pow(_x[2], Scalar(2));
  const Scalar _tmp17 = _tmp16 + _tmp5 + 1;
  const Scalar _tmp18 = -_tmp14 * _x[5] + _tmp14 * _y[5] - _tmp15 * _x[6] + _tmp15 * _y[6] -
                        _tmp17 * _x[4] + _tmp17 * _y[4] - x_T_y(0, 0);
  const Scalar _tmp19 = _tmp12 - _tmp13;
  const Scalar _tmp20 = _tmp16 + _tmp6;
  const Scalar _tmp21 = _tmp8 + _tmp9;
  const Scalar _tmp22 = -_tmp19 * _x[4] + _tmp19 * _y[4] - _tmp20 * _x[5] + _tmp20 * _y[5] -
                        _tmp21 * _x[6] + _tmp21 * _y[6] - x_T_y(1, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp11 * sqrt_info(0, 2) + _tmp18 * sqrt_info(0, 0) + _tmp22 * sqrt_info(0, 1);
  _res(1, 0) = _tmp11 * sqrt_info(1, 2) + _tmp18 * sqrt_info(1, 0) + _tmp22 * sqrt_info(1, 1);
  _res(2, 0) = _tmp11 * sqrt_info(2, 2) + _tmp18 * sqrt_info(2, 0) + _tmp22 * sqrt_info(2, 1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
