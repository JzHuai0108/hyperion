// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose3_velocity_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix32
 *     x0: Pose3
 *     x1: Pose3
 *     x2: Pose3
 *     x3: Pose3
 *     velocity: Matrix61
 *     sqrt_info: Matrix66
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Spline3Pose3VelocityLocalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 2>& lambdas, const sym::Pose3<Scalar>& x0,
    const sym::Pose3<Scalar>& x1, const sym::Pose3<Scalar>& x2, const sym::Pose3<Scalar>& x3,
    const Eigen::Matrix<Scalar, 6, 1>& velocity, const Eigen::Matrix<Scalar, 6, 6>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 555

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x3 = x3.Data();

  // Intermediate terms (146)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp2 = 1 - epsilon;
  const Scalar _tmp3 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp4 = _x2[3] * _x3[3];
  const Scalar _tmp5 = std::min<Scalar>(_tmp2, std::fabs(_tmp3 - _tmp4));
  const Scalar _tmp6 = 1 - std::pow(_tmp5, Scalar(2));
  const Scalar _tmp7 =
      2 * std::min<Scalar>(0, (((-_tmp3 + _tmp4) > 0) - ((-_tmp3 + _tmp4) < 0))) + 1;
  const Scalar _tmp8 = std::acos(_tmp5);
  const Scalar _tmp9 = _tmp7 * _tmp8 / std::sqrt(_tmp6);
  const Scalar _tmp10 = 2 * _tmp9;
  const Scalar _tmp11 = _tmp10 * lambdas(2, 1);
  const Scalar _tmp12 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp13 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp14 = std::pow(_tmp7, Scalar(2)) * std::pow(_tmp8, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp6;
  const Scalar _tmp15 = 4 * _tmp14;
  const Scalar _tmp16 = std::pow(_tmp12, Scalar(2));
  const Scalar _tmp17 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp18 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp19 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp20 = _tmp13 * _tmp15 + _tmp15 * _tmp16 + _tmp15 * _tmp18 + _tmp19;
  const Scalar _tmp21 = std::sqrt(_tmp20);
  const Scalar _tmp22 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp23 = std::sin(_tmp22);
  const Scalar _tmp24 = _tmp23 * lambdas(2, 0) / _tmp21;
  const Scalar _tmp25 = _tmp12 * _tmp24;
  const Scalar _tmp26 = std::cos(_tmp22);
  const Scalar _tmp27 = 4 * _tmp26 * _tmp9;
  const Scalar _tmp28 = _tmp25 * _tmp27;
  const Scalar _tmp29 = 8 * _tmp14 * std::pow(_tmp23, Scalar(2)) / _tmp20;
  const Scalar _tmp30 = _tmp17 * _tmp29;
  const Scalar _tmp31 = _tmp1 * _tmp30;
  const Scalar _tmp32 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp33 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp34 = _x1[3] * _x2[3];
  const Scalar _tmp35 = std::min<Scalar>(_tmp2, std::fabs(_tmp33 - _tmp34));
  const Scalar _tmp36 = 1 - std::pow(_tmp35, Scalar(2));
  const Scalar _tmp37 =
      2 * std::min<Scalar>(0, (((-_tmp33 + _tmp34) > 0) - ((-_tmp33 + _tmp34) < 0))) + 1;
  const Scalar _tmp38 = std::acos(_tmp35);
  const Scalar _tmp39 = _tmp37 * _tmp38 / std::sqrt(_tmp36);
  const Scalar _tmp40 = 2 * _tmp39;
  const Scalar _tmp41 = _tmp40 * lambdas(1, 1);
  const Scalar _tmp42 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp43 = std::pow(_tmp42, Scalar(2));
  const Scalar _tmp44 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp45 = std::pow(_tmp44, Scalar(2));
  const Scalar _tmp46 = std::pow(_tmp37, Scalar(2)) * std::pow(_tmp38, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp36;
  const Scalar _tmp47 = 4 * _tmp46;
  const Scalar _tmp48 = std::pow(_tmp32, Scalar(2));
  const Scalar _tmp49 = _tmp19 + _tmp43 * _tmp47 + _tmp45 * _tmp47 + _tmp47 * _tmp48;
  const Scalar _tmp50 = std::sqrt(_tmp49);
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp50;
  const Scalar _tmp52 = std::sin(_tmp51);
  const Scalar _tmp53 = 8 * _tmp46 * std::pow(_tmp52, Scalar(2)) / _tmp49;
  const Scalar _tmp54 = -_tmp43 * _tmp53;
  const Scalar _tmp55 = -_tmp45 * _tmp53 + 1;
  const Scalar _tmp56 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp57 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp58 = _x0[3] * _x1[3];
  const Scalar _tmp59 =
      2 * std::min<Scalar>(0, (((-_tmp57 + _tmp58) > 0) - ((-_tmp57 + _tmp58) < 0))) + 1;
  const Scalar _tmp60 = std::min<Scalar>(_tmp2, std::fabs(_tmp57 - _tmp58));
  const Scalar _tmp61 = std::acos(_tmp60);
  const Scalar _tmp62 = 1 - std::pow(_tmp60, Scalar(2));
  const Scalar _tmp63 = 2 * _tmp59 * _tmp61 / std::sqrt(_tmp62);
  const Scalar _tmp64 = _tmp63 * lambdas(0, 1);
  const Scalar _tmp65 = _tmp56 * _tmp64;
  const Scalar _tmp66 = _tmp52 * lambdas(1, 0) / _tmp50;
  const Scalar _tmp67 = _tmp42 * _tmp66;
  const Scalar _tmp68 = std::cos(_tmp51);
  const Scalar _tmp69 = 4 * _tmp39 * _tmp68;
  const Scalar _tmp70 = _tmp67 * _tmp69;
  const Scalar _tmp71 = _tmp32 * _tmp53;
  const Scalar _tmp72 = _tmp44 * _tmp71;
  const Scalar _tmp73 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp74 = _tmp64 * _tmp73;
  const Scalar _tmp75 = _tmp42 * _tmp71;
  const Scalar _tmp76 = _tmp44 * _tmp66;
  const Scalar _tmp77 = _tmp69 * _tmp76;
  const Scalar _tmp78 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp79 = _tmp64 * _tmp78;
  const Scalar _tmp80 = _tmp32 * _tmp41 + _tmp65 * (_tmp54 + _tmp55) + _tmp74 * (_tmp70 + _tmp72) +
                        _tmp79 * (_tmp75 - _tmp77);
  const Scalar _tmp81 = -_tmp48 * _tmp53;
  const Scalar _tmp82 = _tmp42 * _tmp44 * _tmp53;
  const Scalar _tmp83 = _tmp32 * _tmp66;
  const Scalar _tmp84 = _tmp69 * _tmp83;
  const Scalar _tmp85 = _tmp41 * _tmp44 + _tmp65 * (-_tmp70 + _tmp72) +
                        _tmp74 * (_tmp54 + _tmp81 + 1) + _tmp79 * (_tmp82 + _tmp84);
  const Scalar _tmp86 = _tmp1 * _tmp12 * _tmp29;
  const Scalar _tmp87 = _tmp17 * _tmp24;
  const Scalar _tmp88 = _tmp27 * _tmp87;
  const Scalar _tmp89 = -_tmp16 * _tmp29;
  const Scalar _tmp90 = -_tmp18 * _tmp29;
  const Scalar _tmp91 = _tmp41 * _tmp42 + _tmp65 * (_tmp75 + _tmp77) + _tmp74 * (_tmp82 - _tmp84) +
                        _tmp79 * (_tmp55 + _tmp81);
  const Scalar _tmp92 = _tmp0 * (_tmp1 * _tmp11 + _tmp80 * (_tmp28 + _tmp31) +
                                 _tmp85 * (_tmp86 - _tmp88) + _tmp91 * (_tmp89 + _tmp90 + 1)) -
                        velocity(1, 0);
  const Scalar _tmp93 = 4 * std::pow(_tmp59, Scalar(2)) * std::pow(_tmp61, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp62;
  const Scalar _tmp94 = std::sqrt(Scalar(_tmp19 + std::pow(_tmp56, Scalar(2)) * _tmp93 +
                                         std::pow(_tmp73, Scalar(2)) * _tmp93 +
                                         std::pow(_tmp78, Scalar(2)) * _tmp93));
  const Scalar _tmp95 = (Scalar(1) / Scalar(2)) * _tmp94;
  const Scalar _tmp96 = _tmp63 * lambdas(0, 0) * std::sin(_tmp95) / _tmp94;
  const Scalar _tmp97 = _tmp78 * _tmp96;
  const Scalar _tmp98 = std::cos(_tmp95);
  const Scalar _tmp99 = _tmp73 * _tmp96;
  const Scalar _tmp100 = _tmp56 * _tmp96;
  const Scalar _tmp101 = _tmp100 * _x0[3] + _tmp97 * _x0[0] + _tmp98 * _x0[2] - _tmp99 * _x0[1];
  const Scalar _tmp102 = _tmp40 * _tmp76;
  const Scalar _tmp103 = _tmp100 * _x0[1] - _tmp97 * _x0[2] + _tmp98 * _x0[0] + _tmp99 * _x0[3];
  const Scalar _tmp104 = _tmp103 * _tmp40;
  const Scalar _tmp105 = -_tmp100 * _x0[0] + _tmp97 * _x0[3] + _tmp98 * _x0[1] + _tmp99 * _x0[2];
  const Scalar _tmp106 = -_tmp100 * _x0[2] - _tmp97 * _x0[1] + _tmp98 * _x0[3] - _tmp99 * _x0[0];
  const Scalar _tmp107 = _tmp106 * _tmp40;
  const Scalar _tmp108 = _tmp101 * _tmp102 - _tmp104 * _tmp83 + _tmp105 * _tmp68 + _tmp107 * _tmp67;
  const Scalar _tmp109 = _tmp10 * _tmp108;
  const Scalar _tmp110 = _tmp40 * _tmp67;
  const Scalar _tmp111 = _tmp40 * _tmp83;
  const Scalar _tmp112 =
      -_tmp101 * _tmp110 + _tmp103 * _tmp68 + _tmp105 * _tmp111 + _tmp107 * _tmp76;
  const Scalar _tmp113 =
      -_tmp101 * _tmp111 - _tmp104 * _tmp76 - _tmp105 * _tmp110 + _tmp106 * _tmp68;
  const Scalar _tmp114 = _tmp10 * _tmp113;
  const Scalar _tmp115 = _tmp101 * _tmp68 - _tmp102 * _tmp105 + _tmp104 * _tmp67 + _tmp107 * _tmp83;
  const Scalar _tmp116 = _tmp1 * _tmp24;
  const Scalar _tmp117 = _tmp10 * _tmp116;
  const Scalar _tmp118 = _tmp109 * _tmp87 + _tmp112 * _tmp26 + _tmp114 * _tmp25 - _tmp115 * _tmp117;
  const Scalar _tmp119 = -2 * std::pow(_tmp118, Scalar(2));
  const Scalar _tmp120 = _tmp10 * _tmp112;
  const Scalar _tmp121 =
      -_tmp109 * _tmp25 + _tmp114 * _tmp87 + _tmp115 * _tmp26 + _tmp116 * _tmp120;
  const Scalar _tmp122 = 1 - 2 * std::pow(_tmp121, Scalar(2));
  const Scalar _tmp123 = lambdas(0, 1) * (-_x0[5] + _x1[5]) + lambdas(1, 1) * (-_x1[5] + _x2[5]) +
                         lambdas(2, 1) * (-_x2[5] + _x3[5]);
  const Scalar _tmp124 = _tmp10 * _tmp115;
  const Scalar _tmp125 =
      -_tmp108 * _tmp117 + _tmp113 * _tmp26 - _tmp120 * _tmp25 - _tmp124 * _tmp87;
  const Scalar _tmp126 = 2 * _tmp121;
  const Scalar _tmp127 = _tmp125 * _tmp126;
  const Scalar _tmp128 = _tmp108 * _tmp26 + _tmp114 * _tmp116 - _tmp120 * _tmp87 + _tmp124 * _tmp25;
  const Scalar _tmp129 = 2 * _tmp118;
  const Scalar _tmp130 = _tmp128 * _tmp129;
  const Scalar _tmp131 = lambdas(0, 1) * (-_x0[4] + _x1[4]) + lambdas(1, 1) * (-_x1[4] + _x2[4]) +
                         lambdas(2, 1) * (-_x2[4] + _x3[4]);
  const Scalar _tmp132 = _tmp126 * _tmp128;
  const Scalar _tmp133 = _tmp125 * _tmp129;
  const Scalar _tmp134 = lambdas(0, 1) * (-_x0[6] + _x1[6]) + lambdas(1, 1) * (-_x1[6] + _x2[6]) +
                         lambdas(2, 1) * (-_x2[6] + _x3[6]);
  const Scalar _tmp135 = _tmp0 * (_tmp123 * (_tmp119 + _tmp122) + _tmp131 * (-_tmp127 + _tmp130) +
                                  _tmp134 * (_tmp132 + _tmp133)) -
                         velocity(4, 0);
  const Scalar _tmp136 = _tmp118 * _tmp126;
  const Scalar _tmp137 = 2 * _tmp125 * _tmp128;
  const Scalar _tmp138 = -2 * std::pow(_tmp128, Scalar(2));
  const Scalar _tmp139 = _tmp0 * (_tmp123 * (_tmp132 - _tmp133) + _tmp131 * (_tmp136 + _tmp137) +
                                  _tmp134 * (_tmp119 + _tmp138 + 1)) -
                         velocity(5, 0);
  const Scalar _tmp140 = _tmp116 * _tmp27;
  const Scalar _tmp141 = _tmp12 * _tmp30;
  const Scalar _tmp142 = -_tmp13 * _tmp29 + 1;
  const Scalar _tmp143 = _tmp0 * (_tmp11 * _tmp17 + _tmp80 * (_tmp142 + _tmp89) +
                                  _tmp85 * (_tmp140 + _tmp141) + _tmp91 * (-_tmp28 + _tmp31)) -
                         velocity(2, 0);
  const Scalar _tmp144 = _tmp0 * (_tmp11 * _tmp12 + _tmp80 * (-_tmp140 + _tmp141) +
                                  _tmp85 * (_tmp142 + _tmp90) + _tmp91 * (_tmp86 + _tmp88)) -
                         velocity(0, 0);
  const Scalar _tmp145 = _tmp0 * (_tmp123 * (_tmp127 + _tmp130) + _tmp131 * (_tmp122 + _tmp138) +
                                  _tmp134 * (_tmp136 - _tmp137)) -
                         velocity(3, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp135 * sqrt_info(0, 4) + _tmp139 * sqrt_info(0, 5) + _tmp143 * sqrt_info(0, 2) +
               _tmp144 * sqrt_info(0, 0) + _tmp145 * sqrt_info(0, 3) + _tmp92 * sqrt_info(0, 1);
  _res(1, 0) = _tmp135 * sqrt_info(1, 4) + _tmp139 * sqrt_info(1, 5) + _tmp143 * sqrt_info(1, 2) +
               _tmp144 * sqrt_info(1, 0) + _tmp145 * sqrt_info(1, 3) + _tmp92 * sqrt_info(1, 1);
  _res(2, 0) = _tmp135 * sqrt_info(2, 4) + _tmp139 * sqrt_info(2, 5) + _tmp143 * sqrt_info(2, 2) +
               _tmp144 * sqrt_info(2, 0) + _tmp145 * sqrt_info(2, 3) + _tmp92 * sqrt_info(2, 1);
  _res(3, 0) = _tmp135 * sqrt_info(3, 4) + _tmp139 * sqrt_info(3, 5) + _tmp143 * sqrt_info(3, 2) +
               _tmp144 * sqrt_info(3, 0) + _tmp145 * sqrt_info(3, 3) + _tmp92 * sqrt_info(3, 1);
  _res(4, 0) = _tmp135 * sqrt_info(4, 4) + _tmp139 * sqrt_info(4, 5) + _tmp143 * sqrt_info(4, 2) +
               _tmp144 * sqrt_info(4, 0) + _tmp145 * sqrt_info(4, 3) + _tmp92 * sqrt_info(4, 1);
  _res(5, 0) = _tmp135 * sqrt_info(5, 4) + _tmp139 * sqrt_info(5, 5) + _tmp143 * sqrt_info(5, 2) +
               _tmp144 * sqrt_info(5, 0) + _tmp145 * sqrt_info(5, 3) + _tmp92 * sqrt_info(5, 1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
