// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>
#include <sym/rot2.h>

namespace sym_ceres {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_rot2_sensor_between_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_s: Pose2
 *     s_T_y: Rot2
 *     y: Pose2
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x (4) (row-major)
 *     res_D_x_T_s: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg x_T_s (4)
 * (row-major) res_D_y: (1x4) jacobian (result_dim x storage_dim) of res (1) wrt arg y (4)
 * (row-major)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose2Rot2SensorBetweenFactorWithJacobians013(
    const sym::Pose2<Scalar>& x, const sym::Pose2<Scalar>& x_T_s, const sym::Rot2<Scalar>& s_T_y,
    const sym::Pose2<Scalar>& y, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_s = nullptr,
    Scalar* const res_D_y = nullptr) {
  // Total ops: 65

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 2, 1>& _s_T_y = s_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (24)
  const Scalar _tmp0 = _x[0] * _x_T_s[0] - _x[1] * _x_T_s[1];
  const Scalar _tmp1 = _tmp0 * _y[1];
  const Scalar _tmp2 = _x[0] * _x_T_s[1];
  const Scalar _tmp3 = _x[1] * _x_T_s[0];
  const Scalar _tmp4 = _tmp2 + _tmp3;
  const Scalar _tmp5 = _tmp4 * _y[0];
  const Scalar _tmp6 = _tmp1 - _tmp5;
  const Scalar _tmp7 = _tmp0 * _y[0];
  const Scalar _tmp8 = _tmp4 * _y[1] + _tmp7;
  const Scalar _tmp9 = _s_T_y[1] * _tmp8;
  const Scalar _tmp10 = _s_T_y[0] * _tmp6 - _tmp9;
  const Scalar _tmp11 = _s_T_y[0] * _tmp8;
  const Scalar _tmp12 = _s_T_y[1] * _tmp6 + _tmp11;
  const Scalar _tmp13 = _tmp12 + epsilon * ((((_tmp12) > 0) - ((_tmp12) < 0)) + Scalar(0.5));
  const Scalar _tmp14 = -_tmp2 - _tmp3;
  const Scalar _tmp15 = _tmp1 + _tmp14 * _y[0];
  const Scalar _tmp16 = _tmp14 * _y[1] - _tmp7;
  const Scalar _tmp17 = std::pow(_tmp13, Scalar(2));
  const Scalar _tmp18 = _tmp10 / _tmp17;
  const Scalar _tmp19 = Scalar(1.0) / (_tmp13);
  const Scalar _tmp20 = _tmp17 * sqrt_info(0, 0) / (std::pow(_tmp10, Scalar(2)) + _tmp17);
  const Scalar _tmp21 = _tmp20 * (-_tmp18 * (_s_T_y[0] * _tmp15 + _s_T_y[1] * _tmp16) +
                                  _tmp19 * (_s_T_y[0] * _tmp16 - _s_T_y[1] * _tmp15));
  const Scalar _tmp22 = -_tmp1 + _tmp5;
  const Scalar _tmp23 =
      _tmp20 * (-_tmp18 * (_s_T_y[0] * _tmp22 + _tmp9) + _tmp19 * (-_s_T_y[1] * _tmp22 + _tmp11));

  // Output terms (4)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) * std::atan2(_tmp10, _tmp13);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = -_tmp21 * _x[1];
    _res_D_x(0, 1) = _tmp21 * _x[0];
    _res_D_x(0, 2) = 0;
    _res_D_x(0, 3) = 0;
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s(0, 0) = -_tmp21 * _x_T_s[1];
    _res_D_x_T_s(0, 1) = _tmp21 * _x_T_s[0];
    _res_D_x_T_s(0, 2) = 0;
    _res_D_x_T_s(0, 3) = 0;
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 4>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = -_tmp23 * _y[1];
    _res_D_y(0, 1) = _tmp23 * _y[0];
    _res_D_y(0, 2) = 0;
    _res_D_y(0, 3) = 0;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_ceres
