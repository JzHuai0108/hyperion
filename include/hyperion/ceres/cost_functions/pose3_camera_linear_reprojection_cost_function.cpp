// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     COST_FUNCTION.cpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "pose3_camera_linear_reprojection_cost_function.hpp"

#include <span>

#include <glog/logging.h>

#include <sym/ops/storage_ops.h>
#include <sym/util/epsilon.h>

#include "sym/pose3_camera_linear_reprojection_factor.hpp"
#include "sym/pose3_camera_linear_reprojection_factor_with_jacobians0123.hpp"
#include "sym/pose3_camera_linear_reprojection_factor_with_jacobians013.hpp"
#include "sym/pose3_camera_linear_reprojection_factor_with_jacobians023.hpp"
#include "sym/pose3_camera_linear_reprojection_factor_with_jacobians03.hpp"

namespace hyperion::ceres {

using namespace sym_ceres;

auto Pose3CameraLinearReprojectionCostFunction::Evaluate(double const* const* parameters,
                                                         double* residuals,
                                                         double** jacobians) const -> bool {
  // Create aliases.
  const auto _w_T_b = sym::StorageOps<sym::Pose3<double>>::FromStorage(parameters[0]);
  const auto _b_T_c = sym::StorageOps<sym::Pose3<double>>::FromStorage(parameters[1]);
  const auto _calibration =
      sym::StorageOps<sym::LinearCameraCal<double>>::FromStorage(parameters[2]);
  const auto _l_w = sym::StorageOps<Eigen::Matrix<double, 3, 1>>::FromStorage(parameters[3]);

  // Evaluation without Jacobians.
  if (!jacobians) {
    Eigen::Map<Eigen::Matrix<double, 2, 1>>{residuals} =
        Pose3CameraLinearReprojectionFactor<double>(_w_T_b, _b_T_c, _calibration, _l_w, pixel_,
                                                    sqrt_info_, sym::kDefaultEpsilon<double>);
    return true;
  }

  // Evaluation with Jacobians.

  std::span<double*, 4> span{jacobians, 4};
  const auto bits = std::accumulate(
      span.begin(), span.end(), std::uint8_t{0},
      [](const auto x, const auto ptr) { return (x << 1) | std::uint8_t{ptr != nullptr}; });

  switch (bits | std::uint8_t{0b1001}) {
    case std::uint8_t{0b1111}: {
      Eigen::Map<Eigen::Matrix<double, 2, 1>>{residuals} =
          Pose3CameraLinearReprojectionFactorWithJacobians0123<double>(
              _w_T_b, _b_T_c, _calibration, _l_w, pixel_, sqrt_info_, sym::kDefaultEpsilon<double>,
              jacobians[0], jacobians[1], jacobians[2], jacobians[3]);
      return true;
    }
    case std::uint8_t{0b1101}: {
      Eigen::Map<Eigen::Matrix<double, 2, 1>>{residuals} =
          Pose3CameraLinearReprojectionFactorWithJacobians013<double>(
              _w_T_b, _b_T_c, _calibration, _l_w, pixel_, sqrt_info_, sym::kDefaultEpsilon<double>,
              jacobians[0], jacobians[1], jacobians[3]);
      return true;
    }
    case std::uint8_t{0b1011}: {
      Eigen::Map<Eigen::Matrix<double, 2, 1>>{residuals} =
          Pose3CameraLinearReprojectionFactorWithJacobians023<double>(
              _w_T_b, _b_T_c, _calibration, _l_w, pixel_, sqrt_info_, sym::kDefaultEpsilon<double>,
              jacobians[0], jacobians[2], jacobians[3]);
      return true;
    }
    case std::uint8_t{0b1001}: {
      Eigen::Map<Eigen::Matrix<double, 2, 1>>{residuals} =
          Pose3CameraLinearReprojectionFactorWithJacobians03<double>(
              _w_T_b, _b_T_c, _calibration, _l_w, pixel_, sqrt_info_, sym::kDefaultEpsilon<double>,
              jacobians[0], jacobians[3]);
      return true;
    }
    default: {
      LOG(FATAL) << "Invalid combination.";
      return false;
    }
  }
}

}  // namespace hyperion::ceres
