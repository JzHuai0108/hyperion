// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     COST_FUNCTION.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <ceres/sized_cost_function.h>

namespace hyperion::ceres {

class R1EuclideanDistanceCostFunction final : public ::ceres::SizedCostFunction<1, 1, 1> {
 public:
  /// Constructor.
  explicit R1EuclideanDistanceCostFunction(const Eigen::Matrix<double, 1, 1>& xdy,
                                           const Eigen::Matrix<double, 1, 1>& sqrtInfo)
      : x_d_y_{xdy}, sqrt_info_{sqrtInfo} {}

  /// xdy accessor.
  [[nodiscard]] auto xdy() const -> const Eigen::Matrix<double, 1, 1>& {
    return x_d_y_;
  }

  /// xdy modifier.
  auto xdy() -> Eigen::Matrix<double, 1, 1>& {
    return x_d_y_;
  }

  /// sqrtInfo accessor.
  [[nodiscard]] auto sqrtInfo() const -> const Eigen::Matrix<double, 1, 1>& {
    return sqrt_info_;
  }

  /// sqrtInfo modifier.
  auto sqrtInfo() -> Eigen::Matrix<double, 1, 1>& {
    return sqrt_info_;
  }

  /// See documentation of base class.
  /// @note Returns (tangent_dim x ambient_dim) Jacobians stored in row-major order.
  auto Evaluate(double const* const* parameters, double* residuals, double** jacobians) const
      -> bool override;

 private:
  Eigen::Matrix<double, 1, 1> x_d_y_;
  Eigen::Matrix<double, 1, 1> sqrt_info_;
};

}  // namespace hyperion::ceres
