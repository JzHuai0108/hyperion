// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     COST_FUNCTION.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <sym/pose3.h>

#include "hyperion/cost_functions/sized_cost_function.hpp"

namespace hyperion {

class Spline4Pose3AccelerationLocalCostFunction final
    : public SizedCostFunction<6, ConstexprGroupDims<7, 6>, ConstexprGroupDims<7, 6>,
                               ConstexprGroupDims<7, 6>, ConstexprGroupDims<7, 6>,
                               ConstexprGroupDims<7, 6>> {
 public:
  /// Constructor.
  explicit Spline4Pose3AccelerationLocalCostFunction(
      const Scalar dt, const Eigen::Matrix<Scalar, 4, 3>& lambdas,
      const Eigen::Matrix<Scalar, 6, 1>& acceleration, const Eigen::Matrix<Scalar, 6, 6>& sqrtInfo)
      : dt_{dt}, lambdas_{lambdas}, acceleration_{acceleration}, sqrt_info_{sqrtInfo} {}

  /// dt accessor.
  [[nodiscard]] auto dt() const -> const Scalar& {
    return dt_;
  }

  /// dt modifier.
  auto dt() -> Scalar& {
    return dt_;
  }

  /// lambdas accessor.
  [[nodiscard]] auto lambdas() const -> const Eigen::Matrix<Scalar, 4, 3>& {
    return lambdas_;
  }

  /// lambdas modifier.
  auto lambdas() -> Eigen::Matrix<Scalar, 4, 3>& {
    return lambdas_;
  }

  /// acceleration accessor.
  [[nodiscard]] auto acceleration() const -> const Eigen::Matrix<Scalar, 6, 1>& {
    return acceleration_;
  }

  /// acceleration modifier.
  auto acceleration() -> Eigen::Matrix<Scalar, 6, 1>& {
    return acceleration_;
  }

  /// sqrtInfo accessor.
  [[nodiscard]] auto sqrtInfo() const -> const Eigen::Matrix<Scalar, 6, 6>& {
    return sqrt_info_;
  }

  /// sqrtInfo modifier.
  auto sqrtInfo() -> Eigen::Matrix<Scalar, 6, 6>& {
    return sqrt_info_;
  }

  /// See documentation of base class.
  /// @note Returns (tangent_dim x tangent_dim) Jacobians stored in column-major order.
  auto evaluate(Scalar const* const* parameters, Scalar* residuals, Scalar** jacobians) const
      -> bool override;

 private:
  Scalar dt_;
  Eigen::Matrix<Scalar, 4, 3> lambdas_;
  Eigen::Matrix<Scalar, 6, 1> acceleration_;
  Eigen::Matrix<Scalar, 6, 6> sqrt_info_;
};

}  // namespace hyperion
