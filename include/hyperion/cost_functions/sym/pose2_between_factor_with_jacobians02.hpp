// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_between_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_y: Pose2
 *     y: Pose2
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x3) jacobian of res (3) wrt arg x (3)
 *     res_D_y: (3x3) jacobian of res (3) wrt arg y (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose2BetweenFactorWithJacobians02(
    const sym::Pose2<Scalar>& x, const sym::Pose2<Scalar>& x_T_y, const sym::Pose2<Scalar>& y,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 123

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_y = x_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (47)
  const Scalar _tmp0 = _x[0] * _y[0];
  const Scalar _tmp1 = _x[1] * _y[1];
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = _tmp2 * _x_T_y[1];
  const Scalar _tmp4 = _x[0] * _y[1];
  const Scalar _tmp5 = _x[1] * _y[0];
  const Scalar _tmp6 = _tmp4 - _tmp5;
  const Scalar _tmp7 = _tmp6 * _x_T_y[0];
  const Scalar _tmp8 = -_tmp3 + _tmp7;
  const Scalar _tmp9 = _tmp2 * _x_T_y[0];
  const Scalar _tmp10 = _tmp6 * _x_T_y[1];
  const Scalar _tmp11 = _tmp10 + _tmp9;
  const Scalar _tmp12 = _tmp11 + epsilon * ((((_tmp11) > 0) - ((_tmp11) < 0)) + Scalar(0.5));
  const Scalar _tmp13 = std::atan2(_tmp8, _tmp12);
  const Scalar _tmp14 = _x[0] * _x[2] + _x[1] * _x[3];
  const Scalar _tmp15 = _x[0] * _y[2];
  const Scalar _tmp16 = _x[1] * _y[3];
  const Scalar _tmp17 = -_tmp14 + _tmp15 + _tmp16 - _x_T_y[2];
  const Scalar _tmp18 = _x[0] * _x[3];
  const Scalar _tmp19 = _x[1] * _x[2];
  const Scalar _tmp20 = _x[0] * _y[3] - _x[1] * _y[2];
  const Scalar _tmp21 = -_tmp18 + _tmp19 + _tmp20 - _x_T_y[3];
  const Scalar _tmp22 = -_tmp0 - _tmp1;
  const Scalar _tmp23 = Scalar(1.0) / (_tmp12);
  const Scalar _tmp24 = std::pow(_tmp12, Scalar(2));
  const Scalar _tmp25 = _tmp8 / _tmp24;
  const Scalar _tmp26 =
      _tmp23 * (-_tmp10 + _tmp22 * _x_T_y[0]) - _tmp25 * (_tmp22 * _x_T_y[1] + _tmp7);
  const Scalar _tmp27 = _tmp24 / (_tmp24 + std::pow(_tmp8, Scalar(2)));
  const Scalar _tmp28 = _tmp26 * _tmp27;
  const Scalar _tmp29 = _tmp14 - _tmp15 - _tmp16;
  const Scalar _tmp30 = -_tmp18 + _tmp19 + _tmp20;
  const Scalar _tmp31 = _tmp27 * sqrt_info(2, 0);
  const Scalar _tmp32 = _x[0] * sqrt_info(0, 1);
  const Scalar _tmp33 = _x[1] * sqrt_info(0, 2);
  const Scalar _tmp34 = _x[0] * sqrt_info(1, 1);
  const Scalar _tmp35 = _x[1] * sqrt_info(1, 2);
  const Scalar _tmp36 = _x[0] * sqrt_info(2, 1);
  const Scalar _tmp37 = _x[1] * sqrt_info(2, 2);
  const Scalar _tmp38 = _x[0] * sqrt_info(0, 2);
  const Scalar _tmp39 = _x[1] * sqrt_info(0, 1);
  const Scalar _tmp40 = _x[0] * sqrt_info(1, 2);
  const Scalar _tmp41 = _x[1] * sqrt_info(1, 1);
  const Scalar _tmp42 = _x[0] * sqrt_info(2, 2);
  const Scalar _tmp43 = _x[1] * sqrt_info(2, 1);
  const Scalar _tmp44 = -_tmp4 + _tmp5;
  const Scalar _tmp45 =
      _tmp23 * (-_tmp44 * _x_T_y[1] + _tmp9) - _tmp25 * (_tmp3 + _tmp44 * _x_T_y[0]);
  const Scalar _tmp46 = _tmp27 * _tmp45;

  // Output terms (3)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp13 * sqrt_info(0, 0) + _tmp17 * sqrt_info(0, 1) + _tmp21 * sqrt_info(0, 2);
  _res(1, 0) = _tmp13 * sqrt_info(1, 0) + _tmp17 * sqrt_info(1, 1) + _tmp21 * sqrt_info(1, 2);
  _res(2, 0) = _tmp13 * sqrt_info(2, 0) + _tmp17 * sqrt_info(2, 1) + _tmp21 * sqrt_info(2, 2);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp28 * sqrt_info(0, 0) + _tmp29 * sqrt_info(0, 2) + _tmp30 * sqrt_info(0, 1);
    _res_D_x(1, 0) = _tmp28 * sqrt_info(1, 0) + _tmp29 * sqrt_info(1, 2) + _tmp30 * sqrt_info(1, 1);
    _res_D_x(2, 0) = _tmp26 * _tmp31 + _tmp29 * sqrt_info(2, 2) + _tmp30 * sqrt_info(2, 1);
    _res_D_x(0, 1) = -_tmp32 + _tmp33;
    _res_D_x(1, 1) = -_tmp34 + _tmp35;
    _res_D_x(2, 1) = -_tmp36 + _tmp37;
    _res_D_x(0, 2) = -_tmp38 - _tmp39;
    _res_D_x(1, 2) = -_tmp40 - _tmp41;
    _res_D_x(2, 2) = -_tmp42 - _tmp43;
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp46 * sqrt_info(0, 0);
    _res_D_y(1, 0) = _tmp46 * sqrt_info(1, 0);
    _res_D_y(2, 0) = _tmp31 * _tmp45;
    _res_D_y(0, 1) = _tmp32 - _tmp33;
    _res_D_y(1, 1) = _tmp34 - _tmp35;
    _res_D_y(2, 1) = _tmp36 - _tmp37;
    _res_D_y(0, 2) = _tmp38 + _tmp39;
    _res_D_y(1, 2) = _tmp40 + _tmp41;
    _res_D_y(2, 2) = _tmp42 + _tmp43;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
