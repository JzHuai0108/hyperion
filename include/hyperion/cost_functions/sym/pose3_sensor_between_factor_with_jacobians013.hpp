// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_s: Pose3
 *     s_T_y: Pose3
 *     y: Pose3
 *     sqrt_info: Matrix66
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 *     res_D_x: (6x6) jacobian of res (6) wrt arg x (6)
 *     res_D_x_T_s: (6x6) jacobian of res (6) wrt arg x_T_s (6)
 *     res_D_y: (6x6) jacobian of res (6) wrt arg y (6)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Pose3SensorBetweenFactorWithJacobians013(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_s, const sym::Pose3<Scalar>& s_T_y,
    const sym::Pose3<Scalar>& y, const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_s = nullptr,
    Scalar* const res_D_y = nullptr) {
  // Total ops: 2920

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _s_T_y = s_T_y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();

  // Intermediate terms (624)
  const Scalar _tmp0 = _x[3] * _x_T_s[2];
  const Scalar _tmp1 = _x[2] * _x_T_s[3];
  const Scalar _tmp2 = _x[1] * _x_T_s[0];
  const Scalar _tmp3 = _x[0] * _x_T_s[1];
  const Scalar _tmp4 = _tmp0 + _tmp1 - _tmp2 + _tmp3;
  const Scalar _tmp5 = _tmp4 * _y[2];
  const Scalar _tmp6 = _x[3] * _x_T_s[1];
  const Scalar _tmp7 = _x[2] * _x_T_s[0];
  const Scalar _tmp8 = _x[1] * _x_T_s[3];
  const Scalar _tmp9 = _x[0] * _x_T_s[2];
  const Scalar _tmp10 = _tmp6 + _tmp7 + _tmp8 - _tmp9;
  const Scalar _tmp11 = _tmp10 * _y[1];
  const Scalar _tmp12 = _x[3] * _x_T_s[0];
  const Scalar _tmp13 = _x[2] * _x_T_s[1];
  const Scalar _tmp14 = _x[1] * _x_T_s[2];
  const Scalar _tmp15 = _x[0] * _x_T_s[3];
  const Scalar _tmp16 = _tmp12 - _tmp13 + _tmp14 + _tmp15;
  const Scalar _tmp17 = _tmp16 * _y[0];
  const Scalar _tmp18 = _x[3] * _x_T_s[3];
  const Scalar _tmp19 = _x[2] * _x_T_s[2];
  const Scalar _tmp20 = _x[1] * _x_T_s[1];
  const Scalar _tmp21 = _x[0] * _x_T_s[0];
  const Scalar _tmp22 = _tmp18 - _tmp19 - _tmp20 - _tmp21;
  const Scalar _tmp23 = _tmp22 * _y[3];
  const Scalar _tmp24 = _tmp11 + _tmp17 + _tmp23 + _tmp5;
  const Scalar _tmp25 = _s_T_y[3] * _tmp24;
  const Scalar _tmp26 = _tmp4 * _y[0];
  const Scalar _tmp27 = _tmp10 * _y[3];
  const Scalar _tmp28 = _tmp16 * _y[2];
  const Scalar _tmp29 = _tmp22 * _y[1];
  const Scalar _tmp30 = -_tmp26 - _tmp27 + _tmp28 + _tmp29;
  const Scalar _tmp31 = _s_T_y[1] * _tmp30;
  const Scalar _tmp32 = _tmp4 * _y[1];
  const Scalar _tmp33 = _tmp10 * _y[2];
  const Scalar _tmp34 = _tmp16 * _y[3];
  const Scalar _tmp35 = _tmp22 * _y[0];
  const Scalar _tmp36 = _tmp32 - _tmp33 - _tmp34 + _tmp35;
  const Scalar _tmp37 = _s_T_y[0] * _tmp36;
  const Scalar _tmp38 = _tmp4 * _y[3];
  const Scalar _tmp39 = _tmp10 * _y[0];
  const Scalar _tmp40 = _tmp16 * _y[1];
  const Scalar _tmp41 = _tmp22 * _y[2];
  const Scalar _tmp42 = -_tmp38 + _tmp39 - _tmp40 + _tmp41;
  const Scalar _tmp43 = _s_T_y[2] * _tmp42;
  const Scalar _tmp44 = -_tmp31 - _tmp37 - _tmp43;
  const Scalar _tmp45 = _tmp25 - _tmp44;
  const Scalar _tmp46 = 2 * std::min<Scalar>(0, (((_tmp45) > 0) - ((_tmp45) < 0))) + 1;
  const Scalar _tmp47 = 2 * _tmp46;
  const Scalar _tmp48 = _tmp47 * sqrt_info(0, 0);
  const Scalar _tmp49 =
      -_s_T_y[0] * _tmp24 - _s_T_y[1] * _tmp42 + _s_T_y[2] * _tmp30 + _s_T_y[3] * _tmp36;
  const Scalar _tmp50 = 1 - epsilon;
  const Scalar _tmp51 = std::min<Scalar>(_tmp50, std::fabs(_tmp45));
  const Scalar _tmp52 = std::acos(_tmp51) / std::sqrt(Scalar(1 - std::pow(_tmp51, Scalar(2))));
  const Scalar _tmp53 = _tmp49 * _tmp52;
  const Scalar _tmp54 =
      -_s_T_y[0] * _tmp30 + _s_T_y[1] * _tmp36 - _s_T_y[2] * _tmp24 + _s_T_y[3] * _tmp42;
  const Scalar _tmp55 = _tmp47 * _tmp52;
  const Scalar _tmp56 = _tmp54 * _tmp55;
  const Scalar _tmp57 = 2 * std::pow(_tmp10, Scalar(2));
  const Scalar _tmp58 = -_tmp57;
  const Scalar _tmp59 = 2 * std::pow(_tmp16, Scalar(2));
  const Scalar _tmp60 = 1 - _tmp59;
  const Scalar _tmp61 = _tmp58 + _tmp60;
  const Scalar _tmp62 = 2 * _tmp16;
  const Scalar _tmp63 = _tmp4 * _tmp62;
  const Scalar _tmp64 = 2 * _tmp22;
  const Scalar _tmp65 = _tmp10 * _tmp64;
  const Scalar _tmp66 = _tmp63 + _tmp65;
  const Scalar _tmp67 = 2 * _tmp4;
  const Scalar _tmp68 = _tmp10 * _tmp67;
  const Scalar _tmp69 = _tmp22 * _tmp62;
  const Scalar _tmp70 = -_tmp69;
  const Scalar _tmp71 = _tmp68 + _tmp70;
  const Scalar _tmp72 = 2 * _x[1];
  const Scalar _tmp73 = _tmp72 * _x[0];
  const Scalar _tmp74 = 2 * _x[2] * _x[3];
  const Scalar _tmp75 = -_tmp74;
  const Scalar _tmp76 = _tmp73 + _tmp75;
  const Scalar _tmp77 = 2 * _x[0];
  const Scalar _tmp78 = _tmp77 * _x[2];
  const Scalar _tmp79 = _tmp72 * _x[3];
  const Scalar _tmp80 = _tmp78 + _tmp79;
  const Scalar _tmp81 = std::pow(_x[2], Scalar(2));
  const Scalar _tmp82 = -2 * _tmp81;
  const Scalar _tmp83 = std::pow(_x[1], Scalar(2));
  const Scalar _tmp84 = 1 - 2 * _tmp83;
  const Scalar _tmp85 = _tmp82 + _tmp84;
  const Scalar _tmp86 = _tmp76 * _x_T_s[5] + _tmp80 * _x_T_s[6] + _tmp85 * _x_T_s[4] + _x[4];
  const Scalar _tmp87 = _tmp73 + _tmp74;
  const Scalar _tmp88 = _tmp77 * _x[3];
  const Scalar _tmp89 = -_tmp88;
  const Scalar _tmp90 = _tmp72 * _x[2];
  const Scalar _tmp91 = _tmp89 + _tmp90;
  const Scalar _tmp92 = std::pow(_x[0], Scalar(2));
  const Scalar _tmp93 = -2 * _tmp92;
  const Scalar _tmp94 = _tmp82 + _tmp93 + 1;
  const Scalar _tmp95 = _tmp87 * _x_T_s[4] + _tmp91 * _x_T_s[6] + _tmp94 * _x_T_s[5] + _x[5];
  const Scalar _tmp96 = -_tmp79;
  const Scalar _tmp97 = _tmp78 + _tmp96;
  const Scalar _tmp98 = _tmp88 + _tmp90;
  const Scalar _tmp99 = _tmp84 + _tmp93;
  const Scalar _tmp100 = _tmp97 * _x_T_s[4] + _tmp98 * _x_T_s[5] + _tmp99 * _x_T_s[6] + _x[6];
  const Scalar _tmp101 = -_s_T_y[6] - _tmp100 * _tmp61 + _tmp61 * _y[6] - _tmp66 * _tmp86 +
                         _tmp66 * _y[4] - _tmp71 * _tmp95 + _tmp71 * _y[5];
  const Scalar _tmp102 = 2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp103 = -_tmp102;
  const Scalar _tmp104 = _tmp103 + _tmp58 + 1;
  const Scalar _tmp105 = -_tmp65;
  const Scalar _tmp106 = _tmp105 + _tmp63;
  const Scalar _tmp107 = _tmp10 * _tmp62;
  const Scalar _tmp108 = _tmp22 * _tmp67;
  const Scalar _tmp109 = _tmp107 + _tmp108;
  const Scalar _tmp110 = -_s_T_y[4] - _tmp100 * _tmp106 - _tmp104 * _tmp86 + _tmp104 * _y[4] +
                         _tmp106 * _y[6] - _tmp109 * _tmp95 + _tmp109 * _y[5];
  const Scalar _tmp111 = _tmp103 + _tmp60;
  const Scalar _tmp112 = _tmp68 + _tmp69;
  const Scalar _tmp113 = -_tmp108;
  const Scalar _tmp114 = _tmp107 + _tmp113;
  const Scalar _tmp115 = -_s_T_y[5] - _tmp100 * _tmp112 - _tmp111 * _tmp95 + _tmp111 * _y[5] +
                         _tmp112 * _y[6] - _tmp114 * _tmp86 + _tmp114 * _y[4];
  const Scalar _tmp116 =
      _s_T_y[0] * _tmp42 - _s_T_y[1] * _tmp24 - _s_T_y[2] * _tmp36 + _s_T_y[3] * _tmp30;
  const Scalar _tmp117 = _tmp116 * sqrt_info(0, 1);
  const Scalar _tmp118 = _tmp47 * _tmp53;
  const Scalar _tmp119 = _tmp116 * _tmp55;
  const Scalar _tmp120 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp121 = -_tmp120;
  const Scalar _tmp122 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp123 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp124 = -_tmp123;
  const Scalar _tmp125 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp126 = -_tmp125;
  const Scalar _tmp127 = _tmp124 + _tmp126;
  const Scalar _tmp128 = _tmp121 + _tmp122 + _tmp127;
  const Scalar _tmp129 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp130 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp131 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp132 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp133 = _tmp131 - _tmp132;
  const Scalar _tmp134 = _tmp129 + _tmp130 + _tmp133;
  const Scalar _tmp135 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp136 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp137 = -_tmp136;
  const Scalar _tmp138 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp139 = -_tmp138;
  const Scalar _tmp140 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp141 = -_tmp140;
  const Scalar _tmp142 = _tmp139 + _tmp141;
  const Scalar _tmp143 = _tmp135 + _tmp137 + _tmp142;
  const Scalar _tmp144 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp145 = -_tmp144;
  const Scalar _tmp146 = (Scalar(1) / Scalar(2)) * _tmp14;
  const Scalar _tmp147 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp148 = -_tmp147;
  const Scalar _tmp149 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp150 = -_tmp149;
  const Scalar _tmp151 = _tmp148 + _tmp150;
  const Scalar _tmp152 = _tmp145 + _tmp146 + _tmp151;
  const Scalar _tmp153 = -_tmp128 * _y[2] - _tmp134 * _y[3] + _tmp143 * _y[1] + _tmp152 * _y[0];
  const Scalar _tmp154 = -_tmp128 * _y[3] + _tmp134 * _y[2] - _tmp143 * _y[0] + _tmp152 * _y[1];
  const Scalar _tmp155 = _tmp128 * _y[0] - _tmp134 * _y[1] - _tmp143 * _y[3] + _tmp152 * _y[2];
  const Scalar _tmp156 = _tmp128 * _y[1] + _tmp134 * _y[0] + _tmp143 * _y[2] + _tmp152 * _y[3];
  const Scalar _tmp157 =
      -_s_T_y[0] * _tmp156 - _s_T_y[1] * _tmp155 + _s_T_y[2] * _tmp154 + _s_T_y[3] * _tmp153;
  const Scalar _tmp158 = _tmp25 + _tmp31 + _tmp37 + _tmp43;
  const Scalar _tmp159 = std::fabs(_tmp158);
  const Scalar _tmp160 = std::min<Scalar>(_tmp159, _tmp50);
  const Scalar _tmp161 = 1 - std::pow(_tmp160, Scalar(2));
  const Scalar _tmp162 = std::acos(_tmp160);
  const Scalar _tmp163 = _tmp162 / std::sqrt(_tmp161);
  const Scalar _tmp164 = _tmp163 * _tmp48;
  const Scalar _tmp165 = (((_tmp158) > 0) - ((_tmp158) < 0));
  const Scalar _tmp166 = _tmp165 * (_s_T_y[0] * _tmp153 + _s_T_y[1] * _tmp154 +
                                    _s_T_y[2] * _tmp155 + _s_T_y[3] * _tmp156);
  const Scalar _tmp167 = _tmp46 * ((((-_tmp159 + _tmp50) > 0) - ((-_tmp159 + _tmp50) < 0)) + 1);
  const Scalar _tmp168 = _tmp160 * _tmp162 * _tmp167 / (_tmp161 * std::sqrt(_tmp161));
  const Scalar _tmp169 = _tmp168 * _tmp54;
  const Scalar _tmp170 = _tmp166 * _tmp169;
  const Scalar _tmp171 = _tmp49 * sqrt_info(0, 0);
  const Scalar _tmp172 = _tmp166 * _tmp168;
  const Scalar _tmp173 = _tmp167 / _tmp161;
  const Scalar _tmp174 = _tmp166 * _tmp173;
  const Scalar _tmp175 = -_tmp73;
  const Scalar _tmp176 = _tmp80 * _x_T_s[5] + _x_T_s[6] * (_tmp175 + _tmp74);
  const Scalar _tmp177 = _tmp152 * _tmp67;
  const Scalar _tmp178 = _tmp143 * _tmp64;
  const Scalar _tmp179 = 2 * _tmp10;
  const Scalar _tmp180 = _tmp128 * _tmp62 + _tmp134 * _tmp179;
  const Scalar _tmp181 = _tmp177 + _tmp178 + _tmp180;
  const Scalar _tmp182 = 4 * _tmp10;
  const Scalar _tmp183 = -_tmp128 * _tmp182;
  const Scalar _tmp184 = 4 * _tmp4;
  const Scalar _tmp185 = -_tmp143 * _tmp184;
  const Scalar _tmp186 = _tmp183 + _tmp185;
  const Scalar _tmp187 = std::pow(_x[3], Scalar(2));
  const Scalar _tmp188 = -_tmp187;
  const Scalar _tmp189 = -_tmp83;
  const Scalar _tmp190 = _tmp91 * _x_T_s[5] + _x_T_s[6] * (_tmp188 + _tmp189 + _tmp81 + _tmp92);
  const Scalar _tmp191 = _tmp187 + _tmp189;
  const Scalar _tmp192 = -_tmp92;
  const Scalar _tmp193 = _tmp192 + _tmp81;
  const Scalar _tmp194 = -_tmp90;
  const Scalar _tmp195 = _x_T_s[5] * (_tmp191 + _tmp193) + _x_T_s[6] * (_tmp194 + _tmp89);
  const Scalar _tmp196 = _tmp152 * _tmp179;
  const Scalar _tmp197 = _tmp128 * _tmp64;
  const Scalar _tmp198 = _tmp134 * _tmp67 + _tmp143 * _tmp62;
  const Scalar _tmp199 = -_tmp196 - _tmp197 + _tmp198;
  const Scalar _tmp200 = -_tmp100 * _tmp199 - _tmp104 * _tmp176 - _tmp106 * _tmp195 -
                         _tmp109 * _tmp190 - _tmp181 * _tmp95 + _tmp181 * _y[5] - _tmp186 * _tmp86 +
                         _tmp186 * _y[4] + _tmp199 * _y[6];
  const Scalar _tmp201 =
      -_s_T_y[0] * _tmp154 + _s_T_y[1] * _tmp153 - _s_T_y[2] * _tmp156 + _s_T_y[3] * _tmp155;
  const Scalar _tmp202 = _tmp163 * _tmp47;
  const Scalar _tmp203 = _tmp201 * _tmp202;
  const Scalar _tmp204 = -_tmp177 - _tmp178 + _tmp180;
  const Scalar _tmp205 = _tmp152 * _tmp62;
  const Scalar _tmp206 = _tmp134 * _tmp64;
  const Scalar _tmp207 = _tmp128 * _tmp67 + _tmp143 * _tmp179;
  const Scalar _tmp208 = _tmp205 + _tmp206 + _tmp207;
  const Scalar _tmp209 = 4 * _tmp16;
  const Scalar _tmp210 = -_tmp134 * _tmp209;
  const Scalar _tmp211 = _tmp185 + _tmp210;
  const Scalar _tmp212 = -_tmp100 * _tmp208 - _tmp111 * _tmp190 - _tmp112 * _tmp195 -
                         _tmp114 * _tmp176 - _tmp204 * _tmp86 + _tmp204 * _y[4] + _tmp208 * _y[6] -
                         _tmp211 * _tmp95 + _tmp211 * _y[5];
  const Scalar _tmp213 = _tmp183 + _tmp210;
  const Scalar _tmp214 = -_tmp205 - _tmp206 + _tmp207;
  const Scalar _tmp215 = _tmp196 + _tmp197 + _tmp198;
  const Scalar _tmp216 = -_tmp100 * _tmp213 - _tmp176 * _tmp66 - _tmp190 * _tmp71 -
                         _tmp195 * _tmp61 + _tmp213 * _y[6] - _tmp214 * _tmp95 + _tmp214 * _y[5] -
                         _tmp215 * _tmp86 + _tmp215 * _y[4];
  const Scalar _tmp217 =
      _s_T_y[0] * _tmp155 - _s_T_y[1] * _tmp156 - _s_T_y[2] * _tmp153 + _s_T_y[3] * _tmp154;
  const Scalar _tmp218 = _tmp202 * _tmp217;
  const Scalar _tmp219 = _tmp173 * _tmp54;
  const Scalar _tmp220 = _tmp166 * _tmp219;
  const Scalar _tmp221 = _tmp202 * sqrt_info(1, 0);
  const Scalar _tmp222 = _tmp54 * sqrt_info(1, 2);
  const Scalar _tmp223 = _tmp168 * _tmp222;
  const Scalar _tmp224 = _tmp49 * sqrt_info(1, 0);
  const Scalar _tmp225 = _tmp174 * _tmp49;
  const Scalar _tmp226 = _tmp116 * _tmp174;
  const Scalar _tmp227 = _tmp116 * sqrt_info(1, 1);
  const Scalar _tmp228 = _tmp202 * sqrt_info(2, 0);
  const Scalar _tmp229 = _tmp49 * sqrt_info(2, 0);
  const Scalar _tmp230 = _tmp116 * sqrt_info(2, 1);
  const Scalar _tmp231 = _tmp47 * sqrt_info(3, 0);
  const Scalar _tmp232 = _tmp163 * _tmp231;
  const Scalar _tmp233 = _tmp49 * sqrt_info(3, 0);
  const Scalar _tmp234 = _tmp116 * sqrt_info(3, 1);
  const Scalar _tmp235 = _tmp202 * sqrt_info(3, 2);
  const Scalar _tmp236 = _tmp202 * sqrt_info(3, 1);
  const Scalar _tmp237 = _tmp202 * sqrt_info(4, 0);
  const Scalar _tmp238 = _tmp49 * sqrt_info(4, 0);
  const Scalar _tmp239 = _tmp116 * sqrt_info(4, 1);
  const Scalar _tmp240 = _tmp202 * sqrt_info(4, 2);
  const Scalar _tmp241 = _tmp219 * sqrt_info(4, 2);
  const Scalar _tmp242 = _tmp202 * sqrt_info(5, 0);
  const Scalar _tmp243 = _tmp49 * sqrt_info(5, 0);
  const Scalar _tmp244 = _tmp168 * _tmp243;
  const Scalar _tmp245 = _tmp116 * sqrt_info(5, 1);
  const Scalar _tmp246 = _tmp219 * sqrt_info(5, 2);
  const Scalar _tmp247 = -_tmp130;
  const Scalar _tmp248 = _tmp131 + _tmp132;
  const Scalar _tmp249 = _tmp129 + _tmp247 + _tmp248;
  const Scalar _tmp250 = _tmp139 + _tmp140;
  const Scalar _tmp251 = -_tmp135;
  const Scalar _tmp252 = _tmp137 + _tmp251;
  const Scalar _tmp253 = _tmp250 + _tmp252;
  const Scalar _tmp254 = -_tmp146;
  const Scalar _tmp255 = _tmp144 + _tmp151 + _tmp254;
  const Scalar _tmp256 = -_tmp122;
  const Scalar _tmp257 = _tmp120 + _tmp127 + _tmp256;
  const Scalar _tmp258 = _tmp249 * _y[0] + _tmp253 * _y[2] - _tmp255 * _y[3] - _tmp257 * _y[1];
  const Scalar _tmp259 = -_tmp249 * _y[2] + _tmp253 * _y[0] + _tmp255 * _y[1] - _tmp257 * _y[3];
  const Scalar _tmp260 = _tmp249 * _y[1] + _tmp253 * _y[3] + _tmp255 * _y[2] + _tmp257 * _y[0];
  const Scalar _tmp261 = -_tmp249 * _y[3] + _tmp253 * _y[1] - _tmp255 * _y[0] + _tmp257 * _y[2];
  const Scalar _tmp262 =
      _s_T_y[0] * _tmp259 + _s_T_y[1] * _tmp261 + _s_T_y[2] * _tmp258 + _s_T_y[3] * _tmp260;
  const Scalar _tmp263 = _tmp165 * _tmp219;
  const Scalar _tmp264 = _tmp263 * sqrt_info(0, 2);
  const Scalar _tmp265 = _tmp87 * _x_T_s[6] + _x_T_s[4] * (_tmp194 + _tmp88);
  const Scalar _tmp266 = 2 * _tmp253;
  const Scalar _tmp267 = _tmp16 * _tmp266;
  const Scalar _tmp268 = _tmp257 * _tmp64;
  const Scalar _tmp269 = _tmp179 * _tmp255 + _tmp249 * _tmp67;
  const Scalar _tmp270 = _tmp267 + _tmp268 + _tmp269;
  const Scalar _tmp271 = _tmp266 * _tmp4;
  const Scalar _tmp272 = _tmp255 * _tmp64;
  const Scalar _tmp273 = _tmp179 * _tmp257 + _tmp249 * _tmp62;
  const Scalar _tmp274 = -_tmp271 - _tmp272 + _tmp273;
  const Scalar _tmp275 = -_tmp78;
  const Scalar _tmp276 = -_tmp81;
  const Scalar _tmp277 = _tmp276 + _tmp92;
  const Scalar _tmp278 = _x_T_s[4] * (_tmp275 + _tmp96) + _x_T_s[6] * (_tmp191 + _tmp277);
  const Scalar _tmp279 = _tmp188 + _tmp83;
  const Scalar _tmp280 = _tmp97 * _x_T_s[6] + _x_T_s[4] * (_tmp277 + _tmp279);
  const Scalar _tmp281 = -_tmp184 * _tmp255;
  const Scalar _tmp282 = -_tmp209 * _tmp257;
  const Scalar _tmp283 = _tmp281 + _tmp282;
  const Scalar _tmp284 = -_tmp100 * _tmp270 - _tmp111 * _tmp265 - _tmp112 * _tmp280 -
                         _tmp114 * _tmp278 + _tmp270 * _y[6] - _tmp274 * _tmp86 + _tmp274 * _y[4] -
                         _tmp283 * _tmp95 + _tmp283 * _y[5];
  const Scalar _tmp285 = _tmp165 * _tmp173;
  const Scalar _tmp286 = _tmp262 * _tmp285;
  const Scalar _tmp287 = -_tmp182 * _tmp249;
  const Scalar _tmp288 = _tmp281 + _tmp287;
  const Scalar _tmp289 = _tmp10 * _tmp266;
  const Scalar _tmp290 = _tmp249 * _tmp64;
  const Scalar _tmp291 = _tmp255 * _tmp62 + _tmp257 * _tmp67;
  const Scalar _tmp292 = -_tmp289 - _tmp290 + _tmp291;
  const Scalar _tmp293 = _tmp271 + _tmp272 + _tmp273;
  const Scalar _tmp294 = -_tmp100 * _tmp292 - _tmp104 * _tmp278 - _tmp106 * _tmp280 -
                         _tmp109 * _tmp265 - _tmp288 * _tmp86 + _tmp288 * _y[4] + _tmp292 * _y[6] -
                         _tmp293 * _tmp95 + _tmp293 * _y[5];
  const Scalar _tmp295 =
      -_s_T_y[0] * _tmp261 + _s_T_y[1] * _tmp259 - _s_T_y[2] * _tmp260 + _s_T_y[3] * _tmp258;
  const Scalar _tmp296 = _tmp202 * _tmp295;
  const Scalar _tmp297 = _tmp165 * _tmp262;
  const Scalar _tmp298 = _tmp168 * _tmp297;
  const Scalar _tmp299 =
      _s_T_y[0] * _tmp258 - _s_T_y[1] * _tmp260 - _s_T_y[2] * _tmp259 + _s_T_y[3] * _tmp261;
  const Scalar _tmp300 = _tmp202 * _tmp299;
  const Scalar _tmp301 =
      -_s_T_y[0] * _tmp260 - _s_T_y[1] * _tmp258 + _s_T_y[2] * _tmp261 + _s_T_y[3] * _tmp259;
  const Scalar _tmp302 = _tmp282 + _tmp287;
  const Scalar _tmp303 = -_tmp267 - _tmp268 + _tmp269;
  const Scalar _tmp304 = _tmp289 + _tmp290 + _tmp291;
  const Scalar _tmp305 = -_tmp100 * _tmp302 - _tmp265 * _tmp71 - _tmp278 * _tmp66 -
                         _tmp280 * _tmp61 + _tmp302 * _y[6] - _tmp303 * _tmp95 + _tmp303 * _y[5] -
                         _tmp304 * _tmp86 + _tmp304 * _y[4];
  const Scalar _tmp306 = _tmp298 * _tmp54;
  const Scalar _tmp307 = _tmp263 * sqrt_info(1, 2);
  const Scalar _tmp308 = _tmp286 * _tmp49;
  const Scalar _tmp309 = _tmp116 * _tmp286;
  const Scalar _tmp310 = _tmp202 * sqrt_info(1, 2);
  const Scalar _tmp311 = _tmp202 * _tmp301;
  const Scalar _tmp312 = _tmp219 * sqrt_info(2, 2);
  const Scalar _tmp313 = _tmp219 * sqrt_info(3, 2);
  const Scalar _tmp314 = _tmp54 * sqrt_info(3, 2);
  const Scalar _tmp315 = _tmp54 * sqrt_info(4, 2);
  const Scalar _tmp316 = _tmp54 * sqrt_info(5, 2);
  const Scalar _tmp317 = _tmp124 + _tmp125;
  const Scalar _tmp318 = _tmp121 + _tmp256;
  const Scalar _tmp319 = _tmp317 + _tmp318;
  const Scalar _tmp320 = -_tmp129;
  const Scalar _tmp321 = _tmp130 + _tmp248 + _tmp320;
  const Scalar _tmp322 = _tmp136 + _tmp142 + _tmp251;
  const Scalar _tmp323 = _tmp148 + _tmp149;
  const Scalar _tmp324 = _tmp145 + _tmp254;
  const Scalar _tmp325 = _tmp323 + _tmp324;
  const Scalar _tmp326 = _tmp319 * _y[2] - _tmp321 * _y[3] - _tmp322 * _y[1] + _tmp325 * _y[0];
  const Scalar _tmp327 = _tmp319 * _y[1] - _tmp321 * _y[0] + _tmp322 * _y[2] - _tmp325 * _y[3];
  const Scalar _tmp328 = _tmp319 * _y[0] + _tmp321 * _y[1] - _tmp322 * _y[3] - _tmp325 * _y[2];
  const Scalar _tmp329 = _tmp319 * _y[3] + _tmp321 * _y[2] + _tmp322 * _y[0] + _tmp325 * _y[1];
  const Scalar _tmp330 =
      _s_T_y[0] * _tmp328 + _s_T_y[1] * _tmp327 + _s_T_y[2] * _tmp326 + _s_T_y[3] * _tmp329;
  const Scalar _tmp331 = _tmp165 * _tmp330;
  const Scalar _tmp332 = _tmp168 * _tmp331;
  const Scalar _tmp333 = _tmp219 * _tmp331;
  const Scalar _tmp334 =
      -_s_T_y[0] * _tmp327 + _s_T_y[1] * _tmp328 - _s_T_y[2] * _tmp329 + _s_T_y[3] * _tmp326;
  const Scalar _tmp335 = _tmp202 * _tmp334;
  const Scalar _tmp336 = _tmp332 * _tmp54;
  const Scalar _tmp337 = _tmp319 * _tmp62;
  const Scalar _tmp338 = _tmp322 * _tmp64;
  const Scalar _tmp339 = _tmp179 * _tmp321 + _tmp325 * _tmp67;
  const Scalar _tmp340 = -_tmp337 - _tmp338 + _tmp339;
  const Scalar _tmp341 = -_tmp182 * _tmp325;
  const Scalar _tmp342 = -_tmp209 * _tmp322;
  const Scalar _tmp343 = _tmp341 + _tmp342;
  const Scalar _tmp344 = _tmp98 * _x_T_s[4] + _x_T_s[5] * (_tmp275 + _tmp79);
  const Scalar _tmp345 = _tmp179 * _tmp319;
  const Scalar _tmp346 = _tmp325 * _tmp64;
  const Scalar _tmp347 = _tmp321 * _tmp62 + _tmp322 * _tmp67;
  const Scalar _tmp348 = _tmp345 + _tmp346 + _tmp347;
  const Scalar _tmp349 =
      _x_T_s[4] * (_tmp187 + _tmp192 + _tmp276 + _tmp83) + _x_T_s[5] * (_tmp175 + _tmp75);
  const Scalar _tmp350 = _tmp76 * _x_T_s[4] + _x_T_s[5] * (_tmp193 + _tmp279);
  const Scalar _tmp351 = -_tmp100 * _tmp343 - _tmp340 * _tmp95 + _tmp340 * _y[5] + _tmp343 * _y[6] -
                         _tmp344 * _tmp61 - _tmp348 * _tmp86 + _tmp348 * _y[4] - _tmp349 * _tmp71 -
                         _tmp350 * _tmp66;
  const Scalar _tmp352 =
      -_s_T_y[0] * _tmp329 - _s_T_y[1] * _tmp326 + _s_T_y[2] * _tmp327 + _s_T_y[3] * _tmp328;
  const Scalar _tmp353 =
      _s_T_y[0] * _tmp326 - _s_T_y[1] * _tmp329 - _s_T_y[2] * _tmp328 + _s_T_y[3] * _tmp327;
  const Scalar _tmp354 = _tmp202 * sqrt_info(0, 1);
  const Scalar _tmp355 = _tmp337 + _tmp338 + _tmp339;
  const Scalar _tmp356 = _tmp319 * _tmp67;
  const Scalar _tmp357 = _tmp321 * _tmp64;
  const Scalar _tmp358 = _tmp179 * _tmp322 + _tmp325 * _tmp62;
  const Scalar _tmp359 = -_tmp356 - _tmp357 + _tmp358;
  const Scalar _tmp360 = -_tmp184 * _tmp321;
  const Scalar _tmp361 = _tmp342 + _tmp360;
  const Scalar _tmp362 = -_tmp100 * _tmp355 - _tmp111 * _tmp349 - _tmp112 * _tmp344 -
                         _tmp114 * _tmp350 + _tmp355 * _y[6] - _tmp359 * _tmp86 + _tmp359 * _y[4] -
                         _tmp361 * _tmp95 + _tmp361 * _y[5];
  const Scalar _tmp363 = _tmp285 * _tmp330;
  const Scalar _tmp364 = _tmp341 + _tmp360;
  const Scalar _tmp365 = _tmp356 + _tmp357 + _tmp358;
  const Scalar _tmp366 = -_tmp345 - _tmp346 + _tmp347;
  const Scalar _tmp367 = -_tmp100 * _tmp366 - _tmp104 * _tmp350 - _tmp106 * _tmp344 -
                         _tmp109 * _tmp349 - _tmp364 * _tmp86 + _tmp364 * _y[4] - _tmp365 * _tmp95 +
                         _tmp365 * _y[5] + _tmp366 * _y[6];
  const Scalar _tmp368 = _tmp202 * _tmp353;
  const Scalar _tmp369 = _tmp116 * _tmp363;
  const Scalar _tmp370 = _tmp363 * _tmp49;
  const Scalar _tmp371 = _tmp202 * sqrt_info(4, 1);
  const Scalar _tmp372 = -_tmp107;
  const Scalar _tmp373 = _tmp108 + _tmp372;
  const Scalar _tmp374 = -_tmp63;
  const Scalar _tmp375 = _tmp105 + _tmp374;
  const Scalar _tmp376 = _tmp102 + _tmp57 - 1;
  const Scalar _tmp377 = _tmp113 + _tmp372;
  const Scalar _tmp378 = -_tmp68;
  const Scalar _tmp379 = _tmp378 + _tmp69;
  const Scalar _tmp380 = _tmp59 - 1;
  const Scalar _tmp381 = _tmp102 + _tmp380;
  const Scalar _tmp382 = _tmp378 + _tmp70;
  const Scalar _tmp383 = _tmp374 + _tmp65;
  const Scalar _tmp384 = _tmp380 + _tmp57;
  const Scalar _tmp385 = (((-_tmp25 + _tmp44) > 0) - ((-_tmp25 + _tmp44) < 0));
  const Scalar _tmp386 = _tmp147 + _tmp150 + _tmp324;
  const Scalar _tmp387 = _tmp386 * _y[0];
  const Scalar _tmp388 = _tmp133 + _tmp247 + _tmp320;
  const Scalar _tmp389 = -_tmp388 * _y[3];
  const Scalar _tmp390 = _tmp138 + _tmp141 + _tmp252;
  const Scalar _tmp391 = _tmp390 * _y[1];
  const Scalar _tmp392 = _tmp120 + _tmp122 + _tmp317;
  const Scalar _tmp393 = _tmp387 + _tmp389 + _tmp391 - _tmp392 * _y[2];
  const Scalar _tmp394 = _tmp386 * _y[2];
  const Scalar _tmp395 = _tmp388 * _y[1];
  const Scalar _tmp396 = _tmp390 * _y[3];
  const Scalar _tmp397 = _tmp392 * _y[0] + _tmp394 - _tmp395 - _tmp396;
  const Scalar _tmp398 = _tmp386 * _y[3];
  const Scalar _tmp399 = _tmp388 * _y[0];
  const Scalar _tmp400 = _tmp390 * _y[2] + _tmp399;
  const Scalar _tmp401 = _tmp392 * _y[1] + _tmp398 + _tmp400;
  const Scalar _tmp402 = _tmp390 * _y[0];
  const Scalar _tmp403 = _tmp388 * _y[2];
  const Scalar _tmp404 = _tmp386 * _y[1] + _tmp403;
  const Scalar _tmp405 = -_tmp392 * _y[3] - _tmp402 + _tmp404;
  const Scalar _tmp406 =
      -_s_T_y[0] * _tmp393 - _s_T_y[1] * _tmp405 - _s_T_y[2] * _tmp397 - _s_T_y[3] * _tmp401;
  const Scalar _tmp407 = _tmp385 * _tmp406;
  const Scalar _tmp408 = _tmp168 * _tmp407;
  const Scalar _tmp409 = _tmp408 * _tmp54;
  const Scalar _tmp410 = _tmp386 * _tmp67;
  const Scalar _tmp411 = _tmp390 * _tmp64;
  const Scalar _tmp412 = _tmp179 * _tmp388;
  const Scalar _tmp413 = _tmp392 * _tmp62 + _tmp412;
  const Scalar _tmp414 = -_tmp410 - _tmp411 + _tmp413;
  const Scalar _tmp415 = _tmp386 * _tmp62;
  const Scalar _tmp416 = _tmp388 * _tmp64;
  const Scalar _tmp417 = _tmp415 + _tmp416;
  const Scalar _tmp418 = _tmp179 * _tmp390;
  const Scalar _tmp419 = _tmp392 * _tmp67 + _tmp418;
  const Scalar _tmp420 = _tmp417 + _tmp419;
  const Scalar _tmp421 = -_tmp184 * _tmp390;
  const Scalar _tmp422 = -_tmp209 * _tmp388;
  const Scalar _tmp423 = _tmp421 + _tmp422;
  const Scalar _tmp424 = -_tmp100 * _tmp420 - _tmp414 * _tmp86 + _tmp414 * _y[4] + _tmp420 * _y[6] -
                         _tmp423 * _tmp95 + _tmp423 * _y[5];
  const Scalar _tmp425 = _tmp410 + _tmp411 + _tmp413;
  const Scalar _tmp426 = -_tmp182 * _tmp392;
  const Scalar _tmp427 = _tmp421 + _tmp426;
  const Scalar _tmp428 = _tmp179 * _tmp386;
  const Scalar _tmp429 = _tmp392 * _tmp64;
  const Scalar _tmp430 = _tmp388 * _tmp67;
  const Scalar _tmp431 = _tmp390 * _tmp62;
  const Scalar _tmp432 = _tmp430 + _tmp431;
  const Scalar _tmp433 = -_tmp428 - _tmp429 + _tmp432;
  const Scalar _tmp434 = -_tmp100 * _tmp433 - _tmp425 * _tmp95 + _tmp425 * _y[5] -
                         _tmp427 * _tmp86 + _tmp427 * _y[4] + _tmp433 * _y[6];
  const Scalar _tmp435 = _tmp422 + _tmp426;
  const Scalar _tmp436 = -_tmp416;
  const Scalar _tmp437 = -_tmp415 + _tmp419 + _tmp436;
  const Scalar _tmp438 = _tmp428 + _tmp429 + _tmp432;
  const Scalar _tmp439 = -_tmp100 * _tmp435 + _tmp435 * _y[6] - _tmp437 * _tmp95 + _tmp437 * _y[5] -
                         _tmp438 * _tmp86 + _tmp438 * _y[4];
  const Scalar _tmp440 =
      -_s_T_y[0] * _tmp405 + _s_T_y[1] * _tmp393 - _s_T_y[2] * _tmp401 + _s_T_y[3] * _tmp397;
  const Scalar _tmp441 = _tmp202 * _tmp440;
  const Scalar _tmp442 = _tmp219 * _tmp407;
  const Scalar _tmp443 = _tmp173 * _tmp385;
  const Scalar _tmp444 = _tmp406 * _tmp443;
  const Scalar _tmp445 =
      _s_T_y[0] * _tmp397 - _s_T_y[1] * _tmp401 - _s_T_y[2] * _tmp393 + _s_T_y[3] * _tmp405;
  const Scalar _tmp446 = _tmp202 * _tmp445;
  const Scalar _tmp447 = _tmp163 * (-_s_T_y[0] * _tmp401 - _s_T_y[1] * _tmp397 +
                                    _s_T_y[2] * _tmp405 + _s_T_y[3] * _tmp393);
  const Scalar _tmp448 = _tmp444 * _tmp49;
  const Scalar _tmp449 = _tmp116 * _tmp444;
  const Scalar _tmp450 = _tmp447 * _tmp47;
  const Scalar _tmp451 = _tmp123 + _tmp126 + _tmp318;
  const Scalar _tmp452 = _tmp451 * _y[3];
  const Scalar _tmp453 = _tmp144 + _tmp146 + _tmp323;
  const Scalar _tmp454 = _tmp402 - _tmp403 - _tmp452 + _tmp453 * _y[1];
  const Scalar _tmp455 = _tmp395 + _tmp451 * _y[0];
  const Scalar _tmp456 = _tmp396 + _tmp453 * _y[2] + _tmp455;
  const Scalar _tmp457 = _tmp451 * _y[1];
  const Scalar _tmp458 = _tmp400 - _tmp453 * _y[3] - _tmp457;
  const Scalar _tmp459 = _tmp389 + _tmp451 * _y[2];
  const Scalar _tmp460 = _tmp391 - _tmp453 * _y[0] + _tmp459;
  const Scalar _tmp461 = _tmp385 * (-_s_T_y[0] * _tmp454 - _s_T_y[1] * _tmp460 -
                                    _s_T_y[2] * _tmp458 - _s_T_y[3] * _tmp456);
  const Scalar _tmp462 = _tmp168 * _tmp461;
  const Scalar _tmp463 = _tmp54 * sqrt_info(0, 2);
  const Scalar _tmp464 =
      -_s_T_y[0] * _tmp456 - _s_T_y[1] * _tmp458 + _s_T_y[2] * _tmp460 + _s_T_y[3] * _tmp454;
  const Scalar _tmp465 = _tmp163 * _tmp464;
  const Scalar _tmp466 =
      -_s_T_y[0] * _tmp460 + _s_T_y[1] * _tmp454 - _s_T_y[2] * _tmp456 + _s_T_y[3] * _tmp458;
  const Scalar _tmp467 = _tmp202 * _tmp466;
  const Scalar _tmp468 = -_tmp182 * _tmp388;
  const Scalar _tmp469 = -_tmp209 * _tmp451;
  const Scalar _tmp470 = _tmp468 + _tmp469;
  const Scalar _tmp471 = _tmp451 * _tmp67;
  const Scalar _tmp472 = _tmp453 * _tmp62 + _tmp471;
  const Scalar _tmp473 = _tmp416 + _tmp418 + _tmp472;
  const Scalar _tmp474 = _tmp179 * _tmp453;
  const Scalar _tmp475 = _tmp451 * _tmp64;
  const Scalar _tmp476 = _tmp430 - _tmp431 + _tmp474 - _tmp475;
  const Scalar _tmp477 = -_tmp100 * _tmp470 + _tmp470 * _y[6] - _tmp473 * _tmp86 + _tmp473 * _y[4] -
                         _tmp476 * _tmp95 + _tmp476 * _y[5];
  const Scalar _tmp478 = _tmp173 * _tmp461;
  const Scalar _tmp479 = -_tmp184 * _tmp453;
  const Scalar _tmp480 = _tmp469 + _tmp479;
  const Scalar _tmp481 = _tmp390 * _tmp67;
  const Scalar _tmp482 = _tmp453 * _tmp64;
  const Scalar _tmp483 = _tmp388 * _tmp62;
  const Scalar _tmp484 = _tmp179 * _tmp451;
  const Scalar _tmp485 = _tmp483 + _tmp484;
  const Scalar _tmp486 = -_tmp481 - _tmp482 + _tmp485;
  const Scalar _tmp487 = _tmp432 + _tmp474 + _tmp475;
  const Scalar _tmp488 = -_tmp100 * _tmp487 - _tmp480 * _tmp95 + _tmp480 * _y[5] -
                         _tmp486 * _tmp86 + _tmp486 * _y[4] + _tmp487 * _y[6];
  const Scalar _tmp489 = _tmp468 + _tmp479;
  const Scalar _tmp490 = -_tmp418 + _tmp436 + _tmp472;
  const Scalar _tmp491 = _tmp481 + _tmp482 + _tmp485;
  const Scalar _tmp492 = -_tmp100 * _tmp490 - _tmp489 * _tmp86 + _tmp489 * _y[4] + _tmp490 * _y[6] -
                         _tmp491 * _tmp95 + _tmp491 * _y[5];
  const Scalar _tmp493 =
      _s_T_y[0] * _tmp458 - _s_T_y[1] * _tmp456 - _s_T_y[2] * _tmp454 + _s_T_y[3] * _tmp460;
  const Scalar _tmp494 = _tmp219 * _tmp461;
  const Scalar _tmp495 = _tmp202 * _tmp464;
  const Scalar _tmp496 = _tmp478 * _tmp49;
  const Scalar _tmp497 = _tmp116 * _tmp478;
  const Scalar _tmp498 = _tmp202 * _tmp493;
  const Scalar _tmp499 = _tmp54 * sqrt_info(2, 2);
  const Scalar _tmp500 = _tmp135 + _tmp136 + _tmp250;
  const Scalar _tmp501 = _tmp404 + _tmp452 + _tmp500 * _y[0];
  const Scalar _tmp502 = -_tmp398 - _tmp399 + _tmp457 + _tmp500 * _y[2];
  const Scalar _tmp503 = _tmp387 + _tmp459 - _tmp500 * _y[1];
  const Scalar _tmp504 = -_tmp394 + _tmp455 - _tmp500 * _y[3];
  const Scalar _tmp505 =
      -_s_T_y[0] * _tmp504 - _s_T_y[1] * _tmp502 - _s_T_y[2] * _tmp503 - _s_T_y[3] * _tmp501;
  const Scalar _tmp506 = _tmp385 * _tmp505;
  const Scalar _tmp507 = _tmp219 * _tmp506;
  const Scalar _tmp508 = _tmp443 * _tmp505;
  const Scalar _tmp509 = _tmp168 * _tmp506;
  const Scalar _tmp510 = _tmp451 * _tmp62;
  const Scalar _tmp511 = _tmp500 * _tmp64;
  const Scalar _tmp512 = _tmp410 + _tmp412;
  const Scalar _tmp513 = _tmp510 + _tmp511 + _tmp512;
  const Scalar _tmp514 = -_tmp184 * _tmp388;
  const Scalar _tmp515 = -_tmp209 * _tmp500;
  const Scalar _tmp516 = _tmp514 + _tmp515;
  const Scalar _tmp517 = _tmp179 * _tmp500;
  const Scalar _tmp518 = _tmp415 + _tmp436 - _tmp471 + _tmp517;
  const Scalar _tmp519 = -_tmp100 * _tmp513 + _tmp513 * _y[6] - _tmp516 * _tmp95 + _tmp516 * _y[5] -
                         _tmp518 * _tmp86 + _tmp518 * _y[4];
  const Scalar _tmp520 =
      -_s_T_y[0] * _tmp501 - _s_T_y[1] * _tmp503 + _s_T_y[2] * _tmp502 + _s_T_y[3] * _tmp504;
  const Scalar _tmp521 = -_tmp182 * _tmp386;
  const Scalar _tmp522 = _tmp514 + _tmp521;
  const Scalar _tmp523 = _tmp417 + _tmp471 + _tmp517;
  const Scalar _tmp524 = _tmp386 * _tmp64;
  const Scalar _tmp525 = _tmp483 + _tmp500 * _tmp67;
  const Scalar _tmp526 = -_tmp484 - _tmp524 + _tmp525;
  const Scalar _tmp527 = -_tmp100 * _tmp526 - _tmp522 * _tmp86 + _tmp522 * _y[4] -
                         _tmp523 * _tmp95 + _tmp523 * _y[5] + _tmp526 * _y[6];
  const Scalar _tmp528 = -_tmp510 - _tmp511 + _tmp512;
  const Scalar _tmp529 = _tmp515 + _tmp521;
  const Scalar _tmp530 = _tmp484 + _tmp524 + _tmp525;
  const Scalar _tmp531 = -_tmp100 * _tmp529 - _tmp528 * _tmp95 + _tmp528 * _y[5] + _tmp529 * _y[6] -
                         _tmp530 * _tmp86 + _tmp530 * _y[4];
  const Scalar _tmp532 = _tmp509 * _tmp54;
  const Scalar _tmp533 =
      _s_T_y[0] * _tmp503 - _s_T_y[1] * _tmp501 - _s_T_y[2] * _tmp504 + _s_T_y[3] * _tmp502;
  const Scalar _tmp534 = _tmp202 * _tmp533;
  const Scalar _tmp535 =
      -_s_T_y[0] * _tmp502 + _s_T_y[1] * _tmp504 - _s_T_y[2] * _tmp501 + _s_T_y[3] * _tmp503;
  const Scalar _tmp536 = _tmp202 * _tmp535;
  const Scalar _tmp537 = _tmp116 * _tmp508;
  const Scalar _tmp538 = _tmp49 * _tmp508;
  const Scalar _tmp539 = _tmp202 * _tmp520;
  const Scalar _tmp540 = -_tmp111 * _tmp87 - _tmp112 * _tmp97 - _tmp114 * _tmp85;
  const Scalar _tmp541 = -_tmp104 * _tmp85 - _tmp106 * _tmp97 - _tmp109 * _tmp87;
  const Scalar _tmp542 = -_tmp61 * _tmp97 - _tmp66 * _tmp85 - _tmp71 * _tmp87;
  const Scalar _tmp543 = -_tmp61 * _tmp98 - _tmp66 * _tmp76 - _tmp71 * _tmp94;
  const Scalar _tmp544 = -_tmp111 * _tmp94 - _tmp112 * _tmp98 - _tmp114 * _tmp76;
  const Scalar _tmp545 = -_tmp104 * _tmp76 - _tmp106 * _tmp98 - _tmp109 * _tmp94;
  const Scalar _tmp546 = -_tmp111 * _tmp91 - _tmp112 * _tmp99 - _tmp114 * _tmp80;
  const Scalar _tmp547 = -_tmp104 * _tmp80 - _tmp106 * _tmp99 - _tmp109 * _tmp91;
  const Scalar _tmp548 = -_tmp61 * _tmp99 - _tmp66 * _tmp80 - _tmp71 * _tmp91;
  const Scalar _tmp549 = (Scalar(1) / Scalar(2)) * _tmp38;
  const Scalar _tmp550 = (Scalar(1) / Scalar(2)) * _tmp39;
  const Scalar _tmp551 = (Scalar(1) / Scalar(2)) * _tmp40;
  const Scalar _tmp552 = (Scalar(1) / Scalar(2)) * _tmp41;
  const Scalar _tmp553 = -_tmp549 + _tmp550 - _tmp551 + _tmp552;
  const Scalar _tmp554 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp555 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp556 = (Scalar(1) / Scalar(2)) * _tmp34;
  const Scalar _tmp557 = (Scalar(1) / Scalar(2)) * _tmp35;
  const Scalar _tmp558 = -_tmp554 + _tmp555 + _tmp556 - _tmp557;
  const Scalar _tmp559 = _s_T_y[1] * _tmp558;
  const Scalar _tmp560 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp561 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp562 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp563 = (Scalar(1) / Scalar(2)) * _tmp29;
  const Scalar _tmp564 = _tmp560 + _tmp561 - _tmp562 - _tmp563;
  const Scalar _tmp565 = _s_T_y[0] * _tmp564;
  const Scalar _tmp566 = (Scalar(1) / Scalar(2)) * _tmp11 + (Scalar(1) / Scalar(2)) * _tmp17 +
                         (Scalar(1) / Scalar(2)) * _tmp23 + (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp567 = _s_T_y[2] * _tmp566;
  const Scalar _tmp568 = _s_T_y[3] * _tmp553 - _tmp559 + _tmp565 - _tmp567;
  const Scalar _tmp569 = _tmp202 * _tmp568;
  const Scalar _tmp570 = -_s_T_y[1] * _tmp564;
  const Scalar _tmp571 = _s_T_y[3] * _tmp566;
  const Scalar _tmp572 = -_s_T_y[0] * _tmp558 + _tmp571;
  const Scalar _tmp573 = _s_T_y[2] * _tmp553 + _tmp570 + _tmp572;
  const Scalar _tmp574 = _tmp163 * _tmp573;
  const Scalar _tmp575 = _s_T_y[2] * _tmp564;
  const Scalar _tmp576 = _s_T_y[0] * _tmp566;
  const Scalar _tmp577 = _s_T_y[3] * _tmp558 + _tmp576;
  const Scalar _tmp578 = _s_T_y[1] * _tmp553 + _tmp575 + _tmp577;
  const Scalar _tmp579 = _tmp165 * _tmp578;
  const Scalar _tmp580 = _tmp168 * _tmp579;
  const Scalar _tmp581 = _tmp54 * _tmp580;
  const Scalar _tmp582 = _s_T_y[2] * _tmp558;
  const Scalar _tmp583 = _s_T_y[1] * _tmp566;
  const Scalar _tmp584 = _s_T_y[3] * _tmp564 + _tmp583;
  const Scalar _tmp585 = -_s_T_y[0] * _tmp553 - _tmp582 + _tmp584;
  const Scalar _tmp586 = _tmp202 * _tmp585;
  const Scalar _tmp587 = _tmp285 * _tmp578;
  const Scalar _tmp588 = _tmp202 * _tmp573;
  const Scalar _tmp589 = _tmp49 * _tmp587;
  const Scalar _tmp590 = _tmp116 * _tmp587;
  const Scalar _tmp591 = _tmp554 - _tmp555 - _tmp556 + _tmp557;
  const Scalar _tmp592 = _tmp549 - _tmp550 + _tmp551 - _tmp552;
  const Scalar _tmp593 = _s_T_y[3] * _tmp592 + _tmp567;
  const Scalar _tmp594 = -_s_T_y[1] * _tmp591 - _tmp565 + _tmp593;
  const Scalar _tmp595 = _s_T_y[0] * _tmp592;
  const Scalar _tmp596 = _s_T_y[2] * _tmp591 + _tmp584 + _tmp595;
  const Scalar _tmp597 = _tmp165 * _tmp596;
  const Scalar _tmp598 = _tmp168 * _tmp597;
  const Scalar _tmp599 = _s_T_y[1] * _tmp592;
  const Scalar _tmp600 = _s_T_y[3] * _tmp591 - _tmp575 - _tmp576 + _tmp599;
  const Scalar _tmp601 = _tmp202 * _tmp600;
  const Scalar _tmp602 = -_s_T_y[2] * _tmp592;
  const Scalar _tmp603 = _s_T_y[0] * _tmp591 + _tmp570 + _tmp571 + _tmp602;
  const Scalar _tmp604 = _tmp202 * _tmp603;
  const Scalar _tmp605 = _tmp285 * _tmp596;
  const Scalar _tmp606 = _tmp219 * _tmp597;
  const Scalar _tmp607 = _tmp49 * _tmp605;
  const Scalar _tmp608 = _tmp116 * _tmp605;
  const Scalar _tmp609 = -_tmp560 - _tmp561 + _tmp562 + _tmp563;
  const Scalar _tmp610 = _s_T_y[0] * _tmp609 + _tmp559 + _tmp593;
  const Scalar _tmp611 = _tmp285 * _tmp610;
  const Scalar _tmp612 = _tmp165 * _tmp610;
  const Scalar _tmp613 = _tmp168 * _tmp612;
  const Scalar _tmp614 = -_s_T_y[2] * _tmp609 + _tmp577 - _tmp599;
  const Scalar _tmp615 = _s_T_y[3] * _tmp609 + _tmp582 - _tmp583 - _tmp595;
  const Scalar _tmp616 = _tmp219 * _tmp612;
  const Scalar _tmp617 = _tmp169 * _tmp612;
  const Scalar _tmp618 = _s_T_y[1] * _tmp609 + _tmp572 + _tmp602;
  const Scalar _tmp619 = _tmp202 * _tmp618;
  const Scalar _tmp620 = _tmp49 * _tmp611;
  const Scalar _tmp621 = _tmp116 * _tmp611;
  const Scalar _tmp622 = _tmp202 * _tmp614;
  const Scalar _tmp623 = _tmp202 * _tmp615;

  // Output terms (4)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp101 * sqrt_info(0, 5) + _tmp110 * sqrt_info(0, 3) + _tmp115 * sqrt_info(0, 4) +
               _tmp117 * _tmp55 + _tmp48 * _tmp53 + _tmp56 * sqrt_info(0, 2);
  _res(1, 0) = _tmp101 * sqrt_info(1, 5) + _tmp110 * sqrt_info(1, 3) + _tmp115 * sqrt_info(1, 4) +
               _tmp118 * sqrt_info(1, 0) + _tmp119 * sqrt_info(1, 1) + _tmp56 * sqrt_info(1, 2);
  _res(2, 0) = _tmp101 * sqrt_info(2, 5) + _tmp110 * sqrt_info(2, 3) + _tmp115 * sqrt_info(2, 4) +
               _tmp118 * sqrt_info(2, 0) + _tmp119 * sqrt_info(2, 1) + _tmp56 * sqrt_info(2, 2);
  _res(3, 0) = _tmp101 * sqrt_info(3, 5) + _tmp110 * sqrt_info(3, 3) + _tmp115 * sqrt_info(3, 4) +
               _tmp118 * sqrt_info(3, 0) + _tmp119 * sqrt_info(3, 1) + _tmp56 * sqrt_info(3, 2);
  _res(4, 0) = _tmp101 * sqrt_info(4, 5) + _tmp110 * sqrt_info(4, 3) + _tmp115 * sqrt_info(4, 4) +
               _tmp118 * sqrt_info(4, 0) + _tmp119 * sqrt_info(4, 1) + _tmp56 * sqrt_info(4, 2);
  _res(5, 0) = _tmp101 * sqrt_info(5, 5) + _tmp110 * sqrt_info(5, 3) + _tmp115 * sqrt_info(5, 4) +
               _tmp118 * sqrt_info(5, 0) + _tmp119 * sqrt_info(5, 1) + _tmp56 * sqrt_info(5, 2);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 6, 6>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp117 * _tmp172 - _tmp117 * _tmp174 + _tmp157 * _tmp164 +
                     _tmp170 * sqrt_info(0, 2) + _tmp171 * _tmp172 - _tmp171 * _tmp174 +
                     _tmp200 * sqrt_info(0, 3) + _tmp203 * sqrt_info(0, 2) +
                     _tmp212 * sqrt_info(0, 4) + _tmp216 * sqrt_info(0, 5) +
                     _tmp218 * sqrt_info(0, 1) - _tmp220 * sqrt_info(0, 2);
    _res_D_x(1, 0) = _tmp157 * _tmp221 + _tmp166 * _tmp223 + _tmp172 * _tmp224 + _tmp172 * _tmp227 +
                     _tmp200 * sqrt_info(1, 3) + _tmp203 * sqrt_info(1, 2) +
                     _tmp212 * sqrt_info(1, 4) + _tmp216 * sqrt_info(1, 5) +
                     _tmp218 * sqrt_info(1, 1) - _tmp220 * sqrt_info(1, 2) -
                     _tmp225 * sqrt_info(1, 0) - _tmp226 * sqrt_info(1, 1);
    _res_D_x(2, 0) = _tmp157 * _tmp228 + _tmp170 * sqrt_info(2, 2) + _tmp172 * _tmp229 +
                     _tmp172 * _tmp230 - _tmp174 * _tmp230 + _tmp200 * sqrt_info(2, 3) +
                     _tmp203 * sqrt_info(2, 2) + _tmp212 * sqrt_info(2, 4) +
                     _tmp216 * sqrt_info(2, 5) + _tmp218 * sqrt_info(2, 1) -
                     _tmp220 * sqrt_info(2, 2) - _tmp225 * sqrt_info(2, 0);
    _res_D_x(3, 0) = _tmp157 * _tmp232 + _tmp170 * sqrt_info(3, 2) + _tmp172 * _tmp233 +
                     _tmp172 * _tmp234 - _tmp174 * _tmp234 + _tmp200 * sqrt_info(3, 3) +
                     _tmp201 * _tmp235 + _tmp212 * sqrt_info(3, 4) + _tmp216 * sqrt_info(3, 5) +
                     _tmp217 * _tmp236 - _tmp220 * sqrt_info(3, 2) - _tmp225 * sqrt_info(3, 0);
    _res_D_x(4, 0) = _tmp157 * _tmp237 - _tmp166 * _tmp241 + _tmp170 * sqrt_info(4, 2) +
                     _tmp172 * _tmp238 + _tmp172 * _tmp239 - _tmp174 * _tmp238 - _tmp174 * _tmp239 +
                     _tmp200 * sqrt_info(4, 3) + _tmp201 * _tmp240 + _tmp212 * sqrt_info(4, 4) +
                     _tmp216 * sqrt_info(4, 5) + _tmp218 * sqrt_info(4, 1);
    _res_D_x(5, 0) = _tmp157 * _tmp242 + _tmp166 * _tmp244 - _tmp166 * _tmp246 +
                     _tmp170 * sqrt_info(5, 2) + _tmp172 * _tmp245 - _tmp174 * _tmp243 +
                     _tmp200 * sqrt_info(5, 3) + _tmp203 * sqrt_info(5, 2) +
                     _tmp212 * sqrt_info(5, 4) + _tmp216 * sqrt_info(5, 5) +
                     _tmp218 * sqrt_info(5, 1) - _tmp226 * sqrt_info(5, 1);
    _res_D_x(0, 1) = -_tmp117 * _tmp286 + _tmp117 * _tmp298 + _tmp164 * _tmp301 -
                     _tmp171 * _tmp286 + _tmp171 * _tmp298 - _tmp262 * _tmp264 +
                     _tmp284 * sqrt_info(0, 4) + _tmp294 * sqrt_info(0, 3) +
                     _tmp296 * sqrt_info(0, 2) + _tmp300 * sqrt_info(0, 1) +
                     _tmp305 * sqrt_info(0, 5) + _tmp306 * sqrt_info(0, 2);
    _res_D_x(1, 1) = _tmp222 * _tmp298 + _tmp224 * _tmp298 + _tmp227 * _tmp298 - _tmp262 * _tmp307 +
                     _tmp284 * sqrt_info(1, 4) + _tmp294 * sqrt_info(1, 3) + _tmp295 * _tmp310 +
                     _tmp300 * sqrt_info(1, 1) + _tmp305 * sqrt_info(1, 5) -
                     _tmp308 * sqrt_info(1, 0) - _tmp309 * sqrt_info(1, 1) +
                     _tmp311 * sqrt_info(1, 0);
    _res_D_x(2, 1) = _tmp229 * _tmp298 - _tmp230 * _tmp286 + _tmp230 * _tmp298 +
                     _tmp284 * sqrt_info(2, 4) + _tmp294 * sqrt_info(2, 3) +
                     _tmp296 * sqrt_info(2, 2) - _tmp297 * _tmp312 + _tmp300 * sqrt_info(2, 1) +
                     _tmp305 * sqrt_info(2, 5) + _tmp306 * sqrt_info(2, 2) -
                     _tmp308 * sqrt_info(2, 0) + _tmp311 * sqrt_info(2, 0);
    _res_D_x(3, 1) = _tmp232 * _tmp301 - _tmp233 * _tmp286 + _tmp233 * _tmp298 - _tmp234 * _tmp286 +
                     _tmp234 * _tmp298 + _tmp235 * _tmp295 + _tmp236 * _tmp299 +
                     _tmp284 * sqrt_info(3, 4) + _tmp294 * sqrt_info(3, 3) - _tmp297 * _tmp313 +
                     _tmp298 * _tmp314 + _tmp305 * sqrt_info(3, 5);
    _res_D_x(4, 1) = -_tmp238 * _tmp286 + _tmp238 * _tmp298 - _tmp239 * _tmp286 +
                     _tmp239 * _tmp298 + _tmp240 * _tmp295 - _tmp241 * _tmp297 +
                     _tmp284 * sqrt_info(4, 4) + _tmp294 * sqrt_info(4, 3) + _tmp298 * _tmp315 +
                     _tmp300 * sqrt_info(4, 1) + _tmp305 * sqrt_info(4, 5) +
                     _tmp311 * sqrt_info(4, 0);
    _res_D_x(5, 1) = _tmp242 * _tmp301 - _tmp243 * _tmp286 + _tmp244 * _tmp297 + _tmp245 * _tmp298 -
                     _tmp246 * _tmp297 + _tmp284 * sqrt_info(5, 4) + _tmp294 * sqrt_info(5, 3) +
                     _tmp296 * sqrt_info(5, 2) + _tmp298 * _tmp316 + _tmp300 * sqrt_info(5, 1) +
                     _tmp305 * sqrt_info(5, 5) - _tmp309 * sqrt_info(5, 1);
    _res_D_x(0, 2) = _tmp117 * _tmp332 - _tmp117 * _tmp363 + _tmp164 * _tmp352 + _tmp171 * _tmp332 -
                     _tmp171 * _tmp363 - _tmp333 * sqrt_info(0, 2) + _tmp335 * sqrt_info(0, 2) +
                     _tmp336 * sqrt_info(0, 2) + _tmp351 * sqrt_info(0, 5) + _tmp353 * _tmp354 +
                     _tmp362 * sqrt_info(0, 4) + _tmp367 * sqrt_info(0, 3);
    _res_D_x(1, 2) = _tmp221 * _tmp352 + _tmp222 * _tmp332 + _tmp224 * _tmp332 + _tmp227 * _tmp332 -
                     _tmp333 * sqrt_info(1, 2) + _tmp335 * sqrt_info(1, 2) +
                     _tmp351 * sqrt_info(1, 5) + _tmp362 * sqrt_info(1, 4) +
                     _tmp367 * sqrt_info(1, 3) + _tmp368 * sqrt_info(1, 1) -
                     _tmp369 * sqrt_info(1, 1) - _tmp370 * sqrt_info(1, 0);
    _res_D_x(2, 2) = _tmp228 * _tmp352 + _tmp229 * _tmp332 + _tmp230 * _tmp332 - _tmp312 * _tmp331 +
                     _tmp335 * sqrt_info(2, 2) + _tmp336 * sqrt_info(2, 2) +
                     _tmp351 * sqrt_info(2, 5) + _tmp362 * sqrt_info(2, 4) +
                     _tmp367 * sqrt_info(2, 3) + _tmp368 * sqrt_info(2, 1) -
                     _tmp369 * sqrt_info(2, 1) - _tmp370 * sqrt_info(2, 0);
    _res_D_x(3, 2) = _tmp232 * _tmp352 + _tmp233 * _tmp332 + _tmp234 * _tmp332 + _tmp236 * _tmp353 -
                     _tmp333 * sqrt_info(3, 2) + _tmp335 * sqrt_info(3, 2) +
                     _tmp336 * sqrt_info(3, 2) + _tmp351 * sqrt_info(3, 5) +
                     _tmp362 * sqrt_info(3, 4) + _tmp367 * sqrt_info(3, 3) -
                     _tmp369 * sqrt_info(3, 1) - _tmp370 * sqrt_info(3, 0);
    _res_D_x(4, 2) = _tmp237 * _tmp352 + _tmp238 * _tmp332 - _tmp238 * _tmp363 + _tmp239 * _tmp332 +
                     _tmp240 * _tmp334 - _tmp241 * _tmp331 + _tmp315 * _tmp332 +
                     _tmp351 * sqrt_info(4, 5) + _tmp353 * _tmp371 + _tmp362 * sqrt_info(4, 4) +
                     _tmp367 * sqrt_info(4, 3) - _tmp369 * sqrt_info(4, 1);
    _res_D_x(5, 2) = _tmp242 * _tmp352 - _tmp243 * _tmp363 + _tmp244 * _tmp331 + _tmp245 * _tmp332 -
                     _tmp246 * _tmp331 + _tmp316 * _tmp332 + _tmp335 * sqrt_info(5, 2) +
                     _tmp351 * sqrt_info(5, 5) + _tmp362 * sqrt_info(5, 4) +
                     _tmp367 * sqrt_info(5, 3) + _tmp368 * sqrt_info(5, 1) -
                     _tmp369 * sqrt_info(5, 1);
    _res_D_x(0, 3) =
        _tmp373 * sqrt_info(0, 4) + _tmp375 * sqrt_info(0, 5) + _tmp376 * sqrt_info(0, 3);
    _res_D_x(1, 3) =
        _tmp373 * sqrt_info(1, 4) + _tmp375 * sqrt_info(1, 5) + _tmp376 * sqrt_info(1, 3);
    _res_D_x(2, 3) =
        _tmp373 * sqrt_info(2, 4) + _tmp375 * sqrt_info(2, 5) + _tmp376 * sqrt_info(2, 3);
    _res_D_x(3, 3) =
        _tmp373 * sqrt_info(3, 4) + _tmp375 * sqrt_info(3, 5) + _tmp376 * sqrt_info(3, 3);
    _res_D_x(4, 3) =
        _tmp373 * sqrt_info(4, 4) + _tmp375 * sqrt_info(4, 5) + _tmp376 * sqrt_info(4, 3);
    _res_D_x(5, 3) =
        _tmp373 * sqrt_info(5, 4) + _tmp375 * sqrt_info(5, 5) + _tmp376 * sqrt_info(5, 3);
    _res_D_x(0, 4) =
        _tmp377 * sqrt_info(0, 3) + _tmp379 * sqrt_info(0, 5) + _tmp381 * sqrt_info(0, 4);
    _res_D_x(1, 4) =
        _tmp377 * sqrt_info(1, 3) + _tmp379 * sqrt_info(1, 5) + _tmp381 * sqrt_info(1, 4);
    _res_D_x(2, 4) =
        _tmp377 * sqrt_info(2, 3) + _tmp379 * sqrt_info(2, 5) + _tmp381 * sqrt_info(2, 4);
    _res_D_x(3, 4) =
        _tmp377 * sqrt_info(3, 3) + _tmp379 * sqrt_info(3, 5) + _tmp381 * sqrt_info(3, 4);
    _res_D_x(4, 4) =
        _tmp377 * sqrt_info(4, 3) + _tmp379 * sqrt_info(4, 5) + _tmp381 * sqrt_info(4, 4);
    _res_D_x(5, 4) =
        _tmp377 * sqrt_info(5, 3) + _tmp379 * sqrt_info(5, 5) + _tmp381 * sqrt_info(5, 4);
    _res_D_x(0, 5) =
        _tmp382 * sqrt_info(0, 4) + _tmp383 * sqrt_info(0, 3) + _tmp384 * sqrt_info(0, 5);
    _res_D_x(1, 5) =
        _tmp382 * sqrt_info(1, 4) + _tmp383 * sqrt_info(1, 3) + _tmp384 * sqrt_info(1, 5);
    _res_D_x(2, 5) =
        _tmp382 * sqrt_info(2, 4) + _tmp383 * sqrt_info(2, 3) + _tmp384 * sqrt_info(2, 5);
    _res_D_x(3, 5) =
        _tmp382 * sqrt_info(3, 4) + _tmp383 * sqrt_info(3, 3) + _tmp384 * sqrt_info(3, 5);
    _res_D_x(4, 5) =
        _tmp382 * sqrt_info(4, 4) + _tmp383 * sqrt_info(4, 3) + _tmp384 * sqrt_info(4, 5);
    _res_D_x(5, 5) =
        _tmp382 * sqrt_info(5, 4) + _tmp383 * sqrt_info(5, 3) + _tmp384 * sqrt_info(5, 5);
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 6, 6>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s(0, 0) = _tmp117 * _tmp408 - _tmp117 * _tmp444 + _tmp171 * _tmp408 -
                         _tmp171 * _tmp444 + _tmp409 * sqrt_info(0, 2) + _tmp424 * sqrt_info(0, 4) +
                         _tmp434 * sqrt_info(0, 3) + _tmp439 * sqrt_info(0, 5) +
                         _tmp441 * sqrt_info(0, 2) - _tmp442 * sqrt_info(0, 2) +
                         _tmp446 * sqrt_info(0, 1) + _tmp447 * _tmp48;
    _res_D_x_T_s(1, 0) =
        _tmp222 * _tmp408 + _tmp224 * _tmp408 + _tmp227 * _tmp408 + _tmp424 * sqrt_info(1, 4) +
        _tmp434 * sqrt_info(1, 3) + _tmp439 * sqrt_info(1, 5) + _tmp441 * sqrt_info(1, 2) -
        _tmp442 * sqrt_info(1, 2) + _tmp446 * sqrt_info(1, 1) - _tmp448 * sqrt_info(1, 0) -
        _tmp449 * sqrt_info(1, 1) + _tmp450 * sqrt_info(1, 0);
    _res_D_x_T_s(2, 0) = _tmp229 * _tmp408 + _tmp230 * _tmp408 - _tmp230 * _tmp444 -
                         _tmp312 * _tmp407 + _tmp409 * sqrt_info(2, 2) + _tmp424 * sqrt_info(2, 4) +
                         _tmp434 * sqrt_info(2, 3) + _tmp439 * sqrt_info(2, 5) +
                         _tmp441 * sqrt_info(2, 2) + _tmp446 * sqrt_info(2, 1) -
                         _tmp448 * sqrt_info(2, 0) + _tmp450 * sqrt_info(2, 0);
    _res_D_x_T_s(3, 0) = _tmp231 * _tmp447 + _tmp233 * _tmp408 - _tmp233 * _tmp444 +
                         _tmp234 * _tmp408 - _tmp234 * _tmp444 + _tmp235 * _tmp440 +
                         _tmp236 * _tmp445 + _tmp409 * sqrt_info(3, 2) + _tmp424 * sqrt_info(3, 4) +
                         _tmp434 * sqrt_info(3, 3) + _tmp439 * sqrt_info(3, 5) -
                         _tmp442 * sqrt_info(3, 2);
    _res_D_x_T_s(4, 0) = _tmp238 * _tmp408 - _tmp238 * _tmp444 + _tmp239 * _tmp408 -
                         _tmp239 * _tmp444 + _tmp240 * _tmp440 - _tmp241 * _tmp407 +
                         _tmp409 * sqrt_info(4, 2) + _tmp424 * sqrt_info(4, 4) +
                         _tmp434 * sqrt_info(4, 3) + _tmp439 * sqrt_info(4, 5) +
                         _tmp446 * sqrt_info(4, 1) + _tmp450 * sqrt_info(4, 0);
    _res_D_x_T_s(5, 0) = -_tmp243 * _tmp444 + _tmp244 * _tmp407 + _tmp245 * _tmp408 -
                         _tmp246 * _tmp407 + _tmp409 * sqrt_info(5, 2) + _tmp424 * sqrt_info(5, 4) +
                         _tmp434 * sqrt_info(5, 3) + _tmp439 * sqrt_info(5, 5) +
                         _tmp441 * sqrt_info(5, 2) + _tmp446 * sqrt_info(5, 1) -
                         _tmp449 * sqrt_info(5, 1) + _tmp450 * sqrt_info(5, 0);
    _res_D_x_T_s(0, 1) = _tmp117 * _tmp462 - _tmp117 * _tmp478 + _tmp171 * _tmp462 -
                         _tmp171 * _tmp478 + _tmp354 * _tmp493 + _tmp462 * _tmp463 +
                         _tmp465 * _tmp48 + _tmp467 * sqrt_info(0, 2) + _tmp477 * sqrt_info(0, 5) +
                         _tmp488 * sqrt_info(0, 4) + _tmp492 * sqrt_info(0, 3) -
                         _tmp494 * sqrt_info(0, 2);
    _res_D_x_T_s(1, 1) =
        _tmp222 * _tmp462 + _tmp224 * _tmp462 + _tmp227 * _tmp462 + _tmp467 * sqrt_info(1, 2) +
        _tmp477 * sqrt_info(1, 5) + _tmp488 * sqrt_info(1, 4) + _tmp492 * sqrt_info(1, 3) -
        _tmp494 * sqrt_info(1, 2) + _tmp495 * sqrt_info(1, 0) - _tmp496 * sqrt_info(1, 0) -
        _tmp497 * sqrt_info(1, 1) + _tmp498 * sqrt_info(1, 1);
    _res_D_x_T_s(2, 1) = _tmp229 * _tmp462 + _tmp230 * _tmp462 - _tmp230 * _tmp478 +
                         _tmp462 * _tmp499 + _tmp467 * sqrt_info(2, 2) + _tmp477 * sqrt_info(2, 5) +
                         _tmp488 * sqrt_info(2, 4) + _tmp492 * sqrt_info(2, 3) -
                         _tmp494 * sqrt_info(2, 2) + _tmp495 * sqrt_info(2, 0) -
                         _tmp496 * sqrt_info(2, 0) + _tmp498 * sqrt_info(2, 1);
    _res_D_x_T_s(3, 1) = _tmp231 * _tmp465 + _tmp233 * _tmp462 - _tmp233 * _tmp478 +
                         _tmp234 * _tmp462 - _tmp234 * _tmp478 + _tmp235 * _tmp466 +
                         _tmp236 * _tmp493 + _tmp314 * _tmp462 + _tmp477 * sqrt_info(3, 5) +
                         _tmp488 * sqrt_info(3, 4) + _tmp492 * sqrt_info(3, 3) -
                         _tmp494 * sqrt_info(3, 2);
    _res_D_x_T_s(4, 1) = _tmp238 * _tmp462 - _tmp238 * _tmp478 + _tmp239 * _tmp462 -
                         _tmp239 * _tmp478 + _tmp240 * _tmp466 - _tmp241 * _tmp461 +
                         _tmp315 * _tmp462 + _tmp371 * _tmp493 + _tmp477 * sqrt_info(4, 5) +
                         _tmp488 * sqrt_info(4, 4) + _tmp492 * sqrt_info(4, 3) +
                         _tmp495 * sqrt_info(4, 0);
    _res_D_x_T_s(5, 1) = -_tmp243 * _tmp478 + _tmp244 * _tmp461 + _tmp245 * _tmp462 -
                         _tmp246 * _tmp461 + _tmp316 * _tmp462 + _tmp467 * sqrt_info(5, 2) +
                         _tmp477 * sqrt_info(5, 5) + _tmp488 * sqrt_info(5, 4) +
                         _tmp492 * sqrt_info(5, 3) + _tmp495 * sqrt_info(5, 0) -
                         _tmp497 * sqrt_info(5, 1) + _tmp498 * sqrt_info(5, 1);
    _res_D_x_T_s(0, 2) = -_tmp117 * _tmp508 + _tmp117 * _tmp509 + _tmp164 * _tmp520 -
                         _tmp171 * _tmp508 + _tmp171 * _tmp509 - _tmp507 * sqrt_info(0, 2) +
                         _tmp519 * sqrt_info(0, 4) + _tmp527 * sqrt_info(0, 3) +
                         _tmp531 * sqrt_info(0, 5) + _tmp532 * sqrt_info(0, 2) +
                         _tmp534 * sqrt_info(0, 1) + _tmp536 * sqrt_info(0, 2);
    _res_D_x_T_s(1, 2) =
        _tmp222 * _tmp509 + _tmp224 * _tmp509 + _tmp227 * _tmp509 - _tmp507 * sqrt_info(1, 2) +
        _tmp519 * sqrt_info(1, 4) + _tmp527 * sqrt_info(1, 3) + _tmp531 * sqrt_info(1, 5) +
        _tmp534 * sqrt_info(1, 1) + _tmp536 * sqrt_info(1, 2) - _tmp537 * sqrt_info(1, 1) -
        _tmp538 * sqrt_info(1, 0) + _tmp539 * sqrt_info(1, 0);
    _res_D_x_T_s(2, 2) =
        _tmp229 * _tmp509 + _tmp230 * _tmp509 - _tmp312 * _tmp506 + _tmp519 * sqrt_info(2, 4) +
        _tmp527 * sqrt_info(2, 3) + _tmp531 * sqrt_info(2, 5) + _tmp532 * sqrt_info(2, 2) +
        _tmp534 * sqrt_info(2, 1) + _tmp536 * sqrt_info(2, 2) - _tmp537 * sqrt_info(2, 1) -
        _tmp538 * sqrt_info(2, 0) + _tmp539 * sqrt_info(2, 0);
    _res_D_x_T_s(3, 2) = _tmp232 * _tmp520 + _tmp233 * _tmp509 + _tmp234 * _tmp509 +
                         _tmp235 * _tmp535 + _tmp236 * _tmp533 - _tmp313 * _tmp506 +
                         _tmp519 * sqrt_info(3, 4) + _tmp527 * sqrt_info(3, 3) +
                         _tmp531 * sqrt_info(3, 5) + _tmp532 * sqrt_info(3, 2) -
                         _tmp537 * sqrt_info(3, 1) - _tmp538 * sqrt_info(3, 0);
    _res_D_x_T_s(4, 2) = -_tmp238 * _tmp508 + _tmp238 * _tmp509 + _tmp239 * _tmp509 +
                         _tmp240 * _tmp535 - _tmp241 * _tmp506 + _tmp371 * _tmp533 +
                         _tmp519 * sqrt_info(4, 4) + _tmp527 * sqrt_info(4, 3) +
                         _tmp531 * sqrt_info(4, 5) + _tmp532 * sqrt_info(4, 2) -
                         _tmp537 * sqrt_info(4, 1) + _tmp539 * sqrt_info(4, 0);
    _res_D_x_T_s(5, 2) = -_tmp243 * _tmp508 + _tmp244 * _tmp506 + _tmp245 * _tmp509 -
                         _tmp246 * _tmp506 + _tmp316 * _tmp509 + _tmp519 * sqrt_info(5, 4) +
                         _tmp527 * sqrt_info(5, 3) + _tmp531 * sqrt_info(5, 5) +
                         _tmp534 * sqrt_info(5, 1) + _tmp536 * sqrt_info(5, 2) -
                         _tmp537 * sqrt_info(5, 1) + _tmp539 * sqrt_info(5, 0);
    _res_D_x_T_s(0, 3) =
        _tmp540 * sqrt_info(0, 4) + _tmp541 * sqrt_info(0, 3) + _tmp542 * sqrt_info(0, 5);
    _res_D_x_T_s(1, 3) =
        _tmp540 * sqrt_info(1, 4) + _tmp541 * sqrt_info(1, 3) + _tmp542 * sqrt_info(1, 5);
    _res_D_x_T_s(2, 3) =
        _tmp540 * sqrt_info(2, 4) + _tmp541 * sqrt_info(2, 3) + _tmp542 * sqrt_info(2, 5);
    _res_D_x_T_s(3, 3) =
        _tmp540 * sqrt_info(3, 4) + _tmp541 * sqrt_info(3, 3) + _tmp542 * sqrt_info(3, 5);
    _res_D_x_T_s(4, 3) =
        _tmp540 * sqrt_info(4, 4) + _tmp541 * sqrt_info(4, 3) + _tmp542 * sqrt_info(4, 5);
    _res_D_x_T_s(5, 3) =
        _tmp540 * sqrt_info(5, 4) + _tmp541 * sqrt_info(5, 3) + _tmp542 * sqrt_info(5, 5);
    _res_D_x_T_s(0, 4) =
        _tmp543 * sqrt_info(0, 5) + _tmp544 * sqrt_info(0, 4) + _tmp545 * sqrt_info(0, 3);
    _res_D_x_T_s(1, 4) =
        _tmp543 * sqrt_info(1, 5) + _tmp544 * sqrt_info(1, 4) + _tmp545 * sqrt_info(1, 3);
    _res_D_x_T_s(2, 4) =
        _tmp543 * sqrt_info(2, 5) + _tmp544 * sqrt_info(2, 4) + _tmp545 * sqrt_info(2, 3);
    _res_D_x_T_s(3, 4) =
        _tmp543 * sqrt_info(3, 5) + _tmp544 * sqrt_info(3, 4) + _tmp545 * sqrt_info(3, 3);
    _res_D_x_T_s(4, 4) =
        _tmp543 * sqrt_info(4, 5) + _tmp544 * sqrt_info(4, 4) + _tmp545 * sqrt_info(4, 3);
    _res_D_x_T_s(5, 4) =
        _tmp543 * sqrt_info(5, 5) + _tmp544 * sqrt_info(5, 4) + _tmp545 * sqrt_info(5, 3);
    _res_D_x_T_s(0, 5) =
        _tmp546 * sqrt_info(0, 4) + _tmp547 * sqrt_info(0, 3) + _tmp548 * sqrt_info(0, 5);
    _res_D_x_T_s(1, 5) =
        _tmp546 * sqrt_info(1, 4) + _tmp547 * sqrt_info(1, 3) + _tmp548 * sqrt_info(1, 5);
    _res_D_x_T_s(2, 5) =
        _tmp546 * sqrt_info(2, 4) + _tmp547 * sqrt_info(2, 3) + _tmp548 * sqrt_info(2, 5);
    _res_D_x_T_s(3, 5) =
        _tmp546 * sqrt_info(3, 4) + _tmp547 * sqrt_info(3, 3) + _tmp548 * sqrt_info(3, 5);
    _res_D_x_T_s(4, 5) =
        _tmp546 * sqrt_info(4, 4) + _tmp547 * sqrt_info(4, 3) + _tmp548 * sqrt_info(4, 5);
    _res_D_x_T_s(5, 5) =
        _tmp546 * sqrt_info(5, 4) + _tmp547 * sqrt_info(5, 3) + _tmp548 * sqrt_info(5, 5);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 6, 6>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp117 * _tmp580 - _tmp117 * _tmp587 + _tmp171 * _tmp580 - _tmp171 * _tmp587 -
                     _tmp264 * _tmp578 + _tmp48 * _tmp574 + _tmp569 * sqrt_info(0, 1) +
                     _tmp581 * sqrt_info(0, 2) + _tmp586 * sqrt_info(0, 2);
    _res_D_y(1, 0) = _tmp222 * _tmp580 + _tmp224 * _tmp580 + _tmp227 * _tmp580 - _tmp307 * _tmp578 +
                     _tmp310 * _tmp585 + _tmp569 * sqrt_info(1, 1) + _tmp588 * sqrt_info(1, 0) -
                     _tmp589 * sqrt_info(1, 0) - _tmp590 * sqrt_info(1, 1);
    _res_D_y(2, 0) = _tmp229 * _tmp580 + _tmp230 * _tmp580 - _tmp230 * _tmp587 - _tmp312 * _tmp579 +
                     _tmp569 * sqrt_info(2, 1) + _tmp581 * sqrt_info(2, 2) +
                     _tmp586 * sqrt_info(2, 2) + _tmp588 * sqrt_info(2, 0) -
                     _tmp589 * sqrt_info(2, 0);
    _res_D_y(3, 0) = _tmp231 * _tmp574 + _tmp233 * _tmp580 - _tmp233 * _tmp587 + _tmp234 * _tmp580 +
                     _tmp235 * _tmp585 + _tmp236 * _tmp568 - _tmp313 * _tmp579 +
                     _tmp581 * sqrt_info(3, 2) - _tmp590 * sqrt_info(3, 1);
    _res_D_y(4, 0) = _tmp238 * _tmp580 - _tmp238 * _tmp587 + _tmp239 * _tmp580 - _tmp239 * _tmp587 +
                     _tmp240 * _tmp585 - _tmp241 * _tmp579 + _tmp371 * _tmp568 +
                     _tmp581 * sqrt_info(4, 2) + _tmp588 * sqrt_info(4, 0);
    _res_D_y(5, 0) = -_tmp243 * _tmp587 + _tmp244 * _tmp579 + _tmp245 * _tmp580 -
                     _tmp246 * _tmp579 + _tmp569 * sqrt_info(5, 1) + _tmp581 * sqrt_info(5, 2) +
                     _tmp586 * sqrt_info(5, 2) + _tmp588 * sqrt_info(5, 0) -
                     _tmp590 * sqrt_info(5, 1);
    _res_D_y(0, 1) = _tmp117 * _tmp598 - _tmp117 * _tmp605 + _tmp164 * _tmp594 + _tmp171 * _tmp598 -
                     _tmp171 * _tmp605 + _tmp463 * _tmp598 + _tmp601 * sqrt_info(0, 2) +
                     _tmp604 * sqrt_info(0, 1) - _tmp606 * sqrt_info(0, 2);
    _res_D_y(1, 1) = _tmp221 * _tmp594 + _tmp222 * _tmp598 + _tmp224 * _tmp598 + _tmp227 * _tmp598 +
                     _tmp601 * sqrt_info(1, 2) + _tmp604 * sqrt_info(1, 1) -
                     _tmp606 * sqrt_info(1, 2) - _tmp607 * sqrt_info(1, 0) -
                     _tmp608 * sqrt_info(1, 1);
    _res_D_y(2, 1) = _tmp228 * _tmp594 + _tmp229 * _tmp598 + _tmp230 * _tmp598 - _tmp230 * _tmp605 -
                     _tmp312 * _tmp597 + _tmp499 * _tmp598 + _tmp601 * sqrt_info(2, 2) +
                     _tmp604 * sqrt_info(2, 1) - _tmp607 * sqrt_info(2, 0);
    _res_D_y(3, 1) = _tmp232 * _tmp594 + _tmp233 * _tmp598 - _tmp233 * _tmp605 + _tmp234 * _tmp598 -
                     _tmp234 * _tmp605 + _tmp235 * _tmp600 + _tmp236 * _tmp603 + _tmp314 * _tmp598 -
                     _tmp606 * sqrt_info(3, 2);
    _res_D_y(4, 1) = _tmp237 * _tmp594 + _tmp238 * _tmp598 - _tmp238 * _tmp605 + _tmp239 * _tmp598 -
                     _tmp239 * _tmp605 + _tmp240 * _tmp600 - _tmp241 * _tmp597 + _tmp315 * _tmp598 +
                     _tmp604 * sqrt_info(4, 1);
    _res_D_y(5, 1) = _tmp242 * _tmp594 - _tmp243 * _tmp605 + _tmp244 * _tmp597 + _tmp245 * _tmp598 -
                     _tmp246 * _tmp597 + _tmp316 * _tmp598 + _tmp601 * sqrt_info(5, 2) +
                     _tmp604 * sqrt_info(5, 1) - _tmp608 * sqrt_info(5, 1);
    _res_D_y(0, 2) = -_tmp117 * _tmp611 + _tmp117 * _tmp613 + _tmp164 * _tmp615 -
                     _tmp171 * _tmp611 + _tmp171 * _tmp613 + _tmp354 * _tmp614 -
                     _tmp616 * sqrt_info(0, 2) + _tmp617 * sqrt_info(0, 2) +
                     _tmp619 * sqrt_info(0, 2);
    _res_D_y(1, 2) = _tmp223 * _tmp612 + _tmp224 * _tmp613 + _tmp227 * _tmp613 -
                     _tmp616 * sqrt_info(1, 2) + _tmp619 * sqrt_info(1, 2) -
                     _tmp620 * sqrt_info(1, 0) - _tmp621 * sqrt_info(1, 1) +
                     _tmp622 * sqrt_info(1, 1) + _tmp623 * sqrt_info(1, 0);
    _res_D_y(2, 2) = _tmp229 * _tmp613 + _tmp230 * _tmp613 - _tmp312 * _tmp612 +
                     _tmp617 * sqrt_info(2, 2) + _tmp619 * sqrt_info(2, 2) -
                     _tmp620 * sqrt_info(2, 0) - _tmp621 * sqrt_info(2, 1) +
                     _tmp622 * sqrt_info(2, 1) + _tmp623 * sqrt_info(2, 0);
    _res_D_y(3, 2) = _tmp232 * _tmp615 + _tmp233 * _tmp613 + _tmp234 * _tmp613 + _tmp235 * _tmp618 +
                     _tmp236 * _tmp614 - _tmp313 * _tmp612 + _tmp617 * sqrt_info(3, 2) -
                     _tmp620 * sqrt_info(3, 0) - _tmp621 * sqrt_info(3, 1);
    _res_D_y(4, 2) = _tmp237 * _tmp615 - _tmp238 * _tmp611 + _tmp238 * _tmp613 + _tmp239 * _tmp613 +
                     _tmp240 * _tmp618 - _tmp241 * _tmp612 + _tmp371 * _tmp614 +
                     _tmp617 * sqrt_info(4, 2) - _tmp621 * sqrt_info(4, 1);
    _res_D_y(5, 2) = _tmp242 * _tmp615 - _tmp243 * _tmp611 + _tmp244 * _tmp612 + _tmp245 * _tmp613 -
                     _tmp246 * _tmp612 + _tmp617 * sqrt_info(5, 2) + _tmp619 * sqrt_info(5, 2) -
                     _tmp621 * sqrt_info(5, 1) + _tmp622 * sqrt_info(5, 1);
    _res_D_y(0, 3) =
        _tmp104 * sqrt_info(0, 3) + _tmp114 * sqrt_info(0, 4) + _tmp66 * sqrt_info(0, 5);
    _res_D_y(1, 3) =
        _tmp104 * sqrt_info(1, 3) + _tmp114 * sqrt_info(1, 4) + _tmp66 * sqrt_info(1, 5);
    _res_D_y(2, 3) =
        _tmp104 * sqrt_info(2, 3) + _tmp114 * sqrt_info(2, 4) + _tmp66 * sqrt_info(2, 5);
    _res_D_y(3, 3) =
        _tmp104 * sqrt_info(3, 3) + _tmp114 * sqrt_info(3, 4) + _tmp66 * sqrt_info(3, 5);
    _res_D_y(4, 3) =
        _tmp104 * sqrt_info(4, 3) + _tmp114 * sqrt_info(4, 4) + _tmp66 * sqrt_info(4, 5);
    _res_D_y(5, 3) =
        _tmp104 * sqrt_info(5, 3) + _tmp114 * sqrt_info(5, 4) + _tmp66 * sqrt_info(5, 5);
    _res_D_y(0, 4) =
        _tmp109 * sqrt_info(0, 3) + _tmp111 * sqrt_info(0, 4) + _tmp71 * sqrt_info(0, 5);
    _res_D_y(1, 4) =
        _tmp109 * sqrt_info(1, 3) + _tmp111 * sqrt_info(1, 4) + _tmp71 * sqrt_info(1, 5);
    _res_D_y(2, 4) =
        _tmp109 * sqrt_info(2, 3) + _tmp111 * sqrt_info(2, 4) + _tmp71 * sqrt_info(2, 5);
    _res_D_y(3, 4) =
        _tmp109 * sqrt_info(3, 3) + _tmp111 * sqrt_info(3, 4) + _tmp71 * sqrt_info(3, 5);
    _res_D_y(4, 4) =
        _tmp109 * sqrt_info(4, 3) + _tmp111 * sqrt_info(4, 4) + _tmp71 * sqrt_info(4, 5);
    _res_D_y(5, 4) =
        _tmp109 * sqrt_info(5, 3) + _tmp111 * sqrt_info(5, 4) + _tmp71 * sqrt_info(5, 5);
    _res_D_y(0, 5) =
        _tmp106 * sqrt_info(0, 3) + _tmp112 * sqrt_info(0, 4) + _tmp61 * sqrt_info(0, 5);
    _res_D_y(1, 5) =
        _tmp106 * sqrt_info(1, 3) + _tmp112 * sqrt_info(1, 4) + _tmp61 * sqrt_info(1, 5);
    _res_D_y(2, 5) =
        _tmp106 * sqrt_info(2, 3) + _tmp112 * sqrt_info(2, 4) + _tmp61 * sqrt_info(2, 5);
    _res_D_y(3, 5) =
        _tmp106 * sqrt_info(3, 3) + _tmp112 * sqrt_info(3, 4) + _tmp61 * sqrt_info(3, 5);
    _res_D_y(4, 5) =
        _tmp106 * sqrt_info(4, 3) + _tmp112 * sqrt_info(4, 4) + _tmp61 * sqrt_info(4, 5);
    _res_D_y(5, 5) =
        _tmp106 * sqrt_info(5, 3) + _tmp112 * sqrt_info(5, 4) + _tmp61 * sqrt_info(5, 5);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
