// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_relative_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_a: Pose3
 *     a_T_b: Pose3
 *     y: Pose3
 *     y_T_b: Pose3
 *     sqrt_info: Matrix66
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Pose3SensorRelativeBetweenFactor(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_a, const sym::Pose3<Scalar>& a_T_b,
    const sym::Pose3<Scalar>& y, const sym::Pose3<Scalar>& y_T_b,
    const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon) {
  // Total ops: 351

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _a_T_b = a_T_b.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (69)
  const Scalar _tmp0 = 2 * _y[1];
  const Scalar _tmp1 = _tmp0 * _y[3];
  const Scalar _tmp2 = 2 * _y[2];
  const Scalar _tmp3 = _tmp2 * _y[0];
  const Scalar _tmp4 = _tmp0 * _y[2];
  const Scalar _tmp5 = 2 * _y[0] * _y[3];
  const Scalar _tmp6 = -2 * std::pow(_y[1], Scalar(2));
  const Scalar _tmp7 = -2 * std::pow(_y[0], Scalar(2));
  const Scalar _tmp8 = _y[6] + _y_T_b[4] * (-_tmp1 + _tmp3) + _y_T_b[5] * (_tmp4 + _tmp5) +
                       _y_T_b[6] * (_tmp6 + _tmp7 + 1);
  const Scalar _tmp9 =
      -_x[0] * _x_T_a[2] + _x[1] * _x_T_a[3] + _x[2] * _x_T_a[0] + _x[3] * _x_T_a[1];
  const Scalar _tmp10 =
      _x[0] * _x_T_a[1] - _x[1] * _x_T_a[0] + _x[2] * _x_T_a[3] + _x[3] * _x_T_a[2];
  const Scalar _tmp11 = 2 * _tmp10;
  const Scalar _tmp12 = _tmp11 * _tmp9;
  const Scalar _tmp13 =
      _x[0] * _x_T_a[3] + _x[1] * _x_T_a[2] - _x[2] * _x_T_a[1] + _x[3] * _x_T_a[0];
  const Scalar _tmp14 =
      -_x[0] * _x_T_a[0] - _x[1] * _x_T_a[1] - _x[2] * _x_T_a[2] + _x[3] * _x_T_a[3];
  const Scalar _tmp15 = 2 * _tmp14;
  const Scalar _tmp16 = _tmp13 * _tmp15;
  const Scalar _tmp17 = _tmp12 + _tmp16;
  const Scalar _tmp18 = 1 - 2 * std::pow(_y[2], Scalar(2));
  const Scalar _tmp19 = _tmp2 * _y[3];
  const Scalar _tmp20 = _tmp0 * _y[0];
  const Scalar _tmp21 = _y[4] + _y_T_b[4] * (_tmp18 + _tmp6) + _y_T_b[5] * (-_tmp19 + _tmp20) +
                        _y_T_b[6] * (_tmp1 + _tmp3);
  const Scalar _tmp22 = 2 * _tmp13 * _tmp9;
  const Scalar _tmp23 = _tmp10 * _tmp15;
  const Scalar _tmp24 = _tmp22 - _tmp23;
  const Scalar _tmp25 = -2 * std::pow(_tmp13, Scalar(2));
  const Scalar _tmp26 = 1 - 2 * std::pow(_tmp10, Scalar(2));
  const Scalar _tmp27 = _tmp25 + _tmp26;
  const Scalar _tmp28 = _y[5] + _y_T_b[4] * (_tmp19 + _tmp20) + _y_T_b[5] * (_tmp18 + _tmp7) +
                        _y_T_b[6] * (_tmp4 - _tmp5);
  const Scalar _tmp29 = 2 * _x[1];
  const Scalar _tmp30 = _tmp29 * _x[0];
  const Scalar _tmp31 = 2 * _x[2];
  const Scalar _tmp32 = _tmp31 * _x[3];
  const Scalar _tmp33 = 2 * _x[0] * _x[3];
  const Scalar _tmp34 = _tmp29 * _x[2];
  const Scalar _tmp35 = -2 * std::pow(_x[2], Scalar(2));
  const Scalar _tmp36 = 1 - 2 * std::pow(_x[0], Scalar(2));
  const Scalar _tmp37 = _x[5] + _x_T_a[4] * (_tmp30 + _tmp32) + _x_T_a[5] * (_tmp35 + _tmp36) +
                        _x_T_a[6] * (-_tmp33 + _tmp34);
  const Scalar _tmp38 = _tmp31 * _x[0];
  const Scalar _tmp39 = _tmp29 * _x[3];
  const Scalar _tmp40 = -2 * std::pow(_x[1], Scalar(2));
  const Scalar _tmp41 = _x[6] + _x_T_a[4] * (_tmp38 - _tmp39) + _x_T_a[5] * (_tmp33 + _tmp34) +
                        _x_T_a[6] * (_tmp36 + _tmp40);
  const Scalar _tmp42 = _x[4] + _x_T_a[4] * (_tmp35 + _tmp40 + 1) + _x_T_a[5] * (_tmp30 - _tmp32) +
                        _x_T_a[6] * (_tmp38 + _tmp39);
  const Scalar _tmp43 = -_a_T_b[5] - _tmp17 * _tmp41 + _tmp17 * _tmp8 + _tmp21 * _tmp24 -
                        _tmp24 * _tmp42 + _tmp27 * _tmp28 - _tmp27 * _tmp37;
  const Scalar _tmp44 =
      -_y[0] * _y_T_b[2] + _y[1] * _y_T_b[3] + _y[2] * _y_T_b[0] + _y[3] * _y_T_b[1];
  const Scalar _tmp45 =
      _y[0] * _y_T_b[3] + _y[1] * _y_T_b[2] - _y[2] * _y_T_b[1] + _y[3] * _y_T_b[0];
  const Scalar _tmp46 =
      _y[0] * _y_T_b[1] - _y[1] * _y_T_b[0] + _y[2] * _y_T_b[3] + _y[3] * _y_T_b[2];
  const Scalar _tmp47 =
      -_y[0] * _y_T_b[0] - _y[1] * _y_T_b[1] - _y[2] * _y_T_b[2] + _y[3] * _y_T_b[3];
  const Scalar _tmp48 = -_tmp10 * _tmp47 - _tmp13 * _tmp44 + _tmp14 * _tmp46 + _tmp45 * _tmp9;
  const Scalar _tmp49 = _tmp10 * _tmp46 + _tmp13 * _tmp45 + _tmp14 * _tmp47 + _tmp44 * _tmp9;
  const Scalar _tmp50 = _tmp10 * _tmp44 - _tmp13 * _tmp47 + _tmp14 * _tmp45 - _tmp46 * _tmp9;
  const Scalar _tmp51 = -_tmp10 * _tmp45 + _tmp13 * _tmp46 + _tmp14 * _tmp44 - _tmp47 * _tmp9;
  const Scalar _tmp52 =
      _a_T_b[0] * _tmp50 + _a_T_b[1] * _tmp51 + _a_T_b[2] * _tmp48 + _a_T_b[3] * _tmp49;
  const Scalar _tmp53 = std::min<Scalar>(std::fabs(_tmp52), 1 - epsilon);
  const Scalar _tmp54 = 2 * (2 * std::min<Scalar>(0, (((_tmp52) > 0) - ((_tmp52) < 0))) + 1) *
                        std::acos(_tmp53) / std::sqrt(Scalar(1 - std::pow(_tmp53, Scalar(2))));
  const Scalar _tmp55 =
      _tmp54 * (_a_T_b[0] * _tmp48 - _a_T_b[1] * _tmp49 - _a_T_b[2] * _tmp50 + _a_T_b[3] * _tmp51);
  const Scalar _tmp56 =
      _tmp54 * (-_a_T_b[0] * _tmp49 - _a_T_b[1] * _tmp48 + _a_T_b[2] * _tmp51 + _a_T_b[3] * _tmp50);
  const Scalar _tmp57 = -2 * std::pow(_tmp9, Scalar(2));
  const Scalar _tmp58 = _tmp25 + _tmp57 + 1;
  const Scalar _tmp59 = _tmp11 * _tmp13;
  const Scalar _tmp60 = _tmp15 * _tmp9;
  const Scalar _tmp61 = _tmp59 + _tmp60;
  const Scalar _tmp62 = _tmp12 - _tmp16;
  const Scalar _tmp63 = -_a_T_b[6] + _tmp21 * _tmp61 + _tmp28 * _tmp62 - _tmp37 * _tmp62 -
                        _tmp41 * _tmp58 - _tmp42 * _tmp61 + _tmp58 * _tmp8;
  const Scalar _tmp64 = _tmp59 - _tmp60;
  const Scalar _tmp65 = _tmp26 + _tmp57;
  const Scalar _tmp66 = _tmp22 + _tmp23;
  const Scalar _tmp67 = -_a_T_b[4] + _tmp21 * _tmp65 + _tmp28 * _tmp66 - _tmp37 * _tmp66 -
                        _tmp41 * _tmp64 - _tmp42 * _tmp65 + _tmp64 * _tmp8;
  const Scalar _tmp68 =
      _tmp54 * (-_a_T_b[0] * _tmp51 + _a_T_b[1] * _tmp50 - _a_T_b[2] * _tmp49 + _a_T_b[3] * _tmp48);

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp43 * sqrt_info(0, 4) + _tmp55 * sqrt_info(0, 1) + _tmp56 * sqrt_info(0, 0) +
               _tmp63 * sqrt_info(0, 5) + _tmp67 * sqrt_info(0, 3) + _tmp68 * sqrt_info(0, 2);
  _res(1, 0) = _tmp43 * sqrt_info(1, 4) + _tmp55 * sqrt_info(1, 1) + _tmp56 * sqrt_info(1, 0) +
               _tmp63 * sqrt_info(1, 5) + _tmp67 * sqrt_info(1, 3) + _tmp68 * sqrt_info(1, 2);
  _res(2, 0) = _tmp43 * sqrt_info(2, 4) + _tmp55 * sqrt_info(2, 1) + _tmp56 * sqrt_info(2, 0) +
               _tmp63 * sqrt_info(2, 5) + _tmp67 * sqrt_info(2, 3) + _tmp68 * sqrt_info(2, 2);
  _res(3, 0) = _tmp43 * sqrt_info(3, 4) + _tmp55 * sqrt_info(3, 1) + _tmp56 * sqrt_info(3, 0) +
               _tmp63 * sqrt_info(3, 5) + _tmp67 * sqrt_info(3, 3) + _tmp68 * sqrt_info(3, 2);
  _res(4, 0) = _tmp43 * sqrt_info(4, 4) + _tmp55 * sqrt_info(4, 1) + _tmp56 * sqrt_info(4, 0) +
               _tmp63 * sqrt_info(4, 5) + _tmp67 * sqrt_info(4, 3) + _tmp68 * sqrt_info(4, 2);
  _res(5, 0) = _tmp43 * sqrt_info(5, 4) + _tmp55 * sqrt_info(5, 1) + _tmp56 * sqrt_info(5, 0) +
               _tmp63 * sqrt_info(5, 5) + _tmp67 * sqrt_info(5, 3) + _tmp68 * sqrt_info(5, 2);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
