// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_s: Pose3
 *     s_T_y: Pose3
 *     y: Pose3
 *     sqrt_info: Matrix66
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Pose3SensorBetweenFactor(const sym::Pose3<Scalar>& x,
                                                     const sym::Pose3<Scalar>& x_T_s,
                                                     const sym::Pose3<Scalar>& s_T_y,
                                                     const sym::Pose3<Scalar>& y,
                                                     const Eigen::Matrix<Scalar, 6, 6>& sqrt_info,
                                                     const Scalar epsilon) {
  // Total ops: 277

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _s_T_y = s_T_y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();

  // Intermediate terms (51)
  const Scalar _tmp0 =
      _x[0] * _x_T_s[1] - _x[1] * _x_T_s[0] + _x[2] * _x_T_s[3] + _x[3] * _x_T_s[2];
  const Scalar _tmp1 =
      -_x[0] * _x_T_s[2] + _x[1] * _x_T_s[3] + _x[2] * _x_T_s[0] + _x[3] * _x_T_s[1];
  const Scalar _tmp2 =
      _x[0] * _x_T_s[3] + _x[1] * _x_T_s[2] - _x[2] * _x_T_s[1] + _x[3] * _x_T_s[0];
  const Scalar _tmp3 =
      -_x[0] * _x_T_s[0] - _x[1] * _x_T_s[1] - _x[2] * _x_T_s[2] + _x[3] * _x_T_s[3];
  const Scalar _tmp4 = _tmp0 * _y[2] + _tmp1 * _y[1] + _tmp2 * _y[0] + _tmp3 * _y[3];
  const Scalar _tmp5 = -_tmp0 * _y[0] - _tmp1 * _y[3] + _tmp2 * _y[2] + _tmp3 * _y[1];
  const Scalar _tmp6 = _tmp0 * _y[1] - _tmp1 * _y[2] - _tmp2 * _y[3] + _tmp3 * _y[0];
  const Scalar _tmp7 = -_tmp0 * _y[3] + _tmp1 * _y[0] - _tmp2 * _y[1] + _tmp3 * _y[2];
  const Scalar _tmp8 =
      _s_T_y[0] * _tmp6 + _s_T_y[1] * _tmp5 + _s_T_y[2] * _tmp7 + _s_T_y[3] * _tmp4;
  const Scalar _tmp9 = std::min<Scalar>(std::fabs(_tmp8), 1 - epsilon);
  const Scalar _tmp10 = 2 * (2 * std::min<Scalar>(0, (((_tmp8) > 0) - ((_tmp8) < 0))) + 1) *
                        std::acos(_tmp9) / std::sqrt(Scalar(1 - std::pow(_tmp9, Scalar(2))));
  const Scalar _tmp11 =
      _tmp10 * (-_s_T_y[0] * _tmp4 - _s_T_y[1] * _tmp7 + _s_T_y[2] * _tmp5 + _s_T_y[3] * _tmp6);
  const Scalar _tmp12 =
      _tmp10 * (-_s_T_y[0] * _tmp5 + _s_T_y[1] * _tmp6 - _s_T_y[2] * _tmp4 + _s_T_y[3] * _tmp7);
  const Scalar _tmp13 = -2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp14 = 1 - 2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp15 = _tmp13 + _tmp14;
  const Scalar _tmp16 = 2 * _tmp2;
  const Scalar _tmp17 = _tmp0 * _tmp16;
  const Scalar _tmp18 = 2 * _tmp3;
  const Scalar _tmp19 = _tmp1 * _tmp18;
  const Scalar _tmp20 = _tmp17 + _tmp19;
  const Scalar _tmp21 = 2 * _tmp0 * _tmp1;
  const Scalar _tmp22 = _tmp18 * _tmp2;
  const Scalar _tmp23 = _tmp21 - _tmp22;
  const Scalar _tmp24 = 2 * _x[0];
  const Scalar _tmp25 = _tmp24 * _x[1];
  const Scalar _tmp26 = 2 * _x[2];
  const Scalar _tmp27 = _tmp26 * _x[3];
  const Scalar _tmp28 = _tmp26 * _x[0];
  const Scalar _tmp29 = 2 * _x[1] * _x[3];
  const Scalar _tmp30 = -2 * std::pow(_x[1], Scalar(2));
  const Scalar _tmp31 = -2 * std::pow(_x[2], Scalar(2));
  const Scalar _tmp32 = _x[4] + _x_T_s[4] * (_tmp30 + _tmp31 + 1) + _x_T_s[5] * (_tmp25 - _tmp27) +
                        _x_T_s[6] * (_tmp28 + _tmp29);
  const Scalar _tmp33 = _tmp24 * _x[3];
  const Scalar _tmp34 = _tmp26 * _x[1];
  const Scalar _tmp35 = 1 - 2 * std::pow(_x[0], Scalar(2));
  const Scalar _tmp36 = _x[5] + _x_T_s[4] * (_tmp25 + _tmp27) + _x_T_s[5] * (_tmp31 + _tmp35) +
                        _x_T_s[6] * (-_tmp33 + _tmp34);
  const Scalar _tmp37 = _x[6] + _x_T_s[4] * (_tmp28 - _tmp29) + _x_T_s[5] * (_tmp33 + _tmp34) +
                        _x_T_s[6] * (_tmp30 + _tmp35);
  const Scalar _tmp38 = -_s_T_y[6] - _tmp15 * _tmp37 + _tmp15 * _y[6] - _tmp20 * _tmp32 +
                        _tmp20 * _y[4] - _tmp23 * _tmp36 + _tmp23 * _y[5];
  const Scalar _tmp39 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp40 = _tmp14 + _tmp39;
  const Scalar _tmp41 = _tmp17 - _tmp19;
  const Scalar _tmp42 = _tmp1 * _tmp16;
  const Scalar _tmp43 = _tmp0 * _tmp18;
  const Scalar _tmp44 = _tmp42 + _tmp43;
  const Scalar _tmp45 = -_s_T_y[4] - _tmp32 * _tmp40 - _tmp36 * _tmp44 - _tmp37 * _tmp41 +
                        _tmp40 * _y[4] + _tmp41 * _y[6] + _tmp44 * _y[5];
  const Scalar _tmp46 = _tmp13 + _tmp39 + 1;
  const Scalar _tmp47 = _tmp21 + _tmp22;
  const Scalar _tmp48 = _tmp42 - _tmp43;
  const Scalar _tmp49 = -_s_T_y[5] - _tmp32 * _tmp48 - _tmp36 * _tmp46 - _tmp37 * _tmp47 +
                        _tmp46 * _y[5] + _tmp47 * _y[6] + _tmp48 * _y[4];
  const Scalar _tmp50 =
      _tmp10 * (_s_T_y[0] * _tmp7 - _s_T_y[1] * _tmp4 - _s_T_y[2] * _tmp6 + _s_T_y[3] * _tmp5);

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp11 * sqrt_info(0, 0) + _tmp12 * sqrt_info(0, 2) + _tmp38 * sqrt_info(0, 5) +
               _tmp45 * sqrt_info(0, 3) + _tmp49 * sqrt_info(0, 4) + _tmp50 * sqrt_info(0, 1);
  _res(1, 0) = _tmp11 * sqrt_info(1, 0) + _tmp12 * sqrt_info(1, 2) + _tmp38 * sqrt_info(1, 5) +
               _tmp45 * sqrt_info(1, 3) + _tmp49 * sqrt_info(1, 4) + _tmp50 * sqrt_info(1, 1);
  _res(2, 0) = _tmp11 * sqrt_info(2, 0) + _tmp12 * sqrt_info(2, 2) + _tmp38 * sqrt_info(2, 5) +
               _tmp45 * sqrt_info(2, 3) + _tmp49 * sqrt_info(2, 4) + _tmp50 * sqrt_info(2, 1);
  _res(3, 0) = _tmp11 * sqrt_info(3, 0) + _tmp12 * sqrt_info(3, 2) + _tmp38 * sqrt_info(3, 5) +
               _tmp45 * sqrt_info(3, 3) + _tmp49 * sqrt_info(3, 4) + _tmp50 * sqrt_info(3, 1);
  _res(4, 0) = _tmp11 * sqrt_info(4, 0) + _tmp12 * sqrt_info(4, 2) + _tmp38 * sqrt_info(4, 5) +
               _tmp45 * sqrt_info(4, 3) + _tmp49 * sqrt_info(4, 4) + _tmp50 * sqrt_info(4, 1);
  _res(5, 0) = _tmp11 * sqrt_info(5, 0) + _tmp12 * sqrt_info(5, 2) + _tmp38 * sqrt_info(5, 5) +
               _tmp45 * sqrt_info(5, 3) + _tmp49 * sqrt_info(5, 4) + _tmp50 * sqrt_info(5, 1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
