// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose2_velocity_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix32
 *     x0: Pose2
 *     x1: Pose2
 *     x2: Pose2
 *     x3: Pose2
 *     velocity: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x0: (3x3) jacobian of res (3) wrt arg x0 (3)
 *     res_D_x1: (3x3) jacobian of res (3) wrt arg x1 (3)
 *     res_D_x2: (3x3) jacobian of res (3) wrt arg x2 (3)
 *     res_D_x3: (3x3) jacobian of res (3) wrt arg x3 (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Pose2VelocityLocalFactorWithJacobians2345(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 2>& lambdas, const sym::Pose2<Scalar>& x0,
    const sym::Pose2<Scalar>& x1, const sym::Pose2<Scalar>& x2, const sym::Pose2<Scalar>& x3,
    const Eigen::Matrix<Scalar, 3, 1>& velocity, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
    const Scalar epsilon, Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr) {
  // Total ops: 448

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();

  // Intermediate terms (146)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = _x2[1] * _x3[0];
  const Scalar _tmp2 = _x2[0] * _x3[1];
  const Scalar _tmp3 = -_tmp1 + _tmp2;
  const Scalar _tmp4 = _x2[0] * _x3[0];
  const Scalar _tmp5 = _x2[1] * _x3[1];
  const Scalar _tmp6 = _tmp4 + _tmp5;
  const Scalar _tmp7 = _tmp6 + epsilon * ((((_tmp6) > 0) - ((_tmp6) < 0)) + Scalar(0.5));
  const Scalar _tmp8 = std::atan2(_tmp3, _tmp7);
  const Scalar _tmp9 = _x1[0] * _x2[1];
  const Scalar _tmp10 = _x1[1] * _x2[0];
  const Scalar _tmp11 = -_tmp10 + _tmp9;
  const Scalar _tmp12 = _x1[0] * _x2[0];
  const Scalar _tmp13 = _x1[1] * _x2[1];
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = _tmp14 + epsilon * ((((_tmp14) > 0) - ((_tmp14) < 0)) + Scalar(0.5));
  const Scalar _tmp16 = std::atan2(_tmp11, _tmp15);
  const Scalar _tmp17 = _x0[1] * _x1[0];
  const Scalar _tmp18 = _x0[0] * _x1[1];
  const Scalar _tmp19 = -_tmp17 + _tmp18;
  const Scalar _tmp20 = _x0[1] * _x1[1];
  const Scalar _tmp21 = _x0[0] * _x1[0];
  const Scalar _tmp22 = _tmp20 + _tmp21;
  const Scalar _tmp23 = _tmp22 + epsilon * ((((_tmp22) > 0) - ((_tmp22) < 0)) + Scalar(0.5));
  const Scalar _tmp24 = std::atan2(_tmp19, _tmp23);
  const Scalar _tmp25 =
      _tmp0 * (_tmp16 * lambdas(1, 1) + _tmp24 * lambdas(0, 1) + _tmp8 * lambdas(2, 1)) -
      velocity(0, 0);
  const Scalar _tmp26 = _tmp24 * lambdas(0, 0);
  const Scalar _tmp27 = std::cos(_tmp26);
  const Scalar _tmp28 = _tmp27 * _x0[0];
  const Scalar _tmp29 = std::sin(_tmp26);
  const Scalar _tmp30 = _tmp29 * _x0[1];
  const Scalar _tmp31 = _tmp28 - _tmp30;
  const Scalar _tmp32 = _tmp16 * lambdas(1, 0);
  const Scalar _tmp33 = std::sin(_tmp32);
  const Scalar _tmp34 = _tmp31 * _tmp33;
  const Scalar _tmp35 = _tmp29 * _x0[0];
  const Scalar _tmp36 = _tmp27 * _x0[1];
  const Scalar _tmp37 = _tmp35 + _tmp36;
  const Scalar _tmp38 = std::cos(_tmp32);
  const Scalar _tmp39 = _tmp37 * _tmp38;
  const Scalar _tmp40 = _tmp34 + _tmp39;
  const Scalar _tmp41 = _tmp8 * lambdas(2, 0);
  const Scalar _tmp42 = std::cos(_tmp41);
  const Scalar _tmp43 = _tmp40 * _tmp42;
  const Scalar _tmp44 = _tmp31 * _tmp38;
  const Scalar _tmp45 = _tmp33 * _tmp37;
  const Scalar _tmp46 = _tmp44 - _tmp45;
  const Scalar _tmp47 = std::sin(_tmp41);
  const Scalar _tmp48 = _tmp46 * _tmp47;
  const Scalar _tmp49 = _tmp43 + _tmp48;
  const Scalar _tmp50 = lambdas(0, 1) * (-_x0[2] + _x1[2]) + lambdas(1, 1) * (-_x1[2] + _x2[2]) +
                        lambdas(2, 1) * (-_x2[2] + _x3[2]);
  const Scalar _tmp51 = _tmp40 * _tmp47;
  const Scalar _tmp52 = _tmp42 * _tmp46;
  const Scalar _tmp53 = -_tmp51 + _tmp52;
  const Scalar _tmp54 = lambdas(0, 1) * (-_x0[3] + _x1[3]) + lambdas(1, 1) * (-_x1[3] + _x2[3]) +
                        lambdas(2, 1) * (-_x2[3] + _x3[3]);
  const Scalar _tmp55 = _tmp0 * (-_tmp49 * _tmp50 + _tmp53 * _tmp54) - velocity(2, 0);
  const Scalar _tmp56 = _tmp0 * (_tmp49 * _tmp54 + _tmp50 * _tmp53) - velocity(1, 0);
  const Scalar _tmp57 = std::pow(_tmp19, Scalar(2));
  const Scalar _tmp58 = std::pow(_tmp23, Scalar(2));
  const Scalar _tmp59 = Scalar(1.0) / (_tmp58);
  const Scalar _tmp60 = Scalar(1.0) / (_tmp23);
  const Scalar _tmp61 = _tmp58 / (_tmp57 + _tmp58);
  const Scalar _tmp62 = _tmp61 * (-_tmp57 * _tmp59 + _tmp60 * (-_tmp20 - _tmp21));
  const Scalar _tmp63 = _tmp62 * lambdas(0, 0);
  const Scalar _tmp64 = _tmp35 * lambdas(0, 0);
  const Scalar _tmp65 = -_tmp35 - _tmp36 * _tmp63 - _tmp36 - _tmp62 * _tmp64;
  const Scalar _tmp66 = _tmp28 * _tmp63 - _tmp30 * _tmp63 + _tmp31;
  const Scalar _tmp67 = -_tmp33 * _tmp66 + _tmp38 * _tmp65;
  const Scalar _tmp68 = _tmp33 * _tmp65 + _tmp38 * _tmp66;
  const Scalar _tmp69 = _tmp42 * _tmp68 + _tmp47 * _tmp67;
  const Scalar _tmp70 = _tmp42 * _tmp67 - _tmp47 * _tmp68;
  const Scalar _tmp71 = _tmp50 * _tmp70 + _tmp54 * _tmp69;
  const Scalar _tmp72 = _tmp0 * sqrt_info(0, 1);
  const Scalar _tmp73 = -_tmp50 * _tmp69 + _tmp54 * _tmp70;
  const Scalar _tmp74 = _tmp0 * sqrt_info(0, 2);
  const Scalar _tmp75 = _tmp62 * lambdas(0, 1);
  const Scalar _tmp76 = _tmp0 * _tmp75;
  const Scalar _tmp77 = _tmp0 * _tmp71;
  const Scalar _tmp78 = _tmp0 * sqrt_info(1, 2);
  const Scalar _tmp79 = _tmp0 * sqrt_info(2, 2);
  const Scalar _tmp80 = _tmp0 * sqrt_info(2, 0);
  const Scalar _tmp81 = _tmp49 * lambdas(0, 1);
  const Scalar _tmp82 = _tmp53 * lambdas(0, 1);
  const Scalar _tmp83 = _tmp78 * lambdas(0, 1);
  const Scalar _tmp84 = _tmp0 * sqrt_info(1, 1);
  const Scalar _tmp85 = _tmp0 * sqrt_info(2, 1);
  const Scalar _tmp86 = std::pow(_tmp11, Scalar(2));
  const Scalar _tmp87 = std::pow(_tmp15, Scalar(2));
  const Scalar _tmp88 = Scalar(1.0) / (_tmp87);
  const Scalar _tmp89 = Scalar(1.0) / (_tmp15);
  const Scalar _tmp90 = -_tmp86 * _tmp88 + _tmp89 * (-_tmp12 - _tmp13);
  const Scalar _tmp91 = _tmp87 / (_tmp86 + _tmp87);
  const Scalar _tmp92 = _tmp91 * lambdas(1, 0);
  const Scalar _tmp93 = _tmp90 * _tmp92;
  const Scalar _tmp94 = _tmp61 * (-_tmp19 * _tmp59 * (_tmp17 - _tmp18) + _tmp22 * _tmp60);
  const Scalar _tmp95 = _tmp94 * lambdas(0, 0);
  const Scalar _tmp96 = _tmp28 * _tmp95 - _tmp30 * _tmp95;
  const Scalar _tmp97 = -_tmp36 * _tmp95 - _tmp64 * _tmp94;
  const Scalar _tmp98 = _tmp33 * _tmp97 + _tmp38 * _tmp96 + _tmp44 * _tmp93 - _tmp45 * _tmp93;
  const Scalar _tmp99 = -_tmp33 * _tmp96 - _tmp34 * _tmp93 + _tmp38 * _tmp97 - _tmp39 * _tmp93;
  const Scalar _tmp100 = _tmp42 * _tmp98 + _tmp47 * _tmp99;
  const Scalar _tmp101 = _tmp42 * _tmp99 - _tmp47 * _tmp98;
  const Scalar _tmp102 = -_tmp100 * _tmp50 + _tmp101 * _tmp54;
  const Scalar _tmp103 = _tmp100 * _tmp54 + _tmp101 * _tmp50;
  const Scalar _tmp104 = _tmp91 * lambdas(1, 1);
  const Scalar _tmp105 = _tmp0 * (_tmp104 * _tmp90 + _tmp94 * lambdas(0, 1));
  const Scalar _tmp106 = _tmp0 * _tmp103;
  const Scalar _tmp107 = lambdas(0, 1) - lambdas(1, 1);
  const Scalar _tmp108 = _tmp107 * _tmp53;
  const Scalar _tmp109 = _tmp107 * _tmp49;
  const Scalar _tmp110 = _tmp0 * _tmp107;
  const Scalar _tmp111 = _tmp110 * sqrt_info(1, 1);
  const Scalar _tmp112 = _tmp110 * sqrt_info(2, 1);
  const Scalar _tmp113 = -_tmp11 * _tmp88 * (_tmp10 - _tmp9) + _tmp14 * _tmp89;
  const Scalar _tmp114 = _tmp113 * _tmp92;
  const Scalar _tmp115 = _tmp114 * _tmp44 - _tmp114 * _tmp45;
  const Scalar _tmp116 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp117 = std::pow(_tmp7, Scalar(2));
  const Scalar _tmp118 = Scalar(1.0) / (_tmp117);
  const Scalar _tmp119 = Scalar(1.0) / (_tmp7);
  const Scalar _tmp120 = _tmp117 / (_tmp116 + _tmp117);
  const Scalar _tmp121 = _tmp120 * (-_tmp116 * _tmp118 + _tmp119 * (-_tmp4 - _tmp5));
  const Scalar _tmp122 = _tmp121 * lambdas(2, 0);
  const Scalar _tmp123 = -_tmp114 * _tmp34 - _tmp114 * _tmp39;
  const Scalar _tmp124 = _tmp48 * lambdas(2, 0);
  const Scalar _tmp125 =
      -_tmp115 * _tmp47 - _tmp121 * _tmp124 - _tmp122 * _tmp43 + _tmp123 * _tmp42;
  const Scalar _tmp126 = _tmp51 * lambdas(2, 0);
  const Scalar _tmp127 = _tmp115 * _tmp42 - _tmp121 * _tmp126 + _tmp122 * _tmp52 + _tmp123 * _tmp47;
  const Scalar _tmp128 = _tmp125 * _tmp54 - _tmp127 * _tmp50;
  const Scalar _tmp129 = _tmp0 * (_tmp104 * _tmp113 + _tmp121 * lambdas(2, 1));
  const Scalar _tmp130 = _tmp0 * (_tmp125 * _tmp50 + _tmp127 * _tmp54);
  const Scalar _tmp131 = lambdas(1, 1) - lambdas(2, 1);
  const Scalar _tmp132 = _tmp131 * _tmp49;
  const Scalar _tmp133 = _tmp131 * _tmp53;
  const Scalar _tmp134 = _tmp0 * _tmp133;
  const Scalar _tmp135 = _tmp0 * _tmp132;
  const Scalar _tmp136 = _tmp120 * (-_tmp118 * _tmp3 * (_tmp1 - _tmp2) + _tmp119 * _tmp6);
  const Scalar _tmp137 = _tmp136 * lambdas(2, 1);
  const Scalar _tmp138 = _tmp0 * _tmp137;
  const Scalar _tmp139 = _tmp136 * lambdas(2, 0);
  const Scalar _tmp140 = -_tmp126 * _tmp136 + _tmp139 * _tmp52;
  const Scalar _tmp141 = -_tmp124 * _tmp136 - _tmp139 * _tmp43;
  const Scalar _tmp142 = _tmp0 * (_tmp140 * _tmp54 + _tmp141 * _tmp50);
  const Scalar _tmp143 = _tmp0 * (-_tmp140 * _tmp50 + _tmp141 * _tmp54);
  const Scalar _tmp144 = _tmp49 * lambdas(2, 1);
  const Scalar _tmp145 = _tmp53 * lambdas(2, 1);

  // Output terms (5)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp25 * sqrt_info(0, 0) + _tmp55 * sqrt_info(0, 2) + _tmp56 * sqrt_info(0, 1);
  _res(1, 0) = _tmp25 * sqrt_info(1, 0) + _tmp55 * sqrt_info(1, 2) + _tmp56 * sqrt_info(1, 1);
  _res(2, 0) = _tmp25 * sqrt_info(2, 0) + _tmp55 * sqrt_info(2, 2) + _tmp56 * sqrt_info(2, 1);

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = _tmp71 * _tmp72 + _tmp73 * _tmp74 + _tmp76 * sqrt_info(0, 0);
    _res_D_x0(1, 0) = _tmp73 * _tmp78 + _tmp76 * sqrt_info(1, 0) + _tmp77 * sqrt_info(1, 1);
    _res_D_x0(2, 0) = _tmp73 * _tmp79 + _tmp75 * _tmp80 + _tmp77 * sqrt_info(2, 1);
    _res_D_x0(0, 1) = -_tmp72 * _tmp82 + _tmp74 * _tmp81;
    _res_D_x0(1, 1) = _tmp49 * _tmp83 - _tmp82 * _tmp84;
    _res_D_x0(2, 1) = _tmp79 * _tmp81 - _tmp82 * _tmp85;
    _res_D_x0(0, 2) = -_tmp72 * _tmp81 - _tmp74 * _tmp82;
    _res_D_x0(1, 2) = -_tmp53 * _tmp83 - _tmp81 * _tmp84;
    _res_D_x0(2, 2) = -_tmp79 * _tmp82 - _tmp81 * _tmp85;
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = _tmp102 * _tmp74 + _tmp103 * _tmp72 + _tmp105 * sqrt_info(0, 0);
    _res_D_x1(1, 0) = _tmp102 * _tmp78 + _tmp105 * sqrt_info(1, 0) + _tmp106 * sqrt_info(1, 1);
    _res_D_x1(2, 0) = _tmp102 * _tmp79 + _tmp105 * sqrt_info(2, 0) + _tmp106 * sqrt_info(2, 1);
    _res_D_x1(0, 1) = _tmp108 * _tmp72 - _tmp109 * _tmp74;
    _res_D_x1(1, 1) = -_tmp109 * _tmp78 + _tmp111 * _tmp53;
    _res_D_x1(2, 1) = -_tmp109 * _tmp79 + _tmp112 * _tmp53;
    _res_D_x1(0, 2) = _tmp108 * _tmp74 + _tmp109 * _tmp72;
    _res_D_x1(1, 2) = _tmp108 * _tmp78 + _tmp111 * _tmp49;
    _res_D_x1(2, 2) = _tmp108 * _tmp79 + _tmp112 * _tmp49;
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = _tmp128 * _tmp74 + _tmp129 * sqrt_info(0, 0) + _tmp130 * sqrt_info(0, 1);
    _res_D_x2(1, 0) = _tmp128 * _tmp78 + _tmp129 * sqrt_info(1, 0) + _tmp130 * sqrt_info(1, 1);
    _res_D_x2(2, 0) = _tmp128 * _tmp79 + _tmp129 * sqrt_info(2, 0) + _tmp130 * sqrt_info(2, 1);
    _res_D_x2(0, 1) = -_tmp132 * _tmp74 + _tmp133 * _tmp72;
    _res_D_x2(1, 1) = -_tmp132 * _tmp78 + _tmp134 * sqrt_info(1, 1);
    _res_D_x2(2, 1) = -_tmp132 * _tmp79 + _tmp134 * sqrt_info(2, 1);
    _res_D_x2(0, 2) = _tmp132 * _tmp72 + _tmp133 * _tmp74;
    _res_D_x2(1, 2) = _tmp133 * _tmp78 + _tmp135 * sqrt_info(1, 1);
    _res_D_x2(2, 2) = _tmp133 * _tmp79 + _tmp135 * sqrt_info(2, 1);
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) =
        _tmp138 * sqrt_info(0, 0) + _tmp142 * sqrt_info(0, 1) + _tmp143 * sqrt_info(0, 2);
    _res_D_x3(1, 0) =
        _tmp138 * sqrt_info(1, 0) + _tmp142 * sqrt_info(1, 1) + _tmp143 * sqrt_info(1, 2);
    _res_D_x3(2, 0) = _tmp137 * _tmp80 + _tmp142 * sqrt_info(2, 1) + _tmp143 * sqrt_info(2, 2);
    _res_D_x3(0, 1) = -_tmp144 * _tmp74 + _tmp145 * _tmp72;
    _res_D_x3(1, 1) = -_tmp144 * _tmp78 + _tmp145 * _tmp84;
    _res_D_x3(2, 1) = -_tmp144 * _tmp79 + _tmp145 * _tmp85;
    _res_D_x3(0, 2) = _tmp144 * _tmp72 + _tmp145 * _tmp74;
    _res_D_x3(1, 2) = _tmp144 * _tmp84 + _tmp145 * _tmp78;
    _res_D_x3(2, 2) = _tmp144 * _tmp85 + _tmp145 * _tmp79;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
