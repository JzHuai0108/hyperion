// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_relative_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_a: Pose3
 *     a_T_b: Pose3
 *     y: Pose3
 *     y_T_b: Pose3
 *     sqrt_info: Matrix66
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 *     res_D_x: (6x6) jacobian of res (6) wrt arg x (6)
 *     res_D_x_T_a: (6x6) jacobian of res (6) wrt arg x_T_a (6)
 *     res_D_y: (6x6) jacobian of res (6) wrt arg y (6)
 *     res_D_y_T_b: (6x6) jacobian of res (6) wrt arg y_T_b (6)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Pose3SensorRelativeBetweenFactorWithJacobians0134(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_a, const sym::Pose3<Scalar>& a_T_b,
    const sym::Pose3<Scalar>& y, const sym::Pose3<Scalar>& y_T_b,
    const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_a = nullptr,
    Scalar* const res_D_y = nullptr, Scalar* const res_D_y_T_b = nullptr) {
  // Total ops: 3948

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _a_T_b = a_T_b.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (779)
  const Scalar _tmp0 = 2 * _y[3];
  const Scalar _tmp1 = _tmp0 * _y[1];
  const Scalar _tmp2 = -_tmp1;
  const Scalar _tmp3 = 2 * _y[0];
  const Scalar _tmp4 = _tmp3 * _y[2];
  const Scalar _tmp5 = _tmp2 + _tmp4;
  const Scalar _tmp6 = 2 * _y[1] * _y[2];
  const Scalar _tmp7 = _tmp3 * _y[3];
  const Scalar _tmp8 = _tmp6 + _tmp7;
  const Scalar _tmp9 = std::pow(_y[1], Scalar(2));
  const Scalar _tmp10 = -2 * _tmp9;
  const Scalar _tmp11 = std::pow(_y[0], Scalar(2));
  const Scalar _tmp12 = 1 - 2 * _tmp11;
  const Scalar _tmp13 = _tmp10 + _tmp12;
  const Scalar _tmp14 = _tmp13 * _y_T_b[6] + _tmp5 * _y_T_b[4] + _tmp8 * _y_T_b[5] + _y[6];
  const Scalar _tmp15 = _x[3] * _x_T_a[2];
  const Scalar _tmp16 = _x[2] * _x_T_a[3];
  const Scalar _tmp17 = _x[0] * _x_T_a[1];
  const Scalar _tmp18 = _x[1] * _x_T_a[0];
  const Scalar _tmp19 = _tmp15 + _tmp16 + _tmp17 - _tmp18;
  const Scalar _tmp20 = _x[3] * _x_T_a[1];
  const Scalar _tmp21 = _x[2] * _x_T_a[0];
  const Scalar _tmp22 = _x[0] * _x_T_a[2];
  const Scalar _tmp23 = _x[1] * _x_T_a[3];
  const Scalar _tmp24 = _tmp20 + _tmp21 - _tmp22 + _tmp23;
  const Scalar _tmp25 = 2 * _tmp24;
  const Scalar _tmp26 = _tmp19 * _tmp25;
  const Scalar _tmp27 = _x[3] * _x_T_a[0];
  const Scalar _tmp28 = _x[2] * _x_T_a[1];
  const Scalar _tmp29 = _x[0] * _x_T_a[3];
  const Scalar _tmp30 = _x[1] * _x_T_a[2];
  const Scalar _tmp31 = _tmp27 - _tmp28 + _tmp29 + _tmp30;
  const Scalar _tmp32 = _x[3] * _x_T_a[3];
  const Scalar _tmp33 = _x[2] * _x_T_a[2];
  const Scalar _tmp34 = _x[0] * _x_T_a[0];
  const Scalar _tmp35 = _x[1] * _x_T_a[1];
  const Scalar _tmp36 = _tmp32 - _tmp33 - _tmp34 - _tmp35;
  const Scalar _tmp37 = 2 * _tmp36;
  const Scalar _tmp38 = _tmp31 * _tmp37;
  const Scalar _tmp39 = _tmp26 + _tmp38;
  const Scalar _tmp40 = _tmp1 + _tmp4;
  const Scalar _tmp41 = std::pow(_y[2], Scalar(2));
  const Scalar _tmp42 = -2 * _tmp41;
  const Scalar _tmp43 = _tmp10 + _tmp42 + 1;
  const Scalar _tmp44 = _tmp0 * _y[2];
  const Scalar _tmp45 = -_tmp44;
  const Scalar _tmp46 = _tmp3 * _y[1];
  const Scalar _tmp47 = _tmp45 + _tmp46;
  const Scalar _tmp48 = _tmp40 * _y_T_b[6] + _tmp43 * _y_T_b[4] + _tmp47 * _y_T_b[5] + _y[4];
  const Scalar _tmp49 = _tmp25 * _tmp31;
  const Scalar _tmp50 = _tmp19 * _tmp37;
  const Scalar _tmp51 = -_tmp50;
  const Scalar _tmp52 = _tmp49 + _tmp51;
  const Scalar _tmp53 = 2 * std::pow(_tmp19, Scalar(2));
  const Scalar _tmp54 = -_tmp53;
  const Scalar _tmp55 = 2 * std::pow(_tmp31, Scalar(2));
  const Scalar _tmp56 = 1 - _tmp55;
  const Scalar _tmp57 = _tmp54 + _tmp56;
  const Scalar _tmp58 = -_tmp7;
  const Scalar _tmp59 = _tmp58 + _tmp6;
  const Scalar _tmp60 = _tmp12 + _tmp42;
  const Scalar _tmp61 = _tmp44 + _tmp46;
  const Scalar _tmp62 = _tmp59 * _y_T_b[6] + _tmp60 * _y_T_b[5] + _tmp61 * _y_T_b[4] + _y[5];
  const Scalar _tmp63 = 2 * _x[0];
  const Scalar _tmp64 = _tmp63 * _x[1];
  const Scalar _tmp65 = 2 * _x[3];
  const Scalar _tmp66 = _tmp65 * _x[2];
  const Scalar _tmp67 = _tmp64 + _tmp66;
  const Scalar _tmp68 = _tmp63 * _x[3];
  const Scalar _tmp69 = -_tmp68;
  const Scalar _tmp70 = 2 * _x[1] * _x[2];
  const Scalar _tmp71 = _tmp69 + _tmp70;
  const Scalar _tmp72 = std::pow(_x[2], Scalar(2));
  const Scalar _tmp73 = -2 * _tmp72;
  const Scalar _tmp74 = std::pow(_x[0], Scalar(2));
  const Scalar _tmp75 = 1 - 2 * _tmp74;
  const Scalar _tmp76 = _tmp73 + _tmp75;
  const Scalar _tmp77 = _tmp67 * _x_T_a[4] + _tmp71 * _x_T_a[6] + _tmp76 * _x_T_a[5] + _x[5];
  const Scalar _tmp78 = _tmp63 * _x[2];
  const Scalar _tmp79 = _tmp65 * _x[1];
  const Scalar _tmp80 = -_tmp79;
  const Scalar _tmp81 = _tmp78 + _tmp80;
  const Scalar _tmp82 = _tmp68 + _tmp70;
  const Scalar _tmp83 = std::pow(_x[1], Scalar(2));
  const Scalar _tmp84 = -2 * _tmp83;
  const Scalar _tmp85 = _tmp75 + _tmp84;
  const Scalar _tmp86 = _tmp81 * _x_T_a[4] + _tmp82 * _x_T_a[5] + _tmp85 * _x_T_a[6] + _x[6];
  const Scalar _tmp87 = -_tmp66;
  const Scalar _tmp88 = _tmp64 + _tmp87;
  const Scalar _tmp89 = _tmp78 + _tmp79;
  const Scalar _tmp90 = _tmp73 + _tmp84 + 1;
  const Scalar _tmp91 = _tmp88 * _x_T_a[5] + _tmp89 * _x_T_a[6] + _tmp90 * _x_T_a[4] + _x[4];
  const Scalar _tmp92 = -_a_T_b[5] + _tmp14 * _tmp39 - _tmp39 * _tmp86 + _tmp48 * _tmp52 -
                        _tmp52 * _tmp91 + _tmp57 * _tmp62 - _tmp57 * _tmp77;
  const Scalar _tmp93 = _y[2] * _y_T_b[0];
  const Scalar _tmp94 = _y[0] * _y_T_b[2];
  const Scalar _tmp95 = _y[3] * _y_T_b[1];
  const Scalar _tmp96 = _y[1] * _y_T_b[3];
  const Scalar _tmp97 = _tmp93 - _tmp94 + _tmp95 + _tmp96;
  const Scalar _tmp98 = _y[2] * _y_T_b[3];
  const Scalar _tmp99 = _y[0] * _y_T_b[1];
  const Scalar _tmp100 = _y[3] * _y_T_b[2];
  const Scalar _tmp101 = _y[1] * _y_T_b[0];
  const Scalar _tmp102 = _tmp100 - _tmp101 + _tmp98 + _tmp99;
  const Scalar _tmp103 = _y[0] * _y_T_b[3];
  const Scalar _tmp104 = _y[2] * _y_T_b[1];
  const Scalar _tmp105 = _y[3] * _y_T_b[0];
  const Scalar _tmp106 = _y[1] * _y_T_b[2];
  const Scalar _tmp107 = _tmp103 - _tmp104 + _tmp105 + _tmp106;
  const Scalar _tmp108 = _y[3] * _y_T_b[3];
  const Scalar _tmp109 = _y[2] * _y_T_b[2];
  const Scalar _tmp110 = _y[0] * _y_T_b[0];
  const Scalar _tmp111 = _y[1] * _y_T_b[1];
  const Scalar _tmp112 = _tmp108 - _tmp109 - _tmp110 - _tmp111;
  const Scalar _tmp113 = _tmp102 * _tmp19 + _tmp107 * _tmp31 + _tmp112 * _tmp36 + _tmp24 * _tmp97;
  const Scalar _tmp114 = _a_T_b[3] * _tmp113;
  const Scalar _tmp115 = _tmp102 * _tmp36 + _tmp107 * _tmp24 - _tmp112 * _tmp19 - _tmp31 * _tmp97;
  const Scalar _tmp116 = _a_T_b[2] * _tmp115;
  const Scalar _tmp117 = -_tmp102 * _tmp24 + _tmp107 * _tmp36 - _tmp112 * _tmp31 + _tmp19 * _tmp97;
  const Scalar _tmp118 = _a_T_b[0] * _tmp117;
  const Scalar _tmp119 = _tmp102 * _tmp31 - _tmp107 * _tmp19 - _tmp112 * _tmp24 + _tmp36 * _tmp97;
  const Scalar _tmp120 = _a_T_b[1] * _tmp119;
  const Scalar _tmp121 = _tmp114 + _tmp116 + _tmp118 + _tmp120;
  const Scalar _tmp122 = 2 * std::min<Scalar>(0, (((_tmp121) > 0) - ((_tmp121) < 0))) + 1;
  const Scalar _tmp123 = 2 * _tmp122;
  const Scalar _tmp124 = _tmp123 * sqrt_info(0, 1);
  const Scalar _tmp125 =
      _a_T_b[0] * _tmp115 - _a_T_b[1] * _tmp113 - _a_T_b[2] * _tmp117 + _a_T_b[3] * _tmp119;
  const Scalar _tmp126 = 1 - epsilon;
  const Scalar _tmp127 = std::min<Scalar>(_tmp126, std::fabs(_tmp121));
  const Scalar _tmp128 = std::acos(_tmp127) / std::sqrt(Scalar(1 - std::pow(_tmp127, Scalar(2))));
  const Scalar _tmp129 = _tmp125 * _tmp128;
  const Scalar _tmp130 =
      -_a_T_b[0] * _tmp113 - _a_T_b[1] * _tmp115 + _a_T_b[2] * _tmp119 + _a_T_b[3] * _tmp117;
  const Scalar _tmp131 = _tmp123 * _tmp128;
  const Scalar _tmp132 = _tmp130 * _tmp131;
  const Scalar _tmp133 = 2 * std::pow(_tmp24, Scalar(2));
  const Scalar _tmp134 = -_tmp133;
  const Scalar _tmp135 = _tmp134 + _tmp56;
  const Scalar _tmp136 = 2 * _tmp19;
  const Scalar _tmp137 = _tmp136 * _tmp31;
  const Scalar _tmp138 = _tmp24 * _tmp37;
  const Scalar _tmp139 = _tmp137 + _tmp138;
  const Scalar _tmp140 = -_tmp38;
  const Scalar _tmp141 = _tmp140 + _tmp26;
  const Scalar _tmp142 = -_a_T_b[6] + _tmp135 * _tmp14 - _tmp135 * _tmp86 + _tmp139 * _tmp48 -
                         _tmp139 * _tmp91 + _tmp141 * _tmp62 - _tmp141 * _tmp77;
  const Scalar _tmp143 = -_tmp138;
  const Scalar _tmp144 = _tmp137 + _tmp143;
  const Scalar _tmp145 = _tmp134 + _tmp54 + 1;
  const Scalar _tmp146 = _tmp49 + _tmp50;
  const Scalar _tmp147 = -_a_T_b[4] + _tmp14 * _tmp144 - _tmp144 * _tmp86 + _tmp145 * _tmp48 -
                         _tmp145 * _tmp91 + _tmp146 * _tmp62 - _tmp146 * _tmp77;
  const Scalar _tmp148 =
      -_a_T_b[0] * _tmp119 + _a_T_b[1] * _tmp117 - _a_T_b[2] * _tmp113 + _a_T_b[3] * _tmp115;
  const Scalar _tmp149 = _tmp128 * _tmp148;
  const Scalar _tmp150 = _tmp123 * _tmp149;
  const Scalar _tmp151 = _tmp123 * _tmp129;
  const Scalar _tmp152 = _tmp130 * sqrt_info(3, 0);
  const Scalar _tmp153 = _tmp123 * sqrt_info(3, 2);
  const Scalar _tmp154 = _tmp148 * sqrt_info(0, 2);
  const Scalar _tmp155 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp156 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp157 = -_tmp156;
  const Scalar _tmp158 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp159 = -_tmp158;
  const Scalar _tmp160 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp161 = -_tmp160;
  const Scalar _tmp162 = _tmp159 + _tmp161;
  const Scalar _tmp163 = _tmp155 + _tmp157 + _tmp162;
  const Scalar _tmp164 = (Scalar(1) / Scalar(2)) * _tmp34;
  const Scalar _tmp165 = -_tmp164;
  const Scalar _tmp166 = (Scalar(1) / Scalar(2)) * _tmp35;
  const Scalar _tmp167 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp168 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp169 = _tmp167 + _tmp168;
  const Scalar _tmp170 = _tmp165 + _tmp166 + _tmp169;
  const Scalar _tmp171 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp172 = -_tmp171;
  const Scalar _tmp173 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp174 = -_tmp173;
  const Scalar _tmp175 = _tmp172 + _tmp174;
  const Scalar _tmp176 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp177 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp178 = -_tmp177;
  const Scalar _tmp179 = _tmp176 + _tmp178;
  const Scalar _tmp180 = _tmp175 + _tmp179;
  const Scalar _tmp181 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp182 = -_tmp181;
  const Scalar _tmp183 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp184 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp185 = -_tmp184;
  const Scalar _tmp186 = (Scalar(1) / Scalar(2)) * _tmp29;
  const Scalar _tmp187 = -_tmp186;
  const Scalar _tmp188 = _tmp185 + _tmp187;
  const Scalar _tmp189 = _tmp182 + _tmp183 + _tmp188;
  const Scalar _tmp190 =
      _tmp102 * _tmp180 + _tmp107 * _tmp170 + _tmp112 * _tmp189 + _tmp163 * _tmp97;
  const Scalar _tmp191 =
      _tmp102 * _tmp189 + _tmp107 * _tmp163 - _tmp112 * _tmp180 - _tmp170 * _tmp97;
  const Scalar _tmp192 =
      _tmp102 * _tmp170 - _tmp107 * _tmp180 - _tmp112 * _tmp163 + _tmp189 * _tmp97;
  const Scalar _tmp193 =
      -_tmp102 * _tmp163 + _tmp107 * _tmp189 - _tmp112 * _tmp170 + _tmp180 * _tmp97;
  const Scalar _tmp194 =
      _a_T_b[0] * _tmp193 + _a_T_b[1] * _tmp192 + _a_T_b[2] * _tmp191 + _a_T_b[3] * _tmp190;
  const Scalar _tmp195 = _tmp114 + _tmp116 + _tmp118 + _tmp120;
  const Scalar _tmp196 = std::fabs(_tmp195);
  const Scalar _tmp197 = std::min<Scalar>(_tmp126, _tmp196);
  const Scalar _tmp198 = 1 - std::pow(_tmp197, Scalar(2));
  const Scalar _tmp199 = _tmp122 * ((((_tmp126 - _tmp196) > 0) - ((_tmp126 - _tmp196) < 0)) + 1) *
                         (((_tmp195) > 0) - ((_tmp195) < 0));
  const Scalar _tmp200 = _tmp199 / _tmp198;
  const Scalar _tmp201 = _tmp194 * _tmp200;
  const Scalar _tmp202 =
      -_a_T_b[0] * _tmp192 + _a_T_b[1] * _tmp193 - _a_T_b[2] * _tmp190 + _a_T_b[3] * _tmp191;
  const Scalar _tmp203 = std::acos(_tmp197);
  const Scalar _tmp204 = _tmp203 / std::sqrt(_tmp198);
  const Scalar _tmp205 = _tmp123 * _tmp204;
  const Scalar _tmp206 = _tmp202 * _tmp205;
  const Scalar _tmp207 = _tmp130 * _tmp200;
  const Scalar _tmp208 = _tmp194 * _tmp207;
  const Scalar _tmp209 = _tmp205 * (-_a_T_b[0] * _tmp190 - _a_T_b[1] * _tmp191 +
                                    _a_T_b[2] * _tmp192 + _a_T_b[3] * _tmp193);
  const Scalar _tmp210 =
      _a_T_b[0] * _tmp191 - _a_T_b[1] * _tmp190 - _a_T_b[2] * _tmp193 + _a_T_b[3] * _tmp192;
  const Scalar _tmp211 = _tmp124 * _tmp204;
  const Scalar _tmp212 = _tmp197 * _tmp199 * _tmp203 / (_tmp198 * std::sqrt(_tmp198));
  const Scalar _tmp213 = _tmp194 * _tmp212;
  const Scalar _tmp214 = _tmp130 * _tmp213;
  const Scalar _tmp215 = _tmp125 * _tmp212;
  const Scalar _tmp216 = _tmp194 * _tmp215;
  const Scalar _tmp217 = std::pow(_x[3], Scalar(2));
  const Scalar _tmp218 = -_tmp217;
  const Scalar _tmp219 = _tmp218 + _tmp72;
  const Scalar _tmp220 = -_tmp83;
  const Scalar _tmp221 = _tmp220 + _tmp74;
  const Scalar _tmp222 = _tmp71 * _x_T_a[5] + _x_T_a[6] * (_tmp219 + _tmp221);
  const Scalar _tmp223 = 4 * _tmp31;
  const Scalar _tmp224 = -_tmp170 * _tmp223;
  const Scalar _tmp225 = 4 * _tmp19;
  const Scalar _tmp226 = -_tmp180 * _tmp225;
  const Scalar _tmp227 = _tmp224 + _tmp226;
  const Scalar _tmp228 = _tmp136 * _tmp189;
  const Scalar _tmp229 = _tmp180 * _tmp37;
  const Scalar _tmp230 = 2 * _tmp31;
  const Scalar _tmp231 = _tmp163 * _tmp230 + _tmp170 * _tmp25;
  const Scalar _tmp232 = -_tmp228 - _tmp229 + _tmp231;
  const Scalar _tmp233 = _tmp189 * _tmp230;
  const Scalar _tmp234 = _tmp170 * _tmp37;
  const Scalar _tmp235 = _tmp136 * _tmp163 + _tmp180 * _tmp25;
  const Scalar _tmp236 = _tmp233 + _tmp234 + _tmp235;
  const Scalar _tmp237 = -_tmp64;
  const Scalar _tmp238 = _tmp89 * _x_T_a[5] + _x_T_a[6] * (_tmp237 + _tmp66);
  const Scalar _tmp239 = -_tmp74;
  const Scalar _tmp240 = -_tmp70;
  const Scalar _tmp241 =
      _x_T_a[5] * (_tmp217 + _tmp220 + _tmp239 + _tmp72) + _x_T_a[6] * (_tmp240 + _tmp69);
  const Scalar _tmp242 = _tmp14 * _tmp236 - _tmp222 * _tmp57 + _tmp227 * _tmp62 - _tmp227 * _tmp77 +
                         _tmp232 * _tmp48 - _tmp232 * _tmp91 - _tmp236 * _tmp86 - _tmp238 * _tmp52 -
                         _tmp241 * _tmp39;
  const Scalar _tmp243 = _tmp189 * _tmp25;
  const Scalar _tmp244 = _tmp163 * _tmp37;
  const Scalar _tmp245 = _tmp136 * _tmp170 + _tmp180 * _tmp230;
  const Scalar _tmp246 = -_tmp243 - _tmp244 + _tmp245;
  const Scalar _tmp247 = 4 * _tmp24;
  const Scalar _tmp248 = -_tmp163 * _tmp247;
  const Scalar _tmp249 = _tmp226 + _tmp248;
  const Scalar _tmp250 = _tmp228 + _tmp229 + _tmp231;
  const Scalar _tmp251 = _tmp14 * _tmp246 - _tmp144 * _tmp241 - _tmp145 * _tmp238 -
                         _tmp146 * _tmp222 - _tmp246 * _tmp86 + _tmp249 * _tmp48 -
                         _tmp249 * _tmp91 + _tmp250 * _tmp62 - _tmp250 * _tmp77;
  const Scalar _tmp252 = _tmp243 + _tmp244 + _tmp245;
  const Scalar _tmp253 = _tmp224 + _tmp248;
  const Scalar _tmp254 = -_tmp233 - _tmp234 + _tmp235;
  const Scalar _tmp255 = -_tmp135 * _tmp241 - _tmp139 * _tmp238 + _tmp14 * _tmp253 -
                         _tmp141 * _tmp222 + _tmp252 * _tmp48 - _tmp252 * _tmp91 -
                         _tmp253 * _tmp86 + _tmp254 * _tmp62 - _tmp254 * _tmp77;
  const Scalar _tmp256 = _tmp125 * _tmp200;
  const Scalar _tmp257 = _tmp194 * _tmp256;
  const Scalar _tmp258 = _tmp148 * sqrt_info(1, 2);
  const Scalar _tmp259 = _tmp207 * sqrt_info(1, 0);
  const Scalar _tmp260 = _tmp205 * sqrt_info(1, 1);
  const Scalar _tmp261 = _tmp256 * sqrt_info(1, 1);
  const Scalar _tmp262 = _tmp148 * _tmp201;
  const Scalar _tmp263 = _tmp205 * _tmp210;
  const Scalar _tmp264 = _tmp148 * sqrt_info(2, 2);
  const Scalar _tmp265 = _tmp153 * _tmp204;
  const Scalar _tmp266 = _tmp152 * _tmp200;
  const Scalar _tmp267 = _tmp205 * sqrt_info(3, 1);
  const Scalar _tmp268 = _tmp148 * sqrt_info(3, 2);
  const Scalar _tmp269 = _tmp148 * sqrt_info(4, 2);
  const Scalar _tmp270 = _tmp205 * sqrt_info(4, 2);
  const Scalar _tmp271 = _tmp215 * sqrt_info(4, 1);
  const Scalar _tmp272 = _tmp148 * sqrt_info(5, 2);
  const Scalar _tmp273 = _tmp185 + _tmp186;
  const Scalar _tmp274 = -_tmp183;
  const Scalar _tmp275 = _tmp182 + _tmp274;
  const Scalar _tmp276 = _tmp273 + _tmp275;
  const Scalar _tmp277 = -_tmp176;
  const Scalar _tmp278 = _tmp178 + _tmp277;
  const Scalar _tmp279 = _tmp171 + _tmp174 + _tmp278;
  const Scalar _tmp280 = -_tmp166;
  const Scalar _tmp281 = _tmp164 + _tmp169 + _tmp280;
  const Scalar _tmp282 = -_tmp155;
  const Scalar _tmp283 = _tmp156 + _tmp162 + _tmp282;
  const Scalar _tmp284 =
      -_tmp102 * _tmp281 + _tmp107 * _tmp279 - _tmp112 * _tmp283 + _tmp276 * _tmp97;
  const Scalar _tmp285 =
      _tmp102 * _tmp283 - _tmp107 * _tmp276 - _tmp112 * _tmp281 + _tmp279 * _tmp97;
  const Scalar _tmp286 =
      _tmp102 * _tmp279 + _tmp107 * _tmp281 - _tmp112 * _tmp276 - _tmp283 * _tmp97;
  const Scalar _tmp287 =
      _tmp102 * _tmp276 + _tmp107 * _tmp283 + _tmp112 * _tmp279 + _tmp281 * _tmp97;
  const Scalar _tmp288 =
      _a_T_b[0] * _tmp284 + _a_T_b[1] * _tmp285 + _a_T_b[2] * _tmp286 + _a_T_b[3] * _tmp287;
  const Scalar _tmp289 = _tmp256 * _tmp288;
  const Scalar _tmp290 =
      -_a_T_b[0] * _tmp285 + _a_T_b[1] * _tmp284 - _a_T_b[2] * _tmp287 + _a_T_b[3] * _tmp286;
  const Scalar _tmp291 = _tmp205 * _tmp290;
  const Scalar _tmp292 = _tmp215 * _tmp288;
  const Scalar _tmp293 = _tmp207 * _tmp288;
  const Scalar _tmp294 =
      -_a_T_b[0] * _tmp287 - _a_T_b[1] * _tmp286 + _a_T_b[2] * _tmp285 + _a_T_b[3] * _tmp284;
  const Scalar _tmp295 = _tmp205 * _tmp294;
  const Scalar _tmp296 = _tmp67 * _x_T_a[6] + _x_T_a[4] * (_tmp240 + _tmp68);
  const Scalar _tmp297 = -_tmp72;
  const Scalar _tmp298 = _tmp81 * _x_T_a[6] + _x_T_a[4] * (_tmp218 + _tmp297 + _tmp74 + _tmp83);
  const Scalar _tmp299 = _tmp25 * _tmp279;
  const Scalar _tmp300 = _tmp281 * _tmp37;
  const Scalar _tmp301 = _tmp136 * _tmp283 + _tmp230 * _tmp276;
  const Scalar _tmp302 = _tmp299 + _tmp300 + _tmp301;
  const Scalar _tmp303 = -_tmp223 * _tmp283;
  const Scalar _tmp304 = -_tmp247 * _tmp281;
  const Scalar _tmp305 = _tmp303 + _tmp304;
  const Scalar _tmp306 = -_tmp78;
  const Scalar _tmp307 = _tmp217 + _tmp297;
  const Scalar _tmp308 = _x_T_a[4] * (_tmp306 + _tmp80) + _x_T_a[6] * (_tmp221 + _tmp307);
  const Scalar _tmp309 = _tmp230 * _tmp279;
  const Scalar _tmp310 = _tmp283 * _tmp37;
  const Scalar _tmp311 = _tmp136 * _tmp281 + _tmp25 * _tmp276;
  const Scalar _tmp312 = -_tmp309 - _tmp310 + _tmp311;
  const Scalar _tmp313 = -_tmp135 * _tmp298 - _tmp139 * _tmp308 + _tmp14 * _tmp305 -
                         _tmp141 * _tmp296 + _tmp302 * _tmp48 - _tmp302 * _tmp91 -
                         _tmp305 * _tmp86 + _tmp312 * _tmp62 - _tmp312 * _tmp77;
  const Scalar _tmp314 = -_tmp299 - _tmp300 + _tmp301;
  const Scalar _tmp315 = -_tmp225 * _tmp276;
  const Scalar _tmp316 = _tmp304 + _tmp315;
  const Scalar _tmp317 = _tmp136 * _tmp279;
  const Scalar _tmp318 = _tmp276 * _tmp37;
  const Scalar _tmp319 = _tmp230 * _tmp281 + _tmp25 * _tmp283;
  const Scalar _tmp320 = _tmp317 + _tmp318 + _tmp319;
  const Scalar _tmp321 = _tmp14 * _tmp314 - _tmp144 * _tmp298 - _tmp145 * _tmp308 -
                         _tmp146 * _tmp296 - _tmp314 * _tmp86 + _tmp316 * _tmp48 -
                         _tmp316 * _tmp91 + _tmp320 * _tmp62 - _tmp320 * _tmp77;
  const Scalar _tmp322 =
      _a_T_b[0] * _tmp286 - _a_T_b[1] * _tmp287 - _a_T_b[2] * _tmp284 + _a_T_b[3] * _tmp285;
  const Scalar _tmp323 = _tmp212 * _tmp288;
  const Scalar _tmp324 = _tmp200 * _tmp288;
  const Scalar _tmp325 = _tmp303 + _tmp315;
  const Scalar _tmp326 = -_tmp317 - _tmp318 + _tmp319;
  const Scalar _tmp327 = _tmp309 + _tmp310 + _tmp311;
  const Scalar _tmp328 = _tmp14 * _tmp327 - _tmp296 * _tmp57 - _tmp298 * _tmp39 - _tmp308 * _tmp52 +
                         _tmp325 * _tmp62 - _tmp325 * _tmp77 + _tmp326 * _tmp48 - _tmp326 * _tmp91 -
                         _tmp327 * _tmp86;
  const Scalar _tmp329 = _tmp130 * _tmp212;
  const Scalar _tmp330 = _tmp288 * _tmp329;
  const Scalar _tmp331 = _tmp205 * sqrt_info(1, 0);
  const Scalar _tmp332 = _tmp205 * sqrt_info(2, 1);
  const Scalar _tmp333 = _tmp329 * sqrt_info(2, 0);
  const Scalar _tmp334 = _tmp152 * _tmp212;
  const Scalar _tmp335 = _tmp205 * _tmp322;
  const Scalar _tmp336 = _tmp212 * _tmp269;
  const Scalar _tmp337 = _tmp329 * sqrt_info(4, 0);
  const Scalar _tmp338 = _tmp329 * sqrt_info(5, 0);
  const Scalar _tmp339 = _tmp167 - _tmp168;
  const Scalar _tmp340 = _tmp164 + _tmp166 + _tmp339;
  const Scalar _tmp341 = _tmp159 + _tmp160;
  const Scalar _tmp342 = _tmp157 + _tmp282;
  const Scalar _tmp343 = _tmp341 + _tmp342;
  const Scalar _tmp344 = _tmp181 + _tmp188 + _tmp274;
  const Scalar _tmp345 = _tmp172 + _tmp173 + _tmp278;
  const Scalar _tmp346 =
      -_tmp102 * _tmp344 + _tmp107 * _tmp343 - _tmp112 * _tmp345 + _tmp340 * _tmp97;
  const Scalar _tmp347 =
      _tmp102 * _tmp340 + _tmp107 * _tmp345 + _tmp112 * _tmp343 + _tmp344 * _tmp97;
  const Scalar _tmp348 =
      _tmp102 * _tmp343 + _tmp107 * _tmp344 - _tmp112 * _tmp340 - _tmp345 * _tmp97;
  const Scalar _tmp349 =
      _tmp102 * _tmp345 - _tmp107 * _tmp340 - _tmp112 * _tmp344 + _tmp343 * _tmp97;
  const Scalar _tmp350 =
      _a_T_b[0] * _tmp346 + _a_T_b[1] * _tmp349 + _a_T_b[2] * _tmp348 + _a_T_b[3] * _tmp347;
  const Scalar _tmp351 = _tmp200 * _tmp350;
  const Scalar _tmp352 = _tmp207 * _tmp350;
  const Scalar _tmp353 = _tmp329 * _tmp350;
  const Scalar _tmp354 = -_tmp223 * _tmp345;
  const Scalar _tmp355 = -_tmp225 * _tmp340;
  const Scalar _tmp356 = _tmp354 + _tmp355;
  const Scalar _tmp357 = _tmp239 + _tmp83;
  const Scalar _tmp358 = _x_T_a[4] * (_tmp307 + _tmp357) + _x_T_a[5] * (_tmp237 + _tmp87);
  const Scalar _tmp359 = _tmp136 * _tmp343;
  const Scalar _tmp360 = _tmp340 * _tmp37;
  const Scalar _tmp361 = _tmp230 * _tmp344 + _tmp25 * _tmp345;
  const Scalar _tmp362 = -_tmp359 - _tmp360 + _tmp361;
  const Scalar _tmp363 = _tmp230 * _tmp343;
  const Scalar _tmp364 = _tmp345 * _tmp37;
  const Scalar _tmp365 = _tmp136 * _tmp344 + _tmp25 * _tmp340;
  const Scalar _tmp366 = _tmp363 + _tmp364 + _tmp365;
  const Scalar _tmp367 = _tmp88 * _x_T_a[4] + _x_T_a[5] * (_tmp219 + _tmp357);
  const Scalar _tmp368 = _tmp82 * _x_T_a[4] + _x_T_a[5] * (_tmp306 + _tmp79);
  const Scalar _tmp369 = _tmp14 * _tmp366 + _tmp356 * _tmp62 - _tmp356 * _tmp77 - _tmp358 * _tmp57 +
                         _tmp362 * _tmp48 - _tmp362 * _tmp91 - _tmp366 * _tmp86 - _tmp367 * _tmp52 -
                         _tmp368 * _tmp39;
  const Scalar _tmp370 = _tmp212 * _tmp350;
  const Scalar _tmp371 = _tmp256 * _tmp350;
  const Scalar _tmp372 =
      _a_T_b[0] * _tmp348 - _a_T_b[1] * _tmp347 - _a_T_b[2] * _tmp346 + _a_T_b[3] * _tmp349;
  const Scalar _tmp373 = _tmp215 * _tmp350;
  const Scalar _tmp374 = _tmp205 * (-_a_T_b[0] * _tmp347 - _a_T_b[1] * _tmp348 +
                                    _a_T_b[2] * _tmp349 + _a_T_b[3] * _tmp346);
  const Scalar _tmp375 = _tmp204 * (-_a_T_b[0] * _tmp349 + _a_T_b[1] * _tmp346 -
                                    _a_T_b[2] * _tmp347 + _a_T_b[3] * _tmp348);
  const Scalar _tmp376 = _tmp123 * _tmp375;
  const Scalar _tmp377 = _tmp25 * _tmp343;
  const Scalar _tmp378 = _tmp344 * _tmp37;
  const Scalar _tmp379 = _tmp136 * _tmp345 + _tmp230 * _tmp340;
  const Scalar _tmp380 = _tmp377 + _tmp378 + _tmp379;
  const Scalar _tmp381 = -_tmp247 * _tmp344;
  const Scalar _tmp382 = _tmp354 + _tmp381;
  const Scalar _tmp383 = -_tmp363 - _tmp364 + _tmp365;
  const Scalar _tmp384 = -_tmp135 * _tmp368 - _tmp139 * _tmp367 + _tmp14 * _tmp382 -
                         _tmp141 * _tmp358 + _tmp380 * _tmp48 - _tmp380 * _tmp91 -
                         _tmp382 * _tmp86 + _tmp383 * _tmp62 - _tmp383 * _tmp77;
  const Scalar _tmp385 = -_tmp377 - _tmp378 + _tmp379;
  const Scalar _tmp386 = _tmp355 + _tmp381;
  const Scalar _tmp387 = _tmp359 + _tmp360 + _tmp361;
  const Scalar _tmp388 = _tmp14 * _tmp385 - _tmp144 * _tmp368 - _tmp145 * _tmp367 -
                         _tmp146 * _tmp358 - _tmp385 * _tmp86 + _tmp386 * _tmp48 -
                         _tmp386 * _tmp91 + _tmp387 * _tmp62 - _tmp387 * _tmp77;
  const Scalar _tmp389 = _tmp215 * sqrt_info(1, 1);
  const Scalar _tmp390 = _tmp205 * _tmp372;
  const Scalar _tmp391 = -_tmp49;
  const Scalar _tmp392 = _tmp391 + _tmp50;
  const Scalar _tmp393 = -_tmp137;
  const Scalar _tmp394 = _tmp143 + _tmp393;
  const Scalar _tmp395 = _tmp53 - 1;
  const Scalar _tmp396 = _tmp133 + _tmp395;
  const Scalar _tmp397 = -_tmp26;
  const Scalar _tmp398 = _tmp38 + _tmp397;
  const Scalar _tmp399 = _tmp391 + _tmp51;
  const Scalar _tmp400 = _tmp395 + _tmp55;
  const Scalar _tmp401 = _tmp140 + _tmp397;
  const Scalar _tmp402 = _tmp138 + _tmp393;
  const Scalar _tmp403 = _tmp133 + _tmp55 - 1;
  const Scalar _tmp404 = _tmp155 + _tmp156 + _tmp341;
  const Scalar _tmp405 = _tmp184 + _tmp187 + _tmp275;
  const Scalar _tmp406 = _tmp112 * _tmp405;
  const Scalar _tmp407 = _tmp165 + _tmp280 + _tmp339;
  const Scalar _tmp408 = _tmp107 * _tmp407;
  const Scalar _tmp409 = _tmp175 + _tmp177 + _tmp277;
  const Scalar _tmp410 = _tmp102 * _tmp409 + _tmp408;
  const Scalar _tmp411 = _tmp404 * _tmp97 + _tmp406 + _tmp410;
  const Scalar _tmp412 = _tmp107 * _tmp409;
  const Scalar _tmp413 = _tmp102 * _tmp407;
  const Scalar _tmp414 = _tmp405 * _tmp97 + _tmp413;
  const Scalar _tmp415 = -_tmp112 * _tmp404 - _tmp412 + _tmp414;
  const Scalar _tmp416 = _tmp107 * _tmp405;
  const Scalar _tmp417 = -_tmp112 * _tmp407;
  const Scalar _tmp418 = _tmp409 * _tmp97 + _tmp417;
  const Scalar _tmp419 = -_tmp102 * _tmp404 + _tmp416 + _tmp418;
  const Scalar _tmp420 = _tmp407 * _tmp97;
  const Scalar _tmp421 = _tmp102 * _tmp405;
  const Scalar _tmp422 = _tmp112 * _tmp409;
  const Scalar _tmp423 = _tmp107 * _tmp404 - _tmp420 + _tmp421 - _tmp422;
  const Scalar _tmp424 =
      _a_T_b[0] * _tmp419 + _a_T_b[1] * _tmp415 + _a_T_b[2] * _tmp423 + _a_T_b[3] * _tmp411;
  const Scalar _tmp425 = _tmp207 * _tmp424;
  const Scalar _tmp426 =
      -_a_T_b[0] * _tmp415 + _a_T_b[1] * _tmp419 - _a_T_b[2] * _tmp411 + _a_T_b[3] * _tmp423;
  const Scalar _tmp427 = _tmp205 * _tmp426;
  const Scalar _tmp428 = _tmp215 * _tmp424;
  const Scalar _tmp429 = _tmp25 * _tmp405;
  const Scalar _tmp430 = _tmp37 * _tmp404;
  const Scalar _tmp431 = _tmp230 * _tmp409;
  const Scalar _tmp432 = _tmp136 * _tmp407;
  const Scalar _tmp433 = _tmp431 + _tmp432;
  const Scalar _tmp434 = _tmp429 + _tmp430 + _tmp433;
  const Scalar _tmp435 = -_tmp223 * _tmp407;
  const Scalar _tmp436 = -_tmp247 * _tmp404;
  const Scalar _tmp437 = _tmp435 + _tmp436;
  const Scalar _tmp438 = _tmp230 * _tmp405;
  const Scalar _tmp439 = _tmp136 * _tmp404;
  const Scalar _tmp440 = _tmp25 * _tmp409;
  const Scalar _tmp441 = _tmp37 * _tmp407;
  const Scalar _tmp442 = -_tmp441;
  const Scalar _tmp443 = -_tmp438 + _tmp439 + _tmp440 + _tmp442;
  const Scalar _tmp444 = _tmp14 * _tmp437 + _tmp434 * _tmp48 - _tmp434 * _tmp91 - _tmp437 * _tmp86 +
                         _tmp443 * _tmp62 - _tmp443 * _tmp77;
  const Scalar _tmp445 = -_tmp429 - _tmp430 + _tmp433;
  const Scalar _tmp446 = -_tmp225 * _tmp409;
  const Scalar _tmp447 = _tmp436 + _tmp446;
  const Scalar _tmp448 = _tmp136 * _tmp405;
  const Scalar _tmp449 = _tmp37 * _tmp409;
  const Scalar _tmp450 = _tmp25 * _tmp407;
  const Scalar _tmp451 = _tmp230 * _tmp404 + _tmp450;
  const Scalar _tmp452 = _tmp448 + _tmp449 + _tmp451;
  const Scalar _tmp453 = _tmp14 * _tmp445 - _tmp445 * _tmp86 + _tmp447 * _tmp48 - _tmp447 * _tmp91 +
                         _tmp452 * _tmp62 - _tmp452 * _tmp77;
  const Scalar _tmp454 = _tmp329 * _tmp424;
  const Scalar _tmp455 = _tmp256 * _tmp424;
  const Scalar _tmp456 = _tmp212 * _tmp424;
  const Scalar _tmp457 = _tmp200 * _tmp424;
  const Scalar _tmp458 = _tmp204 * (_a_T_b[0] * _tmp423 - _a_T_b[1] * _tmp411 -
                                    _a_T_b[2] * _tmp419 + _a_T_b[3] * _tmp415);
  const Scalar _tmp459 = _tmp205 * (-_a_T_b[0] * _tmp411 - _a_T_b[1] * _tmp423 +
                                    _a_T_b[2] * _tmp415 + _a_T_b[3] * _tmp419);
  const Scalar _tmp460 = _tmp435 + _tmp446;
  const Scalar _tmp461 = -_tmp448 - _tmp449 + _tmp451;
  const Scalar _tmp462 = _tmp440 + _tmp441;
  const Scalar _tmp463 = _tmp438 + _tmp439 + _tmp462;
  const Scalar _tmp464 = _tmp14 * _tmp463 + _tmp460 * _tmp62 - _tmp460 * _tmp77 + _tmp461 * _tmp48 -
                         _tmp461 * _tmp91 - _tmp463 * _tmp86;
  const Scalar _tmp465 = _tmp123 * _tmp458;
  const Scalar _tmp466 = _tmp148 * _tmp457;
  const Scalar _tmp467 = _tmp256 * sqrt_info(4, 1);
  const Scalar _tmp468 = _tmp256 * sqrt_info(5, 1);
  const Scalar _tmp469 = _tmp158 + _tmp161 + _tmp342;
  const Scalar _tmp470 = _tmp469 * _tmp97;
  const Scalar _tmp471 = _tmp181 + _tmp183 + _tmp273;
  const Scalar _tmp472 = -_tmp112 * _tmp471 + _tmp410 - _tmp470;
  const Scalar _tmp473 = _tmp112 * _tmp469;
  const Scalar _tmp474 = _tmp412 - _tmp413 + _tmp471 * _tmp97 - _tmp473;
  const Scalar _tmp475 = _tmp102 * _tmp469;
  const Scalar _tmp476 = -_tmp107 * _tmp471 + _tmp418 + _tmp475;
  const Scalar _tmp477 = _tmp107 * _tmp469 + _tmp420;
  const Scalar _tmp478 = _tmp102 * _tmp471 + _tmp422 + _tmp477;
  const Scalar _tmp479 =
      _a_T_b[0] * _tmp474 + _a_T_b[1] * _tmp476 + _a_T_b[2] * _tmp472 + _a_T_b[3] * _tmp478;
  const Scalar _tmp480 = _tmp207 * _tmp479;
  const Scalar _tmp481 = _tmp205 * (-_a_T_b[0] * _tmp478 - _a_T_b[1] * _tmp472 +
                                    _a_T_b[2] * _tmp476 + _a_T_b[3] * _tmp474);
  const Scalar _tmp482 = _tmp215 * _tmp479;
  const Scalar _tmp483 = -_tmp223 * _tmp469;
  const Scalar _tmp484 = -_tmp225 * _tmp471;
  const Scalar _tmp485 = _tmp483 + _tmp484;
  const Scalar _tmp486 = _tmp136 * _tmp409;
  const Scalar _tmp487 = _tmp37 * _tmp471;
  const Scalar _tmp488 = _tmp230 * _tmp407;
  const Scalar _tmp489 = _tmp25 * _tmp469;
  const Scalar _tmp490 = _tmp488 + _tmp489;
  const Scalar _tmp491 = -_tmp486 - _tmp487 + _tmp490;
  const Scalar _tmp492 = _tmp25 * _tmp471;
  const Scalar _tmp493 = _tmp37 * _tmp469;
  const Scalar _tmp494 = _tmp433 + _tmp492 + _tmp493;
  const Scalar _tmp495 = _tmp14 * _tmp494 + _tmp48 * _tmp491 + _tmp485 * _tmp62 - _tmp485 * _tmp77 -
                         _tmp491 * _tmp91 - _tmp494 * _tmp86;
  const Scalar _tmp496 = _tmp329 * _tmp479;
  const Scalar _tmp497 = _tmp256 * _tmp479;
  const Scalar _tmp498 = _tmp136 * _tmp469;
  const Scalar _tmp499 = _tmp230 * _tmp471 + _tmp498;
  const Scalar _tmp500 = -_tmp440 + _tmp442 + _tmp499;
  const Scalar _tmp501 = -_tmp247 * _tmp407;
  const Scalar _tmp502 = _tmp484 + _tmp501;
  const Scalar _tmp503 = _tmp486 + _tmp487 + _tmp490;
  const Scalar _tmp504 = _tmp14 * _tmp500 + _tmp48 * _tmp502 - _tmp500 * _tmp86 - _tmp502 * _tmp91 +
                         _tmp503 * _tmp62 - _tmp503 * _tmp77;
  const Scalar _tmp505 = _tmp462 + _tmp499;
  const Scalar _tmp506 = _tmp483 + _tmp501;
  const Scalar _tmp507 = -_tmp431 + _tmp432 + _tmp492 - _tmp493;
  const Scalar _tmp508 = _tmp14 * _tmp506 + _tmp48 * _tmp505 - _tmp505 * _tmp91 - _tmp506 * _tmp86 +
                         _tmp507 * _tmp62 - _tmp507 * _tmp77;
  const Scalar _tmp509 =
      -_a_T_b[0] * _tmp476 + _a_T_b[1] * _tmp474 - _a_T_b[2] * _tmp478 + _a_T_b[3] * _tmp472;
  const Scalar _tmp510 = _tmp205 * _tmp509;
  const Scalar _tmp511 = _tmp212 * _tmp479;
  const Scalar _tmp512 =
      _a_T_b[0] * _tmp472 - _a_T_b[1] * _tmp478 - _a_T_b[2] * _tmp474 + _a_T_b[3] * _tmp476;
  const Scalar _tmp513 = _tmp200 * _tmp479;
  const Scalar _tmp514 = _tmp148 * _tmp513;
  const Scalar _tmp515 = _tmp205 * _tmp512;
  const Scalar _tmp516 = _tmp171 + _tmp173 + _tmp179;
  const Scalar _tmp517 = _tmp102 * _tmp516 - _tmp406 - _tmp408 + _tmp470;
  const Scalar _tmp518 = _tmp107 * _tmp516 + _tmp414 + _tmp473;
  const Scalar _tmp519 = _tmp416 + _tmp417 + _tmp475 - _tmp516 * _tmp97;
  const Scalar _tmp520 = -_tmp112 * _tmp516 - _tmp421 + _tmp477;
  const Scalar _tmp521 =
      _a_T_b[0] * _tmp520 + _a_T_b[1] * _tmp517 + _a_T_b[2] * _tmp519 + _a_T_b[3] * _tmp518;
  const Scalar _tmp522 = _tmp215 * _tmp521;
  const Scalar _tmp523 = _tmp329 * _tmp521;
  const Scalar _tmp524 = _tmp136 * _tmp516;
  const Scalar _tmp525 = _tmp37 * _tmp405;
  const Scalar _tmp526 = _tmp488 - _tmp489 + _tmp524 - _tmp525;
  const Scalar _tmp527 = -_tmp225 * _tmp407;
  const Scalar _tmp528 = -_tmp247 * _tmp405;
  const Scalar _tmp529 = _tmp527 + _tmp528;
  const Scalar _tmp530 = _tmp25 * _tmp516 + _tmp438;
  const Scalar _tmp531 = _tmp441 + _tmp498 + _tmp530;
  const Scalar _tmp532 = _tmp14 * _tmp526 + _tmp48 * _tmp529 - _tmp526 * _tmp86 - _tmp529 * _tmp91 +
                         _tmp531 * _tmp62 - _tmp531 * _tmp77;
  const Scalar _tmp533 = _tmp490 + _tmp524 + _tmp525;
  const Scalar _tmp534 = -_tmp223 * _tmp516;
  const Scalar _tmp535 = _tmp528 + _tmp534;
  const Scalar _tmp536 = _tmp230 * _tmp469;
  const Scalar _tmp537 = _tmp37 * _tmp516;
  const Scalar _tmp538 = _tmp448 + _tmp450;
  const Scalar _tmp539 = -_tmp536 - _tmp537 + _tmp538;
  const Scalar _tmp540 = _tmp14 * _tmp535 + _tmp48 * _tmp533 - _tmp533 * _tmp91 - _tmp535 * _tmp86 +
                         _tmp539 * _tmp62 - _tmp539 * _tmp77;
  const Scalar _tmp541 =
      -_a_T_b[0] * _tmp517 + _a_T_b[1] * _tmp520 - _a_T_b[2] * _tmp518 + _a_T_b[3] * _tmp519;
  const Scalar _tmp542 = _tmp205 * _tmp541;
  const Scalar _tmp543 = _tmp205 * (-_a_T_b[0] * _tmp518 - _a_T_b[1] * _tmp519 +
                                    _a_T_b[2] * _tmp517 + _a_T_b[3] * _tmp520);
  const Scalar _tmp544 = _tmp212 * _tmp521;
  const Scalar _tmp545 =
      _a_T_b[0] * _tmp519 - _a_T_b[1] * _tmp518 - _a_T_b[2] * _tmp520 + _a_T_b[3] * _tmp517;
  const Scalar _tmp546 = _tmp207 * _tmp521;
  const Scalar _tmp547 = _tmp527 + _tmp534;
  const Scalar _tmp548 = _tmp442 - _tmp498 + _tmp530;
  const Scalar _tmp549 = _tmp536 + _tmp537 + _tmp538;
  const Scalar _tmp550 = _tmp14 * _tmp549 + _tmp48 * _tmp548 + _tmp547 * _tmp62 - _tmp547 * _tmp77 -
                         _tmp548 * _tmp91 - _tmp549 * _tmp86;
  const Scalar _tmp551 = _tmp200 * _tmp521;
  const Scalar _tmp552 = _tmp256 * _tmp521;
  const Scalar _tmp553 = _tmp205 * _tmp545;
  const Scalar _tmp554 = _tmp148 * _tmp551;
  const Scalar _tmp555 = -_tmp135 * _tmp81 - _tmp139 * _tmp90 - _tmp141 * _tmp67;
  const Scalar _tmp556 = -_tmp39 * _tmp81 - _tmp52 * _tmp90 - _tmp57 * _tmp67;
  const Scalar _tmp557 = -_tmp144 * _tmp81 - _tmp145 * _tmp90 - _tmp146 * _tmp67;
  const Scalar _tmp558 = -_tmp144 * _tmp82 - _tmp145 * _tmp88 - _tmp146 * _tmp76;
  const Scalar _tmp559 = -_tmp39 * _tmp82 - _tmp52 * _tmp88 - _tmp57 * _tmp76;
  const Scalar _tmp560 = -_tmp135 * _tmp82 - _tmp139 * _tmp88 - _tmp141 * _tmp76;
  const Scalar _tmp561 = -_tmp135 * _tmp85 - _tmp139 * _tmp89 - _tmp141 * _tmp71;
  const Scalar _tmp562 = -_tmp144 * _tmp85 - _tmp145 * _tmp89 - _tmp146 * _tmp71;
  const Scalar _tmp563 = -_tmp39 * _tmp85 - _tmp52 * _tmp89 - _tmp57 * _tmp71;
  const Scalar _tmp564 = -_tmp6;
  const Scalar _tmp565 = std::pow(_y[3], Scalar(2));
  const Scalar _tmp566 = -_tmp11;
  const Scalar _tmp567 = _tmp565 + _tmp566;
  const Scalar _tmp568 = -_tmp9;
  const Scalar _tmp569 = _tmp41 + _tmp568;
  const Scalar _tmp570 = _y_T_b[5] * (_tmp567 + _tmp569) + _y_T_b[6] * (_tmp564 + _tmp58);
  const Scalar _tmp571 = -_tmp46;
  const Scalar _tmp572 = _tmp40 * _y_T_b[5] + _y_T_b[6] * (_tmp44 + _tmp571);
  const Scalar _tmp573 = -_tmp565;
  const Scalar _tmp574 = _tmp11 + _tmp573;
  const Scalar _tmp575 = _tmp59 * _y_T_b[5] + _y_T_b[6] * (_tmp569 + _tmp574);
  const Scalar _tmp576 = _tmp135 * _tmp570 + _tmp139 * _tmp572 + _tmp141 * _tmp575;
  const Scalar _tmp577 = (Scalar(1) / Scalar(2)) * _tmp98;
  const Scalar _tmp578 = (Scalar(1) / Scalar(2)) * _tmp99;
  const Scalar _tmp579 = -_tmp578;
  const Scalar _tmp580 = (Scalar(1) / Scalar(2)) * _tmp100;
  const Scalar _tmp581 = -_tmp580;
  const Scalar _tmp582 = (Scalar(1) / Scalar(2)) * _tmp101;
  const Scalar _tmp583 = -_tmp582;
  const Scalar _tmp584 = _tmp581 + _tmp583;
  const Scalar _tmp585 = _tmp577 + _tmp579 + _tmp584;
  const Scalar _tmp586 = (Scalar(1) / Scalar(2)) * _tmp93;
  const Scalar _tmp587 = -_tmp586;
  const Scalar _tmp588 = (Scalar(1) / Scalar(2)) * _tmp96;
  const Scalar _tmp589 = -_tmp588;
  const Scalar _tmp590 = _tmp587 + _tmp589;
  const Scalar _tmp591 = (Scalar(1) / Scalar(2)) * _tmp94;
  const Scalar _tmp592 = -_tmp591;
  const Scalar _tmp593 = (Scalar(1) / Scalar(2)) * _tmp95;
  const Scalar _tmp594 = _tmp592 + _tmp593;
  const Scalar _tmp595 = _tmp590 + _tmp594;
  const Scalar _tmp596 = (Scalar(1) / Scalar(2)) * _tmp111;
  const Scalar _tmp597 = (Scalar(1) / Scalar(2)) * _tmp109;
  const Scalar _tmp598 = (Scalar(1) / Scalar(2)) * _tmp108;
  const Scalar _tmp599 = (Scalar(1) / Scalar(2)) * _tmp110;
  const Scalar _tmp600 = _tmp598 - _tmp599;
  const Scalar _tmp601 = _tmp596 + _tmp597 + _tmp600;
  const Scalar _tmp602 = (Scalar(1) / Scalar(2)) * _tmp105;
  const Scalar _tmp603 = -_tmp602;
  const Scalar _tmp604 = (Scalar(1) / Scalar(2)) * _tmp106;
  const Scalar _tmp605 = (Scalar(1) / Scalar(2)) * _tmp104;
  const Scalar _tmp606 = -_tmp605;
  const Scalar _tmp607 = (Scalar(1) / Scalar(2)) * _tmp103;
  const Scalar _tmp608 = -_tmp607;
  const Scalar _tmp609 = _tmp606 + _tmp608;
  const Scalar _tmp610 = _tmp603 + _tmp604 + _tmp609;
  const Scalar _tmp611 = _tmp19 * _tmp595 + _tmp24 * _tmp585 + _tmp31 * _tmp601 + _tmp36 * _tmp610;
  const Scalar _tmp612 = -_tmp19 * _tmp601 - _tmp24 * _tmp610 + _tmp31 * _tmp595 + _tmp36 * _tmp585;
  const Scalar _tmp613 = _tmp19 * _tmp585 - _tmp24 * _tmp595 - _tmp31 * _tmp610 + _tmp36 * _tmp601;
  const Scalar _tmp614 = -_tmp19 * _tmp610 + _tmp24 * _tmp601 - _tmp31 * _tmp585 + _tmp36 * _tmp595;
  const Scalar _tmp615 = _tmp205 * (-_a_T_b[0] * _tmp611 - _a_T_b[1] * _tmp614 +
                                    _a_T_b[2] * _tmp612 + _a_T_b[3] * _tmp613);
  const Scalar _tmp616 =
      _a_T_b[0] * _tmp613 + _a_T_b[1] * _tmp612 + _a_T_b[2] * _tmp614 + _a_T_b[3] * _tmp611;
  const Scalar _tmp617 = _tmp200 * _tmp616;
  const Scalar _tmp618 = _tmp329 * _tmp616;
  const Scalar _tmp619 = _tmp39 * _tmp570 + _tmp52 * _tmp572 + _tmp57 * _tmp575;
  const Scalar _tmp620 = _tmp212 * _tmp616;
  const Scalar _tmp621 = _tmp207 * _tmp616;
  const Scalar _tmp622 =
      -_a_T_b[0] * _tmp612 + _a_T_b[1] * _tmp613 - _a_T_b[2] * _tmp611 + _a_T_b[3] * _tmp614;
  const Scalar _tmp623 = _tmp205 * _tmp622;
  const Scalar _tmp624 = _tmp256 * _tmp616;
  const Scalar _tmp625 = _tmp144 * _tmp570 + _tmp145 * _tmp572 + _tmp146 * _tmp575;
  const Scalar _tmp626 =
      _a_T_b[0] * _tmp614 - _a_T_b[1] * _tmp611 - _a_T_b[2] * _tmp613 + _a_T_b[3] * _tmp612;
  const Scalar _tmp627 = _tmp215 * _tmp616;
  const Scalar _tmp628 = _tmp205 * _tmp626;
  const Scalar _tmp629 = -_tmp4;
  const Scalar _tmp630 = -_tmp41;
  const Scalar _tmp631 =
      _y_T_b[4] * (_tmp2 + _tmp629) + _y_T_b[6] * (_tmp11 + _tmp565 + _tmp568 + _tmp630);
  const Scalar _tmp632 = _tmp630 + _tmp9;
  const Scalar _tmp633 = _tmp5 * _y_T_b[6] + _y_T_b[4] * (_tmp574 + _tmp632);
  const Scalar _tmp634 = _tmp61 * _y_T_b[6] + _y_T_b[4] * (_tmp564 + _tmp7);
  const Scalar _tmp635 = _tmp135 * _tmp633 + _tmp139 * _tmp631 + _tmp141 * _tmp634;
  const Scalar _tmp636 = -_tmp577;
  const Scalar _tmp637 = _tmp579 + _tmp636;
  const Scalar _tmp638 = _tmp580 + _tmp583;
  const Scalar _tmp639 = _tmp637 + _tmp638;
  const Scalar _tmp640 = -_tmp596;
  const Scalar _tmp641 = _tmp598 + _tmp599;
  const Scalar _tmp642 = _tmp597 + _tmp640 + _tmp641;
  const Scalar _tmp643 = -_tmp593;
  const Scalar _tmp644 = _tmp592 + _tmp643;
  const Scalar _tmp645 = _tmp586 + _tmp589 + _tmp644;
  const Scalar _tmp646 = _tmp606 + _tmp607;
  const Scalar _tmp647 = -_tmp604;
  const Scalar _tmp648 = _tmp603 + _tmp647;
  const Scalar _tmp649 = _tmp646 + _tmp648;
  const Scalar _tmp650 = -_tmp19 * _tmp645 + _tmp24 * _tmp639 - _tmp31 * _tmp642 + _tmp36 * _tmp649;
  const Scalar _tmp651 = _tmp19 * _tmp642 - _tmp24 * _tmp649 - _tmp31 * _tmp645 + _tmp36 * _tmp639;
  const Scalar _tmp652 = _tmp19 * _tmp649 + _tmp24 * _tmp642 + _tmp31 * _tmp639 + _tmp36 * _tmp645;
  const Scalar _tmp653 = -_tmp19 * _tmp639 - _tmp24 * _tmp645 + _tmp31 * _tmp649 + _tmp36 * _tmp642;
  const Scalar _tmp654 =
      _a_T_b[0] * _tmp650 - _a_T_b[1] * _tmp652 - _a_T_b[2] * _tmp651 + _a_T_b[3] * _tmp653;
  const Scalar _tmp655 =
      _a_T_b[0] * _tmp651 + _a_T_b[1] * _tmp653 + _a_T_b[2] * _tmp650 + _a_T_b[3] * _tmp652;
  const Scalar _tmp656 = _tmp200 * _tmp655;
  const Scalar _tmp657 = _tmp212 * _tmp655;
  const Scalar _tmp658 = _tmp144 * _tmp633 + _tmp145 * _tmp631 + _tmp146 * _tmp634;
  const Scalar _tmp659 = _tmp256 * _tmp655;
  const Scalar _tmp660 = _tmp207 * _tmp655;
  const Scalar _tmp661 =
      -_a_T_b[0] * _tmp653 + _a_T_b[1] * _tmp651 - _a_T_b[2] * _tmp652 + _a_T_b[3] * _tmp650;
  const Scalar _tmp662 = _tmp205 * _tmp661;
  const Scalar _tmp663 =
      -_a_T_b[0] * _tmp652 - _a_T_b[1] * _tmp650 + _a_T_b[2] * _tmp653 + _a_T_b[3] * _tmp651;
  const Scalar _tmp664 = _tmp205 * _tmp663;
  const Scalar _tmp665 = _tmp39 * _tmp633 + _tmp52 * _tmp631 + _tmp57 * _tmp634;
  const Scalar _tmp666 = _tmp215 * _tmp655;
  const Scalar _tmp667 = _tmp329 * _tmp655;
  const Scalar _tmp668 = _tmp205 * _tmp654;
  const Scalar _tmp669 = _tmp47 * _y_T_b[4] + _y_T_b[5] * (_tmp41 + _tmp566 + _tmp573 + _tmp9);
  const Scalar _tmp670 = _y_T_b[4] * (_tmp567 + _tmp632) + _y_T_b[5] * (_tmp45 + _tmp571);
  const Scalar _tmp671 = _tmp8 * _y_T_b[4] + _y_T_b[5] * (_tmp1 + _tmp629);
  const Scalar _tmp672 = _tmp39 * _tmp671 + _tmp52 * _tmp669 + _tmp57 * _tmp670;
  const Scalar _tmp673 = _tmp578 + _tmp584 + _tmp636;
  const Scalar _tmp674 = _tmp587 + _tmp588 + _tmp644;
  const Scalar _tmp675 = -_tmp597;
  const Scalar _tmp676 = _tmp596 + _tmp641 + _tmp675;
  const Scalar _tmp677 = _tmp602 + _tmp609 + _tmp647;
  const Scalar _tmp678 = -_tmp19 * _tmp674 - _tmp24 * _tmp673 + _tmp31 * _tmp676 + _tmp36 * _tmp677;
  const Scalar _tmp679 = _tmp19 * _tmp676 + _tmp24 * _tmp677 + _tmp31 * _tmp674 + _tmp36 * _tmp673;
  const Scalar _tmp680 = -_tmp19 * _tmp673 + _tmp24 * _tmp674 - _tmp31 * _tmp677 + _tmp36 * _tmp676;
  const Scalar _tmp681 = _tmp19 * _tmp677 - _tmp24 * _tmp676 - _tmp31 * _tmp673 + _tmp36 * _tmp674;
  const Scalar _tmp682 = _tmp205 * (-_a_T_b[0] * _tmp679 - _a_T_b[1] * _tmp680 +
                                    _a_T_b[2] * _tmp678 + _a_T_b[3] * _tmp681);
  const Scalar _tmp683 =
      _a_T_b[0] * _tmp681 + _a_T_b[1] * _tmp678 + _a_T_b[2] * _tmp680 + _a_T_b[3] * _tmp679;
  const Scalar _tmp684 = _tmp200 * _tmp683;
  const Scalar _tmp685 = _tmp212 * _tmp683;
  const Scalar _tmp686 = _tmp207 * _tmp683;
  const Scalar _tmp687 = _tmp215 * _tmp683;
  const Scalar _tmp688 = _tmp256 * _tmp683;
  const Scalar _tmp689 = _tmp144 * _tmp671 + _tmp145 * _tmp669 + _tmp146 * _tmp670;
  const Scalar _tmp690 =
      -_a_T_b[0] * _tmp678 + _a_T_b[1] * _tmp681 - _a_T_b[2] * _tmp679 + _a_T_b[3] * _tmp680;
  const Scalar _tmp691 = _tmp205 * _tmp690;
  const Scalar _tmp692 = _tmp130 * _tmp685;
  const Scalar _tmp693 =
      _a_T_b[0] * _tmp680 - _a_T_b[1] * _tmp679 - _a_T_b[2] * _tmp681 + _a_T_b[3] * _tmp678;
  const Scalar _tmp694 = _tmp135 * _tmp671 + _tmp139 * _tmp669 + _tmp141 * _tmp670;
  const Scalar _tmp695 = _tmp205 * _tmp693;
  const Scalar _tmp696 = _tmp577 + _tmp578 + _tmp638;
  const Scalar _tmp697 = _tmp590 + _tmp591 + _tmp643;
  const Scalar _tmp698 = _tmp19 * _tmp697;
  const Scalar _tmp699 = _tmp600 + _tmp640 + _tmp675;
  const Scalar _tmp700 = _tmp31 * _tmp699;
  const Scalar _tmp701 = _tmp605 + _tmp608 + _tmp648;
  const Scalar _tmp702 = _tmp36 * _tmp701 + _tmp700;
  const Scalar _tmp703 = _tmp24 * _tmp696 + _tmp698 + _tmp702;
  const Scalar _tmp704 = _tmp31 * _tmp697;
  const Scalar _tmp705 = _tmp19 * _tmp699;
  const Scalar _tmp706 = _tmp24 * _tmp701;
  const Scalar _tmp707 = _tmp36 * _tmp696 + _tmp704 - _tmp705 - _tmp706;
  const Scalar _tmp708 = -_tmp24 * _tmp697;
  const Scalar _tmp709 = _tmp36 * _tmp699;
  const Scalar _tmp710 = -_tmp31 * _tmp701 + _tmp709;
  const Scalar _tmp711 = _tmp19 * _tmp696 + _tmp708 + _tmp710;
  const Scalar _tmp712 = _tmp19 * _tmp701;
  const Scalar _tmp713 = _tmp24 * _tmp699;
  const Scalar _tmp714 = _tmp36 * _tmp697 + _tmp713;
  const Scalar _tmp715 = -_tmp31 * _tmp696 - _tmp712 + _tmp714;
  const Scalar _tmp716 =
      _a_T_b[0] * _tmp711 + _a_T_b[1] * _tmp707 + _a_T_b[2] * _tmp715 + _a_T_b[3] * _tmp703;
  const Scalar _tmp717 = _tmp329 * _tmp716;
  const Scalar _tmp718 = _tmp256 * _tmp716;
  const Scalar _tmp719 =
      -_a_T_b[0] * _tmp703 - _a_T_b[1] * _tmp715 + _a_T_b[2] * _tmp707 + _a_T_b[3] * _tmp711;
  const Scalar _tmp720 = _tmp205 * _tmp719;
  const Scalar _tmp721 =
      -_a_T_b[0] * _tmp707 + _a_T_b[1] * _tmp711 - _a_T_b[2] * _tmp703 + _a_T_b[3] * _tmp715;
  const Scalar _tmp722 = _tmp205 * _tmp721;
  const Scalar _tmp723 =
      _a_T_b[0] * _tmp715 - _a_T_b[1] * _tmp703 - _a_T_b[2] * _tmp711 + _a_T_b[3] * _tmp707;
  const Scalar _tmp724 = _tmp200 * _tmp716;
  const Scalar _tmp725 = _tmp215 * _tmp716;
  const Scalar _tmp726 = _tmp212 * _tmp716;
  const Scalar _tmp727 = _tmp207 * _tmp716;
  const Scalar _tmp728 = _tmp205 * _tmp723;
  const Scalar _tmp729 = _tmp148 * _tmp724;
  const Scalar _tmp730 = _tmp581 + _tmp582 + _tmp637;
  const Scalar _tmp731 = _tmp24 * _tmp730;
  const Scalar _tmp732 = _tmp602 + _tmp604 + _tmp646;
  const Scalar _tmp733 = _tmp36 * _tmp732 - _tmp698 - _tmp700 + _tmp731;
  const Scalar _tmp734 = _tmp36 * _tmp730 + _tmp705;
  const Scalar _tmp735 = -_tmp24 * _tmp732 - _tmp704 + _tmp734;
  const Scalar _tmp736 = -_tmp19 * _tmp730;
  const Scalar _tmp737 = _tmp31 * _tmp732 + _tmp708 + _tmp709 + _tmp736;
  const Scalar _tmp738 = _tmp31 * _tmp730;
  const Scalar _tmp739 = _tmp19 * _tmp732 + _tmp714 + _tmp738;
  const Scalar _tmp740 =
      _a_T_b[0] * _tmp735 + _a_T_b[1] * _tmp737 + _a_T_b[2] * _tmp733 + _a_T_b[3] * _tmp739;
  const Scalar _tmp741 = _tmp212 * _tmp740;
  const Scalar _tmp742 = _tmp207 * _tmp740;
  const Scalar _tmp743 =
      -_a_T_b[0] * _tmp739 - _a_T_b[1] * _tmp733 + _a_T_b[2] * _tmp737 + _a_T_b[3] * _tmp735;
  const Scalar _tmp744 = _tmp205 * _tmp743;
  const Scalar _tmp745 = _tmp200 * _tmp740;
  const Scalar _tmp746 = _tmp256 * _tmp740;
  const Scalar _tmp747 =
      -_a_T_b[0] * _tmp737 + _a_T_b[1] * _tmp735 - _a_T_b[2] * _tmp739 + _a_T_b[3] * _tmp733;
  const Scalar _tmp748 = _tmp205 * _tmp747;
  const Scalar _tmp749 = _tmp130 * _tmp741;
  const Scalar _tmp750 =
      _a_T_b[0] * _tmp733 - _a_T_b[1] * _tmp739 - _a_T_b[2] * _tmp735 + _a_T_b[3] * _tmp737;
  const Scalar _tmp751 = _tmp215 * _tmp740;
  const Scalar _tmp752 = _tmp205 * _tmp750;
  const Scalar _tmp753 = _tmp586 + _tmp588 + _tmp594;
  const Scalar _tmp754 = -_tmp19 * _tmp753 + _tmp702 - _tmp731;
  const Scalar _tmp755 = _tmp31 * _tmp753 + _tmp706 + _tmp734;
  const Scalar _tmp756 = _tmp24 * _tmp753 + _tmp710 + _tmp736;
  const Scalar _tmp757 = _tmp36 * _tmp753 + _tmp712 - _tmp713 - _tmp738;
  const Scalar _tmp758 =
      _a_T_b[0] * _tmp757 + _a_T_b[1] * _tmp754 + _a_T_b[2] * _tmp756 + _a_T_b[3] * _tmp755;
  const Scalar _tmp759 = _tmp207 * _tmp758;
  const Scalar _tmp760 = _tmp200 * _tmp758;
  const Scalar _tmp761 = _tmp256 * _tmp758;
  const Scalar _tmp762 = _tmp329 * _tmp758;
  const Scalar _tmp763 = _tmp212 * _tmp758;
  const Scalar _tmp764 =
      _a_T_b[0] * _tmp756 - _a_T_b[1] * _tmp755 - _a_T_b[2] * _tmp757 + _a_T_b[3] * _tmp754;
  const Scalar _tmp765 = _tmp205 * (-_a_T_b[0] * _tmp755 - _a_T_b[1] * _tmp756 +
                                    _a_T_b[2] * _tmp754 + _a_T_b[3] * _tmp757);
  const Scalar _tmp766 =
      -_a_T_b[0] * _tmp754 + _a_T_b[1] * _tmp757 - _a_T_b[2] * _tmp755 + _a_T_b[3] * _tmp756;
  const Scalar _tmp767 = _tmp205 * _tmp766;
  const Scalar _tmp768 = _tmp215 * _tmp758;
  const Scalar _tmp769 = _tmp205 * _tmp764;
  const Scalar _tmp770 = _tmp39 * _tmp5 + _tmp43 * _tmp52 + _tmp57 * _tmp61;
  const Scalar _tmp771 = _tmp144 * _tmp5 + _tmp145 * _tmp43 + _tmp146 * _tmp61;
  const Scalar _tmp772 = _tmp135 * _tmp5 + _tmp139 * _tmp43 + _tmp141 * _tmp61;
  const Scalar _tmp773 = _tmp135 * _tmp8 + _tmp139 * _tmp47 + _tmp141 * _tmp60;
  const Scalar _tmp774 = _tmp39 * _tmp8 + _tmp47 * _tmp52 + _tmp57 * _tmp60;
  const Scalar _tmp775 = _tmp144 * _tmp8 + _tmp145 * _tmp47 + _tmp146 * _tmp60;
  const Scalar _tmp776 = _tmp13 * _tmp144 + _tmp145 * _tmp40 + _tmp146 * _tmp59;
  const Scalar _tmp777 = _tmp13 * _tmp39 + _tmp40 * _tmp52 + _tmp57 * _tmp59;
  const Scalar _tmp778 = _tmp13 * _tmp135 + _tmp139 * _tmp40 + _tmp141 * _tmp59;

  // Output terms (5)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp124 * _tmp129 + _tmp132 * sqrt_info(0, 0) + _tmp142 * sqrt_info(0, 5) +
               _tmp147 * sqrt_info(0, 3) + _tmp150 * sqrt_info(0, 2) + _tmp92 * sqrt_info(0, 4);
  _res(1, 0) = _tmp132 * sqrt_info(1, 0) + _tmp142 * sqrt_info(1, 5) + _tmp147 * sqrt_info(1, 3) +
               _tmp150 * sqrt_info(1, 2) + _tmp151 * sqrt_info(1, 1) + _tmp92 * sqrt_info(1, 4);
  _res(2, 0) = _tmp132 * sqrt_info(2, 0) + _tmp142 * sqrt_info(2, 5) + _tmp147 * sqrt_info(2, 3) +
               _tmp150 * sqrt_info(2, 2) + _tmp151 * sqrt_info(2, 1) + _tmp92 * sqrt_info(2, 4);
  _res(3, 0) = _tmp131 * _tmp152 + _tmp142 * sqrt_info(3, 5) + _tmp147 * sqrt_info(3, 3) +
               _tmp149 * _tmp153 + _tmp151 * sqrt_info(3, 1) + _tmp92 * sqrt_info(3, 4);
  _res(4, 0) = _tmp132 * sqrt_info(4, 0) + _tmp142 * sqrt_info(4, 5) + _tmp147 * sqrt_info(4, 3) +
               _tmp150 * sqrt_info(4, 2) + _tmp151 * sqrt_info(4, 1) + _tmp92 * sqrt_info(4, 4);
  _res(5, 0) = _tmp132 * sqrt_info(5, 0) + _tmp142 * sqrt_info(5, 5) + _tmp147 * sqrt_info(5, 3) +
               _tmp150 * sqrt_info(5, 2) + _tmp151 * sqrt_info(5, 1) + _tmp92 * sqrt_info(5, 4);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 6, 6>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = -_tmp154 * _tmp201 + _tmp154 * _tmp213 + _tmp206 * sqrt_info(0, 2) -
                     _tmp208 * sqrt_info(0, 0) + _tmp209 * sqrt_info(0, 0) + _tmp210 * _tmp211 +
                     _tmp214 * sqrt_info(0, 0) + _tmp216 * sqrt_info(0, 1) +
                     _tmp242 * sqrt_info(0, 4) + _tmp251 * sqrt_info(0, 3) +
                     _tmp255 * sqrt_info(0, 5) - _tmp257 * sqrt_info(0, 1);
    _res_D_x(1, 0) = -_tmp194 * _tmp259 - _tmp194 * _tmp261 - _tmp201 * _tmp258 +
                     _tmp206 * sqrt_info(1, 2) + _tmp209 * sqrt_info(1, 0) + _tmp210 * _tmp260 +
                     _tmp213 * _tmp258 + _tmp214 * sqrt_info(1, 0) + _tmp216 * sqrt_info(1, 1) +
                     _tmp242 * sqrt_info(1, 4) + _tmp251 * sqrt_info(1, 3) +
                     _tmp255 * sqrt_info(1, 5);
    _res_D_x(2, 0) =
        _tmp206 * sqrt_info(2, 2) - _tmp208 * sqrt_info(2, 0) + _tmp209 * sqrt_info(2, 0) +
        _tmp213 * _tmp264 + _tmp214 * sqrt_info(2, 0) + _tmp216 * sqrt_info(2, 1) +
        _tmp242 * sqrt_info(2, 4) + _tmp251 * sqrt_info(2, 3) + _tmp255 * sqrt_info(2, 5) -
        _tmp257 * sqrt_info(2, 1) - _tmp262 * sqrt_info(2, 2) + _tmp263 * sqrt_info(2, 1);
    _res_D_x(3, 0) = _tmp152 * _tmp213 - _tmp194 * _tmp266 + _tmp202 * _tmp265 +
                     _tmp209 * sqrt_info(3, 0) + _tmp210 * _tmp267 + _tmp213 * _tmp268 +
                     _tmp216 * sqrt_info(3, 1) + _tmp242 * sqrt_info(3, 4) +
                     _tmp251 * sqrt_info(3, 3) + _tmp255 * sqrt_info(3, 5) -
                     _tmp257 * sqrt_info(3, 1) - _tmp262 * sqrt_info(3, 2);
    _res_D_x(4, 0) = _tmp194 * _tmp271 - _tmp201 * _tmp269 + _tmp202 * _tmp270 -
                     _tmp208 * sqrt_info(4, 0) + _tmp209 * sqrt_info(4, 0) + _tmp213 * _tmp269 +
                     _tmp214 * sqrt_info(4, 0) + _tmp242 * sqrt_info(4, 4) +
                     _tmp251 * sqrt_info(4, 3) + _tmp255 * sqrt_info(4, 5) -
                     _tmp257 * sqrt_info(4, 1) + _tmp263 * sqrt_info(4, 1);
    _res_D_x(5, 0) =
        _tmp206 * sqrt_info(5, 2) - _tmp208 * sqrt_info(5, 0) + _tmp209 * sqrt_info(5, 0) +
        _tmp213 * _tmp272 + _tmp214 * sqrt_info(5, 0) + _tmp216 * sqrt_info(5, 1) +
        _tmp242 * sqrt_info(5, 4) + _tmp251 * sqrt_info(5, 3) + _tmp255 * sqrt_info(5, 5) -
        _tmp257 * sqrt_info(5, 1) - _tmp262 * sqrt_info(5, 2) + _tmp263 * sqrt_info(5, 1);
    _res_D_x(0, 1) =
        _tmp154 * _tmp323 - _tmp154 * _tmp324 + _tmp211 * _tmp322 - _tmp289 * sqrt_info(0, 1) +
        _tmp291 * sqrt_info(0, 2) + _tmp292 * sqrt_info(0, 1) - _tmp293 * sqrt_info(0, 0) +
        _tmp295 * sqrt_info(0, 0) + _tmp313 * sqrt_info(0, 5) + _tmp321 * sqrt_info(0, 3) +
        _tmp328 * sqrt_info(0, 4) + _tmp330 * sqrt_info(0, 0);
    _res_D_x(1, 1) = _tmp258 * _tmp323 - _tmp258 * _tmp324 - _tmp259 * _tmp288 + _tmp260 * _tmp322 -
                     _tmp261 * _tmp288 + _tmp291 * sqrt_info(1, 2) + _tmp292 * sqrt_info(1, 1) +
                     _tmp294 * _tmp331 + _tmp313 * sqrt_info(1, 5) + _tmp321 * sqrt_info(1, 3) +
                     _tmp328 * sqrt_info(1, 4) + _tmp330 * sqrt_info(1, 0);
    _res_D_x(2, 1) = _tmp264 * _tmp323 - _tmp264 * _tmp324 + _tmp288 * _tmp333 -
                     _tmp289 * sqrt_info(2, 1) + _tmp291 * sqrt_info(2, 2) +
                     _tmp292 * sqrt_info(2, 1) - _tmp293 * sqrt_info(2, 0) +
                     _tmp295 * sqrt_info(2, 0) + _tmp313 * sqrt_info(2, 5) +
                     _tmp321 * sqrt_info(2, 3) + _tmp322 * _tmp332 + _tmp328 * sqrt_info(2, 4);
    _res_D_x(3, 1) = _tmp265 * _tmp290 - _tmp266 * _tmp288 + _tmp267 * _tmp322 + _tmp268 * _tmp323 -
                     _tmp268 * _tmp324 + _tmp288 * _tmp334 - _tmp289 * sqrt_info(3, 1) +
                     _tmp292 * sqrt_info(3, 1) + _tmp295 * sqrt_info(3, 0) +
                     _tmp313 * sqrt_info(3, 5) + _tmp321 * sqrt_info(3, 3) +
                     _tmp328 * sqrt_info(3, 4);
    _res_D_x(4, 1) = -_tmp269 * _tmp324 + _tmp270 * _tmp290 + _tmp271 * _tmp288 +
                     _tmp288 * _tmp336 + _tmp288 * _tmp337 - _tmp289 * sqrt_info(4, 1) -
                     _tmp293 * sqrt_info(4, 0) + _tmp295 * sqrt_info(4, 0) +
                     _tmp313 * sqrt_info(4, 5) + _tmp321 * sqrt_info(4, 3) +
                     _tmp328 * sqrt_info(4, 4) + _tmp335 * sqrt_info(4, 1);
    _res_D_x(5, 1) =
        _tmp272 * _tmp323 - _tmp272 * _tmp324 + _tmp288 * _tmp338 - _tmp289 * sqrt_info(5, 1) +
        _tmp291 * sqrt_info(5, 2) + _tmp292 * sqrt_info(5, 1) - _tmp293 * sqrt_info(5, 0) +
        _tmp295 * sqrt_info(5, 0) + _tmp313 * sqrt_info(5, 5) + _tmp321 * sqrt_info(5, 3) +
        _tmp328 * sqrt_info(5, 4) + _tmp335 * sqrt_info(5, 1);
    _res_D_x(0, 2) =
        -_tmp154 * _tmp351 + _tmp154 * _tmp370 + _tmp211 * _tmp372 - _tmp352 * sqrt_info(0, 0) +
        _tmp353 * sqrt_info(0, 0) + _tmp369 * sqrt_info(0, 4) - _tmp371 * sqrt_info(0, 1) +
        _tmp373 * sqrt_info(0, 1) + _tmp374 * sqrt_info(0, 0) + _tmp376 * sqrt_info(0, 2) +
        _tmp384 * sqrt_info(0, 5) + _tmp388 * sqrt_info(0, 3);
    _res_D_x(1, 2) = -_tmp258 * _tmp351 + _tmp258 * _tmp370 - _tmp259 * _tmp350 +
                     _tmp260 * _tmp372 - _tmp261 * _tmp350 + _tmp350 * _tmp389 +
                     _tmp353 * sqrt_info(1, 0) + _tmp369 * sqrt_info(1, 4) +
                     _tmp374 * sqrt_info(1, 0) + _tmp376 * sqrt_info(1, 2) +
                     _tmp384 * sqrt_info(1, 5) + _tmp388 * sqrt_info(1, 3);
    _res_D_x(2, 2) =
        -_tmp264 * _tmp351 + _tmp264 * _tmp370 - _tmp352 * sqrt_info(2, 0) +
        _tmp353 * sqrt_info(2, 0) + _tmp369 * sqrt_info(2, 4) - _tmp371 * sqrt_info(2, 1) +
        _tmp373 * sqrt_info(2, 1) + _tmp374 * sqrt_info(2, 0) + _tmp376 * sqrt_info(2, 2) +
        _tmp384 * sqrt_info(2, 5) + _tmp388 * sqrt_info(2, 3) + _tmp390 * sqrt_info(2, 1);
    _res_D_x(3, 2) = _tmp153 * _tmp375 - _tmp266 * _tmp350 - _tmp268 * _tmp351 + _tmp268 * _tmp370 +
                     _tmp334 * _tmp350 + _tmp369 * sqrt_info(3, 4) - _tmp371 * sqrt_info(3, 1) +
                     _tmp373 * sqrt_info(3, 1) + _tmp374 * sqrt_info(3, 0) +
                     _tmp384 * sqrt_info(3, 5) + _tmp388 * sqrt_info(3, 3) +
                     _tmp390 * sqrt_info(3, 1);
    _res_D_x(4, 2) =
        -_tmp269 * _tmp351 + _tmp271 * _tmp350 + _tmp336 * _tmp350 - _tmp352 * sqrt_info(4, 0) +
        _tmp353 * sqrt_info(4, 0) + _tmp369 * sqrt_info(4, 4) - _tmp371 * sqrt_info(4, 1) +
        _tmp374 * sqrt_info(4, 0) + _tmp376 * sqrt_info(4, 2) + _tmp384 * sqrt_info(4, 5) +
        _tmp388 * sqrt_info(4, 3) + _tmp390 * sqrt_info(4, 1);
    _res_D_x(5, 2) =
        -_tmp272 * _tmp351 + _tmp272 * _tmp370 - _tmp352 * sqrt_info(5, 0) +
        _tmp353 * sqrt_info(5, 0) + _tmp369 * sqrt_info(5, 4) - _tmp371 * sqrt_info(5, 1) +
        _tmp373 * sqrt_info(5, 1) + _tmp374 * sqrt_info(5, 0) + _tmp376 * sqrt_info(5, 2) +
        _tmp384 * sqrt_info(5, 5) + _tmp388 * sqrt_info(5, 3) + _tmp390 * sqrt_info(5, 1);
    _res_D_x(0, 3) =
        _tmp392 * sqrt_info(0, 4) + _tmp394 * sqrt_info(0, 5) + _tmp396 * sqrt_info(0, 3);
    _res_D_x(1, 3) =
        _tmp392 * sqrt_info(1, 4) + _tmp394 * sqrt_info(1, 5) + _tmp396 * sqrt_info(1, 3);
    _res_D_x(2, 3) =
        _tmp392 * sqrt_info(2, 4) + _tmp394 * sqrt_info(2, 5) + _tmp396 * sqrt_info(2, 3);
    _res_D_x(3, 3) =
        _tmp392 * sqrt_info(3, 4) + _tmp394 * sqrt_info(3, 5) + _tmp396 * sqrt_info(3, 3);
    _res_D_x(4, 3) =
        _tmp392 * sqrt_info(4, 4) + _tmp394 * sqrt_info(4, 5) + _tmp396 * sqrt_info(4, 3);
    _res_D_x(5, 3) =
        _tmp392 * sqrt_info(5, 4) + _tmp394 * sqrt_info(5, 5) + _tmp396 * sqrt_info(5, 3);
    _res_D_x(0, 4) =
        _tmp398 * sqrt_info(0, 5) + _tmp399 * sqrt_info(0, 3) + _tmp400 * sqrt_info(0, 4);
    _res_D_x(1, 4) =
        _tmp398 * sqrt_info(1, 5) + _tmp399 * sqrt_info(1, 3) + _tmp400 * sqrt_info(1, 4);
    _res_D_x(2, 4) =
        _tmp398 * sqrt_info(2, 5) + _tmp399 * sqrt_info(2, 3) + _tmp400 * sqrt_info(2, 4);
    _res_D_x(3, 4) =
        _tmp398 * sqrt_info(3, 5) + _tmp399 * sqrt_info(3, 3) + _tmp400 * sqrt_info(3, 4);
    _res_D_x(4, 4) =
        _tmp398 * sqrt_info(4, 5) + _tmp399 * sqrt_info(4, 3) + _tmp400 * sqrt_info(4, 4);
    _res_D_x(5, 4) =
        _tmp398 * sqrt_info(5, 5) + _tmp399 * sqrt_info(5, 3) + _tmp400 * sqrt_info(5, 4);
    _res_D_x(0, 5) =
        _tmp401 * sqrt_info(0, 4) + _tmp402 * sqrt_info(0, 3) + _tmp403 * sqrt_info(0, 5);
    _res_D_x(1, 5) =
        _tmp401 * sqrt_info(1, 4) + _tmp402 * sqrt_info(1, 3) + _tmp403 * sqrt_info(1, 5);
    _res_D_x(2, 5) =
        _tmp401 * sqrt_info(2, 4) + _tmp402 * sqrt_info(2, 3) + _tmp403 * sqrt_info(2, 5);
    _res_D_x(3, 5) =
        _tmp401 * sqrt_info(3, 4) + _tmp402 * sqrt_info(3, 3) + _tmp403 * sqrt_info(3, 5);
    _res_D_x(4, 5) =
        _tmp401 * sqrt_info(4, 4) + _tmp402 * sqrt_info(4, 3) + _tmp403 * sqrt_info(4, 5);
    _res_D_x(5, 5) =
        _tmp401 * sqrt_info(5, 4) + _tmp402 * sqrt_info(5, 3) + _tmp403 * sqrt_info(5, 5);
  }

  if (res_D_x_T_a != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 6, 6>> _res_D_x_T_a{res_D_x_T_a};

    _res_D_x_T_a(0, 0) =
        _tmp124 * _tmp458 + _tmp154 * _tmp456 - _tmp154 * _tmp457 - _tmp425 * sqrt_info(0, 0) +
        _tmp427 * sqrt_info(0, 2) + _tmp428 * sqrt_info(0, 1) + _tmp444 * sqrt_info(0, 5) +
        _tmp453 * sqrt_info(0, 3) + _tmp454 * sqrt_info(0, 0) - _tmp455 * sqrt_info(0, 1) +
        _tmp459 * sqrt_info(0, 0) + _tmp464 * sqrt_info(0, 4);
    _res_D_x_T_a(1, 0) = _tmp258 * _tmp456 - _tmp258 * _tmp457 - _tmp259 * _tmp424 -
                         _tmp261 * _tmp424 + _tmp427 * sqrt_info(1, 2) + _tmp428 * sqrt_info(1, 1) +
                         _tmp444 * sqrt_info(1, 5) + _tmp453 * sqrt_info(1, 3) +
                         _tmp454 * sqrt_info(1, 0) + _tmp459 * sqrt_info(1, 0) +
                         _tmp464 * sqrt_info(1, 4) + _tmp465 * sqrt_info(1, 1);
    _res_D_x_T_a(2, 0) =
        _tmp264 * _tmp456 - _tmp264 * _tmp457 + _tmp333 * _tmp424 - _tmp425 * sqrt_info(2, 0) +
        _tmp427 * sqrt_info(2, 2) + _tmp428 * sqrt_info(2, 1) + _tmp444 * sqrt_info(2, 5) +
        _tmp453 * sqrt_info(2, 3) - _tmp455 * sqrt_info(2, 1) + _tmp459 * sqrt_info(2, 0) +
        _tmp464 * sqrt_info(2, 4) + _tmp465 * sqrt_info(2, 1);
    _res_D_x_T_a(3, 0) = _tmp265 * _tmp426 - _tmp266 * _tmp424 + _tmp268 * _tmp456 +
                         _tmp334 * _tmp424 + _tmp428 * sqrt_info(3, 1) + _tmp444 * sqrt_info(3, 5) +
                         _tmp453 * sqrt_info(3, 3) - _tmp455 * sqrt_info(3, 1) +
                         _tmp459 * sqrt_info(3, 0) + _tmp464 * sqrt_info(3, 4) +
                         _tmp465 * sqrt_info(3, 1) - _tmp466 * sqrt_info(3, 2);
    _res_D_x_T_a(4, 0) = -_tmp269 * _tmp457 + _tmp271 * _tmp424 + _tmp336 * _tmp424 +
                         _tmp337 * _tmp424 - _tmp424 * _tmp467 - _tmp425 * sqrt_info(4, 0) +
                         _tmp427 * sqrt_info(4, 2) + _tmp444 * sqrt_info(4, 5) +
                         _tmp453 * sqrt_info(4, 3) + _tmp459 * sqrt_info(4, 0) +
                         _tmp464 * sqrt_info(4, 4) + _tmp465 * sqrt_info(4, 1);
    _res_D_x_T_a(5, 0) =
        _tmp272 * _tmp456 + _tmp338 * _tmp424 - _tmp424 * _tmp468 - _tmp425 * sqrt_info(5, 0) +
        _tmp427 * sqrt_info(5, 2) + _tmp428 * sqrt_info(5, 1) + _tmp444 * sqrt_info(5, 5) +
        _tmp453 * sqrt_info(5, 3) + _tmp459 * sqrt_info(5, 0) + _tmp464 * sqrt_info(5, 4) +
        _tmp465 * sqrt_info(5, 1) - _tmp466 * sqrt_info(5, 2);
    _res_D_x_T_a(0, 1) =
        _tmp154 * _tmp511 + _tmp211 * _tmp512 - _tmp480 * sqrt_info(0, 0) +
        _tmp481 * sqrt_info(0, 0) + _tmp482 * sqrt_info(0, 1) + _tmp495 * sqrt_info(0, 4) +
        _tmp496 * sqrt_info(0, 0) - _tmp497 * sqrt_info(0, 1) + _tmp504 * sqrt_info(0, 3) +
        _tmp508 * sqrt_info(0, 5) + _tmp510 * sqrt_info(0, 2) - _tmp514 * sqrt_info(0, 2);
    _res_D_x_T_a(1, 1) = _tmp258 * _tmp511 - _tmp258 * _tmp513 - _tmp259 * _tmp479 +
                         _tmp260 * _tmp512 - _tmp261 * _tmp479 + _tmp389 * _tmp479 +
                         _tmp481 * sqrt_info(1, 0) + _tmp495 * sqrt_info(1, 4) +
                         _tmp496 * sqrt_info(1, 0) + _tmp504 * sqrt_info(1, 3) +
                         _tmp508 * sqrt_info(1, 5) + _tmp510 * sqrt_info(1, 2);
    _res_D_x_T_a(2, 1) =
        _tmp264 * _tmp511 - _tmp480 * sqrt_info(2, 0) + _tmp481 * sqrt_info(2, 0) +
        _tmp482 * sqrt_info(2, 1) + _tmp495 * sqrt_info(2, 4) + _tmp496 * sqrt_info(2, 0) -
        _tmp497 * sqrt_info(2, 1) + _tmp504 * sqrt_info(2, 3) + _tmp508 * sqrt_info(2, 5) +
        _tmp510 * sqrt_info(2, 2) - _tmp514 * sqrt_info(2, 2) + _tmp515 * sqrt_info(2, 1);
    _res_D_x_T_a(3, 1) = _tmp265 * _tmp509 - _tmp266 * _tmp479 + _tmp267 * _tmp512 +
                         _tmp268 * _tmp511 + _tmp334 * _tmp479 + _tmp481 * sqrt_info(3, 0) +
                         _tmp482 * sqrt_info(3, 1) + _tmp495 * sqrt_info(3, 4) -
                         _tmp497 * sqrt_info(3, 1) + _tmp504 * sqrt_info(3, 3) +
                         _tmp508 * sqrt_info(3, 5) - _tmp514 * sqrt_info(3, 2);
    _res_D_x_T_a(4, 1) = -_tmp269 * _tmp513 + _tmp271 * _tmp479 + _tmp336 * _tmp479 -
                         _tmp467 * _tmp479 - _tmp480 * sqrt_info(4, 0) + _tmp481 * sqrt_info(4, 0) +
                         _tmp495 * sqrt_info(4, 4) + _tmp496 * sqrt_info(4, 0) +
                         _tmp504 * sqrt_info(4, 3) + _tmp508 * sqrt_info(4, 5) +
                         _tmp510 * sqrt_info(4, 2) + _tmp515 * sqrt_info(4, 1);
    _res_D_x_T_a(5, 1) =
        _tmp272 * _tmp511 - _tmp468 * _tmp479 - _tmp480 * sqrt_info(5, 0) +
        _tmp481 * sqrt_info(5, 0) + _tmp482 * sqrt_info(5, 1) + _tmp495 * sqrt_info(5, 4) +
        _tmp496 * sqrt_info(5, 0) + _tmp504 * sqrt_info(5, 3) + _tmp508 * sqrt_info(5, 5) +
        _tmp510 * sqrt_info(5, 2) - _tmp514 * sqrt_info(5, 2) + _tmp515 * sqrt_info(5, 1);
    _res_D_x_T_a(0, 2) =
        _tmp154 * _tmp544 - _tmp154 * _tmp551 + _tmp211 * _tmp545 + _tmp522 * sqrt_info(0, 1) +
        _tmp523 * sqrt_info(0, 0) + _tmp532 * sqrt_info(0, 3) + _tmp540 * sqrt_info(0, 5) +
        _tmp542 * sqrt_info(0, 2) + _tmp543 * sqrt_info(0, 0) - _tmp546 * sqrt_info(0, 0) +
        _tmp550 * sqrt_info(0, 4) - _tmp552 * sqrt_info(0, 1);
    _res_D_x_T_a(1, 2) = _tmp258 * _tmp544 - _tmp258 * _tmp551 - _tmp259 * _tmp521 +
                         _tmp260 * _tmp545 - _tmp261 * _tmp521 + _tmp389 * _tmp521 +
                         _tmp523 * sqrt_info(1, 0) + _tmp532 * sqrt_info(1, 3) +
                         _tmp540 * sqrt_info(1, 5) + _tmp542 * sqrt_info(1, 2) +
                         _tmp543 * sqrt_info(1, 0) + _tmp550 * sqrt_info(1, 4);
    _res_D_x_T_a(2, 2) =
        _tmp264 * _tmp544 + _tmp522 * sqrt_info(2, 1) + _tmp523 * sqrt_info(2, 0) +
        _tmp532 * sqrt_info(2, 3) + _tmp540 * sqrt_info(2, 5) + _tmp542 * sqrt_info(2, 2) +
        _tmp543 * sqrt_info(2, 0) - _tmp546 * sqrt_info(2, 0) + _tmp550 * sqrt_info(2, 4) -
        _tmp552 * sqrt_info(2, 1) + _tmp553 * sqrt_info(2, 1) - _tmp554 * sqrt_info(2, 2);
    _res_D_x_T_a(3, 2) = _tmp265 * _tmp541 - _tmp266 * _tmp521 + _tmp267 * _tmp545 +
                         _tmp268 * _tmp544 + _tmp334 * _tmp521 + _tmp522 * sqrt_info(3, 1) +
                         _tmp532 * sqrt_info(3, 3) + _tmp540 * sqrt_info(3, 5) +
                         _tmp543 * sqrt_info(3, 0) + _tmp550 * sqrt_info(3, 4) -
                         _tmp552 * sqrt_info(3, 1) - _tmp554 * sqrt_info(3, 2);
    _res_D_x_T_a(4, 2) = -_tmp269 * _tmp551 + _tmp271 * _tmp521 + _tmp336 * _tmp521 +
                         _tmp337 * _tmp521 + _tmp532 * sqrt_info(4, 3) + _tmp540 * sqrt_info(4, 5) +
                         _tmp542 * sqrt_info(4, 2) + _tmp543 * sqrt_info(4, 0) -
                         _tmp546 * sqrt_info(4, 0) + _tmp550 * sqrt_info(4, 4) -
                         _tmp552 * sqrt_info(4, 1) + _tmp553 * sqrt_info(4, 1);
    _res_D_x_T_a(5, 2) =
        _tmp272 * _tmp544 - _tmp468 * _tmp521 + _tmp522 * sqrt_info(5, 1) +
        _tmp523 * sqrt_info(5, 0) + _tmp532 * sqrt_info(5, 3) + _tmp540 * sqrt_info(5, 5) +
        _tmp542 * sqrt_info(5, 2) + _tmp543 * sqrt_info(5, 0) - _tmp546 * sqrt_info(5, 0) +
        _tmp550 * sqrt_info(5, 4) + _tmp553 * sqrt_info(5, 1) - _tmp554 * sqrt_info(5, 2);
    _res_D_x_T_a(0, 3) =
        _tmp555 * sqrt_info(0, 5) + _tmp556 * sqrt_info(0, 4) + _tmp557 * sqrt_info(0, 3);
    _res_D_x_T_a(1, 3) =
        _tmp555 * sqrt_info(1, 5) + _tmp556 * sqrt_info(1, 4) + _tmp557 * sqrt_info(1, 3);
    _res_D_x_T_a(2, 3) =
        _tmp555 * sqrt_info(2, 5) + _tmp556 * sqrt_info(2, 4) + _tmp557 * sqrt_info(2, 3);
    _res_D_x_T_a(3, 3) =
        _tmp555 * sqrt_info(3, 5) + _tmp556 * sqrt_info(3, 4) + _tmp557 * sqrt_info(3, 3);
    _res_D_x_T_a(4, 3) =
        _tmp555 * sqrt_info(4, 5) + _tmp556 * sqrt_info(4, 4) + _tmp557 * sqrt_info(4, 3);
    _res_D_x_T_a(5, 3) =
        _tmp555 * sqrt_info(5, 5) + _tmp556 * sqrt_info(5, 4) + _tmp557 * sqrt_info(5, 3);
    _res_D_x_T_a(0, 4) =
        _tmp558 * sqrt_info(0, 3) + _tmp559 * sqrt_info(0, 4) + _tmp560 * sqrt_info(0, 5);
    _res_D_x_T_a(1, 4) =
        _tmp558 * sqrt_info(1, 3) + _tmp559 * sqrt_info(1, 4) + _tmp560 * sqrt_info(1, 5);
    _res_D_x_T_a(2, 4) =
        _tmp558 * sqrt_info(2, 3) + _tmp559 * sqrt_info(2, 4) + _tmp560 * sqrt_info(2, 5);
    _res_D_x_T_a(3, 4) =
        _tmp558 * sqrt_info(3, 3) + _tmp559 * sqrt_info(3, 4) + _tmp560 * sqrt_info(3, 5);
    _res_D_x_T_a(4, 4) =
        _tmp558 * sqrt_info(4, 3) + _tmp559 * sqrt_info(4, 4) + _tmp560 * sqrt_info(4, 5);
    _res_D_x_T_a(5, 4) =
        _tmp558 * sqrt_info(5, 3) + _tmp559 * sqrt_info(5, 4) + _tmp560 * sqrt_info(5, 5);
    _res_D_x_T_a(0, 5) =
        _tmp561 * sqrt_info(0, 5) + _tmp562 * sqrt_info(0, 3) + _tmp563 * sqrt_info(0, 4);
    _res_D_x_T_a(1, 5) =
        _tmp561 * sqrt_info(1, 5) + _tmp562 * sqrt_info(1, 3) + _tmp563 * sqrt_info(1, 4);
    _res_D_x_T_a(2, 5) =
        _tmp561 * sqrt_info(2, 5) + _tmp562 * sqrt_info(2, 3) + _tmp563 * sqrt_info(2, 4);
    _res_D_x_T_a(3, 5) =
        _tmp561 * sqrt_info(3, 5) + _tmp562 * sqrt_info(3, 3) + _tmp563 * sqrt_info(3, 4);
    _res_D_x_T_a(4, 5) =
        _tmp561 * sqrt_info(4, 5) + _tmp562 * sqrt_info(4, 3) + _tmp563 * sqrt_info(4, 4);
    _res_D_x_T_a(5, 5) =
        _tmp561 * sqrt_info(5, 5) + _tmp562 * sqrt_info(5, 3) + _tmp563 * sqrt_info(5, 4);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 6, 6>> _res_D_y{res_D_y};

    _res_D_y(0, 0) =
        -_tmp154 * _tmp617 + _tmp154 * _tmp620 + _tmp211 * _tmp626 + _tmp576 * sqrt_info(0, 5) +
        _tmp615 * sqrt_info(0, 0) + _tmp618 * sqrt_info(0, 0) + _tmp619 * sqrt_info(0, 4) -
        _tmp621 * sqrt_info(0, 0) + _tmp623 * sqrt_info(0, 2) - _tmp624 * sqrt_info(0, 1) +
        _tmp625 * sqrt_info(0, 3) + _tmp627 * sqrt_info(0, 1);
    _res_D_y(1, 0) = -_tmp258 * _tmp617 + _tmp258 * _tmp620 - _tmp259 * _tmp616 +
                     _tmp260 * _tmp626 - _tmp261 * _tmp616 + _tmp389 * _tmp616 +
                     _tmp576 * sqrt_info(1, 5) + _tmp615 * sqrt_info(1, 0) +
                     _tmp618 * sqrt_info(1, 0) + _tmp619 * sqrt_info(1, 4) +
                     _tmp623 * sqrt_info(1, 2) + _tmp625 * sqrt_info(1, 3);
    _res_D_y(2, 0) = -_tmp264 * _tmp617 + _tmp264 * _tmp620 + _tmp332 * _tmp626 +
                     _tmp333 * _tmp616 + _tmp576 * sqrt_info(2, 5) + _tmp615 * sqrt_info(2, 0) +
                     _tmp619 * sqrt_info(2, 4) - _tmp621 * sqrt_info(2, 0) +
                     _tmp623 * sqrt_info(2, 2) - _tmp624 * sqrt_info(2, 1) +
                     _tmp625 * sqrt_info(2, 3) + _tmp627 * sqrt_info(2, 1);
    _res_D_y(3, 0) = _tmp265 * _tmp622 - _tmp266 * _tmp616 + _tmp267 * _tmp626 - _tmp268 * _tmp617 +
                     _tmp268 * _tmp620 + _tmp334 * _tmp616 + _tmp576 * sqrt_info(3, 5) +
                     _tmp615 * sqrt_info(3, 0) + _tmp619 * sqrt_info(3, 4) -
                     _tmp624 * sqrt_info(3, 1) + _tmp625 * sqrt_info(3, 3) +
                     _tmp627 * sqrt_info(3, 1);
    _res_D_y(4, 0) = -_tmp269 * _tmp617 + _tmp271 * _tmp616 + _tmp336 * _tmp616 +
                     _tmp337 * _tmp616 + _tmp576 * sqrt_info(4, 5) + _tmp615 * sqrt_info(4, 0) +
                     _tmp619 * sqrt_info(4, 4) - _tmp621 * sqrt_info(4, 0) +
                     _tmp623 * sqrt_info(4, 2) - _tmp624 * sqrt_info(4, 1) +
                     _tmp625 * sqrt_info(4, 3) + _tmp628 * sqrt_info(4, 1);
    _res_D_y(5, 0) =
        -_tmp272 * _tmp617 + _tmp272 * _tmp620 - _tmp468 * _tmp616 + _tmp576 * sqrt_info(5, 5) +
        _tmp615 * sqrt_info(5, 0) + _tmp618 * sqrt_info(5, 0) + _tmp619 * sqrt_info(5, 4) -
        _tmp621 * sqrt_info(5, 0) + _tmp623 * sqrt_info(5, 2) + _tmp625 * sqrt_info(5, 3) +
        _tmp627 * sqrt_info(5, 1) + _tmp628 * sqrt_info(5, 1);
    _res_D_y(0, 1) =
        -_tmp154 * _tmp656 + _tmp154 * _tmp657 + _tmp211 * _tmp654 + _tmp635 * sqrt_info(0, 5) +
        _tmp658 * sqrt_info(0, 3) - _tmp659 * sqrt_info(0, 1) - _tmp660 * sqrt_info(0, 0) +
        _tmp662 * sqrt_info(0, 2) + _tmp664 * sqrt_info(0, 0) + _tmp665 * sqrt_info(0, 4) +
        _tmp666 * sqrt_info(0, 1) + _tmp667 * sqrt_info(0, 0);
    _res_D_y(1, 1) = -_tmp258 * _tmp656 + _tmp258 * _tmp657 - _tmp259 * _tmp655 +
                     _tmp260 * _tmp654 - _tmp261 * _tmp655 + _tmp331 * _tmp663 +
                     _tmp635 * sqrt_info(1, 5) + _tmp658 * sqrt_info(1, 3) +
                     _tmp662 * sqrt_info(1, 2) + _tmp665 * sqrt_info(1, 4) +
                     _tmp666 * sqrt_info(1, 1) + _tmp667 * sqrt_info(1, 0);
    _res_D_y(2, 1) =
        -_tmp264 * _tmp656 + _tmp264 * _tmp657 + _tmp333 * _tmp655 + _tmp635 * sqrt_info(2, 5) +
        _tmp658 * sqrt_info(2, 3) - _tmp659 * sqrt_info(2, 1) - _tmp660 * sqrt_info(2, 0) +
        _tmp662 * sqrt_info(2, 2) + _tmp664 * sqrt_info(2, 0) + _tmp665 * sqrt_info(2, 4) +
        _tmp666 * sqrt_info(2, 1) + _tmp668 * sqrt_info(2, 1);
    _res_D_y(3, 1) = _tmp265 * _tmp661 - _tmp266 * _tmp655 - _tmp268 * _tmp656 + _tmp268 * _tmp657 +
                     _tmp334 * _tmp655 + _tmp635 * sqrt_info(3, 5) + _tmp658 * sqrt_info(3, 3) -
                     _tmp659 * sqrt_info(3, 1) + _tmp664 * sqrt_info(3, 0) +
                     _tmp665 * sqrt_info(3, 4) + _tmp666 * sqrt_info(3, 1) +
                     _tmp668 * sqrt_info(3, 1);
    _res_D_y(4, 1) = -_tmp269 * _tmp656 + _tmp269 * _tmp657 + _tmp270 * _tmp661 +
                     _tmp271 * _tmp655 + _tmp337 * _tmp655 + _tmp635 * sqrt_info(4, 5) +
                     _tmp658 * sqrt_info(4, 3) - _tmp659 * sqrt_info(4, 1) -
                     _tmp660 * sqrt_info(4, 0) + _tmp664 * sqrt_info(4, 0) +
                     _tmp665 * sqrt_info(4, 4) + _tmp668 * sqrt_info(4, 1);
    _res_D_y(5, 1) =
        -_tmp272 * _tmp656 + _tmp272 * _tmp657 + _tmp338 * _tmp655 + _tmp635 * sqrt_info(5, 5) +
        _tmp658 * sqrt_info(5, 3) - _tmp659 * sqrt_info(5, 1) - _tmp660 * sqrt_info(5, 0) +
        _tmp662 * sqrt_info(5, 2) + _tmp664 * sqrt_info(5, 0) + _tmp665 * sqrt_info(5, 4) +
        _tmp666 * sqrt_info(5, 1) + _tmp668 * sqrt_info(5, 1);
    _res_D_y(0, 2) =
        -_tmp154 * _tmp684 + _tmp154 * _tmp685 + _tmp211 * _tmp693 + _tmp672 * sqrt_info(0, 4) +
        _tmp682 * sqrt_info(0, 0) - _tmp686 * sqrt_info(0, 0) + _tmp687 * sqrt_info(0, 1) -
        _tmp688 * sqrt_info(0, 1) + _tmp689 * sqrt_info(0, 3) + _tmp691 * sqrt_info(0, 2) +
        _tmp692 * sqrt_info(0, 0) + _tmp694 * sqrt_info(0, 5);
    _res_D_y(1, 2) = -_tmp258 * _tmp684 + _tmp258 * _tmp685 - _tmp259 * _tmp683 +
                     _tmp260 * _tmp693 - _tmp261 * _tmp683 + _tmp672 * sqrt_info(1, 4) +
                     _tmp682 * sqrt_info(1, 0) + _tmp687 * sqrt_info(1, 1) +
                     _tmp689 * sqrt_info(1, 3) + _tmp691 * sqrt_info(1, 2) +
                     _tmp692 * sqrt_info(1, 0) + _tmp694 * sqrt_info(1, 5);
    _res_D_y(2, 2) =
        -_tmp264 * _tmp684 + _tmp264 * _tmp685 + _tmp672 * sqrt_info(2, 4) +
        _tmp682 * sqrt_info(2, 0) - _tmp686 * sqrt_info(2, 0) + _tmp687 * sqrt_info(2, 1) -
        _tmp688 * sqrt_info(2, 1) + _tmp689 * sqrt_info(2, 3) + _tmp691 * sqrt_info(2, 2) +
        _tmp692 * sqrt_info(2, 0) + _tmp694 * sqrt_info(2, 5) + _tmp695 * sqrt_info(2, 1);
    _res_D_y(3, 2) = _tmp152 * _tmp685 + _tmp265 * _tmp690 - _tmp266 * _tmp683 + _tmp267 * _tmp693 -
                     _tmp268 * _tmp684 + _tmp268 * _tmp685 + _tmp672 * sqrt_info(3, 4) +
                     _tmp682 * sqrt_info(3, 0) + _tmp687 * sqrt_info(3, 1) -
                     _tmp688 * sqrt_info(3, 1) + _tmp689 * sqrt_info(3, 3) +
                     _tmp694 * sqrt_info(3, 5);
    _res_D_y(4, 2) =
        -_tmp269 * _tmp684 + _tmp269 * _tmp685 + _tmp271 * _tmp683 + _tmp672 * sqrt_info(4, 4) +
        _tmp682 * sqrt_info(4, 0) - _tmp686 * sqrt_info(4, 0) - _tmp688 * sqrt_info(4, 1) +
        _tmp689 * sqrt_info(4, 3) + _tmp691 * sqrt_info(4, 2) + _tmp692 * sqrt_info(4, 0) +
        _tmp694 * sqrt_info(4, 5) + _tmp695 * sqrt_info(4, 1);
    _res_D_y(5, 2) =
        -_tmp272 * _tmp684 + _tmp272 * _tmp685 + _tmp672 * sqrt_info(5, 4) +
        _tmp682 * sqrt_info(5, 0) - _tmp686 * sqrt_info(5, 0) + _tmp687 * sqrt_info(5, 1) -
        _tmp688 * sqrt_info(5, 1) + _tmp689 * sqrt_info(5, 3) + _tmp691 * sqrt_info(5, 2) +
        _tmp692 * sqrt_info(5, 0) + _tmp694 * sqrt_info(5, 5) + _tmp695 * sqrt_info(5, 1);
    _res_D_y(0, 3) =
        _tmp139 * sqrt_info(0, 5) + _tmp145 * sqrt_info(0, 3) + _tmp52 * sqrt_info(0, 4);
    _res_D_y(1, 3) =
        _tmp139 * sqrt_info(1, 5) + _tmp145 * sqrt_info(1, 3) + _tmp52 * sqrt_info(1, 4);
    _res_D_y(2, 3) =
        _tmp139 * sqrt_info(2, 5) + _tmp145 * sqrt_info(2, 3) + _tmp52 * sqrt_info(2, 4);
    _res_D_y(3, 3) =
        _tmp139 * sqrt_info(3, 5) + _tmp145 * sqrt_info(3, 3) + _tmp52 * sqrt_info(3, 4);
    _res_D_y(4, 3) =
        _tmp139 * sqrt_info(4, 5) + _tmp145 * sqrt_info(4, 3) + _tmp52 * sqrt_info(4, 4);
    _res_D_y(5, 3) =
        _tmp139 * sqrt_info(5, 5) + _tmp145 * sqrt_info(5, 3) + _tmp52 * sqrt_info(5, 4);
    _res_D_y(0, 4) =
        _tmp141 * sqrt_info(0, 5) + _tmp146 * sqrt_info(0, 3) + _tmp57 * sqrt_info(0, 4);
    _res_D_y(1, 4) =
        _tmp141 * sqrt_info(1, 5) + _tmp146 * sqrt_info(1, 3) + _tmp57 * sqrt_info(1, 4);
    _res_D_y(2, 4) =
        _tmp141 * sqrt_info(2, 5) + _tmp146 * sqrt_info(2, 3) + _tmp57 * sqrt_info(2, 4);
    _res_D_y(3, 4) =
        _tmp141 * sqrt_info(3, 5) + _tmp146 * sqrt_info(3, 3) + _tmp57 * sqrt_info(3, 4);
    _res_D_y(4, 4) =
        _tmp141 * sqrt_info(4, 5) + _tmp146 * sqrt_info(4, 3) + _tmp57 * sqrt_info(4, 4);
    _res_D_y(5, 4) =
        _tmp141 * sqrt_info(5, 5) + _tmp146 * sqrt_info(5, 3) + _tmp57 * sqrt_info(5, 4);
    _res_D_y(0, 5) =
        _tmp135 * sqrt_info(0, 5) + _tmp144 * sqrt_info(0, 3) + _tmp39 * sqrt_info(0, 4);
    _res_D_y(1, 5) =
        _tmp135 * sqrt_info(1, 5) + _tmp144 * sqrt_info(1, 3) + _tmp39 * sqrt_info(1, 4);
    _res_D_y(2, 5) =
        _tmp135 * sqrt_info(2, 5) + _tmp144 * sqrt_info(2, 3) + _tmp39 * sqrt_info(2, 4);
    _res_D_y(3, 5) =
        _tmp135 * sqrt_info(3, 5) + _tmp144 * sqrt_info(3, 3) + _tmp39 * sqrt_info(3, 4);
    _res_D_y(4, 5) =
        _tmp135 * sqrt_info(4, 5) + _tmp144 * sqrt_info(4, 3) + _tmp39 * sqrt_info(4, 4);
    _res_D_y(5, 5) =
        _tmp135 * sqrt_info(5, 5) + _tmp144 * sqrt_info(5, 3) + _tmp39 * sqrt_info(5, 4);
  }

  if (res_D_y_T_b != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 6, 6>> _res_D_y_T_b{res_D_y_T_b};

    _res_D_y_T_b(0, 0) = -_tmp154 * _tmp724 + _tmp154 * _tmp726 + _tmp211 * _tmp723 +
                         _tmp717 * sqrt_info(0, 0) - _tmp718 * sqrt_info(0, 1) +
                         _tmp720 * sqrt_info(0, 0) + _tmp722 * sqrt_info(0, 2) +
                         _tmp725 * sqrt_info(0, 1) - _tmp727 * sqrt_info(0, 0);
    _res_D_y_T_b(1, 0) = -_tmp258 * _tmp724 + _tmp258 * _tmp726 - _tmp259 * _tmp716 +
                         _tmp260 * _tmp723 - _tmp261 * _tmp716 + _tmp331 * _tmp719 +
                         _tmp389 * _tmp716 + _tmp717 * sqrt_info(1, 0) + _tmp722 * sqrt_info(1, 2);
    _res_D_y_T_b(2, 0) = _tmp264 * _tmp726 + _tmp717 * sqrt_info(2, 0) - _tmp718 * sqrt_info(2, 1) +
                         _tmp720 * sqrt_info(2, 0) + _tmp722 * sqrt_info(2, 2) +
                         _tmp725 * sqrt_info(2, 1) - _tmp727 * sqrt_info(2, 0) +
                         _tmp728 * sqrt_info(2, 1) - _tmp729 * sqrt_info(2, 2);
    _res_D_y_T_b(3, 0) = -_tmp152 * _tmp724 + _tmp265 * _tmp721 + _tmp267 * _tmp723 +
                         _tmp268 * _tmp726 + _tmp334 * _tmp716 - _tmp718 * sqrt_info(3, 1) +
                         _tmp720 * sqrt_info(3, 0) + _tmp725 * sqrt_info(3, 1) -
                         _tmp729 * sqrt_info(3, 2);
    _res_D_y_T_b(4, 0) = -_tmp269 * _tmp724 + _tmp270 * _tmp721 + _tmp271 * _tmp716 +
                         _tmp336 * _tmp716 + _tmp337 * _tmp716 - _tmp467 * _tmp716 +
                         _tmp720 * sqrt_info(4, 0) - _tmp727 * sqrt_info(4, 0) +
                         _tmp728 * sqrt_info(4, 1);
    _res_D_y_T_b(5, 0) = _tmp272 * _tmp726 - _tmp468 * _tmp716 + _tmp717 * sqrt_info(5, 0) +
                         _tmp720 * sqrt_info(5, 0) + _tmp722 * sqrt_info(5, 2) +
                         _tmp725 * sqrt_info(5, 1) - _tmp727 * sqrt_info(5, 0) +
                         _tmp728 * sqrt_info(5, 1) - _tmp729 * sqrt_info(5, 2);
    _res_D_y_T_b(0, 1) = _tmp154 * _tmp741 - _tmp154 * _tmp745 + _tmp211 * _tmp750 -
                         _tmp742 * sqrt_info(0, 0) + _tmp744 * sqrt_info(0, 0) -
                         _tmp746 * sqrt_info(0, 1) + _tmp748 * sqrt_info(0, 2) +
                         _tmp749 * sqrt_info(0, 0) + _tmp751 * sqrt_info(0, 1);
    _res_D_y_T_b(1, 1) = _tmp258 * _tmp741 - _tmp258 * _tmp745 - _tmp259 * _tmp740 +
                         _tmp260 * _tmp750 - _tmp261 * _tmp740 + _tmp331 * _tmp743 +
                         _tmp748 * sqrt_info(1, 2) + _tmp749 * sqrt_info(1, 0) +
                         _tmp751 * sqrt_info(1, 1);
    _res_D_y_T_b(2, 1) = _tmp264 * _tmp741 - _tmp264 * _tmp745 - _tmp742 * sqrt_info(2, 0) +
                         _tmp744 * sqrt_info(2, 0) - _tmp746 * sqrt_info(2, 1) +
                         _tmp748 * sqrt_info(2, 2) + _tmp749 * sqrt_info(2, 0) +
                         _tmp751 * sqrt_info(2, 1) + _tmp752 * sqrt_info(2, 1);
    _res_D_y_T_b(3, 1) = _tmp152 * _tmp741 + _tmp265 * _tmp747 - _tmp266 * _tmp740 +
                         _tmp267 * _tmp750 + _tmp268 * _tmp741 - _tmp268 * _tmp745 +
                         _tmp744 * sqrt_info(3, 0) - _tmp746 * sqrt_info(3, 1) +
                         _tmp751 * sqrt_info(3, 1);
    _res_D_y_T_b(4, 1) = _tmp269 * _tmp741 - _tmp269 * _tmp745 + _tmp271 * _tmp740 -
                         _tmp742 * sqrt_info(4, 0) + _tmp744 * sqrt_info(4, 0) -
                         _tmp746 * sqrt_info(4, 1) + _tmp748 * sqrt_info(4, 2) +
                         _tmp749 * sqrt_info(4, 0) + _tmp752 * sqrt_info(4, 1);
    _res_D_y_T_b(5, 1) = _tmp272 * _tmp741 - _tmp272 * _tmp745 - _tmp742 * sqrt_info(5, 0) +
                         _tmp744 * sqrt_info(5, 0) - _tmp746 * sqrt_info(5, 1) +
                         _tmp748 * sqrt_info(5, 2) + _tmp749 * sqrt_info(5, 0) +
                         _tmp751 * sqrt_info(5, 1) + _tmp752 * sqrt_info(5, 1);
    _res_D_y_T_b(0, 2) = -_tmp154 * _tmp760 + _tmp154 * _tmp763 + _tmp211 * _tmp764 -
                         _tmp759 * sqrt_info(0, 0) - _tmp761 * sqrt_info(0, 1) +
                         _tmp762 * sqrt_info(0, 0) + _tmp765 * sqrt_info(0, 0) +
                         _tmp767 * sqrt_info(0, 2) + _tmp768 * sqrt_info(0, 1);
    _res_D_y_T_b(1, 2) = -_tmp258 * _tmp760 + _tmp258 * _tmp763 - _tmp259 * _tmp758 +
                         _tmp260 * _tmp764 - _tmp261 * _tmp758 + _tmp389 * _tmp758 +
                         _tmp762 * sqrt_info(1, 0) + _tmp765 * sqrt_info(1, 0) +
                         _tmp767 * sqrt_info(1, 2);
    _res_D_y_T_b(2, 2) = -_tmp264 * _tmp760 + _tmp264 * _tmp763 + _tmp332 * _tmp764 +
                         _tmp333 * _tmp758 - _tmp759 * sqrt_info(2, 0) - _tmp761 * sqrt_info(2, 1) +
                         _tmp765 * sqrt_info(2, 0) + _tmp767 * sqrt_info(2, 2) +
                         _tmp768 * sqrt_info(2, 1);
    _res_D_y_T_b(3, 2) = _tmp265 * _tmp766 - _tmp266 * _tmp758 + _tmp267 * _tmp764 -
                         _tmp268 * _tmp760 + _tmp268 * _tmp763 + _tmp334 * _tmp758 -
                         _tmp761 * sqrt_info(3, 1) + _tmp765 * sqrt_info(3, 0) +
                         _tmp768 * sqrt_info(3, 1);
    _res_D_y_T_b(4, 2) = -_tmp269 * _tmp760 + _tmp271 * _tmp758 + _tmp336 * _tmp758 +
                         _tmp337 * _tmp758 - _tmp759 * sqrt_info(4, 0) - _tmp761 * sqrt_info(4, 1) +
                         _tmp765 * sqrt_info(4, 0) + _tmp767 * sqrt_info(4, 2) +
                         _tmp769 * sqrt_info(4, 1);
    _res_D_y_T_b(5, 2) = -_tmp272 * _tmp760 + _tmp272 * _tmp763 - _tmp759 * sqrt_info(5, 0) -
                         _tmp761 * sqrt_info(5, 1) + _tmp762 * sqrt_info(5, 0) +
                         _tmp765 * sqrt_info(5, 0) + _tmp767 * sqrt_info(5, 2) +
                         _tmp768 * sqrt_info(5, 1) + _tmp769 * sqrt_info(5, 1);
    _res_D_y_T_b(0, 3) =
        _tmp770 * sqrt_info(0, 4) + _tmp771 * sqrt_info(0, 3) + _tmp772 * sqrt_info(0, 5);
    _res_D_y_T_b(1, 3) =
        _tmp770 * sqrt_info(1, 4) + _tmp771 * sqrt_info(1, 3) + _tmp772 * sqrt_info(1, 5);
    _res_D_y_T_b(2, 3) =
        _tmp770 * sqrt_info(2, 4) + _tmp771 * sqrt_info(2, 3) + _tmp772 * sqrt_info(2, 5);
    _res_D_y_T_b(3, 3) =
        _tmp770 * sqrt_info(3, 4) + _tmp771 * sqrt_info(3, 3) + _tmp772 * sqrt_info(3, 5);
    _res_D_y_T_b(4, 3) =
        _tmp770 * sqrt_info(4, 4) + _tmp771 * sqrt_info(4, 3) + _tmp772 * sqrt_info(4, 5);
    _res_D_y_T_b(5, 3) =
        _tmp770 * sqrt_info(5, 4) + _tmp771 * sqrt_info(5, 3) + _tmp772 * sqrt_info(5, 5);
    _res_D_y_T_b(0, 4) =
        _tmp773 * sqrt_info(0, 5) + _tmp774 * sqrt_info(0, 4) + _tmp775 * sqrt_info(0, 3);
    _res_D_y_T_b(1, 4) =
        _tmp773 * sqrt_info(1, 5) + _tmp774 * sqrt_info(1, 4) + _tmp775 * sqrt_info(1, 3);
    _res_D_y_T_b(2, 4) =
        _tmp773 * sqrt_info(2, 5) + _tmp774 * sqrt_info(2, 4) + _tmp775 * sqrt_info(2, 3);
    _res_D_y_T_b(3, 4) =
        _tmp773 * sqrt_info(3, 5) + _tmp774 * sqrt_info(3, 4) + _tmp775 * sqrt_info(3, 3);
    _res_D_y_T_b(4, 4) =
        _tmp773 * sqrt_info(4, 5) + _tmp774 * sqrt_info(4, 4) + _tmp775 * sqrt_info(4, 3);
    _res_D_y_T_b(5, 4) =
        _tmp773 * sqrt_info(5, 5) + _tmp774 * sqrt_info(5, 4) + _tmp775 * sqrt_info(5, 3);
    _res_D_y_T_b(0, 5) =
        _tmp776 * sqrt_info(0, 3) + _tmp777 * sqrt_info(0, 4) + _tmp778 * sqrt_info(0, 5);
    _res_D_y_T_b(1, 5) =
        _tmp776 * sqrt_info(1, 3) + _tmp777 * sqrt_info(1, 4) + _tmp778 * sqrt_info(1, 5);
    _res_D_y_T_b(2, 5) =
        _tmp776 * sqrt_info(2, 3) + _tmp777 * sqrt_info(2, 4) + _tmp778 * sqrt_info(2, 5);
    _res_D_y_T_b(3, 5) =
        _tmp776 * sqrt_info(3, 3) + _tmp777 * sqrt_info(3, 4) + _tmp778 * sqrt_info(3, 5);
    _res_D_y_T_b(4, 5) =
        _tmp776 * sqrt_info(4, 3) + _tmp777 * sqrt_info(4, 4) + _tmp778 * sqrt_info(4, 5);
    _res_D_y_T_b(5, 5) =
        _tmp776 * sqrt_info(5, 3) + _tmp777 * sqrt_info(5, 4) + _tmp778 * sqrt_info(5, 5);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
