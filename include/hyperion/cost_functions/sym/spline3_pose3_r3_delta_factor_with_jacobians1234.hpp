// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose3_r3_delta_factor
 *
 * Args:
 *     lambdas: Matrix31
 *     x0: Pose3
 *     x1: Pose3
 *     x2: Pose3
 *     x3: Pose3
 *     y: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x0: (3x6) jacobian of res (3) wrt arg x0 (6)
 *     res_D_x1: (3x6) jacobian of res (3) wrt arg x1 (6)
 *     res_D_x2: (3x6) jacobian of res (3) wrt arg x2 (6)
 *     res_D_x3: (3x6) jacobian of res (3) wrt arg x3 (6)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Pose3R3DeltaFactorWithJacobians1234(
    const Eigen::Matrix<Scalar, 3, 1>& lambdas, const sym::Pose3<Scalar>& x0,
    const sym::Pose3<Scalar>& x1, const sym::Pose3<Scalar>& x2, const sym::Pose3<Scalar>& x3,
    const Eigen::Matrix<Scalar, 3, 1>& y, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
    const Scalar epsilon, Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr) {
  // Total ops: 84

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x3 = x3.Data();

  // Intermediate terms (6)
  const Scalar _tmp0 = _x0[4] + lambdas(0, 0) * (-_x0[4] + _x1[4]) +
                       lambdas(1, 0) * (-_x1[4] + _x2[4]) + lambdas(2, 0) * (-_x2[4] + _x3[4]) -
                       y(0, 0);
  const Scalar _tmp1 = _x0[6] + lambdas(0, 0) * (-_x0[6] + _x1[6]) +
                       lambdas(1, 0) * (-_x1[6] + _x2[6]) + lambdas(2, 0) * (-_x2[6] + _x3[6]) -
                       y(2, 0);
  const Scalar _tmp2 = _x0[5] + lambdas(0, 0) * (-_x0[5] + _x1[5]) +
                       lambdas(1, 0) * (-_x1[5] + _x2[5]) + lambdas(2, 0) * (-_x2[5] + _x3[5]) -
                       y(1, 0);
  const Scalar _tmp3 = 1 - lambdas(0, 0);
  const Scalar _tmp4 = lambdas(0, 0) - lambdas(1, 0);
  const Scalar _tmp5 = lambdas(1, 0) - lambdas(2, 0);

  // Output terms (5)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp0 * sqrt_info(0, 0) + _tmp1 * sqrt_info(0, 2) + _tmp2 * sqrt_info(0, 1);
  _res(1, 0) = _tmp0 * sqrt_info(1, 0) + _tmp1 * sqrt_info(1, 2) + _tmp2 * sqrt_info(1, 1);
  _res(2, 0) = _tmp0 * sqrt_info(2, 0) + _tmp1 * sqrt_info(2, 2) + _tmp2 * sqrt_info(2, 1);

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 6>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = 0;
    _res_D_x0(1, 0) = 0;
    _res_D_x0(2, 0) = 0;
    _res_D_x0(0, 1) = 0;
    _res_D_x0(1, 1) = 0;
    _res_D_x0(2, 1) = 0;
    _res_D_x0(0, 2) = 0;
    _res_D_x0(1, 2) = 0;
    _res_D_x0(2, 2) = 0;
    _res_D_x0(0, 3) = _tmp3 * sqrt_info(0, 0);
    _res_D_x0(1, 3) = _tmp3 * sqrt_info(1, 0);
    _res_D_x0(2, 3) = _tmp3 * sqrt_info(2, 0);
    _res_D_x0(0, 4) = _tmp3 * sqrt_info(0, 1);
    _res_D_x0(1, 4) = _tmp3 * sqrt_info(1, 1);
    _res_D_x0(2, 4) = _tmp3 * sqrt_info(2, 1);
    _res_D_x0(0, 5) = _tmp3 * sqrt_info(0, 2);
    _res_D_x0(1, 5) = _tmp3 * sqrt_info(1, 2);
    _res_D_x0(2, 5) = _tmp3 * sqrt_info(2, 2);
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 6>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = 0;
    _res_D_x1(1, 0) = 0;
    _res_D_x1(2, 0) = 0;
    _res_D_x1(0, 1) = 0;
    _res_D_x1(1, 1) = 0;
    _res_D_x1(2, 1) = 0;
    _res_D_x1(0, 2) = 0;
    _res_D_x1(1, 2) = 0;
    _res_D_x1(2, 2) = 0;
    _res_D_x1(0, 3) = _tmp4 * sqrt_info(0, 0);
    _res_D_x1(1, 3) = _tmp4 * sqrt_info(1, 0);
    _res_D_x1(2, 3) = _tmp4 * sqrt_info(2, 0);
    _res_D_x1(0, 4) = _tmp4 * sqrt_info(0, 1);
    _res_D_x1(1, 4) = _tmp4 * sqrt_info(1, 1);
    _res_D_x1(2, 4) = _tmp4 * sqrt_info(2, 1);
    _res_D_x1(0, 5) = _tmp4 * sqrt_info(0, 2);
    _res_D_x1(1, 5) = _tmp4 * sqrt_info(1, 2);
    _res_D_x1(2, 5) = _tmp4 * sqrt_info(2, 2);
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 6>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = 0;
    _res_D_x2(1, 0) = 0;
    _res_D_x2(2, 0) = 0;
    _res_D_x2(0, 1) = 0;
    _res_D_x2(1, 1) = 0;
    _res_D_x2(2, 1) = 0;
    _res_D_x2(0, 2) = 0;
    _res_D_x2(1, 2) = 0;
    _res_D_x2(2, 2) = 0;
    _res_D_x2(0, 3) = _tmp5 * sqrt_info(0, 0);
    _res_D_x2(1, 3) = _tmp5 * sqrt_info(1, 0);
    _res_D_x2(2, 3) = _tmp5 * sqrt_info(2, 0);
    _res_D_x2(0, 4) = _tmp5 * sqrt_info(0, 1);
    _res_D_x2(1, 4) = _tmp5 * sqrt_info(1, 1);
    _res_D_x2(2, 4) = _tmp5 * sqrt_info(2, 1);
    _res_D_x2(0, 5) = _tmp5 * sqrt_info(0, 2);
    _res_D_x2(1, 5) = _tmp5 * sqrt_info(1, 2);
    _res_D_x2(2, 5) = _tmp5 * sqrt_info(2, 2);
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 6>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) = 0;
    _res_D_x3(1, 0) = 0;
    _res_D_x3(2, 0) = 0;
    _res_D_x3(0, 1) = 0;
    _res_D_x3(1, 1) = 0;
    _res_D_x3(2, 1) = 0;
    _res_D_x3(0, 2) = 0;
    _res_D_x3(1, 2) = 0;
    _res_D_x3(2, 2) = 0;
    _res_D_x3(0, 3) = lambdas(2, 0) * sqrt_info(0, 0);
    _res_D_x3(1, 3) = lambdas(2, 0) * sqrt_info(1, 0);
    _res_D_x3(2, 3) = lambdas(2, 0) * sqrt_info(2, 0);
    _res_D_x3(0, 4) = lambdas(2, 0) * sqrt_info(0, 1);
    _res_D_x3(1, 4) = lambdas(2, 0) * sqrt_info(1, 1);
    _res_D_x3(2, 4) = lambdas(2, 0) * sqrt_info(2, 1);
    _res_D_x3(0, 5) = lambdas(2, 0) * sqrt_info(0, 2);
    _res_D_x3(1, 5) = lambdas(2, 0) * sqrt_info(1, 2);
    _res_D_x3(2, 5) = lambdas(2, 0) * sqrt_info(2, 2);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
