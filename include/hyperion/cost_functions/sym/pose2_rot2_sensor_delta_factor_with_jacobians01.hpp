// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>
#include <sym/rot2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_rot2_sensor_delta_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_y: Rot2
 *     y: Pose2
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x: (1x3) jacobian of res (1) wrt arg x (3)
 *     res_D_x_T_y: (1x1) jacobian of res (1) wrt arg x_T_y (1)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose2Rot2SensorDeltaFactorWithJacobians01(
    const sym::Pose2<Scalar>& x, const sym::Rot2<Scalar>& x_T_y, const sym::Pose2<Scalar>& y,
    const Eigen::Matrix<Scalar, 1, 1>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_y = nullptr) {
  // Total ops: 42

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 2, 1>& _x_T_y = x_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (17)
  const Scalar _tmp0 = _x[0] * _y[0];
  const Scalar _tmp1 = _x[1] * _y[1];
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = _x[0] * _y[1] - _x[1] * _y[0];
  const Scalar _tmp4 = _tmp3 * _x_T_y[0];
  const Scalar _tmp5 = -_tmp2 * _x_T_y[1] + _tmp4;
  const Scalar _tmp6 = _tmp2 * _x_T_y[0];
  const Scalar _tmp7 = _tmp3 * _x_T_y[1];
  const Scalar _tmp8 = _tmp6 + _tmp7;
  const Scalar _tmp9 = _tmp8 + epsilon * ((((_tmp8) > 0) - ((_tmp8) < 0)) + Scalar(0.5));
  const Scalar _tmp10 = -_tmp0 - _tmp1;
  const Scalar _tmp11 = -_tmp7;
  const Scalar _tmp12 = Scalar(1.0) / (_tmp9);
  const Scalar _tmp13 = std::pow(_tmp9, Scalar(2));
  const Scalar _tmp14 = Scalar(1.0) / (_tmp13);
  const Scalar _tmp15 = std::pow(_tmp5, Scalar(2));
  const Scalar _tmp16 = _tmp13 * sqrt_info(0, 0) / (_tmp13 + _tmp15);

  // Output terms (3)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) * std::atan2(_tmp5, _tmp9);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 3>> _res_D_x{res_D_x};

    _res_D_x.setZero();

    _res_D_x(0, 0) = _tmp16 * (_tmp12 * (_tmp10 * _x_T_y[0] + _tmp11) -
                               _tmp14 * _tmp5 * (_tmp10 * _x_T_y[1] + _tmp4));
  }

  if (res_D_x_T_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 1>> _res_D_x_T_y{res_D_x_T_y};

    _res_D_x_T_y(0, 0) = _tmp16 * (_tmp12 * (_tmp11 - _tmp6) - _tmp14 * _tmp15);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
