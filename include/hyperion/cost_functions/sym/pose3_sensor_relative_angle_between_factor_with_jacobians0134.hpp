// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_relative_angle_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_a: Pose3
 *     a_d_b: Matrix11
 *     y: Pose3
 *     y_T_b: Pose3
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x: (1x6) jacobian of res (1) wrt arg x (6)
 *     res_D_x_T_a: (1x6) jacobian of res (1) wrt arg x_T_a (6)
 *     res_D_y: (1x6) jacobian of res (1) wrt arg y (6)
 *     res_D_y_T_b: (1x6) jacobian of res (1) wrt arg y_T_b (6)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose3SensorRelativeAngleBetweenFactorWithJacobians0134(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_a,
    const Eigen::Matrix<Scalar, 1, 1>& a_d_b, const sym::Pose3<Scalar>& y,
    const sym::Pose3<Scalar>& y_T_b, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info,
    const Scalar epsilon, Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_a = nullptr,
    Scalar* const res_D_y = nullptr, Scalar* const res_D_y_T_b = nullptr) {
  // Total ops: 823

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (251)
  const Scalar _tmp0 = _y[2] * _y_T_b[0];
  const Scalar _tmp1 = _y[0] * _y_T_b[2];
  const Scalar _tmp2 = _y[3] * _y_T_b[1];
  const Scalar _tmp3 = _y[1] * _y_T_b[3];
  const Scalar _tmp4 = _tmp0 - _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _x[3] * _x_T_a[0];
  const Scalar _tmp6 = _x[2] * _x_T_a[1];
  const Scalar _tmp7 = _x[0] * _x_T_a[3];
  const Scalar _tmp8 = _x[1] * _x_T_a[2];
  const Scalar _tmp9 = _tmp5 - _tmp6 + _tmp7 + _tmp8;
  const Scalar _tmp10 = _y[0] * _y_T_b[3];
  const Scalar _tmp11 = _y[2] * _y_T_b[1];
  const Scalar _tmp12 = _y[3] * _y_T_b[0];
  const Scalar _tmp13 = _y[1] * _y_T_b[2];
  const Scalar _tmp14 = _tmp10 - _tmp11 + _tmp12 + _tmp13;
  const Scalar _tmp15 = _x[3] * _x_T_a[1];
  const Scalar _tmp16 = _x[2] * _x_T_a[0];
  const Scalar _tmp17 = _x[0] * _x_T_a[2];
  const Scalar _tmp18 = _x[1] * _x_T_a[3];
  const Scalar _tmp19 = _tmp15 + _tmp16 - _tmp17 + _tmp18;
  const Scalar _tmp20 = _y[2] * _y_T_b[3];
  const Scalar _tmp21 = _y[0] * _y_T_b[1];
  const Scalar _tmp22 = _y[3] * _y_T_b[2];
  const Scalar _tmp23 = _y[1] * _y_T_b[0];
  const Scalar _tmp24 = _tmp20 + _tmp21 + _tmp22 - _tmp23;
  const Scalar _tmp25 = _x[3] * _x_T_a[3];
  const Scalar _tmp26 = _x[2] * _x_T_a[2];
  const Scalar _tmp27 = _x[0] * _x_T_a[0];
  const Scalar _tmp28 = _x[1] * _x_T_a[1];
  const Scalar _tmp29 = _tmp25 - _tmp26 - _tmp27 - _tmp28;
  const Scalar _tmp30 = _x[3] * _x_T_a[2];
  const Scalar _tmp31 = _x[2] * _x_T_a[3];
  const Scalar _tmp32 = _x[0] * _x_T_a[1];
  const Scalar _tmp33 = _x[1] * _x_T_a[0];
  const Scalar _tmp34 = _tmp30 + _tmp31 + _tmp32 - _tmp33;
  const Scalar _tmp35 = _y[3] * _y_T_b[3];
  const Scalar _tmp36 = _y[2] * _y_T_b[2];
  const Scalar _tmp37 = _y[0] * _y_T_b[0];
  const Scalar _tmp38 = _y[1] * _y_T_b[1];
  const Scalar _tmp39 = _tmp35 - _tmp36 - _tmp37 - _tmp38;
  const Scalar _tmp40 = _tmp14 * _tmp19 + _tmp24 * _tmp29 - _tmp34 * _tmp39 - _tmp4 * _tmp9;
  const Scalar _tmp41 = std::pow(_tmp40, Scalar(2));
  const Scalar _tmp42 = _tmp19 * _tmp4;
  const Scalar _tmp43 = _tmp24 * _tmp34;
  const Scalar _tmp44 = _tmp14 * _tmp9;
  const Scalar _tmp45 = -_tmp42 - _tmp43 - _tmp44;
  const Scalar _tmp46 = _tmp29 * _tmp39;
  const Scalar _tmp47 = std::pow(
      Scalar(2 * std::min<Scalar>(0, (((-_tmp45 + _tmp46) > 0) - ((-_tmp45 + _tmp46) < 0))) + 1),
      Scalar(2));
  const Scalar _tmp48 = 4 * _tmp47;
  const Scalar _tmp49 = 1 - epsilon;
  const Scalar _tmp50 = std::min<Scalar>(_tmp49, std::fabs(_tmp45 - _tmp46));
  const Scalar _tmp51 =
      std::pow(Scalar(std::acos(_tmp50)), Scalar(2)) / (1 - std::pow(_tmp50, Scalar(2)));
  const Scalar _tmp52 = _tmp48 * _tmp51;
  const Scalar _tmp53 = -_tmp14 * _tmp34 - _tmp19 * _tmp39 + _tmp24 * _tmp9 + _tmp29 * _tmp4;
  const Scalar _tmp54 = _tmp48 * std::pow(_tmp53, Scalar(2));
  const Scalar _tmp55 = _tmp14 * _tmp29 - _tmp19 * _tmp24 + _tmp34 * _tmp4 - _tmp39 * _tmp9;
  const Scalar _tmp56 = std::pow(_tmp55, Scalar(2));
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp58 = -_tmp57;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp61 = -_tmp60;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp63 = -_tmp62;
  const Scalar _tmp64 = _tmp61 + _tmp63;
  const Scalar _tmp65 = _tmp58 + _tmp59 + _tmp64;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp67 = -_tmp66;
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp69 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp70 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp71 = _tmp69 + _tmp70;
  const Scalar _tmp72 = _tmp67 + _tmp68 + _tmp71;
  const Scalar _tmp73 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp74 = -_tmp73;
  const Scalar _tmp75 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp76 = -_tmp75;
  const Scalar _tmp77 = _tmp74 + _tmp76;
  const Scalar _tmp78 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp79 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp80 = -_tmp79;
  const Scalar _tmp81 = _tmp78 + _tmp80;
  const Scalar _tmp82 = _tmp77 + _tmp81;
  const Scalar _tmp83 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp84 = -_tmp83;
  const Scalar _tmp85 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp86 = -_tmp85;
  const Scalar _tmp87 = _tmp84 + _tmp86;
  const Scalar _tmp88 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp89 = -_tmp88;
  const Scalar _tmp90 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp91 = _tmp89 + _tmp90;
  const Scalar _tmp92 = _tmp87 + _tmp91;
  const Scalar _tmp93 = _tmp14 * _tmp72 + _tmp24 * _tmp82 + _tmp39 * _tmp92 + _tmp4 * _tmp65;
  const Scalar _tmp94 = _tmp42 + _tmp43 + _tmp44 + _tmp46;
  const Scalar _tmp95 = std::fabs(_tmp94);
  const Scalar _tmp96 =
      ((((_tmp49 - _tmp95) > 0) - ((_tmp49 - _tmp95) < 0)) + 1) * (((_tmp94) > 0) - ((_tmp94) < 0));
  const Scalar _tmp97 = std::min<Scalar>(_tmp49, _tmp95);
  const Scalar _tmp98 = std::acos(_tmp97);
  const Scalar _tmp99 = std::pow(_tmp98, Scalar(2));
  const Scalar _tmp100 = 1 - std::pow(_tmp97, Scalar(2));
  const Scalar _tmp101 = _tmp97 * _tmp99 / std::pow(_tmp100, Scalar(2));
  const Scalar _tmp102 = _tmp101 * _tmp54;
  const Scalar _tmp103 = _tmp102 * _tmp96;
  const Scalar _tmp104 = _tmp99 / _tmp100;
  const Scalar _tmp105 = 8 * _tmp104 * _tmp47;
  const Scalar _tmp106 = _tmp105 * _tmp55;
  const Scalar _tmp107 = _tmp105 * _tmp40;
  const Scalar _tmp108 = _tmp98 / (_tmp100 * std::sqrt(_tmp100));
  const Scalar _tmp109 = _tmp108 * _tmp96;
  const Scalar _tmp110 = _tmp48 * _tmp56;
  const Scalar _tmp111 = _tmp109 * _tmp110;
  const Scalar _tmp112 = _tmp41 * _tmp48;
  const Scalar _tmp113 = _tmp101 * _tmp96;
  const Scalar _tmp114 = _tmp112 * _tmp113;
  const Scalar _tmp115 = _tmp110 * _tmp113;
  const Scalar _tmp116 = _tmp105 * _tmp53;
  const Scalar _tmp117 = _tmp109 * _tmp112;
  const Scalar _tmp118 = _tmp109 * _tmp54;
  const Scalar _tmp119 = _tmp104 * _tmp48;
  const Scalar _tmp120 =
      (Scalar(1) / Scalar(2)) * sqrt_info(0, 0) /
      std::sqrt(Scalar(_tmp104 * _tmp54 + _tmp119 * _tmp41 + _tmp119 * _tmp56 + epsilon));
  const Scalar _tmp121 = -_tmp68;
  const Scalar _tmp122 = _tmp121 + _tmp66 + _tmp71;
  const Scalar _tmp123 = -_tmp59;
  const Scalar _tmp124 = _tmp123 + _tmp57 + _tmp64;
  const Scalar _tmp125 = -_tmp90;
  const Scalar _tmp126 = _tmp125 + _tmp89;
  const Scalar _tmp127 = _tmp126 + _tmp84 + _tmp85;
  const Scalar _tmp128 = -_tmp78;
  const Scalar _tmp129 = _tmp128 + _tmp80;
  const Scalar _tmp130 = _tmp129 + _tmp73 + _tmp76;
  const Scalar _tmp131 = _tmp122 * _tmp4 + _tmp124 * _tmp14 + _tmp127 * _tmp24 + _tmp130 * _tmp39;
  const Scalar _tmp132 = _tmp126 + _tmp83 + _tmp86;
  const Scalar _tmp133 = _tmp129 + _tmp74 + _tmp75;
  const Scalar _tmp134 = _tmp69 - _tmp70;
  const Scalar _tmp135 = _tmp134 + _tmp66 + _tmp68;
  const Scalar _tmp136 = _tmp61 + _tmp62;
  const Scalar _tmp137 = _tmp123 + _tmp58;
  const Scalar _tmp138 = _tmp136 + _tmp137;
  const Scalar _tmp139 =
      _tmp96 * (_tmp132 * _tmp4 + _tmp133 * _tmp14 + _tmp135 * _tmp24 + _tmp138 * _tmp39);
  const Scalar _tmp140 = _tmp108 * _tmp139;
  const Scalar _tmp141 = _tmp101 * _tmp139;
  const Scalar _tmp142 = _tmp136 + _tmp57 + _tmp59;
  const Scalar _tmp143 = _tmp125 + _tmp87 + _tmp88;
  const Scalar _tmp144 = _tmp143 * _tmp39;
  const Scalar _tmp145 = _tmp121 + _tmp134 + _tmp67;
  const Scalar _tmp146 = _tmp14 * _tmp145;
  const Scalar _tmp147 = _tmp128 + _tmp77 + _tmp79;
  const Scalar _tmp148 = _tmp146 + _tmp147 * _tmp24;
  const Scalar _tmp149 = _tmp142 * _tmp4 + _tmp144 + _tmp148;
  const Scalar _tmp150 = _tmp109 * _tmp149;
  const Scalar _tmp151 = _tmp14 * _tmp143;
  const Scalar _tmp152 = -_tmp145 * _tmp39;
  const Scalar _tmp153 = _tmp147 * _tmp4 + _tmp152;
  const Scalar _tmp154 = _tmp145 * _tmp4;
  const Scalar _tmp155 = _tmp143 * _tmp24;
  const Scalar _tmp156 = _tmp147 * _tmp39;
  const Scalar _tmp157 = _tmp14 * _tmp147;
  const Scalar _tmp158 = _tmp145 * _tmp24;
  const Scalar _tmp159 = _tmp143 * _tmp4 + _tmp158;
  const Scalar _tmp160 = _tmp83 + _tmp85 + _tmp91;
  const Scalar _tmp161 = _tmp137 + _tmp60 + _tmp63;
  const Scalar _tmp162 = _tmp14 * _tmp161 + _tmp154;
  const Scalar _tmp163 = _tmp156 + _tmp160 * _tmp24 + _tmp162;
  const Scalar _tmp164 = _tmp161 * _tmp39;
  const Scalar _tmp165 = _tmp161 * _tmp24;
  const Scalar _tmp166 = _tmp161 * _tmp4;
  const Scalar _tmp167 = _tmp73 + _tmp75 + _tmp81;
  const Scalar _tmp168 = _tmp14 * _tmp167 + _tmp159 + _tmp164;
  const Scalar _tmp169 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp170 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp171 = -_tmp170;
  const Scalar _tmp172 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp173 = -_tmp172;
  const Scalar _tmp174 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp175 = -_tmp174;
  const Scalar _tmp176 = _tmp173 + _tmp175;
  const Scalar _tmp177 = _tmp169 + _tmp171 + _tmp176;
  const Scalar _tmp178 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp179 = -_tmp178;
  const Scalar _tmp180 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp181 = -_tmp180;
  const Scalar _tmp182 = _tmp179 + _tmp181;
  const Scalar _tmp183 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp184 = -_tmp183;
  const Scalar _tmp185 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp186 = _tmp184 + _tmp185;
  const Scalar _tmp187 = _tmp182 + _tmp186;
  const Scalar _tmp188 = (Scalar(1) / Scalar(2)) * _tmp38;
  const Scalar _tmp189 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp190 = (Scalar(1) / Scalar(2)) * _tmp35;
  const Scalar _tmp191 = (Scalar(1) / Scalar(2)) * _tmp37;
  const Scalar _tmp192 = _tmp190 - _tmp191;
  const Scalar _tmp193 = _tmp188 + _tmp189 + _tmp192;
  const Scalar _tmp194 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp195 = -_tmp194;
  const Scalar _tmp196 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp197 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp198 = -_tmp197;
  const Scalar _tmp199 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp200 = -_tmp199;
  const Scalar _tmp201 = _tmp198 + _tmp200;
  const Scalar _tmp202 = _tmp195 + _tmp196 + _tmp201;
  const Scalar _tmp203 = _tmp177 * _tmp19 + _tmp187 * _tmp34 + _tmp193 * _tmp9 + _tmp202 * _tmp29;
  const Scalar _tmp204 = -_tmp169;
  const Scalar _tmp205 = _tmp171 + _tmp204;
  const Scalar _tmp206 = _tmp172 + _tmp175;
  const Scalar _tmp207 = _tmp205 + _tmp206;
  const Scalar _tmp208 = -_tmp188;
  const Scalar _tmp209 = _tmp190 + _tmp191;
  const Scalar _tmp210 = _tmp189 + _tmp208 + _tmp209;
  const Scalar _tmp211 = -_tmp196;
  const Scalar _tmp212 = _tmp194 + _tmp201 + _tmp211;
  const Scalar _tmp213 = -_tmp185;
  const Scalar _tmp214 = _tmp184 + _tmp213;
  const Scalar _tmp215 = _tmp178 + _tmp181 + _tmp214;
  const Scalar _tmp216 = _tmp19 * _tmp210 + _tmp207 * _tmp9 + _tmp212 * _tmp34 + _tmp215 * _tmp29;
  const Scalar _tmp217 = _tmp179 + _tmp180 + _tmp214;
  const Scalar _tmp218 = -_tmp189;
  const Scalar _tmp219 = _tmp188 + _tmp209 + _tmp218;
  const Scalar _tmp220 = _tmp198 + _tmp199;
  const Scalar _tmp221 = _tmp195 + _tmp211;
  const Scalar _tmp222 = _tmp220 + _tmp221;
  const Scalar _tmp223 = _tmp170 + _tmp176 + _tmp204;
  const Scalar _tmp224 = _tmp19 * _tmp222 + _tmp217 * _tmp9 + _tmp219 * _tmp34 + _tmp223 * _tmp29;
  const Scalar _tmp225 = _tmp169 + _tmp170 + _tmp206;
  const Scalar _tmp226 = _tmp182 + _tmp183 + _tmp213;
  const Scalar _tmp227 = _tmp226 * _tmp34;
  const Scalar _tmp228 = _tmp192 + _tmp208 + _tmp218;
  const Scalar _tmp229 = _tmp228 * _tmp9;
  const Scalar _tmp230 = _tmp197 + _tmp200 + _tmp221;
  const Scalar _tmp231 = _tmp229 + _tmp230 * _tmp29;
  const Scalar _tmp232 = _tmp19 * _tmp225 + _tmp227 + _tmp231;
  const Scalar _tmp233 = -_tmp19 * _tmp226;
  const Scalar _tmp234 = -_tmp230 * _tmp9;
  const Scalar _tmp235 = _tmp228 * _tmp29;
  const Scalar _tmp236 = _tmp230 * _tmp34;
  const Scalar _tmp237 = _tmp19 * _tmp228;
  const Scalar _tmp238 = _tmp226 * _tmp29 + _tmp237;
  const Scalar _tmp239 = _tmp226 * _tmp9;
  const Scalar _tmp240 = _tmp228 * _tmp34;
  const Scalar _tmp241 = _tmp19 * _tmp230;
  const Scalar _tmp242 = _tmp173 + _tmp174 + _tmp205;
  const Scalar _tmp243 = _tmp242 * _tmp9;
  const Scalar _tmp244 = _tmp194 + _tmp196 + _tmp220;
  const Scalar _tmp245 = _tmp238 + _tmp243 + _tmp244 * _tmp34;
  const Scalar _tmp246 = _tmp240 + _tmp242 * _tmp29;
  const Scalar _tmp247 = _tmp19 * _tmp242;
  const Scalar _tmp248 = _tmp235 - _tmp242 * _tmp34;
  const Scalar _tmp249 = _tmp178 + _tmp180 + _tmp186;
  const Scalar _tmp250 = _tmp241 + _tmp246 + _tmp249 * _tmp9;

  // Output terms (5)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) *
               (-a_d_b(0, 0) +
                std::sqrt(Scalar(_tmp41 * _tmp52 + _tmp51 * _tmp54 + _tmp52 * _tmp56 + epsilon)));

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 6>> _res_D_x{res_D_x};

    _res_D_x(0, 0) =
        _tmp120 *
        (_tmp103 * _tmp93 +
         _tmp106 * (_tmp14 * _tmp92 - _tmp24 * _tmp65 - _tmp39 * _tmp72 + _tmp4 * _tmp82) +
         _tmp107 * (_tmp14 * _tmp65 + _tmp24 * _tmp92 - _tmp39 * _tmp82 - _tmp4 * _tmp72) -
         _tmp111 * _tmp93 + _tmp114 * _tmp93 + _tmp115 * _tmp93 +
         _tmp116 * (-_tmp14 * _tmp82 + _tmp24 * _tmp72 - _tmp39 * _tmp65 + _tmp4 * _tmp92) -
         _tmp117 * _tmp93 - _tmp118 * _tmp93);
    _res_D_x(0, 1) =
        _tmp120 *
        (_tmp103 * _tmp131 +
         _tmp106 * (-_tmp122 * _tmp24 - _tmp124 * _tmp39 + _tmp127 * _tmp4 + _tmp130 * _tmp14) +
         _tmp107 * (_tmp122 * _tmp14 - _tmp124 * _tmp4 - _tmp127 * _tmp39 + _tmp130 * _tmp24) -
         _tmp111 * _tmp131 + _tmp114 * _tmp131 + _tmp115 * _tmp131 +
         _tmp116 * (-_tmp122 * _tmp39 + _tmp124 * _tmp24 - _tmp127 * _tmp14 + _tmp130 * _tmp4) -
         _tmp117 * _tmp131 - _tmp118 * _tmp131);
    _res_D_x(0, 2) =
        _tmp120 *
        (_tmp102 * _tmp139 +
         _tmp106 * (-_tmp132 * _tmp24 - _tmp133 * _tmp39 + _tmp135 * _tmp4 + _tmp138 * _tmp14) +
         _tmp107 * (_tmp132 * _tmp14 - _tmp133 * _tmp4 - _tmp135 * _tmp39 + _tmp138 * _tmp24) -
         _tmp110 * _tmp140 + _tmp110 * _tmp141 - _tmp112 * _tmp140 + _tmp112 * _tmp141 +
         _tmp116 * (-_tmp132 * _tmp39 + _tmp133 * _tmp24 - _tmp135 * _tmp14 + _tmp138 * _tmp4) -
         _tmp140 * _tmp54);
    _res_D_x(0, 3) = 0;
    _res_D_x(0, 4) = 0;
    _res_D_x(0, 5) = 0;
  }

  if (res_D_x_T_a != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 6>> _res_D_x_T_a{res_D_x_T_a};

    _res_D_x_T_a(0, 0) =
        _tmp120 * (_tmp103 * _tmp149 + _tmp106 * (-_tmp142 * _tmp24 + _tmp151 + _tmp153) +
                   _tmp107 * (_tmp14 * _tmp142 - _tmp154 + _tmp155 - _tmp156) - _tmp110 * _tmp150 -
                   _tmp112 * _tmp150 + _tmp114 * _tmp149 + _tmp115 * _tmp149 +
                   _tmp116 * (-_tmp142 * _tmp39 - _tmp157 + _tmp159) - _tmp150 * _tmp54);
    _res_D_x_T_a(0, 1) =
        _tmp120 *
        (_tmp103 * _tmp163 + _tmp106 * (_tmp157 - _tmp158 + _tmp160 * _tmp4 - _tmp164) +
         _tmp107 * (_tmp148 - _tmp160 * _tmp39 - _tmp166) - _tmp111 * _tmp163 + _tmp114 * _tmp163 +
         _tmp115 * _tmp163 + _tmp116 * (-_tmp14 * _tmp160 + _tmp153 + _tmp165) - _tmp117 * _tmp163 -
         _tmp118 * _tmp163);
    _res_D_x_T_a(0, 2) =
        _tmp120 * (_tmp103 * _tmp168 + _tmp106 * (-_tmp155 + _tmp162 - _tmp167 * _tmp39) +
                   _tmp107 * (_tmp151 + _tmp152 + _tmp165 - _tmp167 * _tmp4) - _tmp111 * _tmp168 +
                   _tmp114 * _tmp168 + _tmp115 * _tmp168 +
                   _tmp116 * (-_tmp144 - _tmp146 + _tmp166 + _tmp167 * _tmp24) - _tmp117 * _tmp168 -
                   _tmp118 * _tmp168);
    _res_D_x_T_a(0, 3) = 0;
    _res_D_x_T_a(0, 4) = 0;
    _res_D_x_T_a(0, 5) = 0;
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 6>> _res_D_y{res_D_y};

    _res_D_y(0, 0) =
        _tmp120 *
        (_tmp103 * _tmp203 +
         _tmp106 * (_tmp177 * _tmp34 - _tmp187 * _tmp19 + _tmp193 * _tmp29 - _tmp202 * _tmp9) +
         _tmp107 * (-_tmp177 * _tmp9 + _tmp187 * _tmp29 + _tmp19 * _tmp193 - _tmp202 * _tmp34) -
         _tmp111 * _tmp203 + _tmp114 * _tmp203 + _tmp115 * _tmp203 +
         _tmp116 * (_tmp177 * _tmp29 + _tmp187 * _tmp9 - _tmp19 * _tmp202 - _tmp193 * _tmp34) -
         _tmp117 * _tmp203 - _tmp118 * _tmp203);
    _res_D_y(0, 1) =
        _tmp120 *
        (_tmp103 * _tmp216 +
         _tmp106 * (-_tmp19 * _tmp212 + _tmp207 * _tmp29 + _tmp210 * _tmp34 - _tmp215 * _tmp9) +
         _tmp107 * (_tmp19 * _tmp207 - _tmp210 * _tmp9 + _tmp212 * _tmp29 - _tmp215 * _tmp34) -
         _tmp111 * _tmp216 + _tmp114 * _tmp216 + _tmp115 * _tmp216 +
         _tmp116 * (-_tmp19 * _tmp215 - _tmp207 * _tmp34 + _tmp210 * _tmp29 + _tmp212 * _tmp9) -
         _tmp117 * _tmp216 - _tmp118 * _tmp216);
    _res_D_y(0, 2) =
        _tmp120 *
        (_tmp103 * _tmp224 +
         _tmp106 * (-_tmp19 * _tmp219 + _tmp217 * _tmp29 + _tmp222 * _tmp34 - _tmp223 * _tmp9) +
         _tmp107 * (_tmp19 * _tmp217 + _tmp219 * _tmp29 - _tmp222 * _tmp9 - _tmp223 * _tmp34) -
         _tmp111 * _tmp224 + _tmp114 * _tmp224 + _tmp115 * _tmp224 +
         _tmp116 * (-_tmp19 * _tmp223 - _tmp217 * _tmp34 + _tmp219 * _tmp9 + _tmp222 * _tmp29) -
         _tmp117 * _tmp224 - _tmp118 * _tmp224);
    _res_D_y(0, 3) = 0;
    _res_D_y(0, 4) = 0;
    _res_D_y(0, 5) = 0;
  }

  if (res_D_y_T_b != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 6>> _res_D_y_T_b{res_D_y_T_b};

    _res_D_y_T_b(0, 0) =
        _tmp120 *
        (_tmp103 * _tmp232 + _tmp106 * (_tmp225 * _tmp34 + _tmp233 + _tmp234 + _tmp235) +
         _tmp107 * (-_tmp225 * _tmp9 - _tmp236 + _tmp238) - _tmp111 * _tmp232 + _tmp114 * _tmp232 +
         _tmp115 * _tmp232 + _tmp116 * (_tmp225 * _tmp29 + _tmp239 - _tmp240 - _tmp241) -
         _tmp117 * _tmp232 - _tmp118 * _tmp232);
    _res_D_y_T_b(0, 1) =
        _tmp120 *
        (_tmp103 * _tmp245 + _tmp106 * (-_tmp19 * _tmp244 - _tmp239 + _tmp246) +
         _tmp107 * (-_tmp227 - _tmp229 + _tmp244 * _tmp29 + _tmp247) - _tmp111 * _tmp245 +
         _tmp114 * _tmp245 + _tmp115 * _tmp245 + _tmp116 * (_tmp233 + _tmp244 * _tmp9 + _tmp248) -
         _tmp117 * _tmp245 - _tmp118 * _tmp245);
    _res_D_y_T_b(0, 2) =
        _tmp120 *
        (_tmp103 * _tmp250 + _tmp106 * (_tmp236 - _tmp237 - _tmp243 + _tmp249 * _tmp29) +
         _tmp107 * (_tmp19 * _tmp249 + _tmp234 + _tmp248) - _tmp111 * _tmp250 + _tmp114 * _tmp250 +
         _tmp115 * _tmp250 + _tmp116 * (_tmp231 - _tmp247 - _tmp249 * _tmp34) - _tmp117 * _tmp250 -
         _tmp118 * _tmp250);
    _res_D_y_T_b(0, 3) = 0;
    _res_D_y_T_b(0, 4) = 0;
    _res_D_y_T_b(0, 5) = 0;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
