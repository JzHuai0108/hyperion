// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_r2_sensor_delta_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_y: Matrix21
 *     y: Pose2
 *     sqrt_info: Matrix22
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix21
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> Pose2R2SensorDeltaFactor(const sym::Pose2<Scalar>& x,
                                                     const Eigen::Matrix<Scalar, 2, 1>& x_T_y,
                                                     const sym::Pose2<Scalar>& y,
                                                     const Eigen::Matrix<Scalar, 2, 2>& sqrt_info,
                                                     const Scalar epsilon) {
  // Total ops: 22

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (2)
  const Scalar _tmp0 = -_x[0] * _x[2] + _x[0] * _y[2] - _x[1] * _x[3] + _x[1] * _y[3] - x_T_y(0, 0);
  const Scalar _tmp1 = -_x[0] * _x[3] + _x[0] * _y[3] + _x[1] * _x[2] - _x[1] * _y[2] - x_T_y(1, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) = _tmp0 * sqrt_info(0, 0) + _tmp1 * sqrt_info(0, 1);
  _res(1, 0) = _tmp0 * sqrt_info(1, 0) + _tmp1 * sqrt_info(1, 1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
