// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_rot3_acceleration_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix33
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     acceleration: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Rot3AccelerationLocalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 3>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const Eigen::Matrix<Scalar, 3, 1>& acceleration, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 379

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();

  // Intermediate terms (122)
  const Scalar _tmp0 = std::pow(dt, Scalar(-2));
  const Scalar _tmp1 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp2 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp4 = _x1[3] * _x2[3];
  const Scalar _tmp5 = 1 - epsilon;
  const Scalar _tmp6 = std::min<Scalar>(_tmp5, std::fabs(_tmp3 - _tmp4));
  const Scalar _tmp7 = 1 - std::pow(_tmp6, Scalar(2));
  const Scalar _tmp8 = std::acos(_tmp6);
  const Scalar _tmp9 =
      2 * std::min<Scalar>(0, (((-_tmp3 + _tmp4) > 0) - ((-_tmp3 + _tmp4) < 0))) + 1;
  const Scalar _tmp10 = std::pow(_tmp8, Scalar(2)) * std::pow(_tmp9, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp7;
  const Scalar _tmp11 = 4 * _tmp10;
  const Scalar _tmp12 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp13 = std::pow(_tmp12, Scalar(2));
  const Scalar _tmp14 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp15 = std::pow(_tmp14, Scalar(2));
  const Scalar _tmp16 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp17 = _tmp11 * _tmp13 + _tmp11 * _tmp15 + _tmp11 * _tmp2 + _tmp16;
  const Scalar _tmp18 = std::sqrt(_tmp17);
  const Scalar _tmp19 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp20 = std::sin(_tmp19);
  const Scalar _tmp21 = 8 * _tmp10 * std::pow(_tmp20, Scalar(2)) / _tmp17;
  const Scalar _tmp22 = -_tmp2 * _tmp21;
  const Scalar _tmp23 = -_tmp15 * _tmp21 + 1;
  const Scalar _tmp24 = _tmp22 + _tmp23;
  const Scalar _tmp25 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp26 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp27 = _x0[3] * _x1[3];
  const Scalar _tmp28 = std::min<Scalar>(_tmp5, std::fabs(_tmp26 - _tmp27));
  const Scalar _tmp29 =
      2 * (2 * std::min<Scalar>(0, (((-_tmp26 + _tmp27) > 0) - ((-_tmp26 + _tmp27) < 0))) + 1) *
      std::acos(_tmp28) / std::sqrt(Scalar(1 - std::pow(_tmp28, Scalar(2))));
  const Scalar _tmp30 = _tmp29 * lambdas(0, 1);
  const Scalar _tmp31 = _tmp25 * _tmp30;
  const Scalar _tmp32 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp33 = _tmp1 * _tmp12 * _tmp21;
  const Scalar _tmp34 = _tmp8 * _tmp9 / std::sqrt(_tmp7);
  const Scalar _tmp35 = 4 * _tmp20 * _tmp34 * lambdas(1, 0) * std::cos(_tmp19) / _tmp18;
  const Scalar _tmp36 = _tmp14 * _tmp35;
  const Scalar _tmp37 = _tmp32 * (_tmp33 - _tmp36);
  const Scalar _tmp38 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp39 = _tmp1 * _tmp35;
  const Scalar _tmp40 = _tmp14 * _tmp21;
  const Scalar _tmp41 = _tmp12 * _tmp40;
  const Scalar _tmp42 = _tmp38 * (_tmp39 + _tmp41);
  const Scalar _tmp43 = _tmp24 * _tmp31 + _tmp30 * _tmp37 + _tmp30 * _tmp42;
  const Scalar _tmp44 = 2 * _tmp34;
  const Scalar _tmp45 = _tmp1 * _tmp44;
  const Scalar _tmp46 = _tmp45 * lambdas(1, 1);
  const Scalar _tmp47 = _tmp29 * lambdas(0, 2);
  const Scalar _tmp48 = -_tmp13 * _tmp21;
  const Scalar _tmp49 = _tmp38 * (_tmp22 + _tmp48 + 1);
  const Scalar _tmp50 = _tmp12 * _tmp35;
  const Scalar _tmp51 = _tmp1 * _tmp40;
  const Scalar _tmp52 = _tmp32 * (_tmp50 + _tmp51);
  const Scalar _tmp53 = _tmp38 * (-_tmp50 + _tmp51);
  const Scalar _tmp54 = _tmp33 + _tmp36;
  const Scalar _tmp55 = _tmp32 * (_tmp23 + _tmp48);
  const Scalar _tmp56 = _tmp30 * _tmp53 + _tmp30 * _tmp55 + _tmp31 * _tmp54;
  const Scalar _tmp57 = _tmp12 * _tmp44;
  const Scalar _tmp58 = _tmp57 * lambdas(1, 1);
  const Scalar _tmp59 = -_tmp39 + _tmp41;
  const Scalar _tmp60 = _tmp25 * _tmp47;
  const Scalar _tmp61 = _tmp14 * _tmp44;
  const Scalar _tmp62 = -_tmp43 * _tmp46 + _tmp47 * _tmp49 + _tmp47 * _tmp52 + _tmp56 * _tmp58 +
                        _tmp59 * _tmp60 + _tmp61 * lambdas(1, 2);
  const Scalar _tmp63 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp64 = std::pow(_tmp63, Scalar(2));
  const Scalar _tmp65 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp66 = _x2[3] * _x3[3];
  const Scalar _tmp67 = std::min<Scalar>(_tmp5, std::fabs(_tmp65 - _tmp66));
  const Scalar _tmp68 = std::acos(_tmp67);
  const Scalar _tmp69 =
      2 * std::min<Scalar>(0, (((-_tmp65 + _tmp66) > 0) - ((-_tmp65 + _tmp66) < 0))) + 1;
  const Scalar _tmp70 = 1 - std::pow(_tmp67, Scalar(2));
  const Scalar _tmp71 = std::pow(_tmp68, Scalar(2)) * std::pow(_tmp69, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp70;
  const Scalar _tmp72 = 4 * _tmp71;
  const Scalar _tmp73 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp74 = std::pow(_tmp73, Scalar(2));
  const Scalar _tmp75 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp76 = std::pow(_tmp75, Scalar(2));
  const Scalar _tmp77 = _tmp16 + _tmp64 * _tmp72 + _tmp72 * _tmp74 + _tmp72 * _tmp76;
  const Scalar _tmp78 = std::sqrt(_tmp77);
  const Scalar _tmp79 = (Scalar(1) / Scalar(2)) * _tmp78;
  const Scalar _tmp80 = std::sin(_tmp79);
  const Scalar _tmp81 = _tmp68 * _tmp69 / std::sqrt(_tmp70);
  const Scalar _tmp82 = 4 * _tmp80 * _tmp81 * lambdas(2, 0) * std::cos(_tmp79) / _tmp78;
  const Scalar _tmp83 = _tmp63 * _tmp82;
  const Scalar _tmp84 = 8 * _tmp71 * std::pow(_tmp80, Scalar(2)) / _tmp77;
  const Scalar _tmp85 = _tmp73 * _tmp84;
  const Scalar _tmp86 = _tmp75 * _tmp85;
  const Scalar _tmp87 = -_tmp83 + _tmp86;
  const Scalar _tmp88 = 2 * _tmp81;
  const Scalar _tmp89 = _tmp88 * lambdas(2, 2);
  const Scalar _tmp90 = _tmp83 + _tmp86;
  const Scalar _tmp91 = _tmp46 + _tmp56;
  const Scalar _tmp92 = _tmp61 * lambdas(1, 1);
  const Scalar _tmp93 = _tmp30 * _tmp49 + _tmp30 * _tmp52 + _tmp31 * _tmp59;
  const Scalar _tmp94 = _tmp92 + _tmp93;
  const Scalar _tmp95 = -_tmp74 * _tmp84;
  const Scalar _tmp96 = -_tmp64 * _tmp84 + 1;
  const Scalar _tmp97 = _tmp95 + _tmp96;
  const Scalar _tmp98 = _tmp43 + _tmp58;
  const Scalar _tmp99 = _tmp63 * _tmp75 * _tmp84;
  const Scalar _tmp100 = _tmp73 * _tmp82;
  const Scalar _tmp101 = -_tmp100 + _tmp99;
  const Scalar _tmp102 = _tmp101 * _tmp98 + _tmp90 * _tmp91 + _tmp94 * _tmp97;
  const Scalar _tmp103 = _tmp88 * lambdas(2, 1);
  const Scalar _tmp104 = _tmp103 * _tmp63;
  const Scalar _tmp105 = _tmp24 * _tmp60 + _tmp37 * _tmp47 + _tmp42 * _tmp47 + _tmp46 * _tmp93 -
                         _tmp56 * _tmp92 + _tmp57 * lambdas(1, 2);
  const Scalar _tmp106 = _tmp75 * _tmp82;
  const Scalar _tmp107 = _tmp63 * _tmp85;
  const Scalar _tmp108 = _tmp106 + _tmp107;
  const Scalar _tmp109 = -_tmp76 * _tmp84;
  const Scalar _tmp110 = _tmp109 + _tmp96;
  const Scalar _tmp111 = _tmp43 * _tmp92 + _tmp45 * lambdas(1, 2) + _tmp47 * _tmp53 +
                         _tmp47 * _tmp55 + _tmp54 * _tmp60 - _tmp58 * _tmp93;
  const Scalar _tmp112 = _tmp100 + _tmp99;
  const Scalar _tmp113 = -_tmp106 + _tmp107;
  const Scalar _tmp114 = _tmp109 + _tmp95 + 1;
  const Scalar _tmp115 = _tmp112 * _tmp94 + _tmp113 * _tmp91 + _tmp114 * _tmp98;
  const Scalar _tmp116 = _tmp103 * _tmp75;
  const Scalar _tmp117 = _tmp0 * (-_tmp102 * _tmp104 + _tmp105 * _tmp108 + _tmp110 * _tmp111 +
                                  _tmp115 * _tmp116 + _tmp62 * _tmp87 + _tmp73 * _tmp89) -
                         acceleration(1, 0);
  const Scalar _tmp118 = _tmp103 * _tmp73;
  const Scalar _tmp119 = _tmp108 * _tmp98 + _tmp110 * _tmp91 + _tmp87 * _tmp94;
  const Scalar _tmp120 = _tmp0 * (_tmp101 * _tmp105 + _tmp104 * _tmp119 + _tmp111 * _tmp90 -
                                  _tmp115 * _tmp118 + _tmp62 * _tmp97 + _tmp75 * _tmp89) -
                         acceleration(0, 0);
  const Scalar _tmp121 = _tmp0 * (_tmp102 * _tmp118 + _tmp105 * _tmp114 + _tmp111 * _tmp113 +
                                  _tmp112 * _tmp62 - _tmp116 * _tmp119 + _tmp63 * _tmp89) -
                         acceleration(2, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp117 * sqrt_info(0, 1) + _tmp120 * sqrt_info(0, 0) + _tmp121 * sqrt_info(0, 2);
  _res(1, 0) = _tmp117 * sqrt_info(1, 1) + _tmp120 * sqrt_info(1, 0) + _tmp121 * sqrt_info(1, 2);
  _res(2, 0) = _tmp117 * sqrt_info(2, 1) + _tmp120 * sqrt_info(2, 0) + _tmp121 * sqrt_info(2, 2);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
