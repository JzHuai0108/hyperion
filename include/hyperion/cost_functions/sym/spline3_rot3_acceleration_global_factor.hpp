// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_rot3_acceleration_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix33
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     acceleration: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Rot3AccelerationGlobalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 3>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const Eigen::Matrix<Scalar, 3, 1>& acceleration, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 423

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();

  // Intermediate terms (133)
  const Scalar _tmp0 = std::pow(dt, Scalar(-2));
  const Scalar _tmp1 = 2 * _x0[0];
  const Scalar _tmp2 = _tmp1 * _x0[3];
  const Scalar _tmp3 = 2 * _x0[2];
  const Scalar _tmp4 = _tmp3 * _x0[1];
  const Scalar _tmp5 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp6 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp7 = _x0[3] * _x1[3];
  const Scalar _tmp8 = 1 - epsilon;
  const Scalar _tmp9 = std::min<Scalar>(_tmp8, std::fabs(_tmp6 - _tmp7));
  const Scalar _tmp10 = 1 - std::pow(_tmp9, Scalar(2));
  const Scalar _tmp11 = std::acos(_tmp9);
  const Scalar _tmp12 =
      2 * std::min<Scalar>(0, (((-_tmp6 + _tmp7) > 0) - ((-_tmp6 + _tmp7) < 0))) + 1;
  const Scalar _tmp13 = _tmp11 * _tmp12 / std::sqrt(_tmp10);
  const Scalar _tmp14 = 2 * _tmp13;
  const Scalar _tmp15 = _tmp14 * lambdas(0, 2);
  const Scalar _tmp16 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp17 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp18 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp19 = std::pow(_tmp18, Scalar(2));
  const Scalar _tmp20 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp21 = _x1[3] * _x2[3];
  const Scalar _tmp22 = std::min<Scalar>(_tmp8, std::fabs(_tmp20 - _tmp21));
  const Scalar _tmp23 = 1 - std::pow(_tmp22, Scalar(2));
  const Scalar _tmp24 = std::acos(_tmp22);
  const Scalar _tmp25 =
      2 * std::min<Scalar>(0, (((-_tmp20 + _tmp21) > 0) - ((-_tmp20 + _tmp21) < 0))) + 1;
  const Scalar _tmp26 = std::pow(_tmp24, Scalar(2)) * std::pow(_tmp25, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp23;
  const Scalar _tmp27 = 4 * _tmp26;
  const Scalar _tmp28 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp29 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp30 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp31 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp32 = _tmp19 * _tmp27 + _tmp27 * _tmp28 + _tmp27 * _tmp30 + _tmp31;
  const Scalar _tmp33 = std::sqrt(_tmp32);
  const Scalar _tmp34 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp35 = std::sin(_tmp34);
  const Scalar _tmp36 = _tmp24 * _tmp25 / std::sqrt(_tmp23);
  const Scalar _tmp37 = 4 * _tmp35 * _tmp36 * lambdas(1, 0) * std::cos(_tmp34) / _tmp33;
  const Scalar _tmp38 = _tmp17 * _tmp37;
  const Scalar _tmp39 = 8 * _tmp26 * std::pow(_tmp35, Scalar(2)) / _tmp32;
  const Scalar _tmp40 = _tmp29 * _tmp39;
  const Scalar _tmp41 = _tmp18 * _tmp40;
  const Scalar _tmp42 = _tmp16 * (-_tmp38 + _tmp41);
  const Scalar _tmp43 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp44 = _x2[3] * _x3[3];
  const Scalar _tmp45 = std::min<Scalar>(_tmp8, std::fabs(_tmp43 - _tmp44));
  const Scalar _tmp46 =
      2 * (2 * std::min<Scalar>(0, (((-_tmp43 + _tmp44) > 0) - ((-_tmp43 + _tmp44) < 0))) + 1) *
      std::acos(_tmp45) / std::sqrt(Scalar(1 - std::pow(_tmp45, Scalar(2))));
  const Scalar _tmp47 = _tmp46 * lambdas(2, 1);
  const Scalar _tmp48 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp49 = -_tmp28 * _tmp39;
  const Scalar _tmp50 = -_tmp19 * _tmp39;
  const Scalar _tmp51 = _tmp48 * (_tmp49 + _tmp50 + 1);
  const Scalar _tmp52 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp53 = _tmp18 * _tmp37;
  const Scalar _tmp54 = _tmp17 * _tmp40;
  const Scalar _tmp55 = _tmp52 * (_tmp53 + _tmp54);
  const Scalar _tmp56 = _tmp42 * _tmp47 + _tmp47 * _tmp51 + _tmp47 * _tmp55;
  const Scalar _tmp57 = 2 * _tmp36;
  const Scalar _tmp58 = _tmp57 * lambdas(1, 1);
  const Scalar _tmp59 = _tmp18 * _tmp58;
  const Scalar _tmp60 = _tmp46 * lambdas(2, 2);
  const Scalar _tmp61 = _tmp48 * (-_tmp53 + _tmp54);
  const Scalar _tmp62 = _tmp48 * (_tmp38 + _tmp41);
  const Scalar _tmp63 = -_tmp30 * _tmp39 + 1;
  const Scalar _tmp64 = _tmp16 * (_tmp49 + _tmp63);
  const Scalar _tmp65 = _tmp17 * _tmp18 * _tmp39;
  const Scalar _tmp66 = _tmp29 * _tmp37;
  const Scalar _tmp67 = _tmp65 - _tmp66;
  const Scalar _tmp68 = _tmp47 * _tmp52;
  const Scalar _tmp69 = _tmp47 * _tmp62 + _tmp47 * _tmp64 + _tmp67 * _tmp68;
  const Scalar _tmp70 = _tmp29 * _tmp58;
  const Scalar _tmp71 = _tmp57 * lambdas(1, 2);
  const Scalar _tmp72 = _tmp50 + _tmp63;
  const Scalar _tmp73 = _tmp52 * _tmp60;
  const Scalar _tmp74 = _tmp16 * (_tmp65 + _tmp66);
  const Scalar _tmp75 = _tmp17 * _tmp71 - _tmp56 * _tmp59 + _tmp60 * _tmp61 + _tmp60 * _tmp74 +
                        _tmp69 * _tmp70 + _tmp72 * _tmp73;
  const Scalar _tmp76 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp77 = std::pow(_tmp76, Scalar(2));
  const Scalar _tmp78 = std::pow(_tmp11, Scalar(2)) * std::pow(_tmp12, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp10;
  const Scalar _tmp79 = 4 * _tmp78;
  const Scalar _tmp80 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp81 = std::pow(_tmp80, Scalar(2));
  const Scalar _tmp82 = std::pow(_tmp5, Scalar(2));
  const Scalar _tmp83 = _tmp31 + _tmp77 * _tmp79 + _tmp79 * _tmp81 + _tmp79 * _tmp82;
  const Scalar _tmp84 = std::sqrt(_tmp83);
  const Scalar _tmp85 = (Scalar(1) / Scalar(2)) * _tmp84;
  const Scalar _tmp86 = std::sin(_tmp85);
  const Scalar _tmp87 = 8 * _tmp78 * std::pow(_tmp86, Scalar(2)) / _tmp83;
  const Scalar _tmp88 = -_tmp77 * _tmp87;
  const Scalar _tmp89 = -_tmp81 * _tmp87;
  const Scalar _tmp90 = _tmp88 + _tmp89 + 1;
  const Scalar _tmp91 = _tmp17 * _tmp58;
  const Scalar _tmp92 = _tmp47 * _tmp61 + _tmp47 * _tmp74 + _tmp68 * _tmp72;
  const Scalar _tmp93 = _tmp91 + _tmp92;
  const Scalar _tmp94 = 4 * _tmp13 * _tmp86 * lambdas(0, 0) * std::cos(_tmp85) / _tmp84;
  const Scalar _tmp95 = _tmp76 * _tmp94;
  const Scalar _tmp96 = _tmp5 * _tmp80 * _tmp87;
  const Scalar _tmp97 = _tmp95 + _tmp96;
  const Scalar _tmp98 = _tmp56 + _tmp70;
  const Scalar _tmp99 = -_tmp82 * _tmp87 + 1;
  const Scalar _tmp100 = _tmp88 + _tmp99;
  const Scalar _tmp101 = _tmp5 * _tmp94;
  const Scalar _tmp102 = _tmp76 * _tmp87;
  const Scalar _tmp103 = _tmp102 * _tmp80;
  const Scalar _tmp104 = -_tmp101 + _tmp103;
  const Scalar _tmp105 = _tmp59 + _tmp69;
  const Scalar _tmp106 = _tmp14 * lambdas(0, 1);
  const Scalar _tmp107 = _tmp106 * (_tmp100 * _tmp98 + _tmp104 * _tmp105 + _tmp93 * _tmp97);
  const Scalar _tmp108 = _tmp29 * _tmp71 + _tmp42 * _tmp60 + _tmp51 * _tmp60 + _tmp55 * _tmp60 +
                         _tmp59 * _tmp92 - _tmp69 * _tmp91;
  const Scalar _tmp109 = -_tmp95 + _tmp96;
  const Scalar _tmp110 = _tmp18 * _tmp71 + _tmp56 * _tmp91 + _tmp60 * _tmp62 + _tmp60 * _tmp64 +
                         _tmp67 * _tmp73 - _tmp70 * _tmp92;
  const Scalar _tmp111 = _tmp102 * _tmp5;
  const Scalar _tmp112 = _tmp80 * _tmp94;
  const Scalar _tmp113 = _tmp111 + _tmp112;
  const Scalar _tmp114 = _tmp111 - _tmp112;
  const Scalar _tmp115 = _tmp89 + _tmp99;
  const Scalar _tmp116 = _tmp101 + _tmp103;
  const Scalar _tmp117 = _tmp105 * _tmp115 + _tmp114 * _tmp93 + _tmp116 * _tmp98;
  const Scalar _tmp118 = _tmp106 * _tmp80;
  const Scalar _tmp119 = -_tmp107 * _tmp76 + _tmp108 * _tmp109 + _tmp110 * _tmp113 +
                         _tmp117 * _tmp118 + _tmp15 * _tmp5 + _tmp75 * _tmp90;
  const Scalar _tmp120 = _tmp3 * _x0[3];
  const Scalar _tmp121 = _tmp1 * _x0[1];
  const Scalar _tmp122 = _tmp105 * _tmp113 + _tmp109 * _tmp98 + _tmp90 * _tmp93;
  const Scalar _tmp123 = _tmp100 * _tmp108 + _tmp104 * _tmp110 - _tmp106 * _tmp117 * _tmp5 +
                         _tmp106 * _tmp122 * _tmp76 + _tmp15 * _tmp80 + _tmp75 * _tmp97;
  const Scalar _tmp124 = -2 * std::pow(_x0[2], Scalar(2));
  const Scalar _tmp125 = 1 - 2 * std::pow(_x0[0], Scalar(2));
  const Scalar _tmp126 = _tmp107 * _tmp5 + _tmp108 * _tmp116 + _tmp110 * _tmp115 +
                         _tmp114 * _tmp75 - _tmp118 * _tmp122 + _tmp15 * _tmp76;
  const Scalar _tmp127 = _tmp0 * (_tmp119 * (-_tmp2 + _tmp4) + _tmp123 * (_tmp120 + _tmp121) +
                                  _tmp126 * (_tmp124 + _tmp125)) -
                         acceleration(1, 0);
  const Scalar _tmp128 = -2 * std::pow(_x0[1], Scalar(2));
  const Scalar _tmp129 = 2 * _x0[1] * _x0[3];
  const Scalar _tmp130 = _tmp3 * _x0[0];
  const Scalar _tmp131 = _tmp0 * (_tmp119 * (_tmp125 + _tmp128) + _tmp123 * (-_tmp129 + _tmp130) +
                                  _tmp126 * (_tmp2 + _tmp4)) -
                         acceleration(2, 0);
  const Scalar _tmp132 =
      _tmp0 * (_tmp119 * (_tmp129 + _tmp130) + _tmp123 * (_tmp124 + _tmp128 + 1) +
               _tmp126 * (-_tmp120 + _tmp121)) -
      acceleration(0, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp127 * sqrt_info(0, 1) + _tmp131 * sqrt_info(0, 2) + _tmp132 * sqrt_info(0, 0);
  _res(1, 0) = _tmp127 * sqrt_info(1, 1) + _tmp131 * sqrt_info(1, 2) + _tmp132 * sqrt_info(1, 0);
  _res(2, 0) = _tmp127 * sqrt_info(2, 1) + _tmp131 * sqrt_info(2, 2) + _tmp132 * sqrt_info(2, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
