// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_relative_angle_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_a: Pose3
 *     a_d_b: Matrix11
 *     y: Pose3
 *     y_T_b: Pose3
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose3SensorRelativeAngleBetweenFactor(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_a,
    const Eigen::Matrix<Scalar, 1, 1>& a_d_b, const sym::Pose3<Scalar>& y,
    const sym::Pose3<Scalar>& y_T_b, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 113

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (12)
  const Scalar _tmp0 =
      -_y[0] * _y_T_b[2] + _y[1] * _y_T_b[3] + _y[2] * _y_T_b[0] + _y[3] * _y_T_b[1];
  const Scalar _tmp1 =
      _x[0] * _x_T_a[3] + _x[1] * _x_T_a[2] - _x[2] * _x_T_a[1] + _x[3] * _x_T_a[0];
  const Scalar _tmp2 =
      _y[0] * _y_T_b[3] + _y[1] * _y_T_b[2] - _y[2] * _y_T_b[1] + _y[3] * _y_T_b[0];
  const Scalar _tmp3 =
      -_x[0] * _x_T_a[2] + _x[1] * _x_T_a[3] + _x[2] * _x_T_a[0] + _x[3] * _x_T_a[1];
  const Scalar _tmp4 =
      _y[0] * _y_T_b[1] - _y[1] * _y_T_b[0] + _y[2] * _y_T_b[3] + _y[3] * _y_T_b[2];
  const Scalar _tmp5 =
      -_x[0] * _x_T_a[0] - _x[1] * _x_T_a[1] - _x[2] * _x_T_a[2] + _x[3] * _x_T_a[3];
  const Scalar _tmp6 =
      _x[0] * _x_T_a[1] - _x[1] * _x_T_a[0] + _x[2] * _x_T_a[3] + _x[3] * _x_T_a[2];
  const Scalar _tmp7 =
      -_y[0] * _y_T_b[0] - _y[1] * _y_T_b[1] - _y[2] * _y_T_b[2] + _y[3] * _y_T_b[3];
  const Scalar _tmp8 = -_tmp0 * _tmp3 - _tmp1 * _tmp2 - _tmp4 * _tmp6;
  const Scalar _tmp9 = _tmp5 * _tmp7;
  const Scalar _tmp10 = std::min<Scalar>(1 - epsilon, std::fabs(_tmp8 - _tmp9));
  const Scalar _tmp11 =
      4 *
      std::pow(
          Scalar(2 * std::min<Scalar>(0, (((-_tmp8 + _tmp9) > 0) - ((-_tmp8 + _tmp9) < 0))) + 1),
          Scalar(2)) *
      std::pow(Scalar(std::acos(_tmp10)), Scalar(2)) / (1 - std::pow(_tmp10, Scalar(2)));

  // Output terms (1)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) =
      sqrt_info(0, 0) *
      (-a_d_b(0, 0) +
       std::sqrt(Scalar(
           _tmp11 * std::pow(Scalar(-_tmp0 * _tmp1 + _tmp2 * _tmp3 + _tmp4 * _tmp5 - _tmp6 * _tmp7),
                             Scalar(2)) +
           _tmp11 * std::pow(Scalar(_tmp0 * _tmp5 + _tmp1 * _tmp4 - _tmp2 * _tmp6 - _tmp3 * _tmp7),
                             Scalar(2)) +
           _tmp11 * std::pow(Scalar(_tmp0 * _tmp6 - _tmp1 * _tmp7 + _tmp2 * _tmp5 - _tmp3 * _tmp4),
                             Scalar(2)) +
           epsilon)));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
