// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_sensor_delta_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_y: Pose2
 *     y: Pose2
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x3) jacobian of res (3) wrt arg x (3)
 *     res_D_x_T_y: (3x3) jacobian of res (3) wrt arg x_T_y (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose2SensorDeltaFactorWithJacobians01(
    const sym::Pose2<Scalar>& x, const sym::Pose2<Scalar>& x_T_y, const sym::Pose2<Scalar>& y,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_y = nullptr) {
  // Total ops: 121

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_y = x_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (33)
  const Scalar _tmp0 = _x[0] * _y[0];
  const Scalar _tmp1 = _x[1] * _y[1];
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = _x[0] * _y[1] - _x[1] * _y[0];
  const Scalar _tmp4 = _tmp3 * _x_T_y[0];
  const Scalar _tmp5 = -_tmp2 * _x_T_y[1] + _tmp4;
  const Scalar _tmp6 = _tmp2 * _x_T_y[0];
  const Scalar _tmp7 = _tmp3 * _x_T_y[1];
  const Scalar _tmp8 = _tmp6 + _tmp7;
  const Scalar _tmp9 = _tmp8 + epsilon * ((((_tmp8) > 0) - ((_tmp8) < 0)) + Scalar(0.5));
  const Scalar _tmp10 = std::atan2(_tmp5, _tmp9);
  const Scalar _tmp11 = _x[0] * _x[2] + _x[1] * _x[3];
  const Scalar _tmp12 = _x[0] * _y[2];
  const Scalar _tmp13 = _x[1] * _y[3];
  const Scalar _tmp14 = -_tmp11 + _tmp12 + _tmp13 - _x_T_y[2];
  const Scalar _tmp15 = _x[0] * _x[3];
  const Scalar _tmp16 = _x[1] * _x[2];
  const Scalar _tmp17 = _x[0] * _y[3] - _x[1] * _y[2];
  const Scalar _tmp18 = -_tmp15 + _tmp16 + _tmp17 - _x_T_y[3];
  const Scalar _tmp19 = -_tmp0 - _tmp1;
  const Scalar _tmp20 = -_tmp7;
  const Scalar _tmp21 = Scalar(1.0) / (_tmp9);
  const Scalar _tmp22 = std::pow(_tmp9, Scalar(2));
  const Scalar _tmp23 = Scalar(1.0) / (_tmp22);
  const Scalar _tmp24 =
      _tmp21 * (_tmp19 * _x_T_y[0] + _tmp20) - _tmp23 * _tmp5 * (_tmp19 * _x_T_y[1] + _tmp4);
  const Scalar _tmp25 = std::pow(_tmp5, Scalar(2));
  const Scalar _tmp26 = _tmp22 / (_tmp22 + _tmp25);
  const Scalar _tmp27 = _tmp24 * _tmp26;
  const Scalar _tmp28 = _tmp11 - _tmp12 - _tmp13;
  const Scalar _tmp29 = -_tmp15 + _tmp16 + _tmp17;
  const Scalar _tmp30 = _tmp26 * sqrt_info(2, 0);
  const Scalar _tmp31 = _tmp21 * (_tmp20 - _tmp6) - _tmp23 * _tmp25;
  const Scalar _tmp32 = _tmp26 * _tmp31;

  // Output terms (3)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp10 * sqrt_info(0, 0) + _tmp14 * sqrt_info(0, 1) + _tmp18 * sqrt_info(0, 2);
  _res(1, 0) = _tmp10 * sqrt_info(1, 0) + _tmp14 * sqrt_info(1, 1) + _tmp18 * sqrt_info(1, 2);
  _res(2, 0) = _tmp10 * sqrt_info(2, 0) + _tmp14 * sqrt_info(2, 1) + _tmp18 * sqrt_info(2, 2);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp27 * sqrt_info(0, 0) + _tmp28 * sqrt_info(0, 2) + _tmp29 * sqrt_info(0, 1);
    _res_D_x(1, 0) = _tmp27 * sqrt_info(1, 0) + _tmp28 * sqrt_info(1, 2) + _tmp29 * sqrt_info(1, 1);
    _res_D_x(2, 0) = _tmp24 * _tmp30 + _tmp28 * sqrt_info(2, 2) + _tmp29 * sqrt_info(2, 1);
    _res_D_x(0, 1) = -_x[0] * sqrt_info(0, 1) + _x[1] * sqrt_info(0, 2);
    _res_D_x(1, 1) = -_x[0] * sqrt_info(1, 1) + _x[1] * sqrt_info(1, 2);
    _res_D_x(2, 1) = -_x[0] * sqrt_info(2, 1) + _x[1] * sqrt_info(2, 2);
    _res_D_x(0, 2) = -_x[0] * sqrt_info(0, 2) - _x[1] * sqrt_info(0, 1);
    _res_D_x(1, 2) = -_x[0] * sqrt_info(1, 2) - _x[1] * sqrt_info(1, 1);
    _res_D_x(2, 2) = -_x[0] * sqrt_info(2, 2) - _x[1] * sqrt_info(2, 1);
  }

  if (res_D_x_T_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x_T_y{res_D_x_T_y};

    _res_D_x_T_y(0, 0) = _tmp32 * sqrt_info(0, 0);
    _res_D_x_T_y(1, 0) = _tmp32 * sqrt_info(1, 0);
    _res_D_x_T_y(2, 0) = _tmp30 * _tmp31;
    _res_D_x_T_y(0, 1) = -sqrt_info(0, 1);
    _res_D_x_T_y(1, 1) = -sqrt_info(1, 1);
    _res_D_x_T_y(2, 1) = -sqrt_info(2, 1);
    _res_D_x_T_y(0, 2) = -sqrt_info(0, 2);
    _res_D_x_T_y(1, 2) = -sqrt_info(1, 2);
    _res_D_x_T_y(2, 2) = -sqrt_info(2, 2);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
