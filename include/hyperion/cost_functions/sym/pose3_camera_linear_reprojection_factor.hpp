// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/linear_camera_cal.h>
#include <sym/pose3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_camera_linear_reprojection_factor
 *
 * Args:
 *     w_T_b: Pose3
 *     b_T_c: Pose3
 *     calibration: LinearCameraCal
 *     l_w: Matrix31
 *     pixel: Matrix21
 *     sqrt_info: Matrix22
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix21
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> Pose3CameraLinearReprojectionFactor(
    const sym::Pose3<Scalar>& w_T_b, const sym::Pose3<Scalar>& b_T_c,
    const sym::LinearCameraCal<Scalar>& calibration, const Eigen::Matrix<Scalar, 3, 1>& l_w,
    const Eigen::Matrix<Scalar, 2, 1>& pixel, const Eigen::Matrix<Scalar, 2, 2>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 158

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _w_T_b = w_T_b.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b_T_c = b_T_c.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _calibration = calibration.Data();

  // Intermediate terms (42)
  const Scalar _tmp0 =
      _b_T_c[0] * _w_T_b[2] + _b_T_c[1] * _w_T_b[3] - _b_T_c[2] * _w_T_b[0] + _b_T_c[3] * _w_T_b[1];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 =
      _b_T_c[0] * _w_T_b[3] - _b_T_c[1] * _w_T_b[2] + _b_T_c[2] * _w_T_b[1] + _b_T_c[3] * _w_T_b[0];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = -_b_T_c[0] * _w_T_b[1] + _b_T_c[1] * _w_T_b[0] + _b_T_c[2] * _w_T_b[3] +
                       _b_T_c[3] * _w_T_b[2];
  const Scalar _tmp6 = 2 * _tmp5;
  const Scalar _tmp7 = _tmp2 * _tmp6;
  const Scalar _tmp8 = -2 * _b_T_c[0] * _w_T_b[0] - 2 * _b_T_c[1] * _w_T_b[1] -
                       2 * _b_T_c[2] * _w_T_b[2] + 2 * _b_T_c[3] * _w_T_b[3];
  const Scalar _tmp9 = _tmp0 * _tmp8;
  const Scalar _tmp10 = _tmp7 + _tmp9;
  const Scalar _tmp11 = _tmp0 * _tmp6;
  const Scalar _tmp12 = _tmp2 * _tmp8;
  const Scalar _tmp13 = _tmp11 - _tmp12;
  const Scalar _tmp14 = -2 * std::pow(_w_T_b[0], Scalar(2));
  const Scalar _tmp15 = 1 - 2 * std::pow(_w_T_b[2], Scalar(2));
  const Scalar _tmp16 = 2 * _w_T_b[1];
  const Scalar _tmp17 = _tmp16 * _w_T_b[0];
  const Scalar _tmp18 = 2 * _w_T_b[2] * _w_T_b[3];
  const Scalar _tmp19 = 2 * _w_T_b[0];
  const Scalar _tmp20 = _tmp19 * _w_T_b[3];
  const Scalar _tmp21 = _tmp16 * _w_T_b[2];
  const Scalar _tmp22 = _b_T_c[4] * (_tmp17 + _tmp18) + _b_T_c[5] * (_tmp14 + _tmp15) +
                        _b_T_c[6] * (-_tmp20 + _tmp21) + _w_T_b[5];
  const Scalar _tmp23 = -2 * std::pow(_w_T_b[1], Scalar(2));
  const Scalar _tmp24 = _tmp19 * _w_T_b[2];
  const Scalar _tmp25 = _tmp16 * _w_T_b[3];
  const Scalar _tmp26 = _b_T_c[4] * (_tmp15 + _tmp23) + _b_T_c[5] * (_tmp17 - _tmp18) +
                        _b_T_c[6] * (_tmp24 + _tmp25) + _w_T_b[4];
  const Scalar _tmp27 = _b_T_c[4] * (_tmp24 - _tmp25) + _b_T_c[5] * (_tmp20 + _tmp21) +
                        _b_T_c[6] * (_tmp14 + _tmp23 + 1) + _w_T_b[6];
  const Scalar _tmp28 = -_tmp10 * _tmp26 + _tmp10 * l_w(0, 0) - _tmp13 * _tmp22 +
                        _tmp13 * l_w(1, 0) - _tmp27 * _tmp4 + _tmp4 * l_w(2, 0);
  const Scalar _tmp29 = Scalar(1.0) / (std::max<Scalar>(_tmp28, epsilon));
  const Scalar _tmp30 = -2 * std::pow(_tmp5, Scalar(2));
  const Scalar _tmp31 = _tmp3 + _tmp30;
  const Scalar _tmp32 = 2 * _tmp0 * _tmp2;
  const Scalar _tmp33 = _tmp5 * _tmp8;
  const Scalar _tmp34 = _tmp32 - _tmp33;
  const Scalar _tmp35 = _tmp11 + _tmp12;
  const Scalar _tmp36 = _calibration[1] * _tmp29 *
                            (-_tmp22 * _tmp31 - _tmp26 * _tmp34 - _tmp27 * _tmp35 +
                             _tmp31 * l_w(1, 0) + _tmp34 * l_w(0, 0) + _tmp35 * l_w(2, 0)) +
                        _calibration[3] - pixel(1, 0);
  const Scalar _tmp37 = _tmp1 + _tmp30 + 1;
  const Scalar _tmp38 = _tmp7 - _tmp9;
  const Scalar _tmp39 = _tmp32 + _tmp33;
  const Scalar _tmp40 = _calibration[0] * _tmp29 *
                            (-_tmp22 * _tmp39 - _tmp26 * _tmp37 - _tmp27 * _tmp38 +
                             _tmp37 * l_w(0, 0) + _tmp38 * l_w(2, 0) + _tmp39 * l_w(1, 0)) +
                        _calibration[2] - pixel(0, 0);
  const Scalar _tmp41 = std::max<Scalar>(0, (((_tmp28) > 0) - ((_tmp28) < 0)));

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) = _tmp41 * (_tmp36 * sqrt_info(0, 1) + _tmp40 * sqrt_info(0, 0));
  _res(1, 0) = _tmp41 * (_tmp36 * sqrt_info(1, 1) + _tmp40 * sqrt_info(1, 0));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
