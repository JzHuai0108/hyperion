// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: rot3_delta_factor
 *
 * Args:
 *     x: Rot3
 *     y: Rot3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x3) jacobian of res (3) wrt arg x (3)
 *     res_D_y: (3x3) jacobian of res (3) wrt arg y (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Rot3DeltaFactorWithJacobians01(
    const sym::Rot3<Scalar>& x, const sym::Rot3<Scalar>& y,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 442

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (112)
  const Scalar _tmp0 = _x[3] * _y[3];
  const Scalar _tmp1 = _x[1] * _y[1];
  const Scalar _tmp2 = _x[0] * _y[0];
  const Scalar _tmp3 = _x[2] * _y[2];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = 2 * std::min<Scalar>(0, (((_tmp4) > 0) - ((_tmp4) < 0))) + 1;
  const Scalar _tmp6 = 2 * _tmp5;
  const Scalar _tmp7 = _x[3] * _y[2];
  const Scalar _tmp8 = _x[1] * _y[0];
  const Scalar _tmp9 = _x[0] * _y[1];
  const Scalar _tmp10 = _x[2] * _y[3];
  const Scalar _tmp11 = -_tmp10 + _tmp7 + _tmp8 - _tmp9;
  const Scalar _tmp12 = 1 - epsilon;
  const Scalar _tmp13 = std::min<Scalar>(_tmp12, std::fabs(_tmp4));
  const Scalar _tmp14 = std::acos(_tmp13) / std::sqrt(Scalar(1 - std::pow(_tmp13, Scalar(2))));
  const Scalar _tmp15 = _tmp11 * _tmp14;
  const Scalar _tmp16 = _tmp15 * _tmp6;
  const Scalar _tmp17 = _tmp6 * sqrt_info(0, 1);
  const Scalar _tmp18 = _x[3] * _y[1];
  const Scalar _tmp19 = _x[1] * _y[3];
  const Scalar _tmp20 = _x[0] * _y[2];
  const Scalar _tmp21 = _x[2] * _y[0];
  const Scalar _tmp22 = _tmp18 - _tmp19 + _tmp20 - _tmp21;
  const Scalar _tmp23 = _tmp14 * _tmp22;
  const Scalar _tmp24 = _tmp6 * sqrt_info(0, 0);
  const Scalar _tmp25 = _x[3] * _y[0];
  const Scalar _tmp26 = _x[1] * _y[2];
  const Scalar _tmp27 = _x[0] * _y[3];
  const Scalar _tmp28 = _x[2] * _y[1];
  const Scalar _tmp29 = _tmp25 - _tmp26 - _tmp27 + _tmp28;
  const Scalar _tmp30 = _tmp14 * _tmp29;
  const Scalar _tmp31 = _tmp6 * sqrt_info(1, 1);
  const Scalar _tmp32 = _tmp6 * sqrt_info(1, 0);
  const Scalar _tmp33 = _tmp6 * sqrt_info(2, 2);
  const Scalar _tmp34 = _tmp6 * sqrt_info(2, 1);
  const Scalar _tmp35 = _tmp6 * sqrt_info(2, 0);
  const Scalar _tmp36 = _tmp11 * sqrt_info(0, 2);
  const Scalar _tmp37 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp38 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp39 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp40 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp41 = _tmp37 - _tmp38 - _tmp39 + _tmp40;
  const Scalar _tmp42 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp43 = std::fabs(_tmp42);
  const Scalar _tmp44 = std::min<Scalar>(_tmp12, _tmp43);
  const Scalar _tmp45 = std::acos(_tmp44);
  const Scalar _tmp46 = 1 - std::pow(_tmp44, Scalar(2));
  const Scalar _tmp47 = _tmp5 * ((((_tmp12 - _tmp43) > 0) - ((_tmp12 - _tmp43) < 0)) + 1) *
                        (((_tmp42) > 0) - ((_tmp42) < 0));
  const Scalar _tmp48 = _tmp44 * _tmp47 / (_tmp46 * std::sqrt(_tmp46));
  const Scalar _tmp49 = _tmp45 * _tmp48;
  const Scalar _tmp50 = _tmp41 * _tmp49;
  const Scalar _tmp51 = _tmp47 / _tmp46;
  const Scalar _tmp52 = _tmp41 * _tmp51;
  const Scalar _tmp53 = _tmp22 * sqrt_info(0, 1);
  const Scalar _tmp54 = _tmp29 * sqrt_info(0, 0);
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp59 = std::pow(_tmp46, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp60 = _tmp45 * _tmp59;
  const Scalar _tmp61 = _tmp60 * (-_tmp55 - _tmp56 - _tmp57 - _tmp58);
  const Scalar _tmp62 = _tmp6 * sqrt_info(0, 2);
  const Scalar _tmp63 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp65 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp67 = -_tmp63 + _tmp64 - _tmp65 + _tmp66;
  const Scalar _tmp68 = _tmp60 * _tmp67;
  const Scalar _tmp69 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp70 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp71 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp72 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp73 = _tmp69 + _tmp70 - _tmp71 - _tmp72;
  const Scalar _tmp74 = _tmp60 * _tmp73;
  const Scalar _tmp75 = _tmp17 * _tmp74 + _tmp62 * _tmp68;
  const Scalar _tmp76 = _tmp11 * sqrt_info(1, 2);
  const Scalar _tmp77 = _tmp22 * sqrt_info(1, 1);
  const Scalar _tmp78 = _tmp29 * sqrt_info(1, 0);
  const Scalar _tmp79 = _tmp6 * sqrt_info(1, 2);
  const Scalar _tmp80 = _tmp31 * _tmp74 + _tmp68 * _tmp79;
  const Scalar _tmp81 = _tmp11 * sqrt_info(2, 2);
  const Scalar _tmp82 = _tmp22 * sqrt_info(2, 1);
  const Scalar _tmp83 = _tmp29 * sqrt_info(2, 0);
  const Scalar _tmp84 = _tmp33 * _tmp68 + _tmp34 * _tmp74;
  const Scalar _tmp85 = _tmp63 - _tmp64 + _tmp65 - _tmp66;
  const Scalar _tmp86 = _tmp51 * _tmp85;
  const Scalar _tmp87 = _tmp45 * _tmp85;
  const Scalar _tmp88 = _tmp48 * _tmp87;
  const Scalar _tmp89 = _tmp41 * _tmp60;
  const Scalar _tmp90 = -_tmp69 - _tmp70 + _tmp71 + _tmp72;
  const Scalar _tmp91 = _tmp60 * _tmp90;
  const Scalar _tmp92 = _tmp24 * _tmp91 + _tmp62 * _tmp89;
  const Scalar _tmp93 = _tmp11 * _tmp86;
  const Scalar _tmp94 = _tmp32 * _tmp91 + _tmp79 * _tmp89;
  const Scalar _tmp95 = _tmp33 * _tmp89 + _tmp35 * _tmp91;
  const Scalar _tmp96 = _tmp49 * _tmp73;
  const Scalar _tmp97 = _tmp51 * _tmp73;
  const Scalar _tmp98 = -_tmp37 + _tmp38 + _tmp39 - _tmp40;
  const Scalar _tmp99 = _tmp60 * _tmp98;
  const Scalar _tmp100 = _tmp59 * _tmp87;
  const Scalar _tmp101 = _tmp100 * _tmp24 + _tmp17 * _tmp99;
  const Scalar _tmp102 = _tmp100 * _tmp32 + _tmp31 * _tmp99;
  const Scalar _tmp103 = _tmp100 * _tmp35 + _tmp34 * _tmp99;
  const Scalar _tmp104 = _tmp49 * _tmp98;
  const Scalar _tmp105 = _tmp51 * _tmp98;
  const Scalar _tmp106 = _tmp60 * (_tmp55 + _tmp56 + _tmp57 + _tmp58);
  const Scalar _tmp107 = _tmp106 * _tmp6;
  const Scalar _tmp108 = _tmp49 * _tmp67;
  const Scalar _tmp109 = _tmp51 * _tmp67;
  const Scalar _tmp110 = _tmp49 * _tmp90;
  const Scalar _tmp111 = _tmp51 * _tmp90;

  // Output terms (3)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp16 * sqrt_info(0, 2) + _tmp17 * _tmp23 + _tmp24 * _tmp30;
  _res(1, 0) = _tmp16 * sqrt_info(1, 2) + _tmp23 * _tmp31 + _tmp30 * _tmp32;
  _res(2, 0) = _tmp15 * _tmp33 + _tmp23 * _tmp34 + _tmp30 * _tmp35;

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp24 * _tmp61 + _tmp36 * _tmp50 - _tmp36 * _tmp52 + _tmp50 * _tmp53 +
                     _tmp50 * _tmp54 - _tmp52 * _tmp53 - _tmp52 * _tmp54 + _tmp75;
    _res_D_x(1, 0) = _tmp32 * _tmp61 + _tmp50 * _tmp76 + _tmp50 * _tmp77 + _tmp50 * _tmp78 -
                     _tmp52 * _tmp76 - _tmp52 * _tmp77 - _tmp52 * _tmp78 + _tmp80;
    _res_D_x(2, 0) = _tmp35 * _tmp61 + _tmp50 * _tmp81 + _tmp50 * _tmp82 + _tmp50 * _tmp83 -
                     _tmp52 * _tmp81 - _tmp52 * _tmp82 - _tmp52 * _tmp83 + _tmp84;
    _res_D_x(0, 1) = _tmp17 * _tmp61 - _tmp36 * _tmp86 + _tmp36 * _tmp88 - _tmp53 * _tmp86 +
                     _tmp53 * _tmp88 - _tmp54 * _tmp86 + _tmp54 * _tmp88 + _tmp92;
    _res_D_x(1, 1) = _tmp31 * _tmp61 + _tmp76 * _tmp88 - _tmp77 * _tmp86 + _tmp77 * _tmp88 -
                     _tmp78 * _tmp86 + _tmp78 * _tmp88 - _tmp93 * sqrt_info(1, 2) + _tmp94;
    _res_D_x(2, 1) = _tmp34 * _tmp61 + _tmp81 * _tmp88 - _tmp82 * _tmp86 + _tmp82 * _tmp88 -
                     _tmp83 * _tmp86 + _tmp83 * _tmp88 - _tmp93 * sqrt_info(2, 2) + _tmp95;
    _res_D_x(0, 2) = _tmp101 + _tmp36 * _tmp96 - _tmp36 * _tmp97 + _tmp53 * _tmp96 -
                     _tmp53 * _tmp97 + _tmp54 * _tmp96 - _tmp54 * _tmp97 + _tmp61 * _tmp62;
    _res_D_x(1, 2) = _tmp102 + _tmp61 * _tmp79 + _tmp76 * _tmp96 - _tmp76 * _tmp97 +
                     _tmp77 * _tmp96 - _tmp77 * _tmp97 + _tmp78 * _tmp96 - _tmp78 * _tmp97;
    _res_D_x(2, 2) = _tmp103 + _tmp33 * _tmp61 + _tmp81 * _tmp96 - _tmp81 * _tmp97 +
                     _tmp82 * _tmp96 - _tmp82 * _tmp97 + _tmp83 * _tmp96 - _tmp83 * _tmp97;
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp104 * _tmp36 + _tmp104 * _tmp53 + _tmp104 * _tmp54 - _tmp105 * _tmp36 -
                     _tmp105 * _tmp53 - _tmp105 * _tmp54 + _tmp106 * _tmp24 + _tmp75;
    _res_D_y(1, 0) = _tmp104 * _tmp76 + _tmp104 * _tmp77 + _tmp104 * _tmp78 - _tmp105 * _tmp76 -
                     _tmp105 * _tmp77 - _tmp105 * _tmp78 + _tmp107 * sqrt_info(1, 0) + _tmp80;
    _res_D_y(2, 0) = _tmp104 * _tmp81 + _tmp104 * _tmp82 + _tmp104 * _tmp83 - _tmp105 * _tmp81 -
                     _tmp105 * _tmp82 - _tmp105 * _tmp83 + _tmp106 * _tmp35 + _tmp84;
    _res_D_y(0, 1) = _tmp107 * sqrt_info(0, 1) + _tmp108 * _tmp36 + _tmp108 * _tmp53 +
                     _tmp108 * _tmp54 - _tmp109 * _tmp36 - _tmp109 * _tmp53 - _tmp109 * _tmp54 +
                     _tmp92;
    _res_D_y(1, 1) = _tmp107 * sqrt_info(1, 1) + _tmp108 * _tmp76 + _tmp108 * _tmp77 +
                     _tmp108 * _tmp78 - _tmp109 * _tmp76 - _tmp109 * _tmp77 - _tmp109 * _tmp78 +
                     _tmp94;
    _res_D_y(2, 1) = _tmp106 * _tmp34 + _tmp108 * _tmp81 + _tmp108 * _tmp82 + _tmp108 * _tmp83 -
                     _tmp109 * _tmp81 - _tmp109 * _tmp82 - _tmp109 * _tmp83 + _tmp95;
    _res_D_y(0, 2) = _tmp101 + _tmp107 * sqrt_info(0, 2) + _tmp110 * _tmp36 + _tmp110 * _tmp53 +
                     _tmp110 * _tmp54 - _tmp111 * _tmp36 - _tmp111 * _tmp53 - _tmp111 * _tmp54;
    _res_D_y(1, 2) = _tmp102 + _tmp107 * sqrt_info(1, 2) + _tmp110 * _tmp76 + _tmp110 * _tmp77 +
                     _tmp110 * _tmp78 - _tmp111 * _tmp76 - _tmp111 * _tmp77 - _tmp111 * _tmp78;
    _res_D_y(2, 2) = _tmp103 + _tmp106 * _tmp33 + _tmp110 * _tmp81 + _tmp110 * _tmp82 +
                     _tmp110 * _tmp83 - _tmp111 * _tmp81 - _tmp111 * _tmp82 - _tmp111 * _tmp83;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
