// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose2_r2_sensor_delta_factor
 *
 * Args:
 *     lambdas: Matrix31
 *     x0: Pose2
 *     x1: Pose2
 *     x2: Pose2
 *     x3: Pose2
 *     x_T_y: Matrix21
 *     y: Pose2
 *     sqrt_info: Matrix22
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix21
 *     res_D_x0: (2x3) jacobian of res (2) wrt arg x0 (3)
 *     res_D_x1: (2x3) jacobian of res (2) wrt arg x1 (3)
 *     res_D_x2: (2x3) jacobian of res (2) wrt arg x2 (3)
 *     res_D_x3: (2x3) jacobian of res (2) wrt arg x3 (3)
 *     res_D_x_T_y: (2x2) jacobian of res (2) wrt arg x_T_y (2)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> Spline3Pose2R2SensorDeltaFactorWithJacobians12345(
    const Eigen::Matrix<Scalar, 3, 1>& lambdas, const sym::Pose2<Scalar>& x0,
    const sym::Pose2<Scalar>& x1, const sym::Pose2<Scalar>& x2, const sym::Pose2<Scalar>& x3,
    const Eigen::Matrix<Scalar, 2, 1>& x_T_y, const sym::Pose2<Scalar>& y,
    const Eigen::Matrix<Scalar, 2, 2>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr,
    Scalar* const res_D_x_T_y = nullptr) {
  // Total ops: 402

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (119)
  const Scalar _tmp0 = _x2[1] * _x3[0];
  const Scalar _tmp1 = _x2[0] * _x3[1];
  const Scalar _tmp2 = -_tmp0 + _tmp1;
  const Scalar _tmp3 = _x2[0] * _x3[0];
  const Scalar _tmp4 = _x2[1] * _x3[1];
  const Scalar _tmp5 = _tmp3 + _tmp4;
  const Scalar _tmp6 = _tmp5 + epsilon * ((((_tmp5) > 0) - ((_tmp5) < 0)) + Scalar(0.5));
  const Scalar _tmp7 = lambdas(2, 0) * std::atan2(_tmp2, _tmp6);
  const Scalar _tmp8 = std::sin(_tmp7);
  const Scalar _tmp9 = _x1[0] * _x2[1];
  const Scalar _tmp10 = _x1[1] * _x2[0];
  const Scalar _tmp11 = -_tmp10 + _tmp9;
  const Scalar _tmp12 = _x1[0] * _x2[0];
  const Scalar _tmp13 = _x1[1] * _x2[1];
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = _tmp14 + epsilon * ((((_tmp14) > 0) - ((_tmp14) < 0)) + Scalar(0.5));
  const Scalar _tmp16 = lambdas(1, 0) * std::atan2(_tmp11, _tmp15);
  const Scalar _tmp17 = std::sin(_tmp16);
  const Scalar _tmp18 = _tmp17 * _tmp8;
  const Scalar _tmp19 = std::cos(_tmp7);
  const Scalar _tmp20 = std::cos(_tmp16);
  const Scalar _tmp21 = _tmp19 * _tmp20;
  const Scalar _tmp22 = -_tmp18 + _tmp21;
  const Scalar _tmp23 = _x0[1] * _x1[0];
  const Scalar _tmp24 = _x0[0] * _x1[1];
  const Scalar _tmp25 = -_tmp23 + _tmp24;
  const Scalar _tmp26 = _x0[1] * _x1[1];
  const Scalar _tmp27 = _x0[0] * _x1[0];
  const Scalar _tmp28 = _tmp26 + _tmp27;
  const Scalar _tmp29 = _tmp28 + epsilon * ((((_tmp28) > 0) - ((_tmp28) < 0)) + Scalar(0.5));
  const Scalar _tmp30 = lambdas(0, 0) * std::atan2(_tmp25, _tmp29);
  const Scalar _tmp31 = std::cos(_tmp30);
  const Scalar _tmp32 = _tmp22 * _tmp31;
  const Scalar _tmp33 = _tmp20 * _tmp8;
  const Scalar _tmp34 = _tmp17 * _tmp19;
  const Scalar _tmp35 = _tmp33 + _tmp34;
  const Scalar _tmp36 = std::sin(_tmp30);
  const Scalar _tmp37 = _tmp35 * _tmp36;
  const Scalar _tmp38 = _tmp32 - _tmp37;
  const Scalar _tmp39 = _tmp38 * _x0[1];
  const Scalar _tmp40 = _tmp22 * _tmp36;
  const Scalar _tmp41 = _tmp31 * _tmp35;
  const Scalar _tmp42 = _tmp40 + _tmp41;
  const Scalar _tmp43 = _tmp42 * _x0[0];
  const Scalar _tmp44 = _tmp39 + _tmp43;
  const Scalar _tmp45 = _x0[2] + lambdas(0, 0) * (-_x0[2] + _x1[2]) +
                        lambdas(1, 0) * (-_x1[2] + _x2[2]) + lambdas(2, 0) * (-_x2[2] + _x3[2]);
  const Scalar _tmp46 = _tmp38 * _x0[0] - _tmp42 * _x0[1];
  const Scalar _tmp47 = _x0[3] + lambdas(0, 0) * (-_x0[3] + _x1[3]) +
                        lambdas(1, 0) * (-_x1[3] + _x2[3]) + lambdas(2, 0) * (-_x2[3] + _x3[3]);
  const Scalar _tmp48 =
      _tmp44 * _tmp45 - _tmp44 * _y[2] - _tmp46 * _tmp47 + _tmp46 * _y[3] - x_T_y(1, 0);
  const Scalar _tmp49 =
      -_tmp44 * _tmp47 + _tmp44 * _y[3] - _tmp45 * _tmp46 + _tmp46 * _y[2] - x_T_y(0, 0);
  const Scalar _tmp50 = std::pow(_tmp25, Scalar(2));
  const Scalar _tmp51 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp52 = Scalar(1.0) / (_tmp51);
  const Scalar _tmp53 = Scalar(1.0) / (_tmp29);
  const Scalar _tmp54 = _tmp51 * lambdas(0, 0) / (_tmp50 + _tmp51);
  const Scalar _tmp55 = _tmp54 * (-_tmp50 * _tmp52 + _tmp53 * (-_tmp26 - _tmp27));
  const Scalar _tmp56 = _tmp32 * _tmp55 - _tmp37 * _tmp55;
  const Scalar _tmp57 = -_tmp40 * _tmp55 - _tmp41 * _tmp55;
  const Scalar _tmp58 = _tmp46 + _tmp56 * _x0[0] + _tmp57 * _x0[1];
  const Scalar _tmp59 = -_tmp39 - _tmp43 - _tmp56 * _x0[1] + _tmp57 * _x0[0];
  const Scalar _tmp60 = -_tmp45 * _tmp59 - _tmp47 * _tmp58 + _tmp58 * _y[3] + _tmp59 * _y[2];
  const Scalar _tmp61 = _tmp45 * _tmp58 - _tmp47 * _tmp59 - _tmp58 * _y[2] + _tmp59 * _y[3];
  const Scalar _tmp62 = 1 - lambdas(0, 0);
  const Scalar _tmp63 = _tmp44 * sqrt_info(0, 1);
  const Scalar _tmp64 = _tmp46 * _tmp62;
  const Scalar _tmp65 = _tmp44 * sqrt_info(1, 1);
  const Scalar _tmp66 = _tmp44 * sqrt_info(0, 0);
  const Scalar _tmp67 = _tmp46 * sqrt_info(0, 1);
  const Scalar _tmp68 = _tmp44 * sqrt_info(1, 0);
  const Scalar _tmp69 = std::pow(_tmp11, Scalar(2));
  const Scalar _tmp70 = std::pow(_tmp15, Scalar(2));
  const Scalar _tmp71 = Scalar(1.0) / (_tmp70);
  const Scalar _tmp72 = Scalar(1.0) / (_tmp15);
  const Scalar _tmp73 = -_tmp69 * _tmp71 + _tmp72 * (-_tmp12 - _tmp13);
  const Scalar _tmp74 = _tmp70 * lambdas(1, 0) / (_tmp69 + _tmp70);
  const Scalar _tmp75 = _tmp21 * _tmp74;
  const Scalar _tmp76 = _tmp73 * _tmp74;
  const Scalar _tmp77 = -_tmp18 * _tmp76 + _tmp73 * _tmp75;
  const Scalar _tmp78 = -_tmp33 * _tmp76 - _tmp34 * _tmp76;
  const Scalar _tmp79 = _tmp54 * (-_tmp25 * _tmp52 * (_tmp23 - _tmp24) + _tmp28 * _tmp53);
  const Scalar _tmp80 = _tmp31 * _tmp77 + _tmp32 * _tmp79 + _tmp36 * _tmp78 - _tmp37 * _tmp79;
  const Scalar _tmp81 = _tmp31 * _tmp78 - _tmp36 * _tmp77 - _tmp40 * _tmp79 - _tmp41 * _tmp79;
  const Scalar _tmp82 = _tmp80 * _x0[0] + _tmp81 * _x0[1];
  const Scalar _tmp83 = -_tmp80 * _x0[1] + _tmp81 * _x0[0];
  const Scalar _tmp84 = _tmp45 * _tmp82 - _tmp47 * _tmp83 - _tmp82 * _y[2] + _tmp83 * _y[3];
  const Scalar _tmp85 = -_tmp45 * _tmp83 - _tmp47 * _tmp82 + _tmp82 * _y[3] + _tmp83 * _y[2];
  const Scalar _tmp86 = lambdas(0, 0) - lambdas(1, 0);
  const Scalar _tmp87 = _tmp46 * _tmp86;
  const Scalar _tmp88 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp89 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp90 = Scalar(1.0) / (_tmp89);
  const Scalar _tmp91 = Scalar(1.0) / (_tmp6);
  const Scalar _tmp92 = _tmp89 * lambdas(2, 0) / (_tmp88 + _tmp89);
  const Scalar _tmp93 = _tmp92 * (-_tmp88 * _tmp90 + _tmp91 * (-_tmp3 - _tmp4));
  const Scalar _tmp94 = -_tmp11 * _tmp71 * (_tmp10 - _tmp9) + _tmp14 * _tmp72;
  const Scalar _tmp95 = _tmp74 * _tmp94;
  const Scalar _tmp96 = -_tmp33 * _tmp93 - _tmp33 * _tmp95 - _tmp34 * _tmp93 - _tmp34 * _tmp95;
  const Scalar _tmp97 = -_tmp18 * _tmp93 - _tmp18 * _tmp95 + _tmp21 * _tmp93 + _tmp75 * _tmp94;
  const Scalar _tmp98 = _tmp31 * _tmp97 + _tmp36 * _tmp96;
  const Scalar _tmp99 = _tmp31 * _tmp96 - _tmp36 * _tmp97;
  const Scalar _tmp100 = -_tmp98 * _x0[1] + _tmp99 * _x0[0];
  const Scalar _tmp101 = _tmp98 * _x0[0] + _tmp99 * _x0[1];
  const Scalar _tmp102 = -_tmp100 * _tmp47 + _tmp100 * _y[3] + _tmp101 * _tmp45 - _tmp101 * _y[2];
  const Scalar _tmp103 = -_tmp100 * _tmp45 + _tmp100 * _y[2] - _tmp101 * _tmp47 + _tmp101 * _y[3];
  const Scalar _tmp104 = lambdas(1, 0) - lambdas(2, 0);
  const Scalar _tmp105 = _tmp104 * sqrt_info(0, 0);
  const Scalar _tmp106 = _tmp104 * _tmp46;
  const Scalar _tmp107 = _tmp92 * (-_tmp2 * _tmp90 * (_tmp0 - _tmp1) + _tmp5 * _tmp91);
  const Scalar _tmp108 = -_tmp107 * _tmp18 + _tmp107 * _tmp21;
  const Scalar _tmp109 = -_tmp107 * _tmp33 - _tmp107 * _tmp34;
  const Scalar _tmp110 = -_tmp108 * _tmp36 + _tmp109 * _tmp31;
  const Scalar _tmp111 = _tmp108 * _tmp31 + _tmp109 * _tmp36;
  const Scalar _tmp112 = _tmp110 * _x0[1] + _tmp111 * _x0[0];
  const Scalar _tmp113 = _tmp110 * _x0[0] - _tmp111 * _x0[1];
  const Scalar _tmp114 = _tmp112 * _tmp45 - _tmp112 * _y[2] - _tmp113 * _tmp47 + _tmp113 * _y[3];
  const Scalar _tmp115 = -_tmp112 * _tmp47 + _tmp112 * _y[3] - _tmp113 * _tmp45 + _tmp113 * _y[2];
  const Scalar _tmp116 = lambdas(2, 0) * sqrt_info(0, 1);
  const Scalar _tmp117 = _tmp46 * lambdas(2, 0);
  const Scalar _tmp118 = _tmp44 * lambdas(2, 0);

  // Output terms (6)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) = _tmp48 * sqrt_info(0, 1) + _tmp49 * sqrt_info(0, 0);
  _res(1, 0) = _tmp48 * sqrt_info(1, 1) + _tmp49 * sqrt_info(1, 0);

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 3>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = _tmp60 * sqrt_info(0, 0) + _tmp61 * sqrt_info(0, 1);
    _res_D_x0(1, 0) = _tmp60 * sqrt_info(1, 0) + _tmp61 * sqrt_info(1, 1);
    _res_D_x0(0, 1) = _tmp62 * _tmp63 - _tmp64 * sqrt_info(0, 0);
    _res_D_x0(1, 1) = _tmp62 * _tmp65 - _tmp64 * sqrt_info(1, 0);
    _res_D_x0(0, 2) = -_tmp62 * _tmp66 - _tmp62 * _tmp67;
    _res_D_x0(1, 2) = -_tmp62 * _tmp68 - _tmp64 * sqrt_info(1, 1);
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 3>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = _tmp84 * sqrt_info(0, 1) + _tmp85 * sqrt_info(0, 0);
    _res_D_x1(1, 0) = _tmp84 * sqrt_info(1, 1) + _tmp85 * sqrt_info(1, 0);
    _res_D_x1(0, 1) = _tmp63 * _tmp86 - _tmp87 * sqrt_info(0, 0);
    _res_D_x1(1, 1) = _tmp65 * _tmp86 - _tmp87 * sqrt_info(1, 0);
    _res_D_x1(0, 2) = -_tmp66 * _tmp86 - _tmp87 * sqrt_info(0, 1);
    _res_D_x1(1, 2) = -_tmp68 * _tmp86 - _tmp87 * sqrt_info(1, 1);
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 3>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = _tmp102 * sqrt_info(0, 1) + _tmp103 * sqrt_info(0, 0);
    _res_D_x2(1, 0) = _tmp102 * sqrt_info(1, 1) + _tmp103 * sqrt_info(1, 0);
    _res_D_x2(0, 1) = _tmp104 * _tmp63 - _tmp105 * _tmp46;
    _res_D_x2(1, 1) = _tmp104 * _tmp65 - _tmp106 * sqrt_info(1, 0);
    _res_D_x2(0, 2) = -_tmp104 * _tmp67 - _tmp105 * _tmp44;
    _res_D_x2(1, 2) = -_tmp104 * _tmp68 - _tmp106 * sqrt_info(1, 1);
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 3>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) = _tmp114 * sqrt_info(0, 1) + _tmp115 * sqrt_info(0, 0);
    _res_D_x3(1, 0) = _tmp114 * sqrt_info(1, 1) + _tmp115 * sqrt_info(1, 0);
    _res_D_x3(0, 1) = _tmp116 * _tmp44 - _tmp117 * sqrt_info(0, 0);
    _res_D_x3(1, 1) = -_tmp117 * sqrt_info(1, 0) + _tmp118 * sqrt_info(1, 1);
    _res_D_x3(0, 2) = -_tmp116 * _tmp46 - _tmp118 * sqrt_info(0, 0);
    _res_D_x3(1, 2) = -_tmp117 * sqrt_info(1, 1) - _tmp118 * sqrt_info(1, 0);
  }

  if (res_D_x_T_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 2, 2>> _res_D_x_T_y{res_D_x_T_y};

    _res_D_x_T_y(0, 0) = -sqrt_info(0, 0);
    _res_D_x_T_y(1, 0) = -sqrt_info(1, 0);
    _res_D_x_T_y(0, 1) = -sqrt_info(0, 1);
    _res_D_x_T_y(1, 1) = -sqrt_info(1, 1);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
