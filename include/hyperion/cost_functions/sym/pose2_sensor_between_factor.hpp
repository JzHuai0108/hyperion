// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_sensor_between_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_s: Pose2
 *     s_T_y: Pose2
 *     y: Pose2
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose2SensorBetweenFactor(const sym::Pose2<Scalar>& x,
                                                     const sym::Pose2<Scalar>& x_T_s,
                                                     const sym::Pose2<Scalar>& s_T_y,
                                                     const sym::Pose2<Scalar>& y,
                                                     const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
                                                     const Scalar epsilon) {
  // Total ops: 62

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _s_T_y = s_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (10)
  const Scalar _tmp0 = _x[0] * _x_T_s[0] - _x[1] * _x_T_s[1];
  const Scalar _tmp1 = _x[0] * _x_T_s[2] - _x[1] * _x_T_s[3] + _x[2];
  const Scalar _tmp2 = _x[0] * _x_T_s[1] + _x[1] * _x_T_s[0];
  const Scalar _tmp3 = _x[0] * _x_T_s[3] + _x[1] * _x_T_s[2] + _x[3];
  const Scalar _tmp4 = -_s_T_y[2] - _tmp0 * _tmp1 + _tmp0 * _y[2] - _tmp2 * _tmp3 + _tmp2 * _y[3];
  const Scalar _tmp5 = _tmp0 * _y[0] + _tmp2 * _y[1];
  const Scalar _tmp6 = _tmp0 * _y[1] - _tmp2 * _y[0];
  const Scalar _tmp7 = _s_T_y[0] * _tmp5 + _s_T_y[1] * _tmp6;
  const Scalar _tmp8 =
      std::atan2(_s_T_y[0] * _tmp6 - _s_T_y[1] * _tmp5,
                 _tmp7 + epsilon * ((((_tmp7) > 0) - ((_tmp7) < 0)) + Scalar(0.5)));
  const Scalar _tmp9 = -_s_T_y[3] - _tmp0 * _tmp3 + _tmp0 * _y[3] + _tmp1 * _tmp2 - _tmp2 * _y[2];

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp4 * sqrt_info(0, 1) + _tmp8 * sqrt_info(0, 0) + _tmp9 * sqrt_info(0, 2);
  _res(1, 0) = _tmp4 * sqrt_info(1, 1) + _tmp8 * sqrt_info(1, 0) + _tmp9 * sqrt_info(1, 2);
  _res(2, 0) = _tmp4 * sqrt_info(2, 1) + _tmp8 * sqrt_info(2, 0) + _tmp9 * sqrt_info(2, 2);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
