// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_sensor_relative_between_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_a: Pose2
 *     a_T_b: Pose2
 *     y: Pose2
 *     y_T_b: Pose2
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x3) jacobian of res (3) wrt arg x (3)
 *     res_D_x_T_a: (3x3) jacobian of res (3) wrt arg x_T_a (3)
 *     res_D_y: (3x3) jacobian of res (3) wrt arg y (3)
 *     res_D_y_T_b: (3x3) jacobian of res (3) wrt arg y_T_b (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose2SensorRelativeBetweenFactorWithJacobians0134(
    const sym::Pose2<Scalar>& x, const sym::Pose2<Scalar>& x_T_a, const sym::Pose2<Scalar>& a_T_b,
    const sym::Pose2<Scalar>& y, const sym::Pose2<Scalar>& y_T_b,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_a = nullptr,
    Scalar* const res_D_y = nullptr, Scalar* const res_D_y_T_b = nullptr) {
  // Total ops: 272

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (72)
  const Scalar _tmp0 = _x[1] * _x_T_a[1];
  const Scalar _tmp1 = _x[0] * _x_T_a[0];
  const Scalar _tmp2 = -_tmp0 + _tmp1;
  const Scalar _tmp3 = _x[1] * _x_T_a[2];
  const Scalar _tmp4 = _x[0] * _x_T_a[3];
  const Scalar _tmp5 = _tmp3 + _tmp4 + _x[3];
  const Scalar _tmp6 = _tmp2 * _tmp5;
  const Scalar _tmp7 = _x[1] * _x_T_a[0];
  const Scalar _tmp8 = _x[0] * _x_T_a[1];
  const Scalar _tmp9 = _tmp7 + _tmp8;
  const Scalar _tmp10 = _x[0] * _x_T_a[2] - _x[1] * _x_T_a[3];
  const Scalar _tmp11 = _tmp10 + _x[2];
  const Scalar _tmp12 = _y[0] * _y_T_b[3];
  const Scalar _tmp13 = _y[1] * _y_T_b[2];
  const Scalar _tmp14 = _tmp12 + _tmp13 + _y[3];
  const Scalar _tmp15 = _tmp14 * _tmp2;
  const Scalar _tmp16 = _y[0] * _y_T_b[2] - _y[1] * _y_T_b[3];
  const Scalar _tmp17 = _tmp16 + _y[2];
  const Scalar _tmp18 = -_a_T_b[3] + _tmp11 * _tmp9 + _tmp15 - _tmp17 * _tmp9 - _tmp6;
  const Scalar _tmp19 = _y[0] * _y_T_b[0] - _y[1] * _y_T_b[1];
  const Scalar _tmp20 = _tmp19 * _tmp2;
  const Scalar _tmp21 = _y[0] * _y_T_b[1];
  const Scalar _tmp22 = _y[1] * _y_T_b[0];
  const Scalar _tmp23 = _tmp21 + _tmp22;
  const Scalar _tmp24 = _tmp20 + _tmp23 * _tmp9;
  const Scalar _tmp25 = _tmp19 * _tmp9;
  const Scalar _tmp26 = _tmp2 * _tmp23;
  const Scalar _tmp27 = -_tmp25 + _tmp26;
  const Scalar _tmp28 = _a_T_b[0] * _tmp27 - _a_T_b[1] * _tmp24;
  const Scalar _tmp29 = _a_T_b[0] * _tmp24 + _a_T_b[1] * _tmp27;
  const Scalar _tmp30 = _tmp29 + epsilon * ((((_tmp29) > 0) - ((_tmp29) < 0)) + Scalar(0.5));
  const Scalar _tmp31 = std::atan2(_tmp28, _tmp30);
  const Scalar _tmp32 = _tmp11 * _tmp2;
  const Scalar _tmp33 = _tmp17 * _tmp2;
  const Scalar _tmp34 = -_a_T_b[2] + _tmp14 * _tmp9 - _tmp32 + _tmp33 - _tmp5 * _tmp9;
  const Scalar _tmp35 = -_tmp3 - _tmp4;
  const Scalar _tmp36 = -_tmp7 - _tmp8;
  const Scalar _tmp37 = -_tmp11 * _tmp36 + _tmp15 + _tmp17 * _tmp36 - _tmp6;
  const Scalar _tmp38 = -_tmp10 * _tmp9 - _tmp2 * _tmp35 + _tmp37;
  const Scalar _tmp39 = _tmp14 * _tmp36 + _tmp32 - _tmp33 - _tmp36 * _tmp5;
  const Scalar _tmp40 = -_tmp10 * _tmp2 + _tmp35 * _tmp9 + _tmp39;
  const Scalar _tmp41 = -_tmp20 + _tmp23 * _tmp36;
  const Scalar _tmp42 = _tmp19 * _tmp36 + _tmp26;
  const Scalar _tmp43 = Scalar(1.0) / (_tmp30);
  const Scalar _tmp44 = std::pow(_tmp30, Scalar(2));
  const Scalar _tmp45 = _tmp28 / _tmp44;
  const Scalar _tmp46 = _tmp44 / (std::pow(_tmp28, Scalar(2)) + _tmp44);
  const Scalar _tmp47 = _tmp46 * (_tmp43 * (_a_T_b[0] * _tmp41 - _a_T_b[1] * _tmp42) -
                                  _tmp45 * (_a_T_b[0] * _tmp42 + _a_T_b[1] * _tmp41));
  const Scalar _tmp48 = _tmp47 * sqrt_info(0, 0);
  const Scalar _tmp49 = _tmp47 * sqrt_info(1, 0);
  const Scalar _tmp50 = _tmp47 * sqrt_info(2, 0);
  const Scalar _tmp51 = _tmp0 - _tmp1;
  const Scalar _tmp52 = -_tmp2 * _x[0] - _tmp9 * _x[1];
  const Scalar _tmp53 = _tmp9 * _x[0];
  const Scalar _tmp54 = _tmp2 * _x[1];
  const Scalar _tmp55 = _tmp53 - _tmp54;
  const Scalar _tmp56 = -_tmp53 + _tmp54;
  const Scalar _tmp57 = -_tmp21 - _tmp22;
  const Scalar _tmp58 = _tmp2 * _tmp57 + _tmp25;
  const Scalar _tmp59 = _tmp20 - _tmp57 * _tmp9;
  const Scalar _tmp60 = _tmp46 * (_tmp43 * (_a_T_b[0] * _tmp59 - _a_T_b[1] * _tmp58) -
                                  _tmp45 * (_a_T_b[0] * _tmp58 + _a_T_b[1] * _tmp59));
  const Scalar _tmp61 = _tmp60 * sqrt_info(0, 0);
  const Scalar _tmp62 = -_tmp12 - _tmp13;
  const Scalar _tmp63 = _tmp16 * _tmp2 - _tmp62 * _tmp9;
  const Scalar _tmp64 = _tmp16 * _tmp9 + _tmp2 * _tmp62;
  const Scalar _tmp65 = _tmp60 * sqrt_info(1, 0);
  const Scalar _tmp66 = _tmp60 * sqrt_info(2, 0);
  const Scalar _tmp67 = _tmp9 * _y[0];
  const Scalar _tmp68 = _tmp2 * _y[1];
  const Scalar _tmp69 = -_tmp67 + _tmp68;
  const Scalar _tmp70 = _tmp2 * _y[0] + _tmp9 * _y[1];
  const Scalar _tmp71 = _tmp67 - _tmp68;

  // Output terms (5)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp18 * sqrt_info(0, 2) + _tmp31 * sqrt_info(0, 0) + _tmp34 * sqrt_info(0, 1);
  _res(1, 0) = _tmp18 * sqrt_info(1, 2) + _tmp31 * sqrt_info(1, 0) + _tmp34 * sqrt_info(1, 1);
  _res(2, 0) = _tmp18 * sqrt_info(2, 2) + _tmp31 * sqrt_info(2, 0) + _tmp34 * sqrt_info(2, 1);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp38 * sqrt_info(0, 1) + _tmp40 * sqrt_info(0, 2) + _tmp48;
    _res_D_x(1, 0) = _tmp38 * sqrt_info(1, 1) + _tmp40 * sqrt_info(1, 2) + _tmp49;
    _res_D_x(2, 0) = _tmp38 * sqrt_info(2, 1) + _tmp40 * sqrt_info(2, 2) + _tmp50;
    _res_D_x(0, 1) = _tmp51 * sqrt_info(0, 1) + _tmp9 * sqrt_info(0, 2);
    _res_D_x(1, 1) = _tmp51 * sqrt_info(1, 1) + _tmp9 * sqrt_info(1, 2);
    _res_D_x(2, 1) = _tmp51 * sqrt_info(2, 1) + _tmp9 * sqrt_info(2, 2);
    _res_D_x(0, 2) = _tmp36 * sqrt_info(0, 1) + _tmp51 * sqrt_info(0, 2);
    _res_D_x(1, 2) = _tmp36 * sqrt_info(1, 1) + _tmp51 * sqrt_info(1, 2);
    _res_D_x(2, 2) = _tmp36 * sqrt_info(2, 1) + _tmp51 * sqrt_info(2, 2);
  }

  if (res_D_x_T_a != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x_T_a{res_D_x_T_a};

    _res_D_x_T_a(0, 0) = _tmp37 * sqrt_info(0, 1) + _tmp39 * sqrt_info(0, 2) + _tmp48;
    _res_D_x_T_a(1, 0) = _tmp37 * sqrt_info(1, 1) + _tmp39 * sqrt_info(1, 2) + _tmp49;
    _res_D_x_T_a(2, 0) = _tmp37 * sqrt_info(2, 1) + _tmp39 * sqrt_info(2, 2) + _tmp50;
    _res_D_x_T_a(0, 1) = _tmp52 * sqrt_info(0, 1) + _tmp55 * sqrt_info(0, 2);
    _res_D_x_T_a(1, 1) = _tmp52 * sqrt_info(1, 1) + _tmp55 * sqrt_info(1, 2);
    _res_D_x_T_a(2, 1) = _tmp52 * sqrt_info(2, 1) + _tmp55 * sqrt_info(2, 2);
    _res_D_x_T_a(0, 2) = _tmp52 * sqrt_info(0, 2) + _tmp56 * sqrt_info(0, 1);
    _res_D_x_T_a(1, 2) = _tmp52 * sqrt_info(1, 2) + _tmp56 * sqrt_info(1, 1);
    _res_D_x_T_a(2, 2) = _tmp52 * sqrt_info(2, 2) + _tmp56 * sqrt_info(2, 1);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp61 + _tmp63 * sqrt_info(0, 2) + _tmp64 * sqrt_info(0, 1);
    _res_D_y(1, 0) = _tmp63 * sqrt_info(1, 2) + _tmp64 * sqrt_info(1, 1) + _tmp65;
    _res_D_y(2, 0) = _tmp63 * sqrt_info(2, 2) + _tmp64 * sqrt_info(2, 1) + _tmp66;
    _res_D_y(0, 1) = _tmp2 * sqrt_info(0, 1) + _tmp36 * sqrt_info(0, 2);
    _res_D_y(1, 1) = _tmp2 * sqrt_info(1, 1) + _tmp36 * sqrt_info(1, 2);
    _res_D_y(2, 1) = _tmp2 * sqrt_info(2, 1) + _tmp36 * sqrt_info(2, 2);
    _res_D_y(0, 2) = _tmp2 * sqrt_info(0, 2) + _tmp9 * sqrt_info(0, 1);
    _res_D_y(1, 2) = _tmp2 * sqrt_info(1, 2) + _tmp9 * sqrt_info(1, 1);
    _res_D_y(2, 2) = _tmp2 * sqrt_info(2, 2) + _tmp9 * sqrt_info(2, 1);
  }

  if (res_D_y_T_b != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_y_T_b{res_D_y_T_b};

    _res_D_y_T_b(0, 0) = _tmp61;
    _res_D_y_T_b(1, 0) = _tmp65;
    _res_D_y_T_b(2, 0) = _tmp66;
    _res_D_y_T_b(0, 1) = _tmp69 * sqrt_info(0, 2) + _tmp70 * sqrt_info(0, 1);
    _res_D_y_T_b(1, 1) = _tmp69 * sqrt_info(1, 2) + _tmp70 * sqrt_info(1, 1);
    _res_D_y_T_b(2, 1) = _tmp69 * sqrt_info(2, 2) + _tmp70 * sqrt_info(2, 1);
    _res_D_y_T_b(0, 2) = _tmp70 * sqrt_info(0, 2) + _tmp71 * sqrt_info(0, 1);
    _res_D_y_T_b(1, 2) = _tmp70 * sqrt_info(1, 2) + _tmp71 * sqrt_info(1, 1);
    _res_D_y_T_b(2, 2) = _tmp70 * sqrt_info(2, 2) + _tmp71 * sqrt_info(2, 1);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
