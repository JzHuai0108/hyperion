// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose2_sensor_between_factor
 *
 * Args:
 *     x: Pose2
 *     x_T_s: Pose2
 *     s_T_y: Pose2
 *     y: Pose2
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x3) jacobian of res (3) wrt arg x (3)
 *     res_D_x_T_s: (3x3) jacobian of res (3) wrt arg x_T_s (3)
 *     res_D_y: (3x3) jacobian of res (3) wrt arg y (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose2SensorBetweenFactorWithJacobians013(
    const sym::Pose2<Scalar>& x, const sym::Pose2<Scalar>& x_T_s, const sym::Pose2<Scalar>& s_T_y,
    const sym::Pose2<Scalar>& y, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_s = nullptr,
    Scalar* const res_D_y = nullptr) {
  // Total ops: 206

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _s_T_y = s_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (52)
  const Scalar _tmp0 = _x[0] * _x_T_s[0];
  const Scalar _tmp1 = _x[1] * _x_T_s[1];
  const Scalar _tmp2 = _tmp0 - _tmp1;
  const Scalar _tmp3 = _x[0] * _x_T_s[2] - _x[1] * _x_T_s[3];
  const Scalar _tmp4 = _tmp3 + _x[2];
  const Scalar _tmp5 = _tmp2 * _tmp4;
  const Scalar _tmp6 = _x[0] * _x_T_s[1];
  const Scalar _tmp7 = _x[1] * _x_T_s[0];
  const Scalar _tmp8 = _tmp6 + _tmp7;
  const Scalar _tmp9 = _x[0] * _x_T_s[3];
  const Scalar _tmp10 = _x[1] * _x_T_s[2];
  const Scalar _tmp11 = _tmp10 + _tmp9 + _x[3];
  const Scalar _tmp12 = _tmp2 * _y[2];
  const Scalar _tmp13 = -_s_T_y[2] - _tmp11 * _tmp8 + _tmp12 - _tmp5 + _tmp8 * _y[3];
  const Scalar _tmp14 = _tmp2 * _y[0];
  const Scalar _tmp15 = _tmp14 + _tmp8 * _y[1];
  const Scalar _tmp16 = _s_T_y[1] * _tmp15;
  const Scalar _tmp17 = _tmp2 * _y[1];
  const Scalar _tmp18 = _tmp8 * _y[0];
  const Scalar _tmp19 = _tmp17 - _tmp18;
  const Scalar _tmp20 = _s_T_y[0] * _tmp19 - _tmp16;
  const Scalar _tmp21 = _s_T_y[0] * _tmp15;
  const Scalar _tmp22 = _s_T_y[1] * _tmp19 + _tmp21;
  const Scalar _tmp23 = _tmp22 + epsilon * ((((_tmp22) > 0) - ((_tmp22) < 0)) + Scalar(0.5));
  const Scalar _tmp24 = std::atan2(_tmp20, _tmp23);
  const Scalar _tmp25 = _tmp11 * _tmp2;
  const Scalar _tmp26 = _tmp2 * _y[3];
  const Scalar _tmp27 = -_s_T_y[3] - _tmp25 + _tmp26 + _tmp4 * _tmp8 - _tmp8 * _y[2];
  const Scalar _tmp28 = -_tmp6 - _tmp7;
  const Scalar _tmp29 = -_tmp14 + _tmp28 * _y[1];
  const Scalar _tmp30 = _tmp17 + _tmp28 * _y[0];
  const Scalar _tmp31 = Scalar(1.0) / (_tmp23);
  const Scalar _tmp32 = std::pow(_tmp23, Scalar(2));
  const Scalar _tmp33 = _tmp20 / _tmp32;
  const Scalar _tmp34 = _tmp32 / (std::pow(_tmp20, Scalar(2)) + _tmp32);
  const Scalar _tmp35 = _tmp34 * (_tmp31 * (_s_T_y[0] * _tmp29 - _s_T_y[1] * _tmp30) -
                                  _tmp33 * (_s_T_y[0] * _tmp30 + _s_T_y[1] * _tmp29));
  const Scalar _tmp36 = _tmp35 * sqrt_info(0, 0);
  const Scalar _tmp37 = -_tmp10 - _tmp9;
  const Scalar _tmp38 = -_tmp25 + _tmp26 - _tmp28 * _tmp4 + _tmp28 * _y[2];
  const Scalar _tmp39 = -_tmp2 * _tmp37 - _tmp3 * _tmp8 + _tmp38;
  const Scalar _tmp40 = -_tmp11 * _tmp28 - _tmp12 + _tmp28 * _y[3] + _tmp5;
  const Scalar _tmp41 = -_tmp2 * _tmp3 + _tmp37 * _tmp8 + _tmp40;
  const Scalar _tmp42 = _tmp35 * sqrt_info(1, 0);
  const Scalar _tmp43 = _tmp35 * sqrt_info(2, 0);
  const Scalar _tmp44 = -_tmp0 + _tmp1;
  const Scalar _tmp45 = -_tmp2 * _x[0] - _tmp8 * _x[1];
  const Scalar _tmp46 = _tmp2 * _x[1];
  const Scalar _tmp47 = _tmp8 * _x[0];
  const Scalar _tmp48 = -_tmp46 + _tmp47;
  const Scalar _tmp49 = _tmp46 - _tmp47;
  const Scalar _tmp50 = -_tmp17 + _tmp18;
  const Scalar _tmp51 =
      _tmp34 * (_tmp31 * (-_s_T_y[1] * _tmp50 + _tmp21) - _tmp33 * (_s_T_y[0] * _tmp50 + _tmp16));

  // Output terms (4)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp13 * sqrt_info(0, 1) + _tmp24 * sqrt_info(0, 0) + _tmp27 * sqrt_info(0, 2);
  _res(1, 0) = _tmp13 * sqrt_info(1, 1) + _tmp24 * sqrt_info(1, 0) + _tmp27 * sqrt_info(1, 2);
  _res(2, 0) = _tmp13 * sqrt_info(2, 1) + _tmp24 * sqrt_info(2, 0) + _tmp27 * sqrt_info(2, 2);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp36 + _tmp39 * sqrt_info(0, 1) + _tmp41 * sqrt_info(0, 2);
    _res_D_x(1, 0) = _tmp39 * sqrt_info(1, 1) + _tmp41 * sqrt_info(1, 2) + _tmp42;
    _res_D_x(2, 0) = _tmp39 * sqrt_info(2, 1) + _tmp41 * sqrt_info(2, 2) + _tmp43;
    _res_D_x(0, 1) = _tmp44 * sqrt_info(0, 1) + _tmp8 * sqrt_info(0, 2);
    _res_D_x(1, 1) = _tmp44 * sqrt_info(1, 1) + _tmp8 * sqrt_info(1, 2);
    _res_D_x(2, 1) = _tmp44 * sqrt_info(2, 1) + _tmp8 * sqrt_info(2, 2);
    _res_D_x(0, 2) = _tmp28 * sqrt_info(0, 1) + _tmp44 * sqrt_info(0, 2);
    _res_D_x(1, 2) = _tmp28 * sqrt_info(1, 1) + _tmp44 * sqrt_info(1, 2);
    _res_D_x(2, 2) = _tmp28 * sqrt_info(2, 1) + _tmp44 * sqrt_info(2, 2);
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s(0, 0) = _tmp36 + _tmp38 * sqrt_info(0, 1) + _tmp40 * sqrt_info(0, 2);
    _res_D_x_T_s(1, 0) = _tmp38 * sqrt_info(1, 1) + _tmp40 * sqrt_info(1, 2) + _tmp42;
    _res_D_x_T_s(2, 0) = _tmp38 * sqrt_info(2, 1) + _tmp40 * sqrt_info(2, 2) + _tmp43;
    _res_D_x_T_s(0, 1) = _tmp45 * sqrt_info(0, 1) + _tmp48 * sqrt_info(0, 2);
    _res_D_x_T_s(1, 1) = _tmp45 * sqrt_info(1, 1) + _tmp48 * sqrt_info(1, 2);
    _res_D_x_T_s(2, 1) = _tmp45 * sqrt_info(2, 1) + _tmp48 * sqrt_info(2, 2);
    _res_D_x_T_s(0, 2) = _tmp45 * sqrt_info(0, 2) + _tmp49 * sqrt_info(0, 1);
    _res_D_x_T_s(1, 2) = _tmp45 * sqrt_info(1, 2) + _tmp49 * sqrt_info(1, 1);
    _res_D_x_T_s(2, 2) = _tmp45 * sqrt_info(2, 2) + _tmp49 * sqrt_info(2, 1);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp51 * sqrt_info(0, 0);
    _res_D_y(1, 0) = _tmp51 * sqrt_info(1, 0);
    _res_D_y(2, 0) = _tmp51 * sqrt_info(2, 0);
    _res_D_y(0, 1) = _tmp2 * sqrt_info(0, 1) + _tmp28 * sqrt_info(0, 2);
    _res_D_y(1, 1) = _tmp2 * sqrt_info(1, 1) + _tmp28 * sqrt_info(1, 2);
    _res_D_y(2, 1) = _tmp2 * sqrt_info(2, 1) + _tmp28 * sqrt_info(2, 2);
    _res_D_y(0, 2) = _tmp2 * sqrt_info(0, 2) + _tmp8 * sqrt_info(0, 1);
    _res_D_y(1, 2) = _tmp2 * sqrt_info(1, 2) + _tmp8 * sqrt_info(1, 1);
    _res_D_y(2, 2) = _tmp2 * sqrt_info(2, 2) + _tmp8 * sqrt_info(2, 1);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
