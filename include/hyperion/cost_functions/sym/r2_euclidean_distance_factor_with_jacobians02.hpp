// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: r2_euclidean_distance_factor
 *
 * Args:
 *     x: Matrix21
 *     x_d_y: Matrix11
 *     y: Matrix21
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x: (1x2) jacobian of res (1) wrt arg x (2)
 *     res_D_y: (1x2) jacobian of res (1) wrt arg y (2)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> R2EuclideanDistanceFactorWithJacobians02(
    const Eigen::Matrix<Scalar, 2, 1>& x, const Eigen::Matrix<Scalar, 1, 1>& x_d_y,
    const Eigen::Matrix<Scalar, 2, 1>& y, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info,
    const Scalar epsilon, Scalar* const res_D_x = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 14

  // Input arrays

  // Intermediate terms (6)
  const Scalar _tmp0 = -x(0, 0) + y(0, 0);
  const Scalar _tmp1 = -x(1, 0) + y(1, 0);
  const Scalar _tmp2 =
      std::sqrt(Scalar(std::pow(_tmp0, Scalar(2)) + std::pow(_tmp1, Scalar(2)) + epsilon));
  const Scalar _tmp3 = sqrt_info(0, 0) / _tmp2;
  const Scalar _tmp4 = _tmp0 * _tmp3;
  const Scalar _tmp5 = _tmp1 * _tmp3;

  // Output terms (3)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) * (_tmp2 - x_d_y(0, 0));

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 2>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = -_tmp4;
    _res_D_x(0, 1) = -_tmp5;
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 2>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp4;
    _res_D_y(0, 1) = _tmp5;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
