// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_rot3_sensor_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_s: Pose3
 *     s_T_y: Rot3
 *     y: Pose3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose3Rot3SensorBetweenFactor(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_s, const sym::Rot3<Scalar>& s_T_y,
    const sym::Pose3<Scalar>& y, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 118

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _s_T_y = s_T_y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();

  // Intermediate terms (15)
  const Scalar _tmp0 =
      _x[0] * _x_T_s[1] - _x[1] * _x_T_s[0] + _x[2] * _x_T_s[3] + _x[3] * _x_T_s[2];
  const Scalar _tmp1 =
      -_x[0] * _x_T_s[2] + _x[1] * _x_T_s[3] + _x[2] * _x_T_s[0] + _x[3] * _x_T_s[1];
  const Scalar _tmp2 =
      _x[0] * _x_T_s[3] + _x[1] * _x_T_s[2] - _x[2] * _x_T_s[1] + _x[3] * _x_T_s[0];
  const Scalar _tmp3 =
      -_x[0] * _x_T_s[0] - _x[1] * _x_T_s[1] - _x[2] * _x_T_s[2] + _x[3] * _x_T_s[3];
  const Scalar _tmp4 = -_tmp0 * _y[3] + _tmp1 * _y[0] - _tmp2 * _y[1] + _tmp3 * _y[2];
  const Scalar _tmp5 = _tmp0 * _y[1] - _tmp1 * _y[2] - _tmp2 * _y[3] + _tmp3 * _y[0];
  const Scalar _tmp6 = -_tmp0 * _y[0] - _tmp1 * _y[3] + _tmp2 * _y[2] + _tmp3 * _y[1];
  const Scalar _tmp7 = _tmp0 * _y[2] + _tmp1 * _y[1] + _tmp2 * _y[0] + _tmp3 * _y[3];
  const Scalar _tmp8 = -_s_T_y[0] * _tmp5 - _s_T_y[1] * _tmp6 - _s_T_y[2] * _tmp4;
  const Scalar _tmp9 = _s_T_y[3] * _tmp7;
  const Scalar _tmp10 = std::min<Scalar>(1 - epsilon, std::fabs(_tmp8 - _tmp9));
  const Scalar _tmp11 =
      2 * (2 * std::min<Scalar>(0, (((-_tmp8 + _tmp9) > 0) - ((-_tmp8 + _tmp9) < 0))) + 1) *
      std::acos(_tmp10) / std::sqrt(Scalar(1 - std::pow(_tmp10, Scalar(2))));
  const Scalar _tmp12 =
      _tmp11 * (-_s_T_y[0] * _tmp7 - _s_T_y[1] * _tmp4 + _s_T_y[2] * _tmp6 + _s_T_y[3] * _tmp5);
  const Scalar _tmp13 =
      _tmp11 * (-_s_T_y[0] * _tmp6 + _s_T_y[1] * _tmp5 - _s_T_y[2] * _tmp7 + _s_T_y[3] * _tmp4);
  const Scalar _tmp14 =
      _tmp11 * (_s_T_y[0] * _tmp4 - _s_T_y[1] * _tmp7 - _s_T_y[2] * _tmp5 + _s_T_y[3] * _tmp6);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp12 * sqrt_info(0, 0) + _tmp13 * sqrt_info(0, 2) + _tmp14 * sqrt_info(0, 1);
  _res(1, 0) = _tmp12 * sqrt_info(1, 0) + _tmp13 * sqrt_info(1, 2) + _tmp14 * sqrt_info(1, 1);
  _res(2, 0) = _tmp12 * sqrt_info(2, 0) + _tmp13 * sqrt_info(2, 2) + _tmp14 * sqrt_info(2, 1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
