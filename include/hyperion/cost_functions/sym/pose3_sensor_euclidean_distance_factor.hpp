// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_euclidean_distance_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_s: Pose3
 *     s_d_y: Matrix11
 *     y: Pose3
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose3SensorEuclideanDistanceFactor(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_s,
    const Eigen::Matrix<Scalar, 1, 1>& s_d_y, const sym::Pose3<Scalar>& y,
    const Eigen::Matrix<Scalar, 1, 1>& sqrt_info, const Scalar epsilon) {
  // Total ops: 58

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();

  // Intermediate terms (11)
  const Scalar _tmp0 = 2 * _x[0];
  const Scalar _tmp1 = _tmp0 * _x[1];
  const Scalar _tmp2 = 2 * _x[3];
  const Scalar _tmp3 = _tmp2 * _x[2];
  const Scalar _tmp4 = _tmp0 * _x[2];
  const Scalar _tmp5 = _tmp2 * _x[1];
  const Scalar _tmp6 = -2 * std::pow(_x[2], Scalar(2));
  const Scalar _tmp7 = 1 - 2 * std::pow(_x[1], Scalar(2));
  const Scalar _tmp8 = _tmp0 * _x[3];
  const Scalar _tmp9 = 2 * _x[1] * _x[2];
  const Scalar _tmp10 = -2 * std::pow(_x[0], Scalar(2));

  // Output terms (1)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) =
      sqrt_info(0, 0) *
      (-s_d_y(0, 0) +
       std::sqrt(Scalar(
           epsilon +
           std::pow(Scalar(-_x[4] - _x_T_s[4] * (_tmp6 + _tmp7) - _x_T_s[5] * (_tmp1 - _tmp3) -
                           _x_T_s[6] * (_tmp4 + _tmp5) + _y[4]),
                    Scalar(2)) +
           std::pow(Scalar(-_x[5] - _x_T_s[4] * (_tmp1 + _tmp3) - _x_T_s[5] * (_tmp10 + _tmp6 + 1) -
                           _x_T_s[6] * (-_tmp8 + _tmp9) + _y[5]),
                    Scalar(2)) +
           std::pow(Scalar(-_x[6] - _x_T_s[4] * (_tmp4 - _tmp5) - _x_T_s[5] * (_tmp8 + _tmp9) -
                           _x_T_s[6] * (_tmp10 + _tmp7) + _y[6]),
                    Scalar(2)))));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
