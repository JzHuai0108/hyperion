// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline5_rot3_velocity_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix52
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     x4: Rot3
 *     x5: Rot3
 *     velocity: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline5Rot3VelocityGlobalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 5, 2>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const sym::Rot3<Scalar>& x4, const sym::Rot3<Scalar>& x5,
    const Eigen::Matrix<Scalar, 3, 1>& velocity, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
    const Scalar epsilon) {
  // Total ops: 590

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x4 = x4.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x5 = x5.Data();

  // Intermediate terms (176)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = 2 * _x0[3];
  const Scalar _tmp2 = _tmp1 * _x0[2];
  const Scalar _tmp3 = 2 * _x0[0] * _x0[1];
  const Scalar _tmp4 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp5 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp6 = _x2[3] * _x3[3];
  const Scalar _tmp7 = 1 - epsilon;
  const Scalar _tmp8 = std::min<Scalar>(_tmp7, std::fabs(_tmp5 - _tmp6));
  const Scalar _tmp9 = std::acos(_tmp8);
  const Scalar _tmp10 =
      2 * std::min<Scalar>(0, (((-_tmp5 + _tmp6) > 0) - ((-_tmp5 + _tmp6) < 0))) + 1;
  const Scalar _tmp11 = 1 - std::pow(_tmp8, Scalar(2));
  const Scalar _tmp12 = _tmp10 * _tmp9 / std::sqrt(_tmp11);
  const Scalar _tmp13 = 2 * lambdas(2, 1);
  const Scalar _tmp14 = _tmp12 * _tmp13;
  const Scalar _tmp15 = _x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1];
  const Scalar _tmp16 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp17 = _x3[3] * _x4[3];
  const Scalar _tmp18 = std::min<Scalar>(_tmp7, std::fabs(_tmp16 - _tmp17));
  const Scalar _tmp19 = std::acos(_tmp18);
  const Scalar _tmp20 =
      2 * std::min<Scalar>(0, (((-_tmp16 + _tmp17) > 0) - ((-_tmp16 + _tmp17) < 0))) + 1;
  const Scalar _tmp21 = 1 - std::pow(_tmp18, Scalar(2));
  const Scalar _tmp22 = _tmp19 * _tmp20 / std::sqrt(_tmp21);
  const Scalar _tmp23 = -_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0];
  const Scalar _tmp24 = std::pow(_tmp23, Scalar(2));
  const Scalar _tmp25 = std::pow(_tmp19, Scalar(2)) * std::pow(_tmp20, Scalar(2)) *
                        std::pow(lambdas(3, 0), Scalar(2)) / _tmp21;
  const Scalar _tmp26 = 4 * _tmp25;
  const Scalar _tmp27 = std::pow(_tmp15, Scalar(2));
  const Scalar _tmp28 = -_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2];
  const Scalar _tmp29 = std::pow(_tmp28, Scalar(2));
  const Scalar _tmp30 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp31 = _tmp24 * _tmp26 + _tmp26 * _tmp27 + _tmp26 * _tmp29 + _tmp30;
  const Scalar _tmp32 = std::sqrt(_tmp31);
  const Scalar _tmp33 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp34 = std::sin(_tmp33);
  const Scalar _tmp35 = 4 * _tmp34 * lambdas(3, 0) * std::cos(_tmp33) / _tmp32;
  const Scalar _tmp36 = _tmp22 * _tmp35;
  const Scalar _tmp37 = _tmp15 * _tmp36;
  const Scalar _tmp38 = 8 * _tmp25 * std::pow(_tmp34, Scalar(2)) / _tmp31;
  const Scalar _tmp39 = _tmp23 * _tmp38;
  const Scalar _tmp40 = _tmp28 * _tmp39;
  const Scalar _tmp41 = -_x4[0] * _x5[0] - _x4[1] * _x5[1] - _x4[2] * _x5[2];
  const Scalar _tmp42 = _x4[3] * _x5[3];
  const Scalar _tmp43 = std::min<Scalar>(_tmp7, std::fabs(_tmp41 - _tmp42));
  const Scalar _tmp44 =
      2 * lambdas(4, 1) *
      (2 * std::min<Scalar>(0, (((-_tmp41 + _tmp42) > 0) - ((-_tmp41 + _tmp42) < 0))) + 1) *
      std::acos(_tmp43) / std::sqrt(Scalar(1 - std::pow(_tmp43, Scalar(2))));
  const Scalar _tmp45 =
      _tmp44 * (-_x4[0] * _x5[1] + _x4[1] * _x5[0] - _x4[2] * _x5[3] + _x4[3] * _x5[2]);
  const Scalar _tmp46 = _tmp22 * _tmp23;
  const Scalar _tmp47 = 2 * lambdas(3, 1);
  const Scalar _tmp48 = _tmp15 * _tmp39;
  const Scalar _tmp49 = _tmp28 * _tmp36;
  const Scalar _tmp50 =
      _tmp44 * (_x4[0] * _x5[2] - _x4[1] * _x5[3] - _x4[2] * _x5[0] + _x4[3] * _x5[1]);
  const Scalar _tmp51 = -_tmp27 * _tmp38;
  const Scalar _tmp52 = -_tmp29 * _tmp38 + 1;
  const Scalar _tmp53 =
      _tmp44 * (-_x4[0] * _x5[3] - _x4[1] * _x5[2] + _x4[2] * _x5[1] + _x4[3] * _x5[0]);
  const Scalar _tmp54 = _tmp45 * (_tmp37 + _tmp40) + _tmp46 * _tmp47 + _tmp50 * (_tmp48 - _tmp49) +
                        _tmp53 * (_tmp51 + _tmp52);
  const Scalar _tmp55 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp56 = std::pow(_tmp4, Scalar(2));
  const Scalar _tmp57 = std::pow(_tmp10, Scalar(2)) * std::pow(_tmp9, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp11;
  const Scalar _tmp58 = 4 * _tmp57;
  const Scalar _tmp59 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp60 = std::pow(_tmp59, Scalar(2));
  const Scalar _tmp61 = std::pow(_tmp55, Scalar(2));
  const Scalar _tmp62 = _tmp30 + _tmp56 * _tmp58 + _tmp58 * _tmp60 + _tmp58 * _tmp61;
  const Scalar _tmp63 = std::sqrt(_tmp62);
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * _tmp63;
  const Scalar _tmp65 = std::sin(_tmp64);
  const Scalar _tmp66 = 8 * _tmp57 * std::pow(_tmp65, Scalar(2)) / _tmp62;
  const Scalar _tmp67 = _tmp4 * _tmp66;
  const Scalar _tmp68 = _tmp55 * _tmp67;
  const Scalar _tmp69 = 4 * _tmp65 * lambdas(2, 0) * std::cos(_tmp64) / _tmp63;
  const Scalar _tmp70 = _tmp12 * _tmp69;
  const Scalar _tmp71 = _tmp59 * _tmp70;
  const Scalar _tmp72 = -_tmp24 * _tmp38;
  const Scalar _tmp73 = _tmp22 * _tmp47;
  const Scalar _tmp74 = _tmp15 * _tmp28 * _tmp38;
  const Scalar _tmp75 = _tmp35 * _tmp46;
  const Scalar _tmp76 = _tmp15 * _tmp73 + _tmp45 * (_tmp74 - _tmp75) + _tmp50 * (_tmp52 + _tmp72) +
                        _tmp53 * (_tmp48 + _tmp49);
  const Scalar _tmp77 = _tmp12 * _tmp55;
  const Scalar _tmp78 = _tmp69 * _tmp77;
  const Scalar _tmp79 = _tmp59 * _tmp67;
  const Scalar _tmp80 = -_tmp61 * _tmp66;
  const Scalar _tmp81 = -_tmp60 * _tmp66;
  const Scalar _tmp82 = _tmp28 * _tmp73 + _tmp45 * (_tmp51 + _tmp72 + 1) +
                        _tmp50 * (_tmp74 + _tmp75) + _tmp53 * (-_tmp37 + _tmp40);
  const Scalar _tmp83 = _tmp14 * _tmp4 + _tmp54 * (_tmp68 - _tmp71) + _tmp76 * (_tmp78 + _tmp79) +
                        _tmp82 * (_tmp80 + _tmp81 + 1);
  const Scalar _tmp84 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp85 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp86 = _x1[3] * _x2[3];
  const Scalar _tmp87 = std::min<Scalar>(_tmp7, std::fabs(_tmp85 - _tmp86));
  const Scalar _tmp88 = 1 - std::pow(_tmp87, Scalar(2));
  const Scalar _tmp89 = std::acos(_tmp87);
  const Scalar _tmp90 =
      2 * std::min<Scalar>(0, (((-_tmp85 + _tmp86) > 0) - ((-_tmp85 + _tmp86) < 0))) + 1;
  const Scalar _tmp91 = _tmp89 * _tmp90 / std::sqrt(_tmp88);
  const Scalar _tmp92 = std::pow(_tmp84, Scalar(2));
  const Scalar _tmp93 = std::pow(_tmp89, Scalar(2)) * std::pow(_tmp90, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp88;
  const Scalar _tmp94 = 4 * _tmp93;
  const Scalar _tmp95 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp96 = std::pow(_tmp95, Scalar(2));
  const Scalar _tmp97 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp98 = std::pow(_tmp97, Scalar(2));
  const Scalar _tmp99 = _tmp30 + _tmp92 * _tmp94 + _tmp94 * _tmp96 + _tmp94 * _tmp98;
  const Scalar _tmp100 = std::sqrt(_tmp99);
  const Scalar _tmp101 = (Scalar(1) / Scalar(2)) * _tmp100;
  const Scalar _tmp102 = std::sin(_tmp101);
  const Scalar _tmp103 = 4 * _tmp102 * lambdas(1, 0) * std::cos(_tmp101) / _tmp100;
  const Scalar _tmp104 = _tmp103 * _tmp91;
  const Scalar _tmp105 = _tmp104 * _tmp84;
  const Scalar _tmp106 = 8 * std::pow(_tmp102, Scalar(2)) * _tmp93 / _tmp99;
  const Scalar _tmp107 = _tmp106 * _tmp95 * _tmp97;
  const Scalar _tmp108 = _tmp4 * _tmp70;
  const Scalar _tmp109 = _tmp55 * _tmp59 * _tmp66;
  const Scalar _tmp110 = -_tmp56 * _tmp66 + 1;
  const Scalar _tmp111 = _tmp14 * _tmp59 + _tmp54 * (_tmp108 + _tmp109) +
                         _tmp76 * (_tmp110 + _tmp80) + _tmp82 * (-_tmp78 + _tmp79);
  const Scalar _tmp112 = _tmp91 * _tmp95;
  const Scalar _tmp113 = _tmp103 * _tmp112;
  const Scalar _tmp114 = _tmp106 * _tmp84;
  const Scalar _tmp115 = _tmp114 * _tmp97;
  const Scalar _tmp116 = -_tmp106 * _tmp96;
  const Scalar _tmp117 = -_tmp106 * _tmp92;
  const Scalar _tmp118 = _tmp13 * _tmp77 + _tmp54 * (_tmp110 + _tmp81) +
                         _tmp76 * (-_tmp108 + _tmp109) + _tmp82 * (_tmp68 + _tmp71);
  const Scalar _tmp119 = 2 * lambdas(1, 1);
  const Scalar _tmp120 = _tmp119 * _tmp91;
  const Scalar _tmp121 = _tmp111 * (-_tmp113 + _tmp115) + _tmp118 * (_tmp116 + _tmp117 + 1) +
                         _tmp120 * _tmp97 + _tmp83 * (_tmp105 + _tmp107);
  const Scalar _tmp122 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp123 = std::pow(_tmp122, Scalar(2));
  const Scalar _tmp124 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp125 = _x0[3] * _x1[3];
  const Scalar _tmp126 = std::min<Scalar>(_tmp7, std::fabs(_tmp124 - _tmp125));
  const Scalar _tmp127 = 1 - std::pow(_tmp126, Scalar(2));
  const Scalar _tmp128 = std::acos(_tmp126);
  const Scalar _tmp129 =
      2 * std::min<Scalar>(0, (((-_tmp124 + _tmp125) > 0) - ((-_tmp124 + _tmp125) < 0))) + 1;
  const Scalar _tmp130 = std::pow(_tmp128, Scalar(2)) * std::pow(_tmp129, Scalar(2)) *
                         std::pow(lambdas(0, 0), Scalar(2)) / _tmp127;
  const Scalar _tmp131 = 4 * _tmp130;
  const Scalar _tmp132 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp133 = std::pow(_tmp132, Scalar(2));
  const Scalar _tmp134 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp135 = std::pow(_tmp134, Scalar(2));
  const Scalar _tmp136 = _tmp123 * _tmp131 + _tmp131 * _tmp133 + _tmp131 * _tmp135 + _tmp30;
  const Scalar _tmp137 = std::sqrt(_tmp136);
  const Scalar _tmp138 = (Scalar(1) / Scalar(2)) * _tmp137;
  const Scalar _tmp139 = std::sin(_tmp138);
  const Scalar _tmp140 = 8 * _tmp130 * std::pow(_tmp139, Scalar(2)) / _tmp136;
  const Scalar _tmp141 = -_tmp123 * _tmp140;
  const Scalar _tmp142 = -_tmp135 * _tmp140 + 1;
  const Scalar _tmp143 = -_tmp106 * _tmp98 + 1;
  const Scalar _tmp144 = _tmp114 * _tmp95;
  const Scalar _tmp145 = _tmp104 * _tmp97;
  const Scalar _tmp146 = _tmp111 * (_tmp144 + _tmp145) + _tmp112 * _tmp119 +
                         _tmp118 * (-_tmp105 + _tmp107) + _tmp83 * (_tmp117 + _tmp143);
  const Scalar _tmp147 = _tmp128 * _tmp129 / std::sqrt(_tmp127);
  const Scalar _tmp148 = 4 * _tmp139 * lambdas(0, 0) * std::cos(_tmp138) / _tmp137;
  const Scalar _tmp149 = _tmp147 * _tmp148;
  const Scalar _tmp150 = _tmp122 * _tmp149;
  const Scalar _tmp151 = _tmp132 * _tmp134 * _tmp140;
  const Scalar _tmp152 = _tmp134 * _tmp149;
  const Scalar _tmp153 = _tmp122 * _tmp140;
  const Scalar _tmp154 = _tmp132 * _tmp153;
  const Scalar _tmp155 = _tmp111 * (_tmp116 + _tmp143) + _tmp118 * (_tmp113 + _tmp115) +
                         _tmp120 * _tmp84 + _tmp83 * (_tmp144 - _tmp145);
  const Scalar _tmp156 = _tmp132 * _tmp147;
  const Scalar _tmp157 = 2 * lambdas(0, 1);
  const Scalar _tmp158 = _tmp121 * (_tmp141 + _tmp142) + _tmp146 * (_tmp150 + _tmp151) +
                         _tmp155 * (-_tmp152 + _tmp154) + _tmp156 * _tmp157;
  const Scalar _tmp159 = -2 * std::pow(_x0[2], Scalar(2));
  const Scalar _tmp160 = 1 - 2 * std::pow(_x0[0], Scalar(2));
  const Scalar _tmp161 = -_tmp133 * _tmp140;
  const Scalar _tmp162 = _tmp147 * _tmp157;
  const Scalar _tmp163 = _tmp134 * _tmp153;
  const Scalar _tmp164 = _tmp148 * _tmp156;
  const Scalar _tmp165 = _tmp121 * (_tmp152 + _tmp154) + _tmp122 * _tmp162 +
                         _tmp146 * (_tmp163 - _tmp164) + _tmp155 * (_tmp142 + _tmp161);
  const Scalar _tmp166 = _tmp1 * _x0[0];
  const Scalar _tmp167 = 2 * _x0[2];
  const Scalar _tmp168 = _tmp167 * _x0[1];
  const Scalar _tmp169 = _tmp121 * (-_tmp150 + _tmp151) + _tmp134 * _tmp162 +
                         _tmp146 * (_tmp141 + _tmp161 + 1) + _tmp155 * (_tmp163 + _tmp164);
  const Scalar _tmp170 = _tmp0 * (_tmp158 * (_tmp2 + _tmp3) + _tmp165 * (_tmp159 + _tmp160) +
                                  _tmp169 * (-_tmp166 + _tmp168)) -
                         velocity(1, 0);
  const Scalar _tmp171 = _tmp1 * _x0[1];
  const Scalar _tmp172 = _tmp167 * _x0[0];
  const Scalar _tmp173 = -2 * std::pow(_x0[1], Scalar(2));
  const Scalar _tmp174 = _tmp0 * (_tmp158 * (-_tmp171 + _tmp172) + _tmp165 * (_tmp166 + _tmp168) +
                                  _tmp169 * (_tmp160 + _tmp173)) -
                         velocity(2, 0);
  const Scalar _tmp175 = _tmp0 * (_tmp158 * (_tmp159 + _tmp173 + 1) + _tmp165 * (-_tmp2 + _tmp3) +
                                  _tmp169 * (_tmp171 + _tmp172)) -
                         velocity(0, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp170 * sqrt_info(0, 1) + _tmp174 * sqrt_info(0, 2) + _tmp175 * sqrt_info(0, 0);
  _res(1, 0) = _tmp170 * sqrt_info(1, 1) + _tmp174 * sqrt_info(1, 2) + _tmp175 * sqrt_info(1, 0);
  _res(2, 0) = _tmp170 * sqrt_info(2, 1) + _tmp174 * sqrt_info(2, 2) + _tmp175 * sqrt_info(2, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
