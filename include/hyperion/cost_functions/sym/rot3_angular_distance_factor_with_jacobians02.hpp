// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: rot3_angular_distance_factor
 *
 * Args:
 *     x: Rot3
 *     x_d_y: Matrix11
 *     y: Rot3
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x: (1x3) jacobian of res (1) wrt arg x (3)
 *     res_D_y: (1x3) jacobian of res (1) wrt arg y (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Rot3AngularDistanceFactorWithJacobians02(
    const sym::Rot3<Scalar>& x, const Eigen::Matrix<Scalar, 1, 1>& x_d_y,
    const sym::Rot3<Scalar>& y, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 241

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (80)
  const Scalar _tmp0 = 1 - epsilon;
  const Scalar _tmp1 = _x[3] * _y[3];
  const Scalar _tmp2 = _x[1] * _y[1];
  const Scalar _tmp3 = _x[0] * _y[0];
  const Scalar _tmp4 = _x[2] * _y[2];
  const Scalar _tmp5 = _tmp1 + _tmp2 + _tmp3 + _tmp4;
  const Scalar _tmp6 = std::min<Scalar>(_tmp0, std::fabs(_tmp5));
  const Scalar _tmp7 =
      std::pow(Scalar(std::acos(_tmp6)), Scalar(2)) / (1 - std::pow(_tmp6, Scalar(2)));
  const Scalar _tmp8 = _x[3] * _y[0];
  const Scalar _tmp9 = _x[1] * _y[2];
  const Scalar _tmp10 = _x[0] * _y[3];
  const Scalar _tmp11 = _x[2] * _y[1];
  const Scalar _tmp12 = -_tmp10 + _tmp11 + _tmp8 - _tmp9;
  const Scalar _tmp13 =
      std::pow(Scalar(2 * std::min<Scalar>(0, (((_tmp5) > 0) - ((_tmp5) < 0))) + 1), Scalar(2));
  const Scalar _tmp14 = 4 * _tmp13;
  const Scalar _tmp15 = std::pow(_tmp12, Scalar(2)) * _tmp14;
  const Scalar _tmp16 = _x[3] * _y[1];
  const Scalar _tmp17 = _x[1] * _y[3];
  const Scalar _tmp18 = _x[0] * _y[2];
  const Scalar _tmp19 = _x[2] * _y[0];
  const Scalar _tmp20 = _tmp16 - _tmp17 + _tmp18 - _tmp19;
  const Scalar _tmp21 = _tmp14 * std::pow(_tmp20, Scalar(2));
  const Scalar _tmp22 = _x[3] * _y[2];
  const Scalar _tmp23 = _x[1] * _y[0];
  const Scalar _tmp24 = _x[0] * _y[1];
  const Scalar _tmp25 = _x[2] * _y[3];
  const Scalar _tmp26 = _tmp22 + _tmp23 - _tmp24 - _tmp25;
  const Scalar _tmp27 = _tmp14 * std::pow(_tmp26, Scalar(2));
  const Scalar _tmp28 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp29 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp30 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp31 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp32 = _tmp28 - _tmp29 - _tmp30 + _tmp31;
  const Scalar _tmp33 = _tmp1 + _tmp2 + _tmp3 + _tmp4;
  const Scalar _tmp34 = std::fabs(_tmp33);
  const Scalar _tmp35 =
      ((((_tmp0 - _tmp34) > 0) - ((_tmp0 - _tmp34) < 0)) + 1) * (((_tmp33) > 0) - ((_tmp33) < 0));
  const Scalar _tmp36 = _tmp21 * _tmp35;
  const Scalar _tmp37 = std::min<Scalar>(_tmp0, _tmp34);
  const Scalar _tmp38 = 1 - std::pow(_tmp37, Scalar(2));
  const Scalar _tmp39 = std::acos(_tmp37);
  const Scalar _tmp40 = _tmp39 / (_tmp38 * std::sqrt(_tmp38));
  const Scalar _tmp41 = _tmp36 * _tmp40;
  const Scalar _tmp42 = std::pow(_tmp39, Scalar(2));
  const Scalar _tmp43 = _tmp37 * _tmp42 / std::pow(_tmp38, Scalar(2));
  const Scalar _tmp44 = _tmp35 * _tmp43;
  const Scalar _tmp45 = _tmp15 * _tmp44;
  const Scalar _tmp46 = _tmp27 * _tmp44;
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp4;
  const Scalar _tmp51 = -_tmp47 - _tmp48 - _tmp49 - _tmp50;
  const Scalar _tmp52 = _tmp42 / _tmp38;
  const Scalar _tmp53 = 8 * _tmp13 * _tmp52;
  const Scalar _tmp54 = _tmp12 * _tmp53;
  const Scalar _tmp55 = _tmp35 * _tmp40;
  const Scalar _tmp56 = _tmp27 * _tmp55;
  const Scalar _tmp57 = _tmp36 * _tmp43;
  const Scalar _tmp58 = _tmp15 * _tmp55;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp63 = -_tmp59 + _tmp60 - _tmp61 + _tmp62;
  const Scalar _tmp64 = _tmp26 * _tmp53;
  const Scalar _tmp65 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp67 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp69 = _tmp65 + _tmp66 - _tmp67 - _tmp68;
  const Scalar _tmp70 = _tmp20 * _tmp53;
  const Scalar _tmp71 = _tmp63 * _tmp64 + _tmp69 * _tmp70;
  const Scalar _tmp72 =
      (Scalar(1) / Scalar(2)) * sqrt_info(0, 0) /
      std::sqrt(Scalar(_tmp15 * _tmp52 + _tmp21 * _tmp52 + _tmp27 * _tmp52 + epsilon));
  const Scalar _tmp73 = _tmp59 - _tmp60 + _tmp61 - _tmp62;
  const Scalar _tmp74 = -_tmp65 - _tmp66 + _tmp67 + _tmp68;
  const Scalar _tmp75 = _tmp32 * _tmp64 + _tmp54 * _tmp74;
  const Scalar _tmp76 = -_tmp28 + _tmp29 + _tmp30 - _tmp31;
  const Scalar _tmp77 = _tmp54 * _tmp73 + _tmp70 * _tmp76;
  const Scalar _tmp78 = _tmp47 + _tmp48 + _tmp49 + _tmp50;
  const Scalar _tmp79 = _tmp36 * _tmp63;

  // Output terms (3)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) * (-x_d_y(0, 0) + std::sqrt(Scalar(_tmp15 * _tmp7 + _tmp21 * _tmp7 +
                                                                  _tmp27 * _tmp7 + epsilon)));

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 3>> _res_D_x{res_D_x};

    _res_D_x(0, 0) =
        _tmp72 * (-_tmp32 * _tmp41 + _tmp32 * _tmp45 + _tmp32 * _tmp46 - _tmp32 * _tmp56 +
                  _tmp32 * _tmp57 - _tmp32 * _tmp58 + _tmp51 * _tmp54 + _tmp71);
    _res_D_x(0, 1) =
        _tmp72 * (-_tmp41 * _tmp73 + _tmp45 * _tmp73 + _tmp46 * _tmp73 + _tmp51 * _tmp70 -
                  _tmp56 * _tmp73 + _tmp57 * _tmp73 - _tmp58 * _tmp73 + _tmp75);
    _res_D_x(0, 2) =
        _tmp72 * (-_tmp41 * _tmp69 + _tmp45 * _tmp69 + _tmp46 * _tmp69 + _tmp51 * _tmp64 -
                  _tmp56 * _tmp69 + _tmp57 * _tmp69 - _tmp58 * _tmp69 + _tmp77);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 3>> _res_D_y{res_D_y};

    _res_D_y(0, 0) =
        _tmp72 * (-_tmp41 * _tmp76 + _tmp45 * _tmp76 + _tmp46 * _tmp76 + _tmp54 * _tmp78 -
                  _tmp56 * _tmp76 + _tmp57 * _tmp76 - _tmp58 * _tmp76 + _tmp71);
    _res_D_y(0, 1) =
        _tmp72 * (-_tmp40 * _tmp79 + _tmp43 * _tmp79 + _tmp45 * _tmp63 + _tmp46 * _tmp63 -
                  _tmp56 * _tmp63 - _tmp58 * _tmp63 + _tmp70 * _tmp78 + _tmp75);
    _res_D_y(0, 2) =
        _tmp72 * (-_tmp41 * _tmp74 + _tmp45 * _tmp74 + _tmp46 * _tmp74 - _tmp56 * _tmp74 +
                  _tmp57 * _tmp74 - _tmp58 * _tmp74 + _tmp64 * _tmp78 + _tmp77);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
