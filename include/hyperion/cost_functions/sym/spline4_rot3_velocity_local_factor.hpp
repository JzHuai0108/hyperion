// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline4_rot3_velocity_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix42
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     x4: Rot3
 *     velocity: Matrix31
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline4Rot3VelocityLocalFactor(
    const Scalar dt, const Eigen::Matrix<Scalar, 4, 2>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const sym::Rot3<Scalar>& x4, const Eigen::Matrix<Scalar, 3, 1>& velocity,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon) {
  // Total ops: 428

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x4 = x4.Data();

  // Intermediate terms (124)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = _x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1];
  const Scalar _tmp2 = -_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2];
  const Scalar _tmp3 = -_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0];
  const Scalar _tmp4 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp6 = _x3[3] * _x4[3];
  const Scalar _tmp7 = 1 - epsilon;
  const Scalar _tmp8 = std::min<Scalar>(_tmp7, std::fabs(_tmp5 - _tmp6));
  const Scalar _tmp9 = std::acos(_tmp8);
  const Scalar _tmp10 =
      2 * std::min<Scalar>(0, (((-_tmp5 + _tmp6) > 0) - ((-_tmp5 + _tmp6) < 0))) + 1;
  const Scalar _tmp11 = 1 - std::pow(_tmp8, Scalar(2));
  const Scalar _tmp12 = std::pow(_tmp10, Scalar(2)) * std::pow(_tmp9, Scalar(2)) *
                        std::pow(lambdas(3, 0), Scalar(2)) / _tmp11;
  const Scalar _tmp13 = 4 * _tmp12;
  const Scalar _tmp14 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp15 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp16 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp17 = _tmp13 * _tmp14 + _tmp13 * _tmp15 + _tmp13 * _tmp4 + _tmp16;
  const Scalar _tmp18 = std::sqrt(_tmp17);
  const Scalar _tmp19 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp20 = std::sin(_tmp19);
  const Scalar _tmp21 = 8 * _tmp12 * std::pow(_tmp20, Scalar(2)) / _tmp17;
  const Scalar _tmp22 = _tmp2 * _tmp21;
  const Scalar _tmp23 = _tmp1 * _tmp22;
  const Scalar _tmp24 = _tmp10 * _tmp9 / std::sqrt(_tmp11);
  const Scalar _tmp25 = 4 * _tmp20 * lambdas(3, 0) * std::cos(_tmp19) / _tmp18;
  const Scalar _tmp26 = _tmp24 * _tmp25;
  const Scalar _tmp27 = _tmp26 * _tmp3;
  const Scalar _tmp28 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp29 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp30 = _x2[3] * _x3[3];
  const Scalar _tmp31 = std::min<Scalar>(_tmp7, std::fabs(_tmp29 - _tmp30));
  const Scalar _tmp32 = std::acos(_tmp31);
  const Scalar _tmp33 =
      2 * std::min<Scalar>(0, (((-_tmp29 + _tmp30) > 0) - ((-_tmp29 + _tmp30) < 0))) + 1;
  const Scalar _tmp34 = 1 - std::pow(_tmp31, Scalar(2));
  const Scalar _tmp35 = _tmp32 * _tmp33 / std::sqrt(_tmp34);
  const Scalar _tmp36 = 2 * lambdas(2, 1);
  const Scalar _tmp37 = _tmp35 * _tmp36;
  const Scalar _tmp38 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp39 = std::pow(_tmp38, Scalar(2));
  const Scalar _tmp40 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp41 = std::pow(_tmp40, Scalar(2));
  const Scalar _tmp42 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp43 = _x1[3] * _x2[3];
  const Scalar _tmp44 = std::min<Scalar>(_tmp7, std::fabs(_tmp42 - _tmp43));
  const Scalar _tmp45 = 1 - std::pow(_tmp44, Scalar(2));
  const Scalar _tmp46 = std::acos(_tmp44);
  const Scalar _tmp47 =
      2 * std::min<Scalar>(0, (((-_tmp42 + _tmp43) > 0) - ((-_tmp42 + _tmp43) < 0))) + 1;
  const Scalar _tmp48 = std::pow(_tmp46, Scalar(2)) * std::pow(_tmp47, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp45;
  const Scalar _tmp49 = 4 * _tmp48;
  const Scalar _tmp50 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp51 = std::pow(_tmp50, Scalar(2));
  const Scalar _tmp52 = _tmp16 + _tmp39 * _tmp49 + _tmp41 * _tmp49 + _tmp49 * _tmp51;
  const Scalar _tmp53 = std::sqrt(_tmp52);
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp53;
  const Scalar _tmp55 = std::sin(_tmp54);
  const Scalar _tmp56 = 8 * _tmp48 * std::pow(_tmp55, Scalar(2)) / _tmp52;
  const Scalar _tmp57 = -_tmp39 * _tmp56;
  const Scalar _tmp58 = -_tmp41 * _tmp56;
  const Scalar _tmp59 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp60 = _x0[3] * _x1[3];
  const Scalar _tmp61 = std::min<Scalar>(_tmp7, std::fabs(_tmp59 - _tmp60));
  const Scalar _tmp62 =
      2 * lambdas(0, 1) *
      (2 * std::min<Scalar>(0, (((-_tmp59 + _tmp60) > 0) - ((-_tmp59 + _tmp60) < 0))) + 1) *
      std::acos(_tmp61) / std::sqrt(Scalar(1 - std::pow(_tmp61, Scalar(2))));
  const Scalar _tmp63 =
      _tmp62 * (-_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0]);
  const Scalar _tmp64 = _tmp46 * _tmp47 / std::sqrt(_tmp45);
  const Scalar _tmp65 = 4 * _tmp55 * lambdas(1, 0) * std::cos(_tmp54) / _tmp53;
  const Scalar _tmp66 = _tmp64 * _tmp65;
  const Scalar _tmp67 = _tmp38 * _tmp66;
  const Scalar _tmp68 = _tmp50 * _tmp56;
  const Scalar _tmp69 = _tmp40 * _tmp68;
  const Scalar _tmp70 =
      _tmp62 * (_x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1]);
  const Scalar _tmp71 = _tmp40 * _tmp64;
  const Scalar _tmp72 = _tmp65 * _tmp71;
  const Scalar _tmp73 = _tmp38 * _tmp68;
  const Scalar _tmp74 =
      _tmp62 * (-_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2]);
  const Scalar _tmp75 = 2 * lambdas(1, 1);
  const Scalar _tmp76 = _tmp64 * _tmp75;
  const Scalar _tmp77 = _tmp50 * _tmp76 + _tmp63 * (_tmp57 + _tmp58 + 1) +
                        _tmp70 * (_tmp67 + _tmp69) + _tmp74 * (-_tmp72 + _tmp73);
  const Scalar _tmp78 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp79 = std::pow(_tmp28, Scalar(2));
  const Scalar _tmp80 = std::pow(_tmp32, Scalar(2)) * std::pow(_tmp33, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp34;
  const Scalar _tmp81 = 4 * _tmp80;
  const Scalar _tmp82 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp83 = std::pow(_tmp82, Scalar(2));
  const Scalar _tmp84 = std::pow(_tmp78, Scalar(2));
  const Scalar _tmp85 = _tmp16 + _tmp79 * _tmp81 + _tmp81 * _tmp83 + _tmp81 * _tmp84;
  const Scalar _tmp86 = std::sqrt(_tmp85);
  const Scalar _tmp87 = (Scalar(1) / Scalar(2)) * _tmp86;
  const Scalar _tmp88 = std::sin(_tmp87);
  const Scalar _tmp89 = 8 * _tmp80 * std::pow(_tmp88, Scalar(2)) / _tmp85;
  const Scalar _tmp90 = _tmp78 * _tmp89;
  const Scalar _tmp91 = _tmp28 * _tmp90;
  const Scalar _tmp92 = _tmp35 * _tmp82;
  const Scalar _tmp93 = 4 * _tmp88 * lambdas(2, 0) * std::cos(_tmp87) / _tmp86;
  const Scalar _tmp94 = _tmp92 * _tmp93;
  const Scalar _tmp95 = _tmp38 * _tmp40 * _tmp56;
  const Scalar _tmp96 = _tmp50 * _tmp66;
  const Scalar _tmp97 = -_tmp51 * _tmp56 + 1;
  const Scalar _tmp98 = _tmp63 * (-_tmp67 + _tmp69) + _tmp70 * (_tmp57 + _tmp97) + _tmp71 * _tmp75 +
                        _tmp74 * (_tmp95 + _tmp96);
  const Scalar _tmp99 = _tmp35 * _tmp93;
  const Scalar _tmp100 = _tmp78 * _tmp99;
  const Scalar _tmp101 = _tmp28 * _tmp82 * _tmp89;
  const Scalar _tmp102 = -_tmp84 * _tmp89;
  const Scalar _tmp103 = -_tmp83 * _tmp89 + 1;
  const Scalar _tmp104 = _tmp38 * _tmp76 + _tmp63 * (_tmp72 + _tmp73) + _tmp70 * (_tmp95 - _tmp96) +
                         _tmp74 * (_tmp58 + _tmp97);
  const Scalar _tmp105 = _tmp104 * (_tmp102 + _tmp103) + _tmp28 * _tmp37 +
                         _tmp77 * (_tmp91 + _tmp94) + _tmp98 * (-_tmp100 + _tmp101);
  const Scalar _tmp106 = 2 * lambdas(3, 1);
  const Scalar _tmp107 = _tmp106 * _tmp24;
  const Scalar _tmp108 = _tmp28 * _tmp99;
  const Scalar _tmp109 = _tmp82 * _tmp90;
  const Scalar _tmp110 = -_tmp79 * _tmp89;
  const Scalar _tmp111 = _tmp104 * (_tmp100 + _tmp101) + _tmp36 * _tmp92 +
                         _tmp77 * (-_tmp108 + _tmp109) + _tmp98 * (_tmp102 + _tmp110 + 1);
  const Scalar _tmp112 = -_tmp21 * _tmp4;
  const Scalar _tmp113 = -_tmp15 * _tmp21 + 1;
  const Scalar _tmp114 = _tmp1 * _tmp21 * _tmp3;
  const Scalar _tmp115 = _tmp2 * _tmp24;
  const Scalar _tmp116 = _tmp115 * _tmp25;
  const Scalar _tmp117 = _tmp104 * (_tmp91 - _tmp94) + _tmp37 * _tmp78 +
                         _tmp77 * (_tmp103 + _tmp110) + _tmp98 * (_tmp108 + _tmp109);
  const Scalar _tmp118 = _tmp0 * (_tmp1 * _tmp107 + _tmp105 * (_tmp23 + _tmp27) +
                                  _tmp111 * (_tmp112 + _tmp113) + _tmp117 * (_tmp114 - _tmp116)) -
                         velocity(1, 0);
  const Scalar _tmp119 = -_tmp14 * _tmp21;
  const Scalar _tmp120 = _tmp1 * _tmp26;
  const Scalar _tmp121 = _tmp22 * _tmp3;
  const Scalar _tmp122 = _tmp0 * (_tmp105 * (-_tmp120 + _tmp121) + _tmp107 * _tmp3 +
                                  _tmp111 * (_tmp114 + _tmp116) + _tmp117 * (_tmp113 + _tmp119)) -
                         velocity(0, 0);
  const Scalar _tmp123 = _tmp0 * (_tmp105 * (_tmp112 + _tmp119 + 1) + _tmp106 * _tmp115 +
                                  _tmp111 * (_tmp23 - _tmp27) + _tmp117 * (_tmp120 + _tmp121)) -
                         velocity(2, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp118 * sqrt_info(0, 1) + _tmp122 * sqrt_info(0, 0) + _tmp123 * sqrt_info(0, 2);
  _res(1, 0) = _tmp118 * sqrt_info(1, 1) + _tmp122 * sqrt_info(1, 0) + _tmp123 * sqrt_info(1, 2);
  _res(2, 0) = _tmp118 * sqrt_info(2, 1) + _tmp122 * sqrt_info(2, 0) + _tmp123 * sqrt_info(2, 2);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
