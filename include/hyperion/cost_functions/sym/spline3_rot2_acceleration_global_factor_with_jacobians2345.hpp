// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_rot2_acceleration_factor
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix33
 *     x0: Rot2
 *     x1: Rot2
 *     x2: Rot2
 *     x3: Rot2
 *     acceleration: Matrix11
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x0: (1x1) jacobian of res (1) wrt arg x0 (1)
 *     res_D_x1: (1x1) jacobian of res (1) wrt arg x1 (1)
 *     res_D_x2: (1x1) jacobian of res (1) wrt arg x2 (1)
 *     res_D_x3: (1x1) jacobian of res (1) wrt arg x3 (1)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Spline3Rot2AccelerationGlobalFactorWithJacobians2345(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 3>& lambdas, const sym::Rot2<Scalar>& x0,
    const sym::Rot2<Scalar>& x1, const sym::Rot2<Scalar>& x2, const sym::Rot2<Scalar>& x3,
    const Eigen::Matrix<Scalar, 1, 1>& acceleration, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info,
    const Scalar epsilon, Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr) {
  // Total ops: 106

  // Input arrays
  const Eigen::Matrix<Scalar, 2, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 2, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 2, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 2, 1>& _x3 = x3.Data();

  // Intermediate terms (38)
  const Scalar _tmp0 = std::pow(dt, Scalar(-2));
  const Scalar _tmp1 = _x2[1] * _x3[0];
  const Scalar _tmp2 = _x2[0] * _x3[1];
  const Scalar _tmp3 = -_tmp1 + _tmp2;
  const Scalar _tmp4 = _x2[0] * _x3[0];
  const Scalar _tmp5 = _x2[1] * _x3[1];
  const Scalar _tmp6 = _tmp4 + _tmp5;
  const Scalar _tmp7 = _tmp6 + epsilon * ((((_tmp6) > 0) - ((_tmp6) < 0)) + Scalar(0.5));
  const Scalar _tmp8 = _x1[0] * _x2[1];
  const Scalar _tmp9 = _x1[1] * _x2[0];
  const Scalar _tmp10 = _tmp8 - _tmp9;
  const Scalar _tmp11 = _x1[0] * _x2[0];
  const Scalar _tmp12 = _x1[1] * _x2[1];
  const Scalar _tmp13 = _tmp11 + _tmp12;
  const Scalar _tmp14 = _tmp13 + epsilon * ((((_tmp13) > 0) - ((_tmp13) < 0)) + Scalar(0.5));
  const Scalar _tmp15 = _x0[1] * _x1[0];
  const Scalar _tmp16 = _x0[0] * _x1[1];
  const Scalar _tmp17 = -_tmp15 + _tmp16;
  const Scalar _tmp18 = _x0[1] * _x1[1];
  const Scalar _tmp19 = _x0[0] * _x1[0];
  const Scalar _tmp20 = _tmp18 + _tmp19;
  const Scalar _tmp21 = _tmp20 + epsilon * ((((_tmp20) > 0) - ((_tmp20) < 0)) + Scalar(0.5));
  const Scalar _tmp22 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp23 = std::pow(_tmp21, Scalar(2));
  const Scalar _tmp24 = Scalar(1.0) / (_tmp23);
  const Scalar _tmp25 = Scalar(1.0) / (_tmp21);
  const Scalar _tmp26 = _tmp0 * sqrt_info(0, 0);
  const Scalar _tmp27 = _tmp23 * lambdas(0, 2) / (_tmp22 + _tmp23);
  const Scalar _tmp28 = Scalar(1.0) / (_tmp14);
  const Scalar _tmp29 = std::pow(_tmp10, Scalar(2));
  const Scalar _tmp30 = std::pow(_tmp14, Scalar(2));
  const Scalar _tmp31 = Scalar(1.0) / (_tmp30);
  const Scalar _tmp32 = _tmp30 * lambdas(1, 2) / (_tmp29 + _tmp30);
  const Scalar _tmp33 = Scalar(1.0) / (_tmp7);
  const Scalar _tmp34 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp35 = std::pow(_tmp7, Scalar(2));
  const Scalar _tmp36 = Scalar(1.0) / (_tmp35);
  const Scalar _tmp37 = _tmp35 * lambdas(2, 2) / (_tmp34 + _tmp35);

  // Output terms (5)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) * (_tmp0 * (lambdas(0, 2) * std::atan2(_tmp17, _tmp21) +
                                           lambdas(1, 2) * std::atan2(_tmp10, _tmp14) +
                                           lambdas(2, 2) * std::atan2(_tmp3, _tmp7)) -
                                  acceleration(0, 0));

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 1>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = _tmp26 * _tmp27 * (-_tmp22 * _tmp24 + _tmp25 * (-_tmp18 - _tmp19));
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 1>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = _tmp26 * (_tmp27 * (-_tmp17 * _tmp24 * (_tmp15 - _tmp16) + _tmp20 * _tmp25) +
                                _tmp32 * (_tmp28 * (-_tmp11 - _tmp12) - _tmp29 * _tmp31));
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 1>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = _tmp26 * (_tmp32 * (-_tmp10 * _tmp31 * (-_tmp8 + _tmp9) + _tmp13 * _tmp28) +
                                _tmp37 * (_tmp33 * (-_tmp4 - _tmp5) - _tmp34 * _tmp36));
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 1>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) = _tmp26 * _tmp37 * (-_tmp3 * _tmp36 * (_tmp1 - _tmp2) + _tmp33 * _tmp6);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
