// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: rot3_between_factor
 *
 * Args:
 *     x: Rot3
 *     x_T_y: Rot3
 *     y: Rot3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x3) jacobian of res (3) wrt arg x (3)
 *     res_D_y: (3x3) jacobian of res (3) wrt arg y (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Rot3BetweenFactorWithJacobians02(
    const sym::Rot3<Scalar>& x, const sym::Rot3<Scalar>& x_T_y, const sym::Rot3<Scalar>& y,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_y = nullptr) {
  // Total ops: 602

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x_T_y = x_T_y.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (175)
  const Scalar _tmp0 = _x[3] * _y[2];
  const Scalar _tmp1 = _x[1] * _y[0];
  const Scalar _tmp2 = _x[0] * _y[1];
  const Scalar _tmp3 = _x[2] * _y[3];
  const Scalar _tmp4 = _tmp0 + _tmp1 - _tmp2 - _tmp3;
  const Scalar _tmp5 = _tmp4 * _x_T_y[2];
  const Scalar _tmp6 = _x[3] * _y[1];
  const Scalar _tmp7 = _x[1] * _y[3];
  const Scalar _tmp8 = _x[0] * _y[2];
  const Scalar _tmp9 = _x[2] * _y[0];
  const Scalar _tmp10 = _tmp6 - _tmp7 + _tmp8 - _tmp9;
  const Scalar _tmp11 = _tmp10 * _x_T_y[1];
  const Scalar _tmp12 = _x[3] * _y[0];
  const Scalar _tmp13 = _x[1] * _y[2];
  const Scalar _tmp14 = _x[0] * _y[3];
  const Scalar _tmp15 = _x[2] * _y[1];
  const Scalar _tmp16 = _tmp12 - _tmp13 - _tmp14 + _tmp15;
  const Scalar _tmp17 = _tmp16 * _x_T_y[0];
  const Scalar _tmp18 = -_tmp11 - _tmp17 - _tmp5;
  const Scalar _tmp19 = _x[3] * _y[3];
  const Scalar _tmp20 = _x[1] * _y[1];
  const Scalar _tmp21 = _x[0] * _y[0];
  const Scalar _tmp22 = _x[2] * _y[2];
  const Scalar _tmp23 = _tmp19 + _tmp20 + _tmp21 + _tmp22;
  const Scalar _tmp24 = _tmp23 * _x_T_y[3];
  const Scalar _tmp25 =
      2 * std::min<Scalar>(0, (((-_tmp18 + _tmp24) > 0) - ((-_tmp18 + _tmp24) < 0))) + 1;
  const Scalar _tmp26 = 2 * _tmp25;
  const Scalar _tmp27 = 1 - epsilon;
  const Scalar _tmp28 = std::min<Scalar>(_tmp27, std::fabs(_tmp18 - _tmp24));
  const Scalar _tmp29 = std::acos(_tmp28) / std::sqrt(Scalar(1 - std::pow(_tmp28, Scalar(2))));
  const Scalar _tmp30 = _tmp26 * _tmp29;
  const Scalar _tmp31 =
      _tmp10 * _x_T_y[2] + _tmp16 * _x_T_y[3] - _tmp23 * _x_T_y[0] - _tmp4 * _x_T_y[1];
  const Scalar _tmp32 = _tmp31 * sqrt_info(0, 0);
  const Scalar _tmp33 =
      _tmp10 * _x_T_y[3] - _tmp16 * _x_T_y[2] - _tmp23 * _x_T_y[1] + _tmp4 * _x_T_y[0];
  const Scalar _tmp34 = _tmp30 * _tmp33;
  const Scalar _tmp35 =
      -_tmp10 * _x_T_y[0] + _tmp16 * _x_T_y[1] - _tmp23 * _x_T_y[2] + _tmp4 * _x_T_y[3];
  const Scalar _tmp36 = _tmp35 * sqrt_info(0, 2);
  const Scalar _tmp37 = _tmp26 * sqrt_info(1, 0);
  const Scalar _tmp38 = _tmp29 * _tmp31;
  const Scalar _tmp39 = _tmp30 * _tmp35;
  const Scalar _tmp40 = _tmp26 * sqrt_info(2, 0);
  const Scalar _tmp41 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp43 = (Scalar(1) / Scalar(2)) * _tmp14;
  const Scalar _tmp44 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp45 = _tmp41 - _tmp42 - _tmp43 + _tmp44;
  const Scalar _tmp46 = _tmp45 * _x_T_y[3];
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp51 = -_tmp47 - _tmp48 - _tmp49 - _tmp50;
  const Scalar _tmp52 = _tmp51 * _x_T_y[0];
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp57 = _tmp53 + _tmp54 - _tmp55 - _tmp56;
  const Scalar _tmp58 = _tmp57 * _x_T_y[1];
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp63 = -_tmp59 + _tmp60 - _tmp61 + _tmp62;
  const Scalar _tmp64 = _tmp63 * _x_T_y[2];
  const Scalar _tmp65 = _tmp58 + _tmp64;
  const Scalar _tmp66 = _tmp46 + _tmp52 + _tmp65;
  const Scalar _tmp67 = _tmp11 + _tmp17 + _tmp24 + _tmp5;
  const Scalar _tmp68 = std::fabs(_tmp67);
  const Scalar _tmp69 = std::min<Scalar>(_tmp27, _tmp68);
  const Scalar _tmp70 = std::acos(_tmp69);
  const Scalar _tmp71 = 1 - std::pow(_tmp69, Scalar(2));
  const Scalar _tmp72 = _tmp25 * ((((_tmp27 - _tmp68) > 0) - ((_tmp27 - _tmp68) < 0)) + 1) *
                        (((_tmp67) > 0) - ((_tmp67) < 0));
  const Scalar _tmp73 = _tmp69 * _tmp70 * _tmp72 / (_tmp71 * std::sqrt(_tmp71));
  const Scalar _tmp74 = _tmp66 * _tmp73;
  const Scalar _tmp75 = _tmp72 / _tmp71;
  const Scalar _tmp76 = _tmp66 * _tmp75;
  const Scalar _tmp77 = _tmp33 * sqrt_info(0, 1);
  const Scalar _tmp78 = _tmp51 * _x_T_y[1];
  const Scalar _tmp79 = _tmp45 * _x_T_y[2];
  const Scalar _tmp80 = -_tmp57 * _x_T_y[0];
  const Scalar _tmp81 = _tmp63 * _x_T_y[3];
  const Scalar _tmp82 = _tmp80 + _tmp81;
  const Scalar _tmp83 = _tmp70 / std::sqrt(_tmp71);
  const Scalar _tmp84 = _tmp26 * _tmp83;
  const Scalar _tmp85 = _tmp84 * (_tmp78 - _tmp79 + _tmp82);
  const Scalar _tmp86 = _tmp51 * _x_T_y[2];
  const Scalar _tmp87 = -_tmp45 * _x_T_y[1];
  const Scalar _tmp88 = _tmp57 * _x_T_y[3];
  const Scalar _tmp89 = _tmp63 * _x_T_y[0];
  const Scalar _tmp90 = _tmp88 + _tmp89;
  const Scalar _tmp91 = -_tmp86 + _tmp87 + _tmp90;
  const Scalar _tmp92 = _tmp84 * sqrt_info(0, 1);
  const Scalar _tmp93 = _tmp51 * _x_T_y[3];
  const Scalar _tmp94 = _tmp45 * _x_T_y[0];
  const Scalar _tmp95 = _tmp57 * _x_T_y[2];
  const Scalar _tmp96 = -_tmp63 * _x_T_y[1];
  const Scalar _tmp97 = _tmp95 + _tmp96;
  const Scalar _tmp98 = _tmp93 - _tmp94 + _tmp97;
  const Scalar _tmp99 = _tmp84 * sqrt_info(0, 0);
  const Scalar _tmp100 = _tmp31 * sqrt_info(1, 0);
  const Scalar _tmp101 = _tmp100 * _tmp73;
  const Scalar _tmp102 = _tmp35 * sqrt_info(1, 2);
  const Scalar _tmp103 = _tmp33 * sqrt_info(1, 1);
  const Scalar _tmp104 = _tmp84 * sqrt_info(1, 1);
  const Scalar _tmp105 = _tmp37 * _tmp83;
  const Scalar _tmp106 = _tmp31 * sqrt_info(2, 0);
  const Scalar _tmp107 = _tmp35 * sqrt_info(2, 2);
  const Scalar _tmp108 = _tmp33 * sqrt_info(2, 1);
  const Scalar _tmp109 = _tmp84 * sqrt_info(2, 1);
  const Scalar _tmp110 = _tmp84 * sqrt_info(2, 0);
  const Scalar _tmp111 = _tmp59 - _tmp60 + _tmp61 - _tmp62;
  const Scalar _tmp112 = _tmp111 * _x_T_y[3];
  const Scalar _tmp113 = -_tmp53 - _tmp54 + _tmp55 + _tmp56;
  const Scalar _tmp114 = _tmp113 * _x_T_y[0];
  const Scalar _tmp115 = _tmp114 + _tmp79;
  const Scalar _tmp116 = _tmp112 + _tmp115 + _tmp78;
  const Scalar _tmp117 = _tmp116 * _tmp73;
  const Scalar _tmp118 = _tmp116 * _tmp75;
  const Scalar _tmp119 = -_tmp111 * _x_T_y[2];
  const Scalar _tmp120 = _tmp113 * _x_T_y[1];
  const Scalar _tmp121 = _tmp120 + _tmp46;
  const Scalar _tmp122 = _tmp84 * (_tmp119 + _tmp121 - _tmp52);
  const Scalar _tmp123 = _tmp113 * _x_T_y[3];
  const Scalar _tmp124 = _tmp111 * _x_T_y[0];
  const Scalar _tmp125 = _tmp123 - _tmp124 + _tmp86 + _tmp87;
  const Scalar _tmp126 = _tmp111 * _x_T_y[1];
  const Scalar _tmp127 = -_tmp113 * _x_T_y[2];
  const Scalar _tmp128 = _tmp127 + _tmp94;
  const Scalar _tmp129 = _tmp84 * (-_tmp126 + _tmp128 + _tmp93);
  const Scalar _tmp130 = _tmp118 * _tmp33;
  const Scalar _tmp131 = -_tmp41 + _tmp42 + _tmp43 - _tmp44;
  const Scalar _tmp132 = _tmp131 * _x_T_y[3];
  const Scalar _tmp133 = _tmp119 + _tmp132 + _tmp52 - _tmp58;
  const Scalar _tmp134 = _tmp133 * _tmp84;
  const Scalar _tmp135 = _tmp131 * _x_T_y[1];
  const Scalar _tmp136 = _tmp124 + _tmp135;
  const Scalar _tmp137 = _tmp136 + _tmp86 + _tmp88;
  const Scalar _tmp138 = _tmp137 * _tmp75;
  const Scalar _tmp139 = -_tmp131 * _x_T_y[0];
  const Scalar _tmp140 = _tmp84 * (_tmp126 + _tmp139 + _tmp93 - _tmp95);
  const Scalar _tmp141 = _tmp137 * _tmp73;
  const Scalar _tmp142 = _tmp138 * _tmp33;
  const Scalar _tmp143 = _tmp131 * _x_T_y[2];
  const Scalar _tmp144 = _tmp112 + _tmp143;
  const Scalar _tmp145 = _tmp144 - _tmp78 + _tmp80;
  const Scalar _tmp146 = _tmp100 * _tmp75;
  const Scalar _tmp147 = _tmp106 * _tmp75;
  const Scalar _tmp148 = _tmp47 + _tmp48 + _tmp49 + _tmp50;
  const Scalar _tmp149 = _tmp148 * _x_T_y[0];
  const Scalar _tmp150 = _tmp132 + _tmp149;
  const Scalar _tmp151 = _tmp150 + _tmp65;
  const Scalar _tmp152 = _tmp151 * _tmp75;
  const Scalar _tmp153 = _tmp151 * _tmp73;
  const Scalar _tmp154 = _tmp148 * _x_T_y[2];
  const Scalar _tmp155 = -_tmp135 - _tmp154 + _tmp90;
  const Scalar _tmp156 = _tmp148 * _x_T_y[3];
  const Scalar _tmp157 = _tmp139 + _tmp156;
  const Scalar _tmp158 = _tmp157 + _tmp97;
  const Scalar _tmp159 = _tmp148 * _x_T_y[1];
  const Scalar _tmp160 = _tmp84 * (-_tmp143 + _tmp159 + _tmp82);
  const Scalar _tmp161 = _tmp115 + _tmp159 + _tmp81;
  const Scalar _tmp162 = _tmp161 * _tmp73;
  const Scalar _tmp163 = _tmp123 + _tmp154;
  const Scalar _tmp164 = _tmp163 + _tmp87 - _tmp89;
  const Scalar _tmp165 = _tmp84 * (_tmp121 - _tmp149 - _tmp64);
  const Scalar _tmp166 = _tmp161 * _tmp75;
  const Scalar _tmp167 = _tmp128 + _tmp156 + _tmp96;
  const Scalar _tmp168 = _tmp136 + _tmp163;
  const Scalar _tmp169 = _tmp168 * _tmp75;
  const Scalar _tmp170 = _tmp83 * (-_tmp114 + _tmp144 - _tmp159);
  const Scalar _tmp171 = _tmp168 * _tmp73;
  const Scalar _tmp172 = _tmp84 * (_tmp126 + _tmp127 + _tmp157);
  const Scalar _tmp173 = _tmp119 - _tmp120 + _tmp150;
  const Scalar _tmp174 = _tmp173 * _tmp84;

  // Output terms (3)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp30 * _tmp32 + _tmp30 * _tmp36 + _tmp34 * sqrt_info(0, 1);
  _res(1, 0) = _tmp34 * sqrt_info(1, 1) + _tmp37 * _tmp38 + _tmp39 * sqrt_info(1, 2);
  _res(2, 0) = _tmp34 * sqrt_info(2, 1) + _tmp38 * _tmp40 + _tmp39 * sqrt_info(2, 2);

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp32 * _tmp74 - _tmp32 * _tmp76 + _tmp36 * _tmp74 - _tmp36 * _tmp76 +
                     _tmp74 * _tmp77 - _tmp76 * _tmp77 + _tmp85 * sqrt_info(0, 2) +
                     _tmp91 * _tmp92 + _tmp98 * _tmp99;
    _res_D_x(1, 0) = -_tmp100 * _tmp76 + _tmp101 * _tmp66 + _tmp102 * _tmp74 - _tmp102 * _tmp76 +
                     _tmp103 * _tmp74 - _tmp103 * _tmp76 + _tmp104 * _tmp91 + _tmp105 * _tmp98 +
                     _tmp85 * sqrt_info(1, 2);
    _res_D_x(2, 0) = _tmp106 * _tmp74 - _tmp106 * _tmp76 + _tmp107 * _tmp74 - _tmp107 * _tmp76 +
                     _tmp108 * _tmp74 - _tmp108 * _tmp76 + _tmp109 * _tmp91 + _tmp110 * _tmp98 +
                     _tmp85 * sqrt_info(2, 2);
    _res_D_x(0, 1) = _tmp117 * _tmp32 + _tmp117 * _tmp36 + _tmp117 * _tmp77 - _tmp118 * _tmp32 -
                     _tmp118 * _tmp36 + _tmp122 * sqrt_info(0, 2) + _tmp125 * _tmp99 +
                     _tmp129 * sqrt_info(0, 1) - _tmp130 * sqrt_info(0, 1);
    _res_D_x(1, 1) = _tmp100 * _tmp117 - _tmp100 * _tmp118 + _tmp102 * _tmp117 - _tmp102 * _tmp118 +
                     _tmp103 * _tmp117 - _tmp103 * _tmp118 + _tmp105 * _tmp125 +
                     _tmp122 * sqrt_info(1, 2) + _tmp129 * sqrt_info(1, 1);
    _res_D_x(2, 1) = _tmp106 * _tmp117 - _tmp106 * _tmp118 + _tmp107 * _tmp117 - _tmp107 * _tmp118 +
                     _tmp108 * _tmp117 + _tmp110 * _tmp125 + _tmp122 * sqrt_info(2, 2) +
                     _tmp129 * sqrt_info(2, 1) - _tmp130 * sqrt_info(2, 1);
    _res_D_x(0, 2) = _tmp134 * sqrt_info(0, 1) - _tmp138 * _tmp32 - _tmp138 * _tmp36 +
                     _tmp140 * sqrt_info(0, 2) + _tmp141 * _tmp32 + _tmp141 * _tmp36 +
                     _tmp141 * _tmp77 - _tmp142 * sqrt_info(0, 1) + _tmp145 * _tmp99;
    _res_D_x(1, 2) = _tmp101 * _tmp137 - _tmp102 * _tmp138 + _tmp102 * _tmp141 - _tmp103 * _tmp138 +
                     _tmp103 * _tmp141 + _tmp104 * _tmp133 + _tmp105 * _tmp145 - _tmp137 * _tmp146 +
                     _tmp140 * sqrt_info(1, 2);
    _res_D_x(2, 2) = _tmp106 * _tmp141 - _tmp107 * _tmp138 + _tmp107 * _tmp141 + _tmp108 * _tmp141 +
                     _tmp110 * _tmp145 + _tmp134 * sqrt_info(2, 1) - _tmp137 * _tmp147 +
                     _tmp140 * sqrt_info(2, 2) - _tmp142 * sqrt_info(2, 1);
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = -_tmp152 * _tmp32 - _tmp152 * _tmp36 - _tmp152 * _tmp77 + _tmp153 * _tmp32 +
                     _tmp153 * _tmp36 + _tmp153 * _tmp77 + _tmp155 * _tmp92 + _tmp158 * _tmp99 +
                     _tmp160 * sqrt_info(0, 2);
    _res_D_y(1, 0) = -_tmp100 * _tmp152 + _tmp100 * _tmp153 - _tmp102 * _tmp152 +
                     _tmp102 * _tmp153 - _tmp103 * _tmp152 + _tmp103 * _tmp153 + _tmp104 * _tmp155 +
                     _tmp105 * _tmp158 + _tmp160 * sqrt_info(1, 2);
    _res_D_y(2, 0) = -_tmp106 * _tmp152 + _tmp106 * _tmp153 - _tmp107 * _tmp152 +
                     _tmp107 * _tmp153 - _tmp108 * _tmp152 + _tmp108 * _tmp153 + _tmp109 * _tmp155 +
                     _tmp110 * _tmp158 + _tmp160 * sqrt_info(2, 2);
    _res_D_y(0, 1) = _tmp162 * _tmp32 + _tmp162 * _tmp36 + _tmp162 * _tmp77 + _tmp164 * _tmp99 +
                     _tmp165 * sqrt_info(0, 2) - _tmp166 * _tmp32 - _tmp166 * _tmp36 -
                     _tmp166 * _tmp77 + _tmp167 * _tmp92;
    _res_D_y(1, 1) = _tmp100 * _tmp162 - _tmp100 * _tmp166 + _tmp102 * _tmp162 - _tmp102 * _tmp166 +
                     _tmp103 * _tmp162 - _tmp103 * _tmp166 + _tmp104 * _tmp167 + _tmp105 * _tmp164 +
                     _tmp165 * sqrt_info(1, 2);
    _res_D_y(2, 1) = _tmp106 * _tmp162 - _tmp106 * _tmp166 + _tmp107 * _tmp162 - _tmp107 * _tmp166 +
                     _tmp108 * _tmp162 - _tmp108 * _tmp166 + _tmp109 * _tmp167 + _tmp110 * _tmp164 +
                     _tmp165 * sqrt_info(2, 2);
    _res_D_y(0, 2) = -_tmp169 * _tmp32 - _tmp169 * _tmp36 - _tmp169 * _tmp77 +
                     _tmp170 * _tmp26 * sqrt_info(0, 0) + _tmp171 * _tmp32 + _tmp171 * _tmp36 +
                     _tmp171 * _tmp77 + _tmp172 * sqrt_info(0, 2) + _tmp174 * sqrt_info(0, 1);
    _res_D_y(1, 2) = _tmp100 * _tmp171 - _tmp102 * _tmp169 + _tmp102 * _tmp171 - _tmp103 * _tmp169 +
                     _tmp103 * _tmp171 + _tmp104 * _tmp173 - _tmp146 * _tmp168 + _tmp170 * _tmp37 +
                     _tmp172 * sqrt_info(1, 2);
    _res_D_y(2, 2) = _tmp106 * _tmp171 - _tmp107 * _tmp169 + _tmp107 * _tmp171 - _tmp108 * _tmp169 +
                     _tmp108 * _tmp171 - _tmp147 * _tmp168 + _tmp170 * _tmp40 +
                     _tmp172 * sqrt_info(2, 2) + _tmp174 * sqrt_info(2, 1);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
