// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_rot3_sensor_relative_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_a: Pose3
 *     a_T_b: Rot3
 *     y: Pose3
 *     y_T_b: Pose3
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x6) jacobian of res (3) wrt arg x (6)
 *     res_D_x_T_a: (3x6) jacobian of res (3) wrt arg x_T_a (6)
 *     res_D_y: (3x6) jacobian of res (3) wrt arg y (6)
 *     res_D_y_T_b: (3x6) jacobian of res (3) wrt arg y_T_b (6)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Pose3Rot3SensorRelativeBetweenFactorWithJacobians0134(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_a, const sym::Rot3<Scalar>& a_T_b,
    const sym::Pose3<Scalar>& y, const sym::Pose3<Scalar>& y_T_b,
    const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_a = nullptr,
    Scalar* const res_D_y = nullptr, Scalar* const res_D_y_T_b = nullptr) {
  // Total ops: 1671

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_a = x_T_a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y_T_b = y_T_b.Data();

  // Intermediate terms (416)
  const Scalar _tmp0 = _y[2] * _y_T_b[0];
  const Scalar _tmp1 = _y[0] * _y_T_b[2];
  const Scalar _tmp2 = _y[3] * _y_T_b[1];
  const Scalar _tmp3 = _y[1] * _y_T_b[3];
  const Scalar _tmp4 = _tmp0 - _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _x[3] * _x_T_a[1];
  const Scalar _tmp6 = _x[2] * _x_T_a[0];
  const Scalar _tmp7 = _x[0] * _x_T_a[2];
  const Scalar _tmp8 = _x[1] * _x_T_a[3];
  const Scalar _tmp9 = _tmp5 + _tmp6 - _tmp7 + _tmp8;
  const Scalar _tmp10 = _y[2] * _y_T_b[3];
  const Scalar _tmp11 = _y[0] * _y_T_b[1];
  const Scalar _tmp12 = _y[3] * _y_T_b[2];
  const Scalar _tmp13 = _y[1] * _y_T_b[0];
  const Scalar _tmp14 = _tmp10 + _tmp11 + _tmp12 - _tmp13;
  const Scalar _tmp15 = _x[3] * _x_T_a[2];
  const Scalar _tmp16 = _x[2] * _x_T_a[3];
  const Scalar _tmp17 = _x[0] * _x_T_a[1];
  const Scalar _tmp18 = _x[1] * _x_T_a[0];
  const Scalar _tmp19 = _tmp15 + _tmp16 + _tmp17 - _tmp18;
  const Scalar _tmp20 = _y[0] * _y_T_b[3];
  const Scalar _tmp21 = _y[2] * _y_T_b[1];
  const Scalar _tmp22 = _y[3] * _y_T_b[0];
  const Scalar _tmp23 = _y[1] * _y_T_b[2];
  const Scalar _tmp24 = _tmp20 - _tmp21 + _tmp22 + _tmp23;
  const Scalar _tmp25 = _x[3] * _x_T_a[0];
  const Scalar _tmp26 = _x[2] * _x_T_a[1];
  const Scalar _tmp27 = _x[0] * _x_T_a[3];
  const Scalar _tmp28 = _x[1] * _x_T_a[2];
  const Scalar _tmp29 = _tmp25 - _tmp26 + _tmp27 + _tmp28;
  const Scalar _tmp30 = _x[3] * _x_T_a[3];
  const Scalar _tmp31 = _x[2] * _x_T_a[2];
  const Scalar _tmp32 = _x[0] * _x_T_a[0];
  const Scalar _tmp33 = _x[1] * _x_T_a[1];
  const Scalar _tmp34 = _tmp30 - _tmp31 - _tmp32 - _tmp33;
  const Scalar _tmp35 = _y[3] * _y_T_b[3];
  const Scalar _tmp36 = _y[2] * _y_T_b[2];
  const Scalar _tmp37 = _y[0] * _y_T_b[0];
  const Scalar _tmp38 = _y[1] * _y_T_b[1];
  const Scalar _tmp39 = _tmp35 - _tmp36 - _tmp37 - _tmp38;
  const Scalar _tmp40 = _tmp14 * _tmp19 + _tmp24 * _tmp29 + _tmp34 * _tmp39 + _tmp4 * _tmp9;
  const Scalar _tmp41 = _tmp14 * _tmp29 - _tmp19 * _tmp24 + _tmp34 * _tmp4 - _tmp39 * _tmp9;
  const Scalar _tmp42 = _tmp14 * _tmp34 - _tmp19 * _tmp39 + _tmp24 * _tmp9 - _tmp29 * _tmp4;
  const Scalar _tmp43 = -_tmp14 * _tmp9 + _tmp19 * _tmp4 + _tmp24 * _tmp34 - _tmp29 * _tmp39;
  const Scalar _tmp44 =
      -_a_T_b[0] * _tmp40 - _a_T_b[1] * _tmp42 + _a_T_b[2] * _tmp41 + _a_T_b[3] * _tmp43;
  const Scalar _tmp45 = _a_T_b[3] * _tmp40;
  const Scalar _tmp46 = _a_T_b[1] * _tmp41;
  const Scalar _tmp47 = _a_T_b[2] * _tmp42;
  const Scalar _tmp48 = _a_T_b[0] * _tmp43;
  const Scalar _tmp49 = _tmp45 + _tmp46 + _tmp47 + _tmp48;
  const Scalar _tmp50 = (((_tmp49) > 0) - ((_tmp49) < 0));
  const Scalar _tmp51 = 2 * std::min<Scalar>(0, _tmp50) + 1;
  const Scalar _tmp52 = 2 * _tmp51;
  const Scalar _tmp53 = std::fabs(_tmp49);
  const Scalar _tmp54 = 1 - epsilon;
  const Scalar _tmp55 = std::min<Scalar>(_tmp53, _tmp54);
  const Scalar _tmp56 = 1 - std::pow(_tmp55, Scalar(2));
  const Scalar _tmp57 = std::acos(_tmp55);
  const Scalar _tmp58 = _tmp57 / std::sqrt(_tmp56);
  const Scalar _tmp59 = _tmp52 * _tmp58;
  const Scalar _tmp60 = _tmp44 * _tmp59;
  const Scalar _tmp61 =
      -_a_T_b[0] * _tmp41 + _a_T_b[1] * _tmp43 - _a_T_b[2] * _tmp40 + _a_T_b[3] * _tmp42;
  const Scalar _tmp62 = _tmp52 * sqrt_info(0, 2);
  const Scalar _tmp63 = _tmp58 * _tmp62;
  const Scalar _tmp64 =
      _a_T_b[0] * _tmp42 - _a_T_b[1] * _tmp40 - _a_T_b[2] * _tmp43 + _a_T_b[3] * _tmp41;
  const Scalar _tmp65 = _tmp59 * sqrt_info(0, 1);
  const Scalar _tmp66 = _tmp52 * sqrt_info(1, 2);
  const Scalar _tmp67 = _tmp58 * _tmp66;
  const Scalar _tmp68 = _tmp59 * sqrt_info(1, 1);
  const Scalar _tmp69 = _tmp52 * sqrt_info(2, 2);
  const Scalar _tmp70 = _tmp58 * _tmp69;
  const Scalar _tmp71 = _tmp52 * sqrt_info(2, 1);
  const Scalar _tmp72 = _tmp58 * _tmp71;
  const Scalar _tmp73 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp74 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp75 = -_tmp74;
  const Scalar _tmp76 = _tmp73 + _tmp75;
  const Scalar _tmp77 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp78 = -_tmp77;
  const Scalar _tmp79 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp80 = -_tmp79;
  const Scalar _tmp81 = _tmp78 + _tmp80;
  const Scalar _tmp82 = _tmp76 + _tmp81;
  const Scalar _tmp83 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp84 = -_tmp83;
  const Scalar _tmp85 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp86 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp87 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp88 = _tmp86 + _tmp87;
  const Scalar _tmp89 = _tmp84 + _tmp85 + _tmp88;
  const Scalar _tmp90 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp91 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp92 = -_tmp91;
  const Scalar _tmp93 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp94 = -_tmp93;
  const Scalar _tmp95 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp96 = -_tmp95;
  const Scalar _tmp97 = _tmp94 + _tmp96;
  const Scalar _tmp98 = _tmp90 + _tmp92 + _tmp97;
  const Scalar _tmp99 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp100 = -_tmp99;
  const Scalar _tmp101 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp102 = -_tmp101;
  const Scalar _tmp103 = _tmp100 + _tmp102;
  const Scalar _tmp104 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp105 = -_tmp104;
  const Scalar _tmp106 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp107 = _tmp105 + _tmp106;
  const Scalar _tmp108 = _tmp103 + _tmp107;
  const Scalar _tmp109 = _tmp108 * _tmp39 + _tmp14 * _tmp98 + _tmp24 * _tmp89 + _tmp4 * _tmp82;
  const Scalar _tmp110 = _tmp108 * _tmp4 + _tmp14 * _tmp89 - _tmp24 * _tmp98 - _tmp39 * _tmp82;
  const Scalar _tmp111 = _tmp108 * _tmp14 + _tmp24 * _tmp82 - _tmp39 * _tmp98 - _tmp4 * _tmp89;
  const Scalar _tmp112 = _tmp108 * _tmp24 - _tmp14 * _tmp82 - _tmp39 * _tmp89 + _tmp4 * _tmp98;
  const Scalar _tmp113 =
      _a_T_b[0] * _tmp111 - _a_T_b[1] * _tmp109 - _a_T_b[2] * _tmp112 + _a_T_b[3] * _tmp110;
  const Scalar _tmp114 =
      -_a_T_b[0] * _tmp110 + _a_T_b[1] * _tmp112 - _a_T_b[2] * _tmp109 + _a_T_b[3] * _tmp111;
  const Scalar _tmp115 = _tmp114 * _tmp58;
  const Scalar _tmp116 = _tmp51 * _tmp64;
  const Scalar _tmp117 = _tmp116 * sqrt_info(0, 1);
  const Scalar _tmp118 =
      _a_T_b[0] * _tmp112 + _a_T_b[1] * _tmp110 + _a_T_b[2] * _tmp111 + _a_T_b[3] * _tmp109;
  const Scalar _tmp119 = _tmp50 * ((((-_tmp53 + _tmp54) > 0) - ((-_tmp53 + _tmp54) < 0)) + 1);
  const Scalar _tmp120 = _tmp119 * _tmp55 * _tmp57 / (_tmp56 * std::sqrt(_tmp56));
  const Scalar _tmp121 = _tmp118 * _tmp120;
  const Scalar _tmp122 = _tmp61 * sqrt_info(0, 2);
  const Scalar _tmp123 = _tmp121 * _tmp51;
  const Scalar _tmp124 = _tmp44 * sqrt_info(0, 0);
  const Scalar _tmp125 = _tmp119 / _tmp56;
  const Scalar _tmp126 = _tmp125 * _tmp51;
  const Scalar _tmp127 = _tmp118 * _tmp126;
  const Scalar _tmp128 = _tmp118 * _tmp125;
  const Scalar _tmp129 = _tmp59 * (-_a_T_b[0] * _tmp109 - _a_T_b[1] * _tmp111 +
                                   _a_T_b[2] * _tmp110 + _a_T_b[3] * _tmp112);
  const Scalar _tmp130 = _tmp124 * _tmp51;
  const Scalar _tmp131 = _tmp116 * sqrt_info(1, 1);
  const Scalar _tmp132 = _tmp61 * sqrt_info(1, 2);
  const Scalar _tmp133 = _tmp44 * sqrt_info(1, 0);
  const Scalar _tmp134 = _tmp133 * _tmp51;
  const Scalar _tmp135 = _tmp116 * sqrt_info(2, 1);
  const Scalar _tmp136 = _tmp61 * sqrt_info(2, 2);
  const Scalar _tmp137 = _tmp44 * sqrt_info(2, 0);
  const Scalar _tmp138 = _tmp137 * _tmp51;
  const Scalar _tmp139 = -_tmp85;
  const Scalar _tmp140 = _tmp139 + _tmp83 + _tmp88;
  const Scalar _tmp141 = -_tmp73;
  const Scalar _tmp142 = _tmp141 + _tmp75;
  const Scalar _tmp143 = _tmp142 + _tmp77 + _tmp80;
  const Scalar _tmp144 = -_tmp106;
  const Scalar _tmp145 = _tmp105 + _tmp144;
  const Scalar _tmp146 = _tmp100 + _tmp101 + _tmp145;
  const Scalar _tmp147 = _tmp94 + _tmp95;
  const Scalar _tmp148 = -_tmp90;
  const Scalar _tmp149 = _tmp148 + _tmp92;
  const Scalar _tmp150 = _tmp147 + _tmp149;
  const Scalar _tmp151 = _tmp14 * _tmp146 + _tmp140 * _tmp4 + _tmp143 * _tmp24 + _tmp150 * _tmp39;
  const Scalar _tmp152 = _tmp14 * _tmp150 + _tmp140 * _tmp24 - _tmp143 * _tmp4 - _tmp146 * _tmp39;
  const Scalar _tmp153 = -_tmp14 * _tmp140 - _tmp143 * _tmp39 + _tmp146 * _tmp4 + _tmp150 * _tmp24;
  const Scalar _tmp154 = _tmp14 * _tmp143 - _tmp140 * _tmp39 - _tmp146 * _tmp24 + _tmp150 * _tmp4;
  const Scalar _tmp155 =
      -_a_T_b[0] * _tmp154 + _a_T_b[1] * _tmp153 - _a_T_b[2] * _tmp151 + _a_T_b[3] * _tmp152;
  const Scalar _tmp156 = _tmp59 * (-_a_T_b[0] * _tmp151 - _a_T_b[1] * _tmp152 +
                                   _a_T_b[2] * _tmp154 + _a_T_b[3] * _tmp153);
  const Scalar _tmp157 =
      _a_T_b[0] * _tmp152 - _a_T_b[1] * _tmp151 - _a_T_b[2] * _tmp153 + _a_T_b[3] * _tmp154;
  const Scalar _tmp158 =
      _a_T_b[0] * _tmp153 + _a_T_b[1] * _tmp154 + _a_T_b[2] * _tmp152 + _a_T_b[3] * _tmp151;
  const Scalar _tmp159 = _tmp125 * _tmp158;
  const Scalar _tmp160 = _tmp120 * _tmp158;
  const Scalar _tmp161 = _tmp126 * _tmp158;
  const Scalar _tmp162 = _tmp120 * _tmp51;
  const Scalar _tmp163 = _tmp158 * _tmp162;
  const Scalar _tmp164 = _tmp161 * _tmp44;
  const Scalar _tmp165 = _tmp120 * _tmp134;
  const Scalar _tmp166 = _tmp142 + _tmp78 + _tmp79;
  const Scalar _tmp167 = _tmp86 - _tmp87;
  const Scalar _tmp168 = _tmp167 + _tmp83 + _tmp85;
  const Scalar _tmp169 = _tmp148 + _tmp91 + _tmp97;
  const Scalar _tmp170 = _tmp102 + _tmp145 + _tmp99;
  const Scalar _tmp171 = _tmp14 * _tmp169 + _tmp166 * _tmp4 - _tmp168 * _tmp24 - _tmp170 * _tmp39;
  const Scalar _tmp172 = _tmp14 * _tmp168 + _tmp166 * _tmp39 + _tmp169 * _tmp24 + _tmp170 * _tmp4;
  const Scalar _tmp173 = -_tmp14 * _tmp170 + _tmp166 * _tmp24 + _tmp168 * _tmp4 - _tmp169 * _tmp39;
  const Scalar _tmp174 = _tmp14 * _tmp166 - _tmp168 * _tmp39 - _tmp169 * _tmp4 + _tmp170 * _tmp24;
  const Scalar _tmp175 =
      _a_T_b[0] * _tmp173 + _a_T_b[1] * _tmp171 + _a_T_b[2] * _tmp174 + _a_T_b[3] * _tmp172;
  const Scalar _tmp176 = _tmp125 * _tmp175;
  const Scalar _tmp177 = _tmp58 * (_a_T_b[0] * _tmp174 - _a_T_b[1] * _tmp172 - _a_T_b[2] * _tmp173 +
                                   _a_T_b[3] * _tmp171);
  const Scalar _tmp178 = _tmp177 * _tmp52;
  const Scalar _tmp179 = _tmp126 * _tmp175;
  const Scalar _tmp180 = _tmp179 * _tmp61;
  const Scalar _tmp181 = _tmp59 * (-_a_T_b[0] * _tmp172 - _a_T_b[1] * _tmp174 +
                                   _a_T_b[2] * _tmp171 + _a_T_b[3] * _tmp173);
  const Scalar _tmp182 =
      -_a_T_b[0] * _tmp171 + _a_T_b[1] * _tmp173 - _a_T_b[2] * _tmp172 + _a_T_b[3] * _tmp174;
  const Scalar _tmp183 = _tmp120 * _tmp175;
  const Scalar _tmp184 = _tmp162 * _tmp175;
  const Scalar _tmp185 = _tmp139 + _tmp167 + _tmp84;
  const Scalar _tmp186 = _tmp185 * _tmp4;
  const Scalar _tmp187 = _tmp76 + _tmp77 + _tmp79;
  const Scalar _tmp188 = _tmp103 + _tmp104 + _tmp144;
  const Scalar _tmp189 = _tmp14 * _tmp188;
  const Scalar _tmp190 = _tmp149 + _tmp93 + _tmp96;
  const Scalar _tmp191 = _tmp190 * _tmp39;
  const Scalar _tmp192 = -_tmp186 + _tmp187 * _tmp24 + _tmp189 - _tmp191;
  const Scalar _tmp193 = _tmp188 * _tmp39;
  const Scalar _tmp194 = _tmp185 * _tmp24;
  const Scalar _tmp195 = _tmp14 * _tmp190 + _tmp194;
  const Scalar _tmp196 = _tmp187 * _tmp4 + _tmp193 + _tmp195;
  const Scalar _tmp197 = _tmp190 * _tmp24;
  const Scalar _tmp198 = _tmp14 * _tmp185;
  const Scalar _tmp199 = _tmp188 * _tmp4 + _tmp198;
  const Scalar _tmp200 = -_tmp187 * _tmp39 - _tmp197 + _tmp199;
  const Scalar _tmp201 = _tmp188 * _tmp24;
  const Scalar _tmp202 = -_tmp185 * _tmp39;
  const Scalar _tmp203 = _tmp190 * _tmp4 + _tmp202;
  const Scalar _tmp204 = -_tmp14 * _tmp187 + _tmp201 + _tmp203;
  const Scalar _tmp205 = _tmp45 + _tmp46 + _tmp47 + _tmp48;
  const Scalar _tmp206 = std::fabs(_tmp205);
  const Scalar _tmp207 = std::min<Scalar>(_tmp206, _tmp54);
  const Scalar _tmp208 = std::acos(_tmp207);
  const Scalar _tmp209 = 1 - std::pow(_tmp207, Scalar(2));
  const Scalar _tmp210 = _tmp208 / std::sqrt(_tmp209);
  const Scalar _tmp211 = _tmp210 * _tmp52;
  const Scalar _tmp212 = _tmp211 * (-_a_T_b[0] * _tmp196 - _a_T_b[1] * _tmp192 +
                                    _a_T_b[2] * _tmp200 + _a_T_b[3] * _tmp204);
  const Scalar _tmp213 =
      _a_T_b[0] * _tmp204 + _a_T_b[1] * _tmp200 + _a_T_b[2] * _tmp192 + _a_T_b[3] * _tmp196;
  const Scalar _tmp214 = ((((-_tmp206 + _tmp54) > 0) - ((-_tmp206 + _tmp54) < 0)) + 1) *
                         (((_tmp205) > 0) - ((_tmp205) < 0));
  const Scalar _tmp215 = _tmp207 * _tmp208 * _tmp214 / (_tmp209 * std::sqrt(_tmp209));
  const Scalar _tmp216 = _tmp215 * _tmp51;
  const Scalar _tmp217 = _tmp213 * _tmp216;
  const Scalar _tmp218 =
      _a_T_b[0] * _tmp192 - _a_T_b[1] * _tmp196 - _a_T_b[2] * _tmp204 + _a_T_b[3] * _tmp200;
  const Scalar _tmp219 = _tmp211 * sqrt_info(0, 1);
  const Scalar _tmp220 = _tmp130 * _tmp215;
  const Scalar _tmp221 = _tmp214 / _tmp209;
  const Scalar _tmp222 = _tmp213 * _tmp221;
  const Scalar _tmp223 = _tmp222 * _tmp51;
  const Scalar _tmp224 = _tmp223 * _tmp61;
  const Scalar _tmp225 = _tmp210 * (-_a_T_b[0] * _tmp200 + _a_T_b[1] * _tmp204 -
                                    _a_T_b[2] * _tmp196 + _a_T_b[3] * _tmp192);
  const Scalar _tmp226 = _tmp117 * _tmp215;
  const Scalar _tmp227 = _tmp211 * sqrt_info(1, 1);
  const Scalar _tmp228 = _tmp213 * _tmp215;
  const Scalar _tmp229 = _tmp210 * _tmp71;
  const Scalar _tmp230 = _tmp138 * _tmp215;
  const Scalar _tmp231 = _tmp101 + _tmp107 + _tmp99;
  const Scalar _tmp232 = _tmp141 + _tmp74 + _tmp81;
  const Scalar _tmp233 = _tmp186 + _tmp232 * _tmp24;
  const Scalar _tmp234 = _tmp14 * _tmp231 + _tmp191 + _tmp233;
  const Scalar _tmp235 = _tmp232 * _tmp4;
  const Scalar _tmp236 = _tmp195 - _tmp231 * _tmp39 - _tmp235;
  const Scalar _tmp237 = _tmp232 * _tmp39;
  const Scalar _tmp238 = _tmp197 - _tmp198 + _tmp231 * _tmp4 - _tmp237;
  const Scalar _tmp239 = _tmp14 * _tmp232;
  const Scalar _tmp240 = _tmp203 - _tmp231 * _tmp24 + _tmp239;
  const Scalar _tmp241 =
      _a_T_b[0] * _tmp238 + _a_T_b[1] * _tmp240 + _a_T_b[2] * _tmp236 + _a_T_b[3] * _tmp234;
  const Scalar _tmp242 = _tmp221 * _tmp241;
  const Scalar _tmp243 = _tmp242 * _tmp51;
  const Scalar _tmp244 = _tmp216 * _tmp241;
  const Scalar _tmp245 = _tmp211 * (-_a_T_b[0] * _tmp234 - _a_T_b[1] * _tmp236 +
                                    _a_T_b[2] * _tmp240 + _a_T_b[3] * _tmp238);
  const Scalar _tmp246 = _tmp210 * (_a_T_b[0] * _tmp236 - _a_T_b[1] * _tmp234 -
                                    _a_T_b[2] * _tmp238 + _a_T_b[3] * _tmp240);
  const Scalar _tmp247 = _tmp246 * _tmp52;
  const Scalar _tmp248 = _tmp210 * (-_a_T_b[0] * _tmp240 + _a_T_b[1] * _tmp238 -
                                    _a_T_b[2] * _tmp234 + _a_T_b[3] * _tmp236);
  const Scalar _tmp249 = _tmp215 * _tmp241;
  const Scalar _tmp250 = _tmp147 + _tmp90 + _tmp91;
  const Scalar _tmp251 = -_tmp189 + _tmp233 - _tmp250 * _tmp39;
  const Scalar _tmp252 = _tmp14 * _tmp250 - _tmp193 - _tmp194 + _tmp235;
  const Scalar _tmp253 = _tmp199 + _tmp237 + _tmp24 * _tmp250;
  const Scalar _tmp254 = _tmp201 + _tmp202 + _tmp239 - _tmp250 * _tmp4;
  const Scalar _tmp255 =
      _a_T_b[0] * _tmp251 + _a_T_b[1] * _tmp252 + _a_T_b[2] * _tmp254 + _a_T_b[3] * _tmp253;
  const Scalar _tmp256 = _tmp221 * _tmp255;
  const Scalar _tmp257 = _tmp216 * _tmp255;
  const Scalar _tmp258 = _tmp256 * _tmp51;
  const Scalar _tmp259 =
      -_a_T_b[0] * _tmp252 + _a_T_b[1] * _tmp251 - _a_T_b[2] * _tmp253 + _a_T_b[3] * _tmp254;
  const Scalar _tmp260 = _tmp210 * _tmp62;
  const Scalar _tmp261 = _tmp211 * (-_a_T_b[0] * _tmp253 - _a_T_b[1] * _tmp254 +
                                    _a_T_b[2] * _tmp252 + _a_T_b[3] * _tmp251);
  const Scalar _tmp262 =
      _a_T_b[0] * _tmp254 - _a_T_b[1] * _tmp253 - _a_T_b[2] * _tmp251 + _a_T_b[3] * _tmp252;
  const Scalar _tmp263 = _tmp215 * _tmp255;
  const Scalar _tmp264 = _tmp210 * _tmp66;
  const Scalar _tmp265 = _tmp210 * _tmp69;
  const Scalar _tmp266 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp267 = -_tmp266;
  const Scalar _tmp268 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp269 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp270 = -_tmp269;
  const Scalar _tmp271 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp272 = -_tmp271;
  const Scalar _tmp273 = _tmp270 + _tmp272;
  const Scalar _tmp274 = _tmp267 + _tmp268 + _tmp273;
  const Scalar _tmp275 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp276 = -_tmp275;
  const Scalar _tmp277 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp278 = _tmp276 + _tmp277;
  const Scalar _tmp279 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp280 = -_tmp279;
  const Scalar _tmp281 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp282 = -_tmp281;
  const Scalar _tmp283 = _tmp280 + _tmp282;
  const Scalar _tmp284 = _tmp278 + _tmp283;
  const Scalar _tmp285 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp286 = -_tmp285;
  const Scalar _tmp287 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp288 = -_tmp287;
  const Scalar _tmp289 = _tmp286 + _tmp288;
  const Scalar _tmp290 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp291 = -_tmp290;
  const Scalar _tmp292 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp293 = _tmp291 + _tmp292;
  const Scalar _tmp294 = _tmp289 + _tmp293;
  const Scalar _tmp295 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp296 = (Scalar(1) / Scalar(2)) * _tmp38;
  const Scalar _tmp297 = (Scalar(1) / Scalar(2)) * _tmp37;
  const Scalar _tmp298 = (Scalar(1) / Scalar(2)) * _tmp35;
  const Scalar _tmp299 = -_tmp297 + _tmp298;
  const Scalar _tmp300 = _tmp295 + _tmp296 + _tmp299;
  const Scalar _tmp301 = _tmp19 * _tmp274 - _tmp284 * _tmp9 - _tmp29 * _tmp294 + _tmp300 * _tmp34;
  const Scalar _tmp302 = -_tmp19 * _tmp300 + _tmp274 * _tmp34 + _tmp284 * _tmp29 - _tmp294 * _tmp9;
  const Scalar _tmp303 = _tmp19 * _tmp284 + _tmp274 * _tmp9 + _tmp29 * _tmp300 + _tmp294 * _tmp34;
  const Scalar _tmp304 = -_tmp19 * _tmp294 - _tmp274 * _tmp29 + _tmp284 * _tmp34 + _tmp300 * _tmp9;
  const Scalar _tmp305 =
      _a_T_b[0] * _tmp301 + _a_T_b[1] * _tmp302 + _a_T_b[2] * _tmp304 + _a_T_b[3] * _tmp303;
  const Scalar _tmp306 = _tmp215 * _tmp305;
  const Scalar _tmp307 = _tmp221 * _tmp305;
  const Scalar _tmp308 = _tmp307 * _tmp51;
  const Scalar _tmp309 = _tmp306 * _tmp51;
  const Scalar _tmp310 =
      _a_T_b[0] * _tmp304 - _a_T_b[1] * _tmp303 - _a_T_b[2] * _tmp301 + _a_T_b[3] * _tmp302;
  const Scalar _tmp311 =
      -_a_T_b[0] * _tmp302 + _a_T_b[1] * _tmp301 - _a_T_b[2] * _tmp303 + _a_T_b[3] * _tmp304;
  const Scalar _tmp312 = _tmp211 * (-_a_T_b[0] * _tmp303 - _a_T_b[1] * _tmp304 +
                                    _a_T_b[2] * _tmp302 + _a_T_b[3] * _tmp301);
  const Scalar _tmp313 = -_tmp296;
  const Scalar _tmp314 = _tmp297 + _tmp298;
  const Scalar _tmp315 = _tmp295 + _tmp313 + _tmp314;
  const Scalar _tmp316 = -_tmp277;
  const Scalar _tmp317 = _tmp276 + _tmp316;
  const Scalar _tmp318 = _tmp279 + _tmp282 + _tmp317;
  const Scalar _tmp319 = -_tmp292;
  const Scalar _tmp320 = _tmp291 + _tmp319;
  const Scalar _tmp321 = _tmp285 + _tmp288 + _tmp320;
  const Scalar _tmp322 = -_tmp268;
  const Scalar _tmp323 = _tmp267 + _tmp322;
  const Scalar _tmp324 = _tmp269 + _tmp272;
  const Scalar _tmp325 = _tmp323 + _tmp324;
  const Scalar _tmp326 = _tmp19 * _tmp315 - _tmp29 * _tmp318 - _tmp321 * _tmp9 + _tmp325 * _tmp34;
  const Scalar _tmp327 = -_tmp19 * _tmp325 + _tmp29 * _tmp321 + _tmp315 * _tmp34 - _tmp318 * _tmp9;
  const Scalar _tmp328 = _tmp19 * _tmp321 + _tmp29 * _tmp325 + _tmp315 * _tmp9 + _tmp318 * _tmp34;
  const Scalar _tmp329 = -_tmp19 * _tmp318 - _tmp29 * _tmp315 + _tmp321 * _tmp34 + _tmp325 * _tmp9;
  const Scalar _tmp330 =
      _a_T_b[0] * _tmp326 + _a_T_b[1] * _tmp327 + _a_T_b[2] * _tmp329 + _a_T_b[3] * _tmp328;
  const Scalar _tmp331 = _tmp215 * _tmp330;
  const Scalar _tmp332 = _tmp331 * _tmp51;
  const Scalar _tmp333 = _tmp221 * _tmp330;
  const Scalar _tmp334 = _tmp333 * _tmp51;
  const Scalar _tmp335 =
      -_a_T_b[0] * _tmp327 + _a_T_b[1] * _tmp326 - _a_T_b[2] * _tmp328 + _a_T_b[3] * _tmp329;
  const Scalar _tmp336 =
      _a_T_b[0] * _tmp329 - _a_T_b[1] * _tmp328 - _a_T_b[2] * _tmp326 + _a_T_b[3] * _tmp327;
  const Scalar _tmp337 = _tmp211 * (-_a_T_b[0] * _tmp328 - _a_T_b[1] * _tmp329 +
                                    _a_T_b[2] * _tmp327 + _a_T_b[3] * _tmp326);
  const Scalar _tmp338 = _tmp280 + _tmp281 + _tmp317;
  const Scalar _tmp339 = -_tmp295;
  const Scalar _tmp340 = _tmp296 + _tmp314 + _tmp339;
  const Scalar _tmp341 = _tmp286 + _tmp287 + _tmp320;
  const Scalar _tmp342 = _tmp266 + _tmp273 + _tmp322;
  const Scalar _tmp343 = _tmp19 * _tmp340 + _tmp29 * _tmp338 + _tmp34 * _tmp342 + _tmp341 * _tmp9;
  const Scalar _tmp344 = _tmp19 * _tmp341 - _tmp29 * _tmp342 + _tmp338 * _tmp34 - _tmp340 * _tmp9;
  const Scalar _tmp345 = -_tmp19 * _tmp342 - _tmp29 * _tmp341 + _tmp338 * _tmp9 + _tmp34 * _tmp340;
  const Scalar _tmp346 = -_tmp19 * _tmp338 + _tmp29 * _tmp340 + _tmp34 * _tmp341 - _tmp342 * _tmp9;
  const Scalar _tmp347 =
      _a_T_b[0] * _tmp344 + _a_T_b[1] * _tmp346 + _a_T_b[2] * _tmp345 + _a_T_b[3] * _tmp343;
  const Scalar _tmp348 = _tmp216 * _tmp347;
  const Scalar _tmp349 = _tmp221 * _tmp347;
  const Scalar _tmp350 = _tmp349 * _tmp51;
  const Scalar _tmp351 =
      -_a_T_b[0] * _tmp346 + _a_T_b[1] * _tmp344 - _a_T_b[2] * _tmp343 + _a_T_b[3] * _tmp345;
  const Scalar _tmp352 =
      _a_T_b[0] * _tmp345 - _a_T_b[1] * _tmp343 - _a_T_b[2] * _tmp344 + _a_T_b[3] * _tmp346;
  const Scalar _tmp353 = _tmp211 * (-_a_T_b[0] * _tmp343 - _a_T_b[1] * _tmp345 +
                                    _a_T_b[2] * _tmp346 + _a_T_b[3] * _tmp344);
  const Scalar _tmp354 = _tmp215 * _tmp347;
  const Scalar _tmp355 = _tmp266 + _tmp268 + _tmp324;
  const Scalar _tmp356 = _tmp275 + _tmp283 + _tmp316;
  const Scalar _tmp357 = -_tmp356 * _tmp9;
  const Scalar _tmp358 = _tmp289 + _tmp290 + _tmp319;
  const Scalar _tmp359 = _tmp299 + _tmp313 + _tmp339;
  const Scalar _tmp360 = _tmp34 * _tmp359;
  const Scalar _tmp361 = -_tmp29 * _tmp358 + _tmp360;
  const Scalar _tmp362 = _tmp19 * _tmp355 + _tmp357 + _tmp361;
  const Scalar _tmp363 = _tmp29 * _tmp356;
  const Scalar _tmp364 = _tmp19 * _tmp359;
  const Scalar _tmp365 = _tmp358 * _tmp9;
  const Scalar _tmp366 = _tmp34 * _tmp355 + _tmp363 - _tmp364 - _tmp365;
  const Scalar _tmp367 = _tmp19 * _tmp356;
  const Scalar _tmp368 = _tmp29 * _tmp359;
  const Scalar _tmp369 = _tmp34 * _tmp358 + _tmp368;
  const Scalar _tmp370 = _tmp355 * _tmp9 + _tmp367 + _tmp369;
  const Scalar _tmp371 = _tmp19 * _tmp358;
  const Scalar _tmp372 = _tmp359 * _tmp9;
  const Scalar _tmp373 = _tmp34 * _tmp356 + _tmp372;
  const Scalar _tmp374 = -_tmp29 * _tmp355 - _tmp371 + _tmp373;
  const Scalar _tmp375 =
      _a_T_b[0] * _tmp374 - _a_T_b[1] * _tmp370 - _a_T_b[2] * _tmp362 + _a_T_b[3] * _tmp366;
  const Scalar _tmp376 =
      _a_T_b[0] * _tmp362 + _a_T_b[1] * _tmp366 + _a_T_b[2] * _tmp374 + _a_T_b[3] * _tmp370;
  const Scalar _tmp377 = _tmp120 * _tmp376;
  const Scalar _tmp378 = _tmp377 * _tmp51;
  const Scalar _tmp379 =
      -_a_T_b[0] * _tmp366 + _a_T_b[1] * _tmp362 - _a_T_b[2] * _tmp370 + _a_T_b[3] * _tmp374;
  const Scalar _tmp380 = _tmp126 * _tmp376;
  const Scalar _tmp381 = _tmp59 * (-_a_T_b[0] * _tmp370 - _a_T_b[1] * _tmp374 +
                                   _a_T_b[2] * _tmp366 + _a_T_b[3] * _tmp362);
  const Scalar _tmp382 = _tmp380 * _tmp61;
  const Scalar _tmp383 = _tmp125 * _tmp376;
  const Scalar _tmp384 = _tmp270 + _tmp271 + _tmp323;
  const Scalar _tmp385 = -_tmp19 * _tmp384;
  const Scalar _tmp386 = _tmp285 + _tmp287 + _tmp293;
  const Scalar _tmp387 = _tmp29 * _tmp386 + _tmp357 + _tmp360 + _tmp385;
  const Scalar _tmp388 = _tmp34 * _tmp384 + _tmp364;
  const Scalar _tmp389 = -_tmp363 - _tmp386 * _tmp9 + _tmp388;
  const Scalar _tmp390 = _tmp384 * _tmp9;
  const Scalar _tmp391 = _tmp34 * _tmp386 - _tmp367 - _tmp368 + _tmp390;
  const Scalar _tmp392 = _tmp29 * _tmp384;
  const Scalar _tmp393 = _tmp19 * _tmp386 + _tmp373 + _tmp392;
  const Scalar _tmp394 =
      _a_T_b[0] * _tmp389 + _a_T_b[1] * _tmp387 + _a_T_b[2] * _tmp391 + _a_T_b[3] * _tmp393;
  const Scalar _tmp395 = _tmp120 * _tmp394;
  const Scalar _tmp396 = _tmp59 * (-_a_T_b[0] * _tmp393 - _a_T_b[1] * _tmp391 +
                                   _a_T_b[2] * _tmp387 + _a_T_b[3] * _tmp389);
  const Scalar _tmp397 =
      _a_T_b[0] * _tmp391 - _a_T_b[1] * _tmp393 - _a_T_b[2] * _tmp389 + _a_T_b[3] * _tmp387;
  const Scalar _tmp398 =
      -_a_T_b[0] * _tmp387 + _a_T_b[1] * _tmp389 - _a_T_b[2] * _tmp393 + _a_T_b[3] * _tmp391;
  const Scalar _tmp399 = _tmp125 * _tmp394;
  const Scalar _tmp400 = _tmp399 * _tmp51;
  const Scalar _tmp401 = _tmp162 * _tmp394;
  const Scalar _tmp402 = _tmp278 + _tmp279 + _tmp281;
  const Scalar _tmp403 = _tmp29 * _tmp402 + _tmp365 + _tmp388;
  const Scalar _tmp404 = _tmp361 + _tmp385 + _tmp402 * _tmp9;
  const Scalar _tmp405 = -_tmp19 * _tmp402 + _tmp369 - _tmp390;
  const Scalar _tmp406 = _tmp34 * _tmp402 + _tmp371 - _tmp372 - _tmp392;
  const Scalar _tmp407 =
      _a_T_b[0] * _tmp404 - _a_T_b[1] * _tmp403 - _a_T_b[2] * _tmp406 + _a_T_b[3] * _tmp405;
  const Scalar _tmp408 = _tmp59 * (-_a_T_b[0] * _tmp403 - _a_T_b[1] * _tmp404 +
                                   _a_T_b[2] * _tmp405 + _a_T_b[3] * _tmp406);
  const Scalar _tmp409 =
      _a_T_b[0] * _tmp406 + _a_T_b[1] * _tmp405 + _a_T_b[2] * _tmp404 + _a_T_b[3] * _tmp403;
  const Scalar _tmp410 = _tmp126 * _tmp409;
  const Scalar _tmp411 = _tmp120 * _tmp409;
  const Scalar _tmp412 = _tmp125 * _tmp409;
  const Scalar _tmp413 = _tmp162 * _tmp409;
  const Scalar _tmp414 =
      -_a_T_b[0] * _tmp405 + _a_T_b[1] * _tmp406 - _a_T_b[2] * _tmp403 + _a_T_b[3] * _tmp404;
  const Scalar _tmp415 = _tmp410 * _tmp61;

  // Output terms (5)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp60 * sqrt_info(0, 0) + _tmp61 * _tmp63 + _tmp64 * _tmp65;
  _res(1, 0) = _tmp60 * sqrt_info(1, 0) + _tmp61 * _tmp67 + _tmp64 * _tmp68;
  _res(2, 0) = _tmp60 * sqrt_info(2, 0) + _tmp61 * _tmp70 + _tmp64 * _tmp72;

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 6>> _res_D_x{res_D_x};

    _res_D_x(0, 0) = _tmp113 * _tmp65 + _tmp115 * _tmp62 + _tmp117 * _tmp121 - _tmp117 * _tmp128 +
                     _tmp121 * _tmp130 + _tmp122 * _tmp123 - _tmp122 * _tmp127 - _tmp124 * _tmp127 +
                     _tmp129 * sqrt_info(0, 0);
    _res_D_x(1, 0) = _tmp113 * _tmp68 + _tmp114 * _tmp67 + _tmp121 * _tmp131 + _tmp121 * _tmp134 +
                     _tmp123 * _tmp132 - _tmp127 * _tmp132 - _tmp127 * _tmp133 - _tmp128 * _tmp131 +
                     _tmp129 * sqrt_info(1, 0);
    _res_D_x(2, 0) = _tmp113 * _tmp72 + _tmp115 * _tmp69 + _tmp121 * _tmp135 + _tmp121 * _tmp138 +
                     _tmp123 * _tmp136 - _tmp127 * _tmp136 - _tmp127 * _tmp137 - _tmp128 * _tmp135 +
                     _tmp129 * sqrt_info(2, 0);
    _res_D_x(0, 1) = -_tmp117 * _tmp159 + _tmp117 * _tmp160 - _tmp122 * _tmp161 +
                     _tmp122 * _tmp163 + _tmp130 * _tmp160 + _tmp155 * _tmp63 +
                     _tmp156 * sqrt_info(0, 0) + _tmp157 * _tmp65 - _tmp164 * sqrt_info(0, 0);
    _res_D_x(1, 1) = -_tmp131 * _tmp159 + _tmp131 * _tmp160 - _tmp132 * _tmp161 +
                     _tmp132 * _tmp163 - _tmp133 * _tmp161 + _tmp155 * _tmp67 +
                     _tmp156 * sqrt_info(1, 0) + _tmp157 * _tmp68 + _tmp158 * _tmp165;
    _res_D_x(2, 1) = -_tmp135 * _tmp159 + _tmp135 * _tmp160 - _tmp136 * _tmp161 +
                     _tmp136 * _tmp163 + _tmp138 * _tmp160 + _tmp155 * _tmp70 +
                     _tmp156 * sqrt_info(2, 0) + _tmp157 * _tmp72 - _tmp164 * sqrt_info(2, 0);
    _res_D_x(0, 2) = -_tmp117 * _tmp176 + _tmp117 * _tmp183 + _tmp122 * _tmp184 -
                     _tmp124 * _tmp179 + _tmp130 * _tmp183 + _tmp178 * sqrt_info(0, 1) -
                     _tmp180 * sqrt_info(0, 2) + _tmp181 * sqrt_info(0, 0) + _tmp182 * _tmp63;
    _res_D_x(1, 2) = -_tmp131 * _tmp176 + _tmp131 * _tmp183 - _tmp132 * _tmp179 +
                     _tmp132 * _tmp184 - _tmp133 * _tmp179 + _tmp165 * _tmp175 +
                     _tmp178 * sqrt_info(1, 1) + _tmp181 * sqrt_info(1, 0) + _tmp182 * _tmp67;
    _res_D_x(2, 2) = -_tmp135 * _tmp176 + _tmp135 * _tmp183 + _tmp136 * _tmp184 -
                     _tmp137 * _tmp179 + _tmp138 * _tmp183 + _tmp177 * _tmp71 -
                     _tmp180 * sqrt_info(2, 2) + _tmp181 * sqrt_info(2, 0) + _tmp182 * _tmp70;
    _res_D_x(0, 3) = 0;
    _res_D_x(1, 3) = 0;
    _res_D_x(2, 3) = 0;
    _res_D_x(0, 4) = 0;
    _res_D_x(1, 4) = 0;
    _res_D_x(2, 4) = 0;
    _res_D_x(0, 5) = 0;
    _res_D_x(1, 5) = 0;
    _res_D_x(2, 5) = 0;
  }

  if (res_D_x_T_a != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 6>> _res_D_x_T_a{res_D_x_T_a};

    _res_D_x_T_a(0, 0) = -_tmp117 * _tmp222 + _tmp122 * _tmp217 - _tmp124 * _tmp223 +
                         _tmp212 * sqrt_info(0, 0) + _tmp213 * _tmp220 + _tmp213 * _tmp226 +
                         _tmp218 * _tmp219 - _tmp224 * sqrt_info(0, 2) + _tmp225 * _tmp62;
    _res_D_x_T_a(1, 0) = -_tmp131 * _tmp222 + _tmp131 * _tmp228 + _tmp132 * _tmp217 -
                         _tmp132 * _tmp223 - _tmp134 * _tmp222 + _tmp134 * _tmp228 +
                         _tmp212 * sqrt_info(1, 0) + _tmp218 * _tmp227 + _tmp225 * _tmp66;
    _res_D_x_T_a(2, 0) = -_tmp135 * _tmp222 + _tmp135 * _tmp228 + _tmp136 * _tmp217 -
                         _tmp137 * _tmp223 + _tmp212 * sqrt_info(2, 0) + _tmp213 * _tmp230 +
                         _tmp218 * _tmp229 - _tmp224 * sqrt_info(2, 2) + _tmp225 * _tmp69;
    _res_D_x_T_a(0, 1) = -_tmp117 * _tmp242 - _tmp122 * _tmp243 + _tmp122 * _tmp244 -
                         _tmp130 * _tmp242 + _tmp220 * _tmp241 + _tmp226 * _tmp241 +
                         _tmp245 * sqrt_info(0, 0) + _tmp247 * sqrt_info(0, 1) + _tmp248 * _tmp62;
    _res_D_x_T_a(1, 1) = -_tmp131 * _tmp242 + _tmp131 * _tmp249 - _tmp132 * _tmp243 +
                         _tmp132 * _tmp244 - _tmp134 * _tmp242 + _tmp134 * _tmp249 +
                         _tmp245 * sqrt_info(1, 0) + _tmp247 * sqrt_info(1, 1) + _tmp248 * _tmp66;
    _res_D_x_T_a(2, 1) = -_tmp135 * _tmp242 + _tmp135 * _tmp249 - _tmp136 * _tmp243 +
                         _tmp136 * _tmp244 - _tmp138 * _tmp242 + _tmp230 * _tmp241 +
                         _tmp245 * sqrt_info(2, 0) + _tmp246 * _tmp71 + _tmp248 * _tmp69;
    _res_D_x_T_a(0, 2) = -_tmp117 * _tmp256 + _tmp122 * _tmp257 - _tmp122 * _tmp258 -
                         _tmp124 * _tmp258 + _tmp219 * _tmp262 + _tmp220 * _tmp255 +
                         _tmp226 * _tmp255 + _tmp259 * _tmp260 + _tmp261 * sqrt_info(0, 0);
    _res_D_x_T_a(1, 2) = -_tmp131 * _tmp256 + _tmp131 * _tmp263 + _tmp132 * _tmp257 -
                         _tmp132 * _tmp258 - _tmp134 * _tmp256 + _tmp134 * _tmp263 +
                         _tmp227 * _tmp262 + _tmp259 * _tmp264 + _tmp261 * sqrt_info(1, 0);
    _res_D_x_T_a(2, 2) = -_tmp135 * _tmp256 + _tmp135 * _tmp263 + _tmp136 * _tmp257 -
                         _tmp136 * _tmp258 - _tmp137 * _tmp258 + _tmp229 * _tmp262 +
                         _tmp230 * _tmp255 + _tmp259 * _tmp265 + _tmp261 * sqrt_info(2, 0);
    _res_D_x_T_a(0, 3) = 0;
    _res_D_x_T_a(1, 3) = 0;
    _res_D_x_T_a(2, 3) = 0;
    _res_D_x_T_a(0, 4) = 0;
    _res_D_x_T_a(1, 4) = 0;
    _res_D_x_T_a(2, 4) = 0;
    _res_D_x_T_a(0, 5) = 0;
    _res_D_x_T_a(1, 5) = 0;
    _res_D_x_T_a(2, 5) = 0;
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 6>> _res_D_y{res_D_y};

    _res_D_y(0, 0) = _tmp117 * _tmp306 - _tmp117 * _tmp307 - _tmp122 * _tmp308 + _tmp122 * _tmp309 -
                     _tmp130 * _tmp307 + _tmp219 * _tmp310 + _tmp220 * _tmp305 + _tmp260 * _tmp311 +
                     _tmp312 * sqrt_info(0, 0);
    _res_D_y(1, 0) = _tmp131 * _tmp306 - _tmp131 * _tmp307 - _tmp132 * _tmp308 + _tmp132 * _tmp309 +
                     _tmp134 * _tmp306 - _tmp134 * _tmp307 + _tmp227 * _tmp310 + _tmp264 * _tmp311 +
                     _tmp312 * sqrt_info(1, 0);
    _res_D_y(2, 0) = _tmp135 * _tmp306 - _tmp135 * _tmp307 - _tmp136 * _tmp308 + _tmp136 * _tmp309 -
                     _tmp138 * _tmp307 + _tmp229 * _tmp310 + _tmp230 * _tmp305 + _tmp265 * _tmp311 +
                     _tmp312 * sqrt_info(2, 0);
    _res_D_y(0, 1) = _tmp117 * _tmp331 - _tmp117 * _tmp333 + _tmp122 * _tmp332 - _tmp122 * _tmp334 +
                     _tmp130 * _tmp331 - _tmp130 * _tmp333 + _tmp219 * _tmp336 + _tmp260 * _tmp335 +
                     _tmp337 * sqrt_info(0, 0);
    _res_D_y(1, 1) = _tmp131 * _tmp331 - _tmp131 * _tmp333 + _tmp132 * _tmp332 - _tmp132 * _tmp334 +
                     _tmp134 * _tmp331 - _tmp134 * _tmp333 + _tmp227 * _tmp336 + _tmp264 * _tmp335 +
                     _tmp337 * sqrt_info(1, 0);
    _res_D_y(2, 1) = _tmp135 * _tmp331 - _tmp135 * _tmp333 + _tmp136 * _tmp332 - _tmp136 * _tmp334 -
                     _tmp138 * _tmp333 + _tmp229 * _tmp336 + _tmp230 * _tmp330 + _tmp265 * _tmp335 +
                     _tmp337 * sqrt_info(2, 0);
    _res_D_y(0, 2) = -_tmp117 * _tmp349 + _tmp117 * _tmp354 + _tmp122 * _tmp348 -
                     _tmp122 * _tmp350 - _tmp130 * _tmp349 + _tmp219 * _tmp352 + _tmp220 * _tmp347 +
                     _tmp260 * _tmp351 + _tmp353 * sqrt_info(0, 0);
    _res_D_y(1, 2) = -_tmp131 * _tmp349 + _tmp131 * _tmp354 + _tmp132 * _tmp348 -
                     _tmp132 * _tmp350 - _tmp134 * _tmp349 + _tmp134 * _tmp354 + _tmp227 * _tmp352 +
                     _tmp264 * _tmp351 + _tmp353 * sqrt_info(1, 0);
    _res_D_y(2, 2) = -_tmp135 * _tmp349 + _tmp135 * _tmp354 + _tmp136 * _tmp348 -
                     _tmp136 * _tmp350 - _tmp138 * _tmp349 + _tmp229 * _tmp352 + _tmp230 * _tmp347 +
                     _tmp265 * _tmp351 + _tmp353 * sqrt_info(2, 0);
    _res_D_y(0, 3) = 0;
    _res_D_y(1, 3) = 0;
    _res_D_y(2, 3) = 0;
    _res_D_y(0, 4) = 0;
    _res_D_y(1, 4) = 0;
    _res_D_y(2, 4) = 0;
    _res_D_y(0, 5) = 0;
    _res_D_y(1, 5) = 0;
    _res_D_y(2, 5) = 0;
  }

  if (res_D_y_T_b != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 6>> _res_D_y_T_b{res_D_y_T_b};

    _res_D_y_T_b(0, 0) = _tmp117 * _tmp377 - _tmp117 * _tmp383 + _tmp122 * _tmp378 -
                         _tmp124 * _tmp380 + _tmp130 * _tmp377 + _tmp375 * _tmp65 +
                         _tmp379 * _tmp63 + _tmp381 * sqrt_info(0, 0) - _tmp382 * sqrt_info(0, 2);
    _res_D_y_T_b(1, 0) = _tmp131 * _tmp377 - _tmp131 * _tmp383 + _tmp132 * _tmp378 -
                         _tmp132 * _tmp380 - _tmp133 * _tmp380 + _tmp134 * _tmp377 +
                         _tmp375 * _tmp68 + _tmp379 * _tmp67 + _tmp381 * sqrt_info(1, 0);
    _res_D_y_T_b(2, 0) = _tmp135 * _tmp377 - _tmp135 * _tmp383 + _tmp136 * _tmp378 -
                         _tmp137 * _tmp380 + _tmp138 * _tmp377 + _tmp375 * _tmp72 +
                         _tmp379 * _tmp70 + _tmp381 * sqrt_info(2, 0) - _tmp382 * sqrt_info(2, 2);
    _res_D_y_T_b(0, 1) = _tmp117 * _tmp395 - _tmp117 * _tmp399 - _tmp122 * _tmp400 +
                         _tmp122 * _tmp401 + _tmp130 * _tmp395 - _tmp130 * _tmp399 +
                         _tmp396 * sqrt_info(0, 0) + _tmp397 * _tmp65 + _tmp398 * _tmp63;
    _res_D_y_T_b(1, 1) = _tmp131 * _tmp395 - _tmp131 * _tmp399 - _tmp132 * _tmp400 +
                         _tmp132 * _tmp401 - _tmp134 * _tmp399 + _tmp165 * _tmp394 +
                         _tmp396 * sqrt_info(1, 0) + _tmp397 * _tmp68 + _tmp398 * _tmp67;
    _res_D_y_T_b(2, 1) = _tmp135 * _tmp395 - _tmp135 * _tmp399 - _tmp136 * _tmp400 +
                         _tmp136 * _tmp401 + _tmp138 * _tmp395 - _tmp138 * _tmp399 +
                         _tmp396 * sqrt_info(2, 0) + _tmp397 * _tmp72 + _tmp398 * _tmp70;
    _res_D_y_T_b(0, 2) = _tmp117 * _tmp411 - _tmp117 * _tmp412 + _tmp122 * _tmp413 -
                         _tmp124 * _tmp410 + _tmp130 * _tmp411 + _tmp407 * _tmp65 +
                         _tmp408 * sqrt_info(0, 0) + _tmp414 * _tmp63 - _tmp415 * sqrt_info(0, 2);
    _res_D_y_T_b(1, 2) = _tmp131 * _tmp411 - _tmp131 * _tmp412 - _tmp132 * _tmp410 +
                         _tmp132 * _tmp413 - _tmp133 * _tmp410 + _tmp165 * _tmp409 +
                         _tmp407 * _tmp68 + _tmp408 * sqrt_info(1, 0) + _tmp414 * _tmp67;
    _res_D_y_T_b(2, 2) = _tmp135 * _tmp411 - _tmp135 * _tmp412 + _tmp136 * _tmp413 -
                         _tmp137 * _tmp410 + _tmp138 * _tmp411 + _tmp407 * _tmp72 +
                         _tmp408 * sqrt_info(2, 0) + _tmp414 * _tmp70 - _tmp415 * sqrt_info(2, 2);
    _res_D_y_T_b(0, 3) = 0;
    _res_D_y_T_b(1, 3) = 0;
    _res_D_y_T_b(2, 3) = 0;
    _res_D_y_T_b(0, 4) = 0;
    _res_D_y_T_b(1, 4) = 0;
    _res_D_y_T_b(2, 4) = 0;
    _res_D_y_T_b(0, 5) = 0;
    _res_D_y_T_b(1, 5) = 0;
    _res_D_y_T_b(2, 5) = 0;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
