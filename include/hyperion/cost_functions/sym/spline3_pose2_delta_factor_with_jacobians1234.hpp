// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose2.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose2_delta_factor
 *
 * Args:
 *     lambdas: Matrix31
 *     x0: Pose2
 *     x1: Pose2
 *     x2: Pose2
 *     x3: Pose2
 *     y: Pose2
 *     sqrt_info: Matrix33
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x0: (3x3) jacobian of res (3) wrt arg x0 (3)
 *     res_D_x1: (3x3) jacobian of res (3) wrt arg x1 (3)
 *     res_D_x2: (3x3) jacobian of res (3) wrt arg x2 (3)
 *     res_D_x3: (3x3) jacobian of res (3) wrt arg x3 (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Pose2DeltaFactorWithJacobians1234(
    const Eigen::Matrix<Scalar, 3, 1>& lambdas, const sym::Pose2<Scalar>& x0,
    const sym::Pose2<Scalar>& x1, const sym::Pose2<Scalar>& x2, const sym::Pose2<Scalar>& x3,
    const sym::Pose2<Scalar>& y, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x0 = nullptr, Scalar* const res_D_x1 = nullptr,
    Scalar* const res_D_x2 = nullptr, Scalar* const res_D_x3 = nullptr) {
  // Total ops: 337

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (110)
  const Scalar _tmp0 = _x0[2] - _y[2] + lambdas(0, 0) * (-_x0[2] + _x1[2]) +
                       lambdas(1, 0) * (-_x1[2] + _x2[2]) + lambdas(2, 0) * (-_x2[2] + _x3[2]);
  const Scalar _tmp1 = _x0[3] - _y[3] + lambdas(0, 0) * (-_x0[3] + _x1[3]) +
                       lambdas(1, 0) * (-_x1[3] + _x2[3]) + lambdas(2, 0) * (-_x2[3] + _x3[3]);
  const Scalar _tmp2 = _x2[1] * _x3[0];
  const Scalar _tmp3 = _x2[0] * _x3[1];
  const Scalar _tmp4 = -_tmp2 + _tmp3;
  const Scalar _tmp5 = _x2[0] * _x3[0];
  const Scalar _tmp6 = _x2[1] * _x3[1];
  const Scalar _tmp7 = _tmp5 + _tmp6;
  const Scalar _tmp8 = _tmp7 + epsilon * ((((_tmp7) > 0) - ((_tmp7) < 0)) + Scalar(0.5));
  const Scalar _tmp9 = lambdas(2, 0) * std::atan2(_tmp4, _tmp8);
  const Scalar _tmp10 = std::sin(_tmp9);
  const Scalar _tmp11 = _x1[0] * _x2[1];
  const Scalar _tmp12 = _x1[1] * _x2[0];
  const Scalar _tmp13 = _tmp11 - _tmp12;
  const Scalar _tmp14 = _x1[0] * _x2[0];
  const Scalar _tmp15 = _x1[1] * _x2[1];
  const Scalar _tmp16 = _tmp14 + _tmp15;
  const Scalar _tmp17 = _tmp16 + epsilon * ((((_tmp16) > 0) - ((_tmp16) < 0)) + Scalar(0.5));
  const Scalar _tmp18 = lambdas(1, 0) * std::atan2(_tmp13, _tmp17);
  const Scalar _tmp19 = std::sin(_tmp18);
  const Scalar _tmp20 = _tmp10 * _tmp19;
  const Scalar _tmp21 = std::cos(_tmp9);
  const Scalar _tmp22 = std::cos(_tmp18);
  const Scalar _tmp23 = _tmp21 * _tmp22;
  const Scalar _tmp24 = -_tmp20 + _tmp23;
  const Scalar _tmp25 = _x0[1] * _x1[0];
  const Scalar _tmp26 = _x0[0] * _x1[1];
  const Scalar _tmp27 = -_tmp25 + _tmp26;
  const Scalar _tmp28 = _x0[1] * _x1[1];
  const Scalar _tmp29 = _x0[0] * _x1[0];
  const Scalar _tmp30 = _tmp28 + _tmp29;
  const Scalar _tmp31 = _tmp30 + epsilon * ((((_tmp30) > 0) - ((_tmp30) < 0)) + Scalar(0.5));
  const Scalar _tmp32 = lambdas(0, 0) * std::atan2(_tmp27, _tmp31);
  const Scalar _tmp33 = std::cos(_tmp32);
  const Scalar _tmp34 = _tmp24 * _tmp33;
  const Scalar _tmp35 = _tmp10 * _tmp22;
  const Scalar _tmp36 = _tmp19 * _tmp21;
  const Scalar _tmp37 = _tmp35 + _tmp36;
  const Scalar _tmp38 = std::sin(_tmp32);
  const Scalar _tmp39 = _tmp37 * _tmp38;
  const Scalar _tmp40 = _tmp34 - _tmp39;
  const Scalar _tmp41 = _tmp40 * _x0[1];
  const Scalar _tmp42 = _tmp24 * _tmp38;
  const Scalar _tmp43 = _tmp33 * _tmp37;
  const Scalar _tmp44 = _tmp42 + _tmp43;
  const Scalar _tmp45 = _tmp44 * _x0[0];
  const Scalar _tmp46 = _tmp41 + _tmp45;
  const Scalar _tmp47 = _tmp40 * _x0[0] - _tmp44 * _x0[1];
  const Scalar _tmp48 = _tmp46 * _y[0] - _tmp47 * _y[1];
  const Scalar _tmp49 = _tmp46 * _y[1] + _tmp47 * _y[0];
  const Scalar _tmp50 = _tmp49 + epsilon * ((((_tmp49) > 0) - ((_tmp49) < 0)) + Scalar(0.5));
  const Scalar _tmp51 = std::atan2(_tmp48, _tmp50);
  const Scalar _tmp52 = std::pow(_tmp27, Scalar(2));
  const Scalar _tmp53 = std::pow(_tmp31, Scalar(2));
  const Scalar _tmp54 = Scalar(1.0) / (_tmp53);
  const Scalar _tmp55 = Scalar(1.0) / (_tmp31);
  const Scalar _tmp56 = _tmp53 * lambdas(0, 0) / (_tmp52 + _tmp53);
  const Scalar _tmp57 = _tmp56 * (-_tmp52 * _tmp54 + _tmp55 * (-_tmp28 - _tmp29));
  const Scalar _tmp58 = _tmp34 * _tmp57 - _tmp39 * _tmp57;
  const Scalar _tmp59 = -_tmp42 * _tmp57 - _tmp43 * _tmp57;
  const Scalar _tmp60 = _tmp47 + _tmp58 * _x0[0] + _tmp59 * _x0[1];
  const Scalar _tmp61 = -_tmp41 - _tmp45 - _tmp58 * _x0[1] + _tmp59 * _x0[0];
  const Scalar _tmp62 = std::pow(_tmp50, Scalar(2));
  const Scalar _tmp63 = _tmp48 / _tmp62;
  const Scalar _tmp64 = Scalar(1.0) / (_tmp50);
  const Scalar _tmp65 =
      -_tmp63 * (_tmp60 * _y[1] + _tmp61 * _y[0]) + _tmp64 * (_tmp60 * _y[0] - _tmp61 * _y[1]);
  const Scalar _tmp66 = _tmp62 / (std::pow(_tmp48, Scalar(2)) + _tmp62);
  const Scalar _tmp67 = _tmp66 * sqrt_info(0, 0);
  const Scalar _tmp68 = _tmp66 * sqrt_info(1, 0);
  const Scalar _tmp69 = _tmp66 * sqrt_info(2, 0);
  const Scalar _tmp70 = 1 - lambdas(0, 0);
  const Scalar _tmp71 = std::pow(_tmp13, Scalar(2));
  const Scalar _tmp72 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp73 = Scalar(1.0) / (_tmp72);
  const Scalar _tmp74 = Scalar(1.0) / (_tmp17);
  const Scalar _tmp75 = _tmp72 * lambdas(1, 0) / (_tmp71 + _tmp72);
  const Scalar _tmp76 = _tmp75 * (-_tmp71 * _tmp73 + _tmp74 * (-_tmp14 - _tmp15));
  const Scalar _tmp77 = -_tmp20 * _tmp76 + _tmp23 * _tmp76;
  const Scalar _tmp78 = -_tmp35 * _tmp76 - _tmp36 * _tmp76;
  const Scalar _tmp79 = _tmp56 * (-_tmp27 * _tmp54 * (_tmp25 - _tmp26) + _tmp30 * _tmp55);
  const Scalar _tmp80 = _tmp33 * _tmp77 + _tmp34 * _tmp79 + _tmp38 * _tmp78 - _tmp39 * _tmp79;
  const Scalar _tmp81 = _tmp33 * _tmp78 - _tmp38 * _tmp77 - _tmp42 * _tmp79 - _tmp43 * _tmp79;
  const Scalar _tmp82 = _tmp80 * _x0[0] + _tmp81 * _x0[1];
  const Scalar _tmp83 = -_tmp80 * _x0[1] + _tmp81 * _x0[0];
  const Scalar _tmp84 =
      -_tmp63 * (_tmp82 * _y[1] + _tmp83 * _y[0]) + _tmp64 * (_tmp82 * _y[0] - _tmp83 * _y[1]);
  const Scalar _tmp85 = _tmp66 * _tmp84;
  const Scalar _tmp86 = lambdas(0, 0) - lambdas(1, 0);
  const Scalar _tmp87 = std::pow(_tmp4, Scalar(2));
  const Scalar _tmp88 = std::pow(_tmp8, Scalar(2));
  const Scalar _tmp89 = Scalar(1.0) / (_tmp88);
  const Scalar _tmp90 = Scalar(1.0) / (_tmp8);
  const Scalar _tmp91 = _tmp88 * lambdas(2, 0) / (_tmp87 + _tmp88);
  const Scalar _tmp92 = _tmp91 * (-_tmp87 * _tmp89 + _tmp90 * (-_tmp5 - _tmp6));
  const Scalar _tmp93 = _tmp75 * (-_tmp13 * _tmp73 * (-_tmp11 + _tmp12) + _tmp16 * _tmp74);
  const Scalar _tmp94 = -_tmp35 * _tmp92 - _tmp35 * _tmp93 - _tmp36 * _tmp92 - _tmp36 * _tmp93;
  const Scalar _tmp95 = -_tmp20 * _tmp92 - _tmp20 * _tmp93 + _tmp23 * _tmp92 + _tmp23 * _tmp93;
  const Scalar _tmp96 = _tmp33 * _tmp95 + _tmp38 * _tmp94;
  const Scalar _tmp97 = _tmp33 * _tmp94 - _tmp38 * _tmp95;
  const Scalar _tmp98 = -_tmp96 * _x0[1] + _tmp97 * _x0[0];
  const Scalar _tmp99 = _tmp96 * _x0[0] + _tmp97 * _x0[1];
  const Scalar _tmp100 =
      -_tmp63 * (_tmp98 * _y[0] + _tmp99 * _y[1]) + _tmp64 * (-_tmp98 * _y[1] + _tmp99 * _y[0]);
  const Scalar _tmp101 = lambdas(1, 0) - lambdas(2, 0);
  const Scalar _tmp102 = _tmp91 * (-_tmp4 * _tmp89 * (_tmp2 - _tmp3) + _tmp7 * _tmp90);
  const Scalar _tmp103 = -_tmp102 * _tmp20 + _tmp102 * _tmp23;
  const Scalar _tmp104 = -_tmp102 * _tmp35 - _tmp102 * _tmp36;
  const Scalar _tmp105 = -_tmp103 * _tmp38 + _tmp104 * _tmp33;
  const Scalar _tmp106 = _tmp103 * _tmp33 + _tmp104 * _tmp38;
  const Scalar _tmp107 = _tmp105 * _x0[1] + _tmp106 * _x0[0];
  const Scalar _tmp108 = _tmp105 * _x0[0] - _tmp106 * _x0[1];
  const Scalar _tmp109 =
      -_tmp63 * (_tmp107 * _y[1] + _tmp108 * _y[0]) + _tmp64 * (_tmp107 * _y[0] - _tmp108 * _y[1]);

  // Output terms (5)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp0 * sqrt_info(0, 1) + _tmp1 * sqrt_info(0, 2) + _tmp51 * sqrt_info(0, 0);
  _res(1, 0) = _tmp0 * sqrt_info(1, 1) + _tmp1 * sqrt_info(1, 2) + _tmp51 * sqrt_info(1, 0);
  _res(2, 0) = _tmp0 * sqrt_info(2, 1) + _tmp1 * sqrt_info(2, 2) + _tmp51 * sqrt_info(2, 0);

  if (res_D_x0 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x0{res_D_x0};

    _res_D_x0(0, 0) = _tmp65 * _tmp67;
    _res_D_x0(1, 0) = _tmp65 * _tmp68;
    _res_D_x0(2, 0) = _tmp65 * _tmp69;
    _res_D_x0(0, 1) = _tmp70 * sqrt_info(0, 1);
    _res_D_x0(1, 1) = _tmp70 * sqrt_info(1, 1);
    _res_D_x0(2, 1) = _tmp70 * sqrt_info(2, 1);
    _res_D_x0(0, 2) = _tmp70 * sqrt_info(0, 2);
    _res_D_x0(1, 2) = _tmp70 * sqrt_info(1, 2);
    _res_D_x0(2, 2) = _tmp70 * sqrt_info(2, 2);
  }

  if (res_D_x1 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x1{res_D_x1};

    _res_D_x1(0, 0) = _tmp67 * _tmp84;
    _res_D_x1(1, 0) = _tmp85 * sqrt_info(1, 0);
    _res_D_x1(2, 0) = _tmp85 * sqrt_info(2, 0);
    _res_D_x1(0, 1) = _tmp86 * sqrt_info(0, 1);
    _res_D_x1(1, 1) = _tmp86 * sqrt_info(1, 1);
    _res_D_x1(2, 1) = _tmp86 * sqrt_info(2, 1);
    _res_D_x1(0, 2) = _tmp86 * sqrt_info(0, 2);
    _res_D_x1(1, 2) = _tmp86 * sqrt_info(1, 2);
    _res_D_x1(2, 2) = _tmp86 * sqrt_info(2, 2);
  }

  if (res_D_x2 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x2{res_D_x2};

    _res_D_x2(0, 0) = _tmp100 * _tmp67;
    _res_D_x2(1, 0) = _tmp100 * _tmp68;
    _res_D_x2(2, 0) = _tmp100 * _tmp69;
    _res_D_x2(0, 1) = _tmp101 * sqrt_info(0, 1);
    _res_D_x2(1, 1) = _tmp101 * sqrt_info(1, 1);
    _res_D_x2(2, 1) = _tmp101 * sqrt_info(2, 1);
    _res_D_x2(0, 2) = _tmp101 * sqrt_info(0, 2);
    _res_D_x2(1, 2) = _tmp101 * sqrt_info(1, 2);
    _res_D_x2(2, 2) = _tmp101 * sqrt_info(2, 2);
  }

  if (res_D_x3 != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> _res_D_x3{res_D_x3};

    _res_D_x3(0, 0) = _tmp109 * _tmp67;
    _res_D_x3(1, 0) = _tmp109 * _tmp68;
    _res_D_x3(2, 0) = _tmp109 * _tmp69;
    _res_D_x3(0, 1) = lambdas(2, 0) * sqrt_info(0, 1);
    _res_D_x3(1, 1) = lambdas(2, 0) * sqrt_info(1, 1);
    _res_D_x3(2, 1) = lambdas(2, 0) * sqrt_info(2, 1);
    _res_D_x3(0, 2) = lambdas(2, 0) * sqrt_info(0, 2);
    _res_D_x3(1, 2) = lambdas(2, 0) * sqrt_info(1, 2);
    _res_D_x3(2, 2) = lambdas(2, 0) * sqrt_info(2, 2);
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
