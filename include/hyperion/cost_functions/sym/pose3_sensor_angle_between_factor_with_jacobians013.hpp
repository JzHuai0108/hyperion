// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     FACTOR.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym_hyperion {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: pose3_sensor_angle_between_factor
 *
 * Args:
 *     x: Pose3
 *     x_T_s: Pose3
 *     s_d_y: Matrix11
 *     y: Pose3
 *     sqrt_info: Matrix11
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix11
 *     res_D_x: (1x6) jacobian of res (1) wrt arg x (6)
 *     res_D_x_T_s: (1x6) jacobian of res (1) wrt arg x_T_s (6)
 *     res_D_y: (1x6) jacobian of res (1) wrt arg y (6)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> Pose3SensorAngleBetweenFactorWithJacobians013(
    const sym::Pose3<Scalar>& x, const sym::Pose3<Scalar>& x_T_s,
    const Eigen::Matrix<Scalar, 1, 1>& s_d_y, const sym::Pose3<Scalar>& y,
    const Eigen::Matrix<Scalar, 1, 1>& sqrt_info, const Scalar epsilon,
    Scalar* const res_D_x = nullptr, Scalar* const res_D_x_T_s = nullptr,
    Scalar* const res_D_y = nullptr) {
  // Total ops: 557

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x_T_s = x_T_s.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _y = y.Data();

  // Intermediate terms (176)
  const Scalar _tmp0 = _x[3] * _x_T_s[2];
  const Scalar _tmp1 = _x[2] * _x_T_s[3];
  const Scalar _tmp2 = _x[1] * _x_T_s[0];
  const Scalar _tmp3 = _x[0] * _x_T_s[1];
  const Scalar _tmp4 = _tmp0 + _tmp1 - _tmp2 + _tmp3;
  const Scalar _tmp5 = _tmp4 * _y[2];
  const Scalar _tmp6 = _x[3] * _x_T_s[1];
  const Scalar _tmp7 = _x[2] * _x_T_s[0];
  const Scalar _tmp8 = _x[1] * _x_T_s[3];
  const Scalar _tmp9 = _x[0] * _x_T_s[2];
  const Scalar _tmp10 = _tmp6 + _tmp7 + _tmp8 - _tmp9;
  const Scalar _tmp11 = _tmp10 * _y[1];
  const Scalar _tmp12 = _x[3] * _x_T_s[0];
  const Scalar _tmp13 = _x[2] * _x_T_s[1];
  const Scalar _tmp14 = _x[1] * _x_T_s[2];
  const Scalar _tmp15 = _x[0] * _x_T_s[3];
  const Scalar _tmp16 = _tmp12 - _tmp13 + _tmp14 + _tmp15;
  const Scalar _tmp17 = _tmp16 * _y[0];
  const Scalar _tmp18 = -_tmp11 - _tmp17 - _tmp5;
  const Scalar _tmp19 = _x[3] * _x_T_s[3];
  const Scalar _tmp20 = _x[2] * _x_T_s[2];
  const Scalar _tmp21 = _x[1] * _x_T_s[1];
  const Scalar _tmp22 = _x[0] * _x_T_s[0];
  const Scalar _tmp23 = _tmp19 - _tmp20 - _tmp21 - _tmp22;
  const Scalar _tmp24 = _tmp23 * _y[3];
  const Scalar _tmp25 = 1 - epsilon;
  const Scalar _tmp26 = std::min<Scalar>(_tmp25, std::fabs(_tmp18 - _tmp24));
  const Scalar _tmp27 =
      std::pow(Scalar(std::acos(_tmp26)), Scalar(2)) / (1 - std::pow(_tmp26, Scalar(2)));
  const Scalar _tmp28 = _tmp4 * _y[3];
  const Scalar _tmp29 = _tmp10 * _y[0];
  const Scalar _tmp30 = _tmp16 * _y[1];
  const Scalar _tmp31 = _tmp23 * _y[2];
  const Scalar _tmp32 = -_tmp28 + _tmp29 - _tmp30 + _tmp31;
  const Scalar _tmp33 = std::pow(
      Scalar(2 * std::min<Scalar>(0, (((-_tmp18 + _tmp24) > 0) - ((-_tmp18 + _tmp24) < 0))) + 1),
      Scalar(2));
  const Scalar _tmp34 = 4 * _tmp33;
  const Scalar _tmp35 = std::pow(_tmp32, Scalar(2)) * _tmp34;
  const Scalar _tmp36 = _tmp4 * _y[1];
  const Scalar _tmp37 = _tmp10 * _y[2];
  const Scalar _tmp38 = _tmp16 * _y[3];
  const Scalar _tmp39 = _tmp23 * _y[0];
  const Scalar _tmp40 = _tmp36 - _tmp37 - _tmp38 + _tmp39;
  const Scalar _tmp41 = _tmp34 * std::pow(_tmp40, Scalar(2));
  const Scalar _tmp42 = _tmp4 * _y[0];
  const Scalar _tmp43 = _tmp10 * _y[3];
  const Scalar _tmp44 = _tmp16 * _y[2];
  const Scalar _tmp45 = _tmp23 * _y[1];
  const Scalar _tmp46 = -_tmp42 - _tmp43 + _tmp44 + _tmp45;
  const Scalar _tmp47 = _tmp34 * std::pow(_tmp46, Scalar(2));
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp50 = -_tmp49;
  const Scalar _tmp51 = _tmp48 + _tmp50;
  const Scalar _tmp52 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp53 = -_tmp52;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp55 = -_tmp54;
  const Scalar _tmp56 = _tmp53 + _tmp55;
  const Scalar _tmp57 = _tmp51 + _tmp56;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp60 = -_tmp59;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp63 = _tmp61 + _tmp62;
  const Scalar _tmp64 = _tmp58 + _tmp60 + _tmp63;
  const Scalar _tmp65 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp66 = -_tmp65;
  const Scalar _tmp67 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp68 = -_tmp67;
  const Scalar _tmp69 = _tmp66 + _tmp68;
  const Scalar _tmp70 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp71 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp72 = -_tmp71;
  const Scalar _tmp73 = _tmp70 + _tmp72;
  const Scalar _tmp74 = _tmp69 + _tmp73;
  const Scalar _tmp75 = (Scalar(1) / Scalar(2)) * _tmp14;
  const Scalar _tmp76 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp77 = -_tmp76;
  const Scalar _tmp78 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp79 = -_tmp78;
  const Scalar _tmp80 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp81 = -_tmp80;
  const Scalar _tmp82 = _tmp79 + _tmp81;
  const Scalar _tmp83 = _tmp75 + _tmp77 + _tmp82;
  const Scalar _tmp84 = _tmp11 + _tmp17 + _tmp24 + _tmp5;
  const Scalar _tmp85 = std::fabs(_tmp84);
  const Scalar _tmp86 = std::min<Scalar>(_tmp25, _tmp85);
  const Scalar _tmp87 = 1 - std::pow(_tmp86, Scalar(2));
  const Scalar _tmp88 = std::acos(_tmp86);
  const Scalar _tmp89 = std::pow(_tmp88, Scalar(2));
  const Scalar _tmp90 = _tmp89 / _tmp87;
  const Scalar _tmp91 = 8 * _tmp33 * _tmp90;
  const Scalar _tmp92 = _tmp46 * _tmp91;
  const Scalar _tmp93 = _tmp57 * _y[1] + _tmp64 * _y[0] + _tmp74 * _y[2] + _tmp83 * _y[3];
  const Scalar _tmp94 =
      ((((_tmp25 - _tmp85) > 0) - ((_tmp25 - _tmp85) < 0)) + 1) * (((_tmp84) > 0) - ((_tmp84) < 0));
  const Scalar _tmp95 = _tmp86 * _tmp89 / std::pow(_tmp87, Scalar(2));
  const Scalar _tmp96 = _tmp94 * _tmp95;
  const Scalar _tmp97 = _tmp47 * _tmp96;
  const Scalar _tmp98 = _tmp41 * _tmp96;
  const Scalar _tmp99 = _tmp35 * _tmp95;
  const Scalar _tmp100 = _tmp94 * _tmp99;
  const Scalar _tmp101 = _tmp40 * _tmp91;
  const Scalar _tmp102 = _tmp88 / (_tmp87 * std::sqrt(_tmp87));
  const Scalar _tmp103 = _tmp102 * _tmp94;
  const Scalar _tmp104 = _tmp103 * _tmp35;
  const Scalar _tmp105 = _tmp103 * _tmp47;
  const Scalar _tmp106 = _tmp103 * _tmp41;
  const Scalar _tmp107 = _tmp32 * _tmp91;
  const Scalar _tmp108 =
      (Scalar(1) / Scalar(2)) * sqrt_info(0, 0) /
      std::sqrt(Scalar(_tmp35 * _tmp90 + _tmp41 * _tmp90 + _tmp47 * _tmp90 + epsilon));
  const Scalar _tmp109 = -_tmp58;
  const Scalar _tmp110 = _tmp109 + _tmp59 + _tmp63;
  const Scalar _tmp111 = -_tmp70;
  const Scalar _tmp112 = _tmp111 + _tmp72;
  const Scalar _tmp113 = _tmp112 + _tmp65 + _tmp68;
  const Scalar _tmp114 = -_tmp75;
  const Scalar _tmp115 = _tmp114 + _tmp76 + _tmp82;
  const Scalar _tmp116 = -_tmp48;
  const Scalar _tmp117 = _tmp116 + _tmp50;
  const Scalar _tmp118 = _tmp117 + _tmp52 + _tmp55;
  const Scalar _tmp119 = _tmp110 * _y[1] + _tmp113 * _y[3] + _tmp115 * _y[2] + _tmp118 * _y[0];
  const Scalar _tmp120 = _tmp103 * _tmp119;
  const Scalar _tmp121 = _tmp117 + _tmp53 + _tmp54;
  const Scalar _tmp122 = _tmp61 - _tmp62;
  const Scalar _tmp123 = _tmp122 + _tmp58 + _tmp59;
  const Scalar _tmp124 = _tmp112 + _tmp66 + _tmp67;
  const Scalar _tmp125 = _tmp114 + _tmp77;
  const Scalar _tmp126 = _tmp78 + _tmp81;
  const Scalar _tmp127 = _tmp125 + _tmp126;
  const Scalar _tmp128 = _tmp121 * _y[3] + _tmp123 * _y[2] + _tmp124 * _y[0] + _tmp127 * _y[1];
  const Scalar _tmp129 = _tmp125 + _tmp79 + _tmp80;
  const Scalar _tmp130 = _tmp129 * _y[2];
  const Scalar _tmp131 = _tmp109 + _tmp122 + _tmp60;
  const Scalar _tmp132 = _tmp131 * _y[1];
  const Scalar _tmp133 = _tmp111 + _tmp69 + _tmp71;
  const Scalar _tmp134 = _tmp133 * _y[3];
  const Scalar _tmp135 = _tmp51 + _tmp52 + _tmp54;
  const Scalar _tmp136 = _tmp129 * _y[3];
  const Scalar _tmp137 = _tmp131 * _y[0];
  const Scalar _tmp138 = _tmp133 * _y[2] + _tmp137;
  const Scalar _tmp139 = _tmp135 * _y[1] + _tmp136 + _tmp138;
  const Scalar _tmp140 = _tmp133 * _y[0];
  const Scalar _tmp141 = _tmp131 * _y[2];
  const Scalar _tmp142 = _tmp129 * _y[1] + _tmp141;
  const Scalar _tmp143 = _tmp103 * _tmp139;
  const Scalar _tmp144 = _tmp129 * _y[0];
  const Scalar _tmp145 = -_tmp131 * _y[3];
  const Scalar _tmp146 = _tmp133 * _y[1] + _tmp145;
  const Scalar _tmp147 = _tmp116 + _tmp49 + _tmp56;
  const Scalar _tmp148 = _tmp147 * _y[2];
  const Scalar _tmp149 = _tmp126 + _tmp75 + _tmp76;
  const Scalar _tmp150 = _tmp147 * _y[1];
  const Scalar _tmp151 = _tmp147 * _y[3];
  const Scalar _tmp152 = _tmp132 + _tmp147 * _y[0];
  const Scalar _tmp153 = _tmp134 + _tmp149 * _y[2] + _tmp152;
  const Scalar _tmp154 = _tmp103 * _tmp153;
  const Scalar _tmp155 = _tmp65 + _tmp67 + _tmp73;
  const Scalar _tmp156 = _tmp142 + _tmp151 + _tmp155 * _y[0];
  const Scalar _tmp157 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp158 = (Scalar(1) / Scalar(2)) * _tmp37;
  const Scalar _tmp159 = (Scalar(1) / Scalar(2)) * _tmp38;
  const Scalar _tmp160 = (Scalar(1) / Scalar(2)) * _tmp39;
  const Scalar _tmp161 = -_tmp157 + _tmp158 + _tmp159 - _tmp160;
  const Scalar _tmp162 = (Scalar(1) / Scalar(2)) * _tmp42;
  const Scalar _tmp163 = (Scalar(1) / Scalar(2)) * _tmp43;
  const Scalar _tmp164 = (Scalar(1) / Scalar(2)) * _tmp44;
  const Scalar _tmp165 = (Scalar(1) / Scalar(2)) * _tmp45;
  const Scalar _tmp166 = _tmp162 + _tmp163 - _tmp164 - _tmp165;
  const Scalar _tmp167 = (Scalar(1) / Scalar(2)) * _tmp11 + (Scalar(1) / Scalar(2)) * _tmp17 +
                         (Scalar(1) / Scalar(2)) * _tmp24 + (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp168 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp169 = (Scalar(1) / Scalar(2)) * _tmp29;
  const Scalar _tmp170 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp171 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp172 = _tmp166 * _tmp94;
  const Scalar _tmp173 = _tmp172 * _tmp47;
  const Scalar _tmp174 = _tmp102 * _tmp172;
  const Scalar _tmp175 = _tmp168 - _tmp169 + _tmp170 - _tmp171;

  // Output terms (4)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) = sqrt_info(0, 0) *
               (-s_d_y(0, 0) +
                std::sqrt(Scalar(_tmp27 * _tmp35 + _tmp27 * _tmp41 + _tmp27 * _tmp47 + epsilon)));

  if (res_D_x != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 6>> _res_D_x{res_D_x};

    _res_D_x(0, 0) =
        _tmp108 * (_tmp100 * _tmp93 +
                   _tmp101 * (-_tmp57 * _y[2] - _tmp64 * _y[3] + _tmp74 * _y[1] + _tmp83 * _y[0]) -
                   _tmp104 * _tmp93 - _tmp105 * _tmp93 - _tmp106 * _tmp93 +
                   _tmp107 * (_tmp57 * _y[0] - _tmp64 * _y[1] - _tmp74 * _y[3] + _tmp83 * _y[2]) +
                   _tmp92 * (-_tmp57 * _y[3] + _tmp64 * _y[2] - _tmp74 * _y[0] + _tmp83 * _y[1]) +
                   _tmp93 * _tmp97 + _tmp93 * _tmp98);
    _res_D_x(0, 1) =
        _tmp108 *
        (_tmp100 * _tmp119 +
         _tmp101 * (-_tmp110 * _y[2] + _tmp113 * _y[0] + _tmp115 * _y[1] - _tmp118 * _y[3]) -
         _tmp104 * _tmp119 +
         _tmp107 * (_tmp110 * _y[0] + _tmp113 * _y[2] - _tmp115 * _y[3] - _tmp118 * _y[1]) +
         _tmp119 * _tmp97 + _tmp119 * _tmp98 - _tmp120 * _tmp41 - _tmp120 * _tmp47 +
         _tmp92 * (-_tmp110 * _y[3] + _tmp113 * _y[1] - _tmp115 * _y[0] + _tmp118 * _y[2]));
    _res_D_x(0, 2) =
        _tmp108 *
        (_tmp100 * _tmp128 +
         _tmp101 * (_tmp121 * _y[0] + _tmp123 * _y[1] - _tmp124 * _y[3] - _tmp127 * _y[2]) -
         _tmp104 * _tmp128 - _tmp105 * _tmp128 - _tmp106 * _tmp128 +
         _tmp107 * (_tmp121 * _y[2] - _tmp123 * _y[3] - _tmp124 * _y[1] + _tmp127 * _y[0]) +
         _tmp128 * _tmp97 + _tmp128 * _tmp98 +
         _tmp92 * (_tmp121 * _y[1] - _tmp123 * _y[0] + _tmp124 * _y[2] - _tmp127 * _y[3]));
    _res_D_x(0, 3) = 0;
    _res_D_x(0, 4) = 0;
    _res_D_x(0, 5) = 0;
  }

  if (res_D_x_T_s != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 6>> _res_D_x_T_s{res_D_x_T_s};

    _res_D_x_T_s(0, 0) =
        _tmp108 * (_tmp100 * _tmp139 + _tmp101 * (-_tmp135 * _y[2] + _tmp144 + _tmp146) -
                   _tmp104 * _tmp139 + _tmp107 * (_tmp130 - _tmp132 - _tmp134 + _tmp135 * _y[0]) +
                   _tmp139 * _tmp97 + _tmp139 * _tmp98 - _tmp143 * _tmp41 - _tmp143 * _tmp47 +
                   _tmp92 * (-_tmp135 * _y[3] - _tmp140 + _tmp142));
    _res_D_x_T_s(0, 1) =
        _tmp108 * (_tmp100 * _tmp153 + _tmp101 * (_tmp140 - _tmp141 + _tmp149 * _y[1] - _tmp151) -
                   _tmp104 * _tmp153 + _tmp107 * (_tmp138 - _tmp149 * _y[3] - _tmp150) +
                   _tmp153 * _tmp97 + _tmp153 * _tmp98 - _tmp154 * _tmp41 - _tmp154 * _tmp47 +
                   _tmp92 * (_tmp146 + _tmp148 - _tmp149 * _y[0]));
    _res_D_x_T_s(0, 2) =
        _tmp108 * (_tmp100 * _tmp156 + _tmp101 * (-_tmp130 + _tmp152 - _tmp155 * _y[3]) -
                   _tmp104 * _tmp156 - _tmp105 * _tmp156 - _tmp106 * _tmp156 +
                   _tmp107 * (_tmp144 + _tmp145 + _tmp148 - _tmp155 * _y[1]) + _tmp156 * _tmp97 +
                   _tmp156 * _tmp98 + _tmp92 * (-_tmp136 - _tmp137 + _tmp150 + _tmp155 * _y[2]));
    _res_D_x_T_s(0, 3) = 0;
    _res_D_x_T_s(0, 4) = 0;
    _res_D_x_T_s(0, 5) = 0;
  }

  if (res_D_y != nullptr) {
    Eigen::Map<Eigen::Matrix<Scalar, 1, 6>> _res_D_y{res_D_y};

    _res_D_y(0, 0) =
        _tmp108 * (_tmp100 * _tmp161 + _tmp101 * _tmp167 - _tmp104 * _tmp161 - _tmp105 * _tmp161 -
                   _tmp106 * _tmp161 + _tmp107 * _tmp166 + _tmp161 * _tmp97 + _tmp161 * _tmp98 +
                   _tmp92 * (-_tmp168 + _tmp169 - _tmp170 + _tmp171));
    _res_D_y(0, 1) = _tmp108 * (_tmp101 * _tmp175 - _tmp102 * _tmp173 +
                                _tmp107 * (_tmp157 - _tmp158 - _tmp159 + _tmp160) +
                                _tmp167 * _tmp92 + _tmp172 * _tmp41 * _tmp95 + _tmp172 * _tmp99 +
                                _tmp173 * _tmp95 - _tmp174 * _tmp35 - _tmp174 * _tmp41);
    _res_D_y(0, 2) =
        _tmp108 * (_tmp100 * _tmp175 + _tmp101 * (-_tmp162 - _tmp163 + _tmp164 + _tmp165) -
                   _tmp104 * _tmp175 - _tmp105 * _tmp175 - _tmp106 * _tmp175 + _tmp107 * _tmp167 +
                   _tmp161 * _tmp92 + _tmp175 * _tmp97 + _tmp175 * _tmp98);
    _res_D_y(0, 3) = 0;
    _res_D_y(0, 4) = 0;
    _res_D_y(0, 5) = 0;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym_hyperion
