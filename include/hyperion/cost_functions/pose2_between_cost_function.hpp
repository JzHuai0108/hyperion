// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     COST_FUNCTION.hpp.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <sym/pose2.h>

#include "hyperion/cost_functions/sized_cost_function.hpp"

namespace hyperion {

class Pose2BetweenCostFunction final
    : public SizedCostFunction<3, ConstexprGroupDims<4, 3>, ConstexprGroupDims<4, 3>> {
 public:
  /// Constructor.
  explicit Pose2BetweenCostFunction(const sym::Pose2<Scalar>& xTy,
                                    const Eigen::Matrix<Scalar, 3, 3>& sqrtInfo)
      : x_T_y_{xTy}, sqrt_info_{sqrtInfo} {}

  /// xTy accessor.
  [[nodiscard]] auto xTy() const -> const sym::Pose2<Scalar>& {
    return x_T_y_;
  }

  /// xTy modifier.
  auto xTy() -> sym::Pose2<Scalar>& {
    return x_T_y_;
  }

  /// sqrtInfo accessor.
  [[nodiscard]] auto sqrtInfo() const -> const Eigen::Matrix<Scalar, 3, 3>& {
    return sqrt_info_;
  }

  /// sqrtInfo modifier.
  auto sqrtInfo() -> Eigen::Matrix<Scalar, 3, 3>& {
    return sqrt_info_;
  }

  /// See documentation of base class.
  /// @note Returns (tangent_dim x tangent_dim) Jacobians stored in column-major order.
  auto evaluate(Scalar const* const* parameters, Scalar* residuals, Scalar** jacobians) const
      -> bool override;

 private:
  sym::Pose2<Scalar> x_T_y_;
  Eigen::Matrix<Scalar, 3, 3> sqrt_info_;
};

}  // namespace hyperion
