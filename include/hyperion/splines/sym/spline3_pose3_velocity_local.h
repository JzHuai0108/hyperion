// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_pose3_velocity
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix32
 *     x0: Pose3
 *     x1: Pose3
 *     x2: Pose3
 *     x3: Pose3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Spline3Pose3VelocityLocal(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 2>& lambdas, const sym::Pose3<Scalar>& x0,
    const sym::Pose3<Scalar>& x1, const sym::Pose3<Scalar>& x2, const sym::Pose3<Scalar>& x3,
    const Scalar epsilon) {
  // Total ops: 479

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x3 = x3.Data();

  // Intermediate terms (134)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp2 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp3 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp4 = 1 - epsilon;
  const Scalar _tmp5 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp6 = _x2[3] * _x3[3];
  const Scalar _tmp7 = std::min<Scalar>(_tmp4, std::fabs(_tmp5 - _tmp6));
  const Scalar _tmp8 = 1 - std::pow(_tmp7, Scalar(2));
  const Scalar _tmp9 =
      2 * std::min<Scalar>(0, (((-_tmp5 + _tmp6) > 0) - ((-_tmp5 + _tmp6) < 0))) + 1;
  const Scalar _tmp10 = std::acos(_tmp7);
  const Scalar _tmp11 = std::pow(_tmp10, Scalar(2)) * std::pow(_tmp9, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp8;
  const Scalar _tmp12 = 4 * _tmp11;
  const Scalar _tmp13 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp14 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp15 = std::pow(_tmp14, Scalar(2));
  const Scalar _tmp16 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp17 = _tmp12 * _tmp13 + _tmp12 * _tmp15 + _tmp12 * _tmp3 + _tmp16;
  const Scalar _tmp18 = std::sqrt(_tmp17);
  const Scalar _tmp19 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp20 = std::sin(_tmp19);
  const Scalar _tmp21 = 8 * _tmp11 * std::pow(_tmp20, Scalar(2)) / _tmp17;
  const Scalar _tmp22 = _tmp2 * _tmp21;
  const Scalar _tmp23 = _tmp1 * _tmp22;
  const Scalar _tmp24 = std::cos(_tmp19);
  const Scalar _tmp25 = _tmp10 * _tmp9 / std::sqrt(_tmp8);
  const Scalar _tmp26 = _tmp20 * lambdas(2, 0) / _tmp18;
  const Scalar _tmp27 = 4 * _tmp24 * _tmp25 * _tmp26;
  const Scalar _tmp28 = _tmp14 * _tmp27;
  const Scalar _tmp29 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp30 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp31 = std::pow(_tmp30, Scalar(2));
  const Scalar _tmp32 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp33 = _x1[3] * _x2[3];
  const Scalar _tmp34 = std::min<Scalar>(_tmp4, std::fabs(_tmp32 - _tmp33));
  const Scalar _tmp35 = 1 - std::pow(_tmp34, Scalar(2));
  const Scalar _tmp36 =
      2 * std::min<Scalar>(0, (((-_tmp32 + _tmp33) > 0) - ((-_tmp32 + _tmp33) < 0))) + 1;
  const Scalar _tmp37 = std::acos(_tmp34);
  const Scalar _tmp38 = std::pow(_tmp36, Scalar(2)) * std::pow(_tmp37, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp35;
  const Scalar _tmp39 = 4 * _tmp38;
  const Scalar _tmp40 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp41 = std::pow(_tmp40, Scalar(2));
  const Scalar _tmp42 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp43 = _tmp16 + _tmp31 * _tmp39 + _tmp39 * _tmp41 + _tmp39 * _tmp42;
  const Scalar _tmp44 = std::sqrt(_tmp43);
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp44;
  const Scalar _tmp46 = std::sin(_tmp45);
  const Scalar _tmp47 = 8 * _tmp38 * std::pow(_tmp46, Scalar(2)) / _tmp43;
  const Scalar _tmp48 = _tmp29 * _tmp30 * _tmp47;
  const Scalar _tmp49 = std::cos(_tmp45);
  const Scalar _tmp50 = _tmp36 * _tmp37 / std::sqrt(_tmp35);
  const Scalar _tmp51 = _tmp46 * lambdas(1, 0) / _tmp44;
  const Scalar _tmp52 = 4 * _tmp49 * _tmp50 * _tmp51;
  const Scalar _tmp53 = _tmp40 * _tmp52;
  const Scalar _tmp54 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp55 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp56 = _x0[3] * _x1[3];
  const Scalar _tmp57 =
      2 * std::min<Scalar>(0, (((-_tmp55 + _tmp56) > 0) - ((-_tmp55 + _tmp56) < 0))) + 1;
  const Scalar _tmp58 = std::min<Scalar>(_tmp4, std::fabs(_tmp55 - _tmp56));
  const Scalar _tmp59 = std::acos(_tmp58);
  const Scalar _tmp60 = 1 - std::pow(_tmp58, Scalar(2));
  const Scalar _tmp61 = 2 * _tmp57 * _tmp59 / std::sqrt(_tmp60);
  const Scalar _tmp62 = _tmp61 * lambdas(0, 1);
  const Scalar _tmp63 = _tmp54 * _tmp62;
  const Scalar _tmp64 = _tmp40 * _tmp47;
  const Scalar _tmp65 = _tmp29 * _tmp64;
  const Scalar _tmp66 = _tmp30 * _tmp52;
  const Scalar _tmp67 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp68 = _tmp62 * _tmp67;
  const Scalar _tmp69 = 2 * _tmp50;
  const Scalar _tmp70 = _tmp69 * lambdas(1, 1);
  const Scalar _tmp71 = -_tmp41 * _tmp47;
  const Scalar _tmp72 = -_tmp31 * _tmp47 + 1;
  const Scalar _tmp73 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp74 = _tmp62 * _tmp73;
  const Scalar _tmp75 = _tmp29 * _tmp70 + _tmp63 * (_tmp48 - _tmp53) + _tmp68 * (_tmp65 + _tmp66) +
                        _tmp74 * (_tmp71 + _tmp72);
  const Scalar _tmp76 = _tmp29 * _tmp52;
  const Scalar _tmp77 = _tmp30 * _tmp64;
  const Scalar _tmp78 = -_tmp42 * _tmp47;
  const Scalar _tmp79 = _tmp30 * _tmp70 + _tmp63 * (_tmp71 + _tmp78 + 1) +
                        _tmp68 * (-_tmp76 + _tmp77) + _tmp74 * (_tmp48 + _tmp53);
  const Scalar _tmp80 = -_tmp21 * _tmp3;
  const Scalar _tmp81 = -_tmp15 * _tmp21 + 1;
  const Scalar _tmp82 = _tmp1 * _tmp27;
  const Scalar _tmp83 = _tmp14 * _tmp22;
  const Scalar _tmp84 = _tmp40 * _tmp70 + _tmp63 * (_tmp76 + _tmp77) + _tmp68 * (_tmp72 + _tmp78) +
                        _tmp74 * (_tmp65 - _tmp66);
  const Scalar _tmp85 = 2 * _tmp25;
  const Scalar _tmp86 = _tmp85 * lambdas(2, 1);
  const Scalar _tmp87 = _tmp2 * _tmp27;
  const Scalar _tmp88 = _tmp1 * _tmp14 * _tmp21;
  const Scalar _tmp89 = -_tmp13 * _tmp21;
  const Scalar _tmp90 = 4 * std::pow(_tmp57, Scalar(2)) * std::pow(_tmp59, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp60;
  const Scalar _tmp91 = std::sqrt(Scalar(_tmp16 + std::pow(_tmp54, Scalar(2)) * _tmp90 +
                                         std::pow(_tmp67, Scalar(2)) * _tmp90 +
                                         std::pow(_tmp73, Scalar(2)) * _tmp90));
  const Scalar _tmp92 = (Scalar(1) / Scalar(2)) * _tmp91;
  const Scalar _tmp93 = _tmp61 * lambdas(0, 0) * std::sin(_tmp92) / _tmp91;
  const Scalar _tmp94 = _tmp73 * _tmp93;
  const Scalar _tmp95 = std::cos(_tmp92);
  const Scalar _tmp96 = _tmp54 * _tmp93;
  const Scalar _tmp97 = _tmp67 * _tmp93;
  const Scalar _tmp98 = -_tmp94 * _x0[2] + _tmp95 * _x0[0] + _tmp96 * _x0[3] + _tmp97 * _x0[1];
  const Scalar _tmp99 = _tmp51 * _tmp69;
  const Scalar _tmp100 = _tmp30 * _tmp99;
  const Scalar _tmp101 = _tmp94 * _x0[3] + _tmp95 * _x0[1] + _tmp96 * _x0[2] - _tmp97 * _x0[0];
  const Scalar _tmp102 = _tmp29 * _tmp99;
  const Scalar _tmp103 = _tmp94 * _x0[0] + _tmp95 * _x0[2] - _tmp96 * _x0[1] + _tmp97 * _x0[3];
  const Scalar _tmp104 = _tmp40 * _tmp99;
  const Scalar _tmp105 = -_tmp94 * _x0[1] + _tmp95 * _x0[3] - _tmp96 * _x0[0] - _tmp97 * _x0[2];
  const Scalar _tmp106 =
      -_tmp100 * _tmp98 - _tmp101 * _tmp102 - _tmp103 * _tmp104 + _tmp105 * _tmp49;
  const Scalar _tmp107 = _tmp26 * _tmp85;
  const Scalar _tmp108 = _tmp106 * _tmp107;
  const Scalar _tmp109 =
      _tmp100 * _tmp103 + _tmp101 * _tmp49 + _tmp102 * _tmp105 - _tmp104 * _tmp98;
  const Scalar _tmp110 = _tmp107 * _tmp2;
  const Scalar _tmp111 =
      _tmp100 * _tmp105 + _tmp101 * _tmp104 - _tmp102 * _tmp103 + _tmp49 * _tmp98;
  const Scalar _tmp112 = _tmp1 * _tmp107;
  const Scalar _tmp113 =
      -_tmp100 * _tmp101 + _tmp102 * _tmp98 + _tmp103 * _tmp49 + _tmp104 * _tmp105;
  const Scalar _tmp114 =
      _tmp108 * _tmp14 - _tmp109 * _tmp110 + _tmp111 * _tmp112 + _tmp113 * _tmp24;
  const Scalar _tmp115 = _tmp107 * _tmp14;
  const Scalar _tmp116 = _tmp107 * _tmp113;
  const Scalar _tmp117 = -_tmp1 * _tmp116 + _tmp108 * _tmp2 + _tmp109 * _tmp115 + _tmp111 * _tmp24;
  const Scalar _tmp118 = 2 * _tmp117;
  const Scalar _tmp119 = _tmp114 * _tmp118;
  const Scalar _tmp120 =
      _tmp106 * _tmp24 - _tmp109 * _tmp112 - _tmp110 * _tmp111 - _tmp116 * _tmp14;
  const Scalar _tmp121 = _tmp1 * _tmp108 + _tmp109 * _tmp24 - _tmp111 * _tmp115 + _tmp116 * _tmp2;
  const Scalar _tmp122 = 2 * _tmp121;
  const Scalar _tmp123 = _tmp120 * _tmp122;
  const Scalar _tmp124 = lambdas(0, 1) * (-_x0[6] + _x1[6]) + lambdas(1, 1) * (-_x1[6] + _x2[6]) +
                         lambdas(2, 1) * (-_x2[6] + _x3[6]);
  const Scalar _tmp125 = 2 * _tmp114 * _tmp120;
  const Scalar _tmp126 = _tmp117 * _tmp122;
  const Scalar _tmp127 = lambdas(0, 1) * (-_x0[5] + _x1[5]) + lambdas(1, 1) * (-_x1[5] + _x2[5]) +
                         lambdas(2, 1) * (-_x2[5] + _x3[5]);
  const Scalar _tmp128 = lambdas(0, 1) * (-_x0[4] + _x1[4]) + lambdas(1, 1) * (-_x1[4] + _x2[4]) +
                         lambdas(2, 1) * (-_x2[4] + _x3[4]);
  const Scalar _tmp129 = -2 * std::pow(_tmp114, Scalar(2));
  const Scalar _tmp130 = 1 - 2 * std::pow(_tmp121, Scalar(2));
  const Scalar _tmp131 = -2 * std::pow(_tmp117, Scalar(2));
  const Scalar _tmp132 = _tmp114 * _tmp122;
  const Scalar _tmp133 = _tmp118 * _tmp120;

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp0 * (_tmp2 * _tmp86 + _tmp75 * (_tmp23 + _tmp28) + _tmp79 * (_tmp80 + _tmp81) +
                        _tmp84 * (-_tmp82 + _tmp83));
  _res(1, 0) = _tmp0 * (_tmp1 * _tmp86 + _tmp75 * (_tmp81 + _tmp89) + _tmp79 * (_tmp23 - _tmp28) +
                        _tmp84 * (_tmp87 + _tmp88));
  _res(2, 0) = _tmp0 * (_tmp14 * _tmp86 + _tmp75 * (-_tmp87 + _tmp88) + _tmp79 * (_tmp82 + _tmp83) +
                        _tmp84 * (_tmp80 + _tmp89 + 1));
  _res(3, 0) = _tmp0 * (_tmp124 * (_tmp119 - _tmp123) + _tmp127 * (_tmp125 + _tmp126) +
                        _tmp128 * (_tmp129 + _tmp130));
  _res(4, 0) = _tmp0 * (_tmp124 * (_tmp132 + _tmp133) + _tmp127 * (_tmp129 + _tmp131 + 1) +
                        _tmp128 * (-_tmp125 + _tmp126));
  _res(5, 0) = _tmp0 * (_tmp124 * (_tmp130 + _tmp131) + _tmp127 * (_tmp132 - _tmp133) +
                        _tmp128 * (_tmp119 + _tmp123));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
