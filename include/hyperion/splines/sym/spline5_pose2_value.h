// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose2.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline5_pose2_value
 *
 * Args:
 *     lambdas: Matrix51
 *     x0: Pose2
 *     x1: Pose2
 *     x2: Pose2
 *     x3: Pose2
 *     x4: Pose2
 *     x5: Pose2
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Pose2
 */
template <typename Scalar>
sym::Pose2<Scalar> Spline5Pose2Value(const Eigen::Matrix<Scalar, 5, 1>& lambdas,
                                     const sym::Pose2<Scalar>& x0, const sym::Pose2<Scalar>& x1,
                                     const sym::Pose2<Scalar>& x2, const sym::Pose2<Scalar>& x3,
                                     const sym::Pose2<Scalar>& x4, const sym::Pose2<Scalar>& x5,
                                     const Scalar epsilon) {
  // Total ops: 130

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x4 = x4.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x5 = x5.Data();

  // Intermediate terms (28)
  const Scalar _tmp0 = _x3[0] * _x4[0] + _x3[1] * _x4[1];
  const Scalar _tmp1 =
      lambdas(3, 0) * std::atan2(_x3[0] * _x4[1] - _x3[1] * _x4[0],
                                 _tmp0 + epsilon * ((((_tmp0) > 0) - ((_tmp0) < 0)) + Scalar(0.5)));
  const Scalar _tmp2 = std::sin(_tmp1);
  const Scalar _tmp3 = _x4[0] * _x5[0] + _x4[1] * _x5[1];
  const Scalar _tmp4 =
      lambdas(4, 0) * std::atan2(_x4[0] * _x5[1] - _x4[1] * _x5[0],
                                 _tmp3 + epsilon * ((((_tmp3) > 0) - ((_tmp3) < 0)) + Scalar(0.5)));
  const Scalar _tmp5 = std::sin(_tmp4);
  const Scalar _tmp6 = std::cos(_tmp1);
  const Scalar _tmp7 = std::cos(_tmp4);
  const Scalar _tmp8 = -_tmp2 * _tmp5 + _tmp6 * _tmp7;
  const Scalar _tmp9 = _x2[0] * _x3[0] + _x2[1] * _x3[1];
  const Scalar _tmp10 =
      lambdas(2, 0) * std::atan2(_x2[0] * _x3[1] - _x2[1] * _x3[0],
                                 _tmp9 + epsilon * ((((_tmp9) > 0) - ((_tmp9) < 0)) + Scalar(0.5)));
  const Scalar _tmp11 = std::cos(_tmp10);
  const Scalar _tmp12 = _tmp2 * _tmp7 + _tmp5 * _tmp6;
  const Scalar _tmp13 = std::sin(_tmp10);
  const Scalar _tmp14 = _tmp11 * _tmp8 - _tmp12 * _tmp13;
  const Scalar _tmp15 = _x1[0] * _x2[0] + _x1[1] * _x2[1];
  const Scalar _tmp16 =
      lambdas(1, 0) *
      std::atan2(_x1[0] * _x2[1] - _x1[1] * _x2[0],
                 _tmp15 + epsilon * ((((_tmp15) > 0) - ((_tmp15) < 0)) + Scalar(0.5)));
  const Scalar _tmp17 = std::cos(_tmp16);
  const Scalar _tmp18 = _tmp11 * _tmp12 + _tmp13 * _tmp8;
  const Scalar _tmp19 = std::sin(_tmp16);
  const Scalar _tmp20 = _tmp14 * _tmp17 - _tmp18 * _tmp19;
  const Scalar _tmp21 = _x0[0] * _x1[0] + _x0[1] * _x1[1];
  const Scalar _tmp22 =
      lambdas(0, 0) *
      std::atan2(_x0[0] * _x1[1] - _x0[1] * _x1[0],
                 _tmp21 + epsilon * ((((_tmp21) > 0) - ((_tmp21) < 0)) + Scalar(0.5)));
  const Scalar _tmp23 = std::cos(_tmp22);
  const Scalar _tmp24 = _tmp14 * _tmp19 + _tmp17 * _tmp18;
  const Scalar _tmp25 = std::sin(_tmp22);
  const Scalar _tmp26 = _tmp20 * _tmp23 - _tmp24 * _tmp25;
  const Scalar _tmp27 = _tmp20 * _tmp25 + _tmp23 * _tmp24;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = _tmp26 * _x0[0] - _tmp27 * _x0[1];
  _res[1] = _tmp26 * _x0[1] + _tmp27 * _x0[0];
  _res[2] = _x0[2] + lambdas(0, 0) * (-_x0[2] + _x1[2]) + lambdas(1, 0) * (-_x1[2] + _x2[2]) +
            lambdas(2, 0) * (-_x2[2] + _x3[2]) + lambdas(3, 0) * (-_x3[2] + _x4[2]) +
            lambdas(4, 0) * (-_x4[2] + _x5[2]);
  _res[3] = _x0[3] + lambdas(0, 0) * (-_x0[3] + _x1[3]) + lambdas(1, 0) * (-_x1[3] + _x2[3]) +
            lambdas(2, 0) * (-_x2[3] + _x3[3]) + lambdas(3, 0) * (-_x3[3] + _x4[3]) +
            lambdas(4, 0) * (-_x4[3] + _x5[3]);

  return sym::Pose2<Scalar>(_res);
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
