// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline5_rot3_velocity
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix52
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     x4: Rot3
 *     x5: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline5Rot3VelocityLocal(
    const Scalar dt, const Eigen::Matrix<Scalar, 5, 2>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const sym::Rot3<Scalar>& x4, const sym::Rot3<Scalar>& x5, const Scalar epsilon) {
  // Total ops: 529

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x4 = x4.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x5 = x5.Data();

  // Intermediate terms (159)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = -_x4[0] * _x5[3] - _x4[1] * _x5[2] + _x4[2] * _x5[1] + _x4[3] * _x5[0];
  const Scalar _tmp2 = -_x4[0] * _x5[0] - _x4[1] * _x5[1] - _x4[2] * _x5[2];
  const Scalar _tmp3 = _x4[3] * _x5[3];
  const Scalar _tmp4 = 1 - epsilon;
  const Scalar _tmp5 = std::min<Scalar>(_tmp4, std::fabs(_tmp2 - _tmp3));
  const Scalar _tmp6 = std::acos(_tmp5);
  const Scalar _tmp7 =
      2 * std::min<Scalar>(0, (((-_tmp2 + _tmp3) > 0) - ((-_tmp2 + _tmp3) < 0))) + 1;
  const Scalar _tmp8 = 1 - std::pow(_tmp5, Scalar(2));
  const Scalar _tmp9 = _tmp6 * _tmp7 / std::sqrt(_tmp8);
  const Scalar _tmp10 = _tmp1 * _tmp9;
  const Scalar _tmp11 = 2 * lambdas(4, 1);
  const Scalar _tmp12 = -_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0];
  const Scalar _tmp13 = std::pow(_tmp12, Scalar(2));
  const Scalar _tmp14 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp15 = _x3[3] * _x4[3];
  const Scalar _tmp16 = std::min<Scalar>(_tmp4, std::fabs(_tmp14 - _tmp15));
  const Scalar _tmp17 = std::acos(_tmp16);
  const Scalar _tmp18 =
      2 * std::min<Scalar>(0, (((-_tmp14 + _tmp15) > 0) - ((-_tmp14 + _tmp15) < 0))) + 1;
  const Scalar _tmp19 = 1 - std::pow(_tmp16, Scalar(2));
  const Scalar _tmp20 = std::pow(_tmp17, Scalar(2)) * std::pow(_tmp18, Scalar(2)) *
                        std::pow(lambdas(3, 0), Scalar(2)) / _tmp19;
  const Scalar _tmp21 = 4 * _tmp20;
  const Scalar _tmp22 = _x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1];
  const Scalar _tmp23 = std::pow(_tmp22, Scalar(2));
  const Scalar _tmp24 = -_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2];
  const Scalar _tmp25 = std::pow(_tmp24, Scalar(2));
  const Scalar _tmp26 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp27 = _tmp13 * _tmp21 + _tmp21 * _tmp23 + _tmp21 * _tmp25 + _tmp26;
  const Scalar _tmp28 = std::sqrt(_tmp27);
  const Scalar _tmp29 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp30 = std::sin(_tmp29);
  const Scalar _tmp31 = 8 * _tmp20 * std::pow(_tmp30, Scalar(2)) / _tmp27;
  const Scalar _tmp32 = -_tmp13 * _tmp31;
  const Scalar _tmp33 = -_tmp23 * _tmp31;
  const Scalar _tmp34 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp35 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp36 = _x2[3] * _x3[3];
  const Scalar _tmp37 = std::min<Scalar>(_tmp4, std::fabs(_tmp35 - _tmp36));
  const Scalar _tmp38 = std::acos(_tmp37);
  const Scalar _tmp39 =
      2 * std::min<Scalar>(0, (((-_tmp35 + _tmp36) > 0) - ((-_tmp35 + _tmp36) < 0))) + 1;
  const Scalar _tmp40 = 1 - std::pow(_tmp37, Scalar(2));
  const Scalar _tmp41 = _tmp38 * _tmp39 / std::sqrt(_tmp40);
  const Scalar _tmp42 = _tmp34 * _tmp41;
  const Scalar _tmp43 = 2 * lambdas(2, 1);
  const Scalar _tmp44 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp45 = std::pow(_tmp44, Scalar(2));
  const Scalar _tmp46 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp47 = std::pow(_tmp46, Scalar(2));
  const Scalar _tmp48 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp49 = _x1[3] * _x2[3];
  const Scalar _tmp50 = std::min<Scalar>(_tmp4, std::fabs(_tmp48 - _tmp49));
  const Scalar _tmp51 = 1 - std::pow(_tmp50, Scalar(2));
  const Scalar _tmp52 = std::acos(_tmp50);
  const Scalar _tmp53 =
      2 * std::min<Scalar>(0, (((-_tmp48 + _tmp49) > 0) - ((-_tmp48 + _tmp49) < 0))) + 1;
  const Scalar _tmp54 = std::pow(_tmp52, Scalar(2)) * std::pow(_tmp53, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp51;
  const Scalar _tmp55 = 4 * _tmp54;
  const Scalar _tmp56 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp57 = std::pow(_tmp56, Scalar(2));
  const Scalar _tmp58 = _tmp26 + _tmp45 * _tmp55 + _tmp47 * _tmp55 + _tmp55 * _tmp57;
  const Scalar _tmp59 = std::sqrt(_tmp58);
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp59;
  const Scalar _tmp61 = std::sin(_tmp60);
  const Scalar _tmp62 = 8 * _tmp54 * std::pow(_tmp61, Scalar(2)) / _tmp58;
  const Scalar _tmp63 = -_tmp45 * _tmp62;
  const Scalar _tmp64 = -_tmp47 * _tmp62;
  const Scalar _tmp65 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp66 = _x0[3] * _x1[3];
  const Scalar _tmp67 = std::min<Scalar>(_tmp4, std::fabs(_tmp65 - _tmp66));
  const Scalar _tmp68 =
      2 * lambdas(0, 1) *
      (2 * std::min<Scalar>(0, (((-_tmp65 + _tmp66) > 0) - ((-_tmp65 + _tmp66) < 0))) + 1) *
      std::acos(_tmp67) / std::sqrt(Scalar(1 - std::pow(_tmp67, Scalar(2))));
  const Scalar _tmp69 =
      _tmp68 * (-_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0]);
  const Scalar _tmp70 = _tmp52 * _tmp53 / std::sqrt(_tmp51);
  const Scalar _tmp71 = 4 * _tmp61 * lambdas(1, 0) * std::cos(_tmp60) / _tmp59;
  const Scalar _tmp72 = _tmp70 * _tmp71;
  const Scalar _tmp73 = _tmp44 * _tmp72;
  const Scalar _tmp74 = _tmp56 * _tmp62;
  const Scalar _tmp75 = _tmp46 * _tmp74;
  const Scalar _tmp76 =
      _tmp68 * (_x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1]);
  const Scalar _tmp77 = _tmp46 * _tmp70;
  const Scalar _tmp78 = _tmp71 * _tmp77;
  const Scalar _tmp79 = _tmp44 * _tmp74;
  const Scalar _tmp80 =
      _tmp68 * (-_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2]);
  const Scalar _tmp81 = 2 * lambdas(1, 1);
  const Scalar _tmp82 = _tmp70 * _tmp81;
  const Scalar _tmp83 = _tmp56 * _tmp82 + _tmp69 * (_tmp63 + _tmp64 + 1) +
                        _tmp76 * (_tmp73 + _tmp75) + _tmp80 * (-_tmp78 + _tmp79);
  const Scalar _tmp84 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp85 = std::pow(_tmp34, Scalar(2));
  const Scalar _tmp86 = std::pow(_tmp38, Scalar(2)) * std::pow(_tmp39, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp40;
  const Scalar _tmp87 = 4 * _tmp86;
  const Scalar _tmp88 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp89 = std::pow(_tmp88, Scalar(2));
  const Scalar _tmp90 = std::pow(_tmp84, Scalar(2));
  const Scalar _tmp91 = _tmp26 + _tmp85 * _tmp87 + _tmp87 * _tmp89 + _tmp87 * _tmp90;
  const Scalar _tmp92 = std::sqrt(_tmp91);
  const Scalar _tmp93 = (Scalar(1) / Scalar(2)) * _tmp92;
  const Scalar _tmp94 = std::sin(_tmp93);
  const Scalar _tmp95 = 8 * _tmp86 * std::pow(_tmp94, Scalar(2)) / _tmp91;
  const Scalar _tmp96 = _tmp34 * _tmp95;
  const Scalar _tmp97 = _tmp84 * _tmp96;
  const Scalar _tmp98 = 4 * _tmp94 * lambdas(2, 0) * std::cos(_tmp93) / _tmp92;
  const Scalar _tmp99 = _tmp41 * _tmp98;
  const Scalar _tmp100 = _tmp88 * _tmp99;
  const Scalar _tmp101 = _tmp44 * _tmp46 * _tmp62;
  const Scalar _tmp102 = _tmp56 * _tmp72;
  const Scalar _tmp103 = -_tmp57 * _tmp62 + 1;
  const Scalar _tmp104 = _tmp69 * (-_tmp73 + _tmp75) + _tmp76 * (_tmp103 + _tmp63) +
                         _tmp77 * _tmp81 + _tmp80 * (_tmp101 + _tmp102);
  const Scalar _tmp105 = _tmp84 * _tmp99;
  const Scalar _tmp106 = _tmp88 * _tmp96;
  const Scalar _tmp107 = -_tmp90 * _tmp95;
  const Scalar _tmp108 = -_tmp89 * _tmp95;
  const Scalar _tmp109 = _tmp44 * _tmp82 + _tmp69 * (_tmp78 + _tmp79) +
                         _tmp76 * (_tmp101 - _tmp102) + _tmp80 * (_tmp103 + _tmp64);
  const Scalar _tmp110 = _tmp104 * (-_tmp105 + _tmp106) + _tmp109 * (_tmp107 + _tmp108 + 1) +
                         _tmp42 * _tmp43 + _tmp83 * (_tmp100 + _tmp97);
  const Scalar _tmp111 = _tmp22 * _tmp24 * _tmp31;
  const Scalar _tmp112 = _tmp17 * _tmp18 / std::sqrt(_tmp19);
  const Scalar _tmp113 = 4 * _tmp30 * lambdas(3, 0) * std::cos(_tmp29) / _tmp28;
  const Scalar _tmp114 = _tmp112 * _tmp113;
  const Scalar _tmp115 = _tmp114 * _tmp12;
  const Scalar _tmp116 = _tmp42 * _tmp98;
  const Scalar _tmp117 = _tmp84 * _tmp88 * _tmp95;
  const Scalar _tmp118 = _tmp41 * _tmp43;
  const Scalar _tmp119 = -_tmp85 * _tmp95 + 1;
  const Scalar _tmp120 = _tmp104 * (_tmp107 + _tmp119) + _tmp109 * (_tmp105 + _tmp106) +
                         _tmp118 * _tmp88 + _tmp83 * (-_tmp116 + _tmp117);
  const Scalar _tmp121 = _tmp114 * _tmp22;
  const Scalar _tmp122 = _tmp12 * _tmp31;
  const Scalar _tmp123 = _tmp122 * _tmp24;
  const Scalar _tmp124 = _tmp104 * (_tmp116 + _tmp117) + _tmp109 * (-_tmp100 + _tmp97) +
                         _tmp118 * _tmp84 + _tmp83 * (_tmp108 + _tmp119);
  const Scalar _tmp125 = _tmp112 * _tmp24;
  const Scalar _tmp126 = 2 * lambdas(3, 1);
  const Scalar _tmp127 = _tmp110 * (_tmp32 + _tmp33 + 1) + _tmp120 * (_tmp111 - _tmp115) +
                         _tmp124 * (_tmp121 + _tmp123) + _tmp125 * _tmp126;
  const Scalar _tmp128 = -_x4[0] * _x5[1] + _x4[1] * _x5[0] - _x4[2] * _x5[3] + _x4[3] * _x5[2];
  const Scalar _tmp129 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp130 = std::pow(_tmp6, Scalar(2)) * std::pow(_tmp7, Scalar(2)) *
                         std::pow(lambdas(4, 0), Scalar(2)) / _tmp8;
  const Scalar _tmp131 = 4 * _tmp130;
  const Scalar _tmp132 = _x4[0] * _x5[2] - _x4[1] * _x5[3] - _x4[2] * _x5[0] + _x4[3] * _x5[1];
  const Scalar _tmp133 = std::pow(_tmp132, Scalar(2));
  const Scalar _tmp134 = std::pow(_tmp128, Scalar(2));
  const Scalar _tmp135 = _tmp129 * _tmp131 + _tmp131 * _tmp133 + _tmp131 * _tmp134 + _tmp26;
  const Scalar _tmp136 = std::sqrt(_tmp135);
  const Scalar _tmp137 = (Scalar(1) / Scalar(2)) * _tmp136;
  const Scalar _tmp138 = std::sin(_tmp137);
  const Scalar _tmp139 = 8 * _tmp130 * std::pow(_tmp138, Scalar(2)) / _tmp135;
  const Scalar _tmp140 = _tmp128 * _tmp139;
  const Scalar _tmp141 = _tmp1 * _tmp140;
  const Scalar _tmp142 = 4 * _tmp138 * lambdas(4, 0) * std::cos(_tmp137) / _tmp136;
  const Scalar _tmp143 = _tmp142 * _tmp9;
  const Scalar _tmp144 = _tmp132 * _tmp143;
  const Scalar _tmp145 = _tmp112 * _tmp126;
  const Scalar _tmp146 = -_tmp25 * _tmp31 + 1;
  const Scalar _tmp147 = _tmp122 * _tmp22;
  const Scalar _tmp148 = _tmp113 * _tmp125;
  const Scalar _tmp149 = _tmp110 * (_tmp111 + _tmp115) + _tmp120 * (_tmp146 + _tmp32) +
                         _tmp124 * (_tmp147 - _tmp148) + _tmp145 * _tmp22;
  const Scalar _tmp150 = _tmp1 * _tmp132 * _tmp139;
  const Scalar _tmp151 = _tmp128 * _tmp143;
  const Scalar _tmp152 = _tmp110 * (-_tmp121 + _tmp123) + _tmp12 * _tmp145 +
                         _tmp120 * (_tmp147 + _tmp148) + _tmp124 * (_tmp146 + _tmp33);
  const Scalar _tmp153 = -_tmp133 * _tmp139;
  const Scalar _tmp154 = -_tmp134 * _tmp139 + 1;
  const Scalar _tmp155 = _tmp10 * _tmp142;
  const Scalar _tmp156 = _tmp132 * _tmp140;
  const Scalar _tmp157 = _tmp11 * _tmp9;
  const Scalar _tmp158 = -_tmp129 * _tmp139;

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp0 * (_tmp10 * _tmp11 + _tmp127 * (_tmp141 - _tmp144) +
                        _tmp149 * (_tmp150 + _tmp151) + _tmp152 * (_tmp153 + _tmp154));
  _res(1, 0) = _tmp0 * (_tmp127 * (_tmp155 + _tmp156) + _tmp132 * _tmp157 +
                        _tmp149 * (_tmp154 + _tmp158) + _tmp152 * (_tmp150 - _tmp151));
  _res(2, 0) = _tmp0 * (_tmp127 * (_tmp153 + _tmp158 + 1) + _tmp128 * _tmp157 +
                        _tmp149 * (-_tmp155 + _tmp156) + _tmp152 * (_tmp141 + _tmp144));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
