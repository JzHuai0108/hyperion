// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline4_rot3_acceleration
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix43
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     x4: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline4Rot3AccelerationLocal(
    const Scalar dt, const Eigen::Matrix<Scalar, 4, 3>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const sym::Rot3<Scalar>& x4, const Scalar epsilon) {
  // Total ops: 514

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x4 = x4.Data();

  // Intermediate terms (172)
  const Scalar _tmp0 = std::pow(dt, Scalar(-2));
  const Scalar _tmp1 = -_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2];
  const Scalar _tmp2 = _x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1];
  const Scalar _tmp3 = -_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0];
  const Scalar _tmp4 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp6 = _x3[3] * _x4[3];
  const Scalar _tmp7 = 1 - epsilon;
  const Scalar _tmp8 = std::min<Scalar>(_tmp7, std::fabs(_tmp5 - _tmp6));
  const Scalar _tmp9 = std::acos(_tmp8);
  const Scalar _tmp10 =
      2 * std::min<Scalar>(0, (((-_tmp5 + _tmp6) > 0) - ((-_tmp5 + _tmp6) < 0))) + 1;
  const Scalar _tmp11 = 1 - std::pow(_tmp8, Scalar(2));
  const Scalar _tmp12 = std::pow(_tmp10, Scalar(2)) * std::pow(_tmp9, Scalar(2)) *
                        std::pow(lambdas(3, 0), Scalar(2)) / _tmp11;
  const Scalar _tmp13 = 4 * _tmp12;
  const Scalar _tmp14 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp15 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp16 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp17 = _tmp13 * _tmp14 + _tmp13 * _tmp15 + _tmp13 * _tmp4 + _tmp16;
  const Scalar _tmp18 = std::sqrt(_tmp17);
  const Scalar _tmp19 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp20 = std::sin(_tmp19);
  const Scalar _tmp21 = 8 * _tmp12 * std::pow(_tmp20, Scalar(2)) / _tmp17;
  const Scalar _tmp22 = _tmp1 * _tmp2 * _tmp21;
  const Scalar _tmp23 = _tmp10 * _tmp9 / std::sqrt(_tmp11);
  const Scalar _tmp24 = 4 * _tmp20 * _tmp23 * lambdas(3, 0) * std::cos(_tmp19) / _tmp18;
  const Scalar _tmp25 = _tmp24 * _tmp3;
  const Scalar _tmp26 = _tmp22 + _tmp25;
  const Scalar _tmp27 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp28 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp29 = _x2[3] * _x3[3];
  const Scalar _tmp30 = std::min<Scalar>(_tmp7, std::fabs(_tmp28 - _tmp29));
  const Scalar _tmp31 = std::acos(_tmp30);
  const Scalar _tmp32 =
      2 * std::min<Scalar>(0, (((-_tmp28 + _tmp29) > 0) - ((-_tmp28 + _tmp29) < 0))) + 1;
  const Scalar _tmp33 = 1 - std::pow(_tmp30, Scalar(2));
  const Scalar _tmp34 = _tmp31 * _tmp32 / std::sqrt(_tmp33);
  const Scalar _tmp35 = 2 * _tmp34;
  const Scalar _tmp36 = _tmp27 * _tmp35;
  const Scalar _tmp37 = _tmp36 * lambdas(2, 1);
  const Scalar _tmp38 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp39 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp40 = _x1[3] * _x2[3];
  const Scalar _tmp41 = std::min<Scalar>(_tmp7, std::fabs(_tmp39 - _tmp40));
  const Scalar _tmp42 = 1 - std::pow(_tmp41, Scalar(2));
  const Scalar _tmp43 = std::acos(_tmp41);
  const Scalar _tmp44 =
      2 * std::min<Scalar>(0, (((-_tmp39 + _tmp40) > 0) - ((-_tmp39 + _tmp40) < 0))) + 1;
  const Scalar _tmp45 = _tmp43 * _tmp44 / std::sqrt(_tmp42);
  const Scalar _tmp46 = 2 * _tmp45;
  const Scalar _tmp47 = _tmp46 * lambdas(1, 1);
  const Scalar _tmp48 = _tmp38 * _tmp47;
  const Scalar _tmp49 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp50 = _x0[3] * _x1[3];
  const Scalar _tmp51 = std::min<Scalar>(_tmp7, std::fabs(_tmp49 - _tmp50));
  const Scalar _tmp52 =
      2 * (2 * std::min<Scalar>(0, (((-_tmp49 + _tmp50) > 0) - ((-_tmp49 + _tmp50) < 0))) + 1) *
      std::acos(_tmp51) / std::sqrt(Scalar(1 - std::pow(_tmp51, Scalar(2))));
  const Scalar _tmp53 = _tmp52 * lambdas(0, 1);
  const Scalar _tmp54 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp55 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp56 = std::pow(_tmp55, Scalar(2));
  const Scalar _tmp57 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp58 = std::pow(_tmp57, Scalar(2));
  const Scalar _tmp59 = std::pow(_tmp43, Scalar(2)) * std::pow(_tmp44, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp42;
  const Scalar _tmp60 = 4 * _tmp59;
  const Scalar _tmp61 = std::pow(_tmp38, Scalar(2));
  const Scalar _tmp62 = _tmp16 + _tmp56 * _tmp60 + _tmp58 * _tmp60 + _tmp60 * _tmp61;
  const Scalar _tmp63 = std::sqrt(_tmp62);
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * _tmp63;
  const Scalar _tmp65 = std::sin(_tmp64);
  const Scalar _tmp66 = 8 * _tmp59 * std::pow(_tmp65, Scalar(2)) / _tmp62;
  const Scalar _tmp67 = -_tmp56 * _tmp66;
  const Scalar _tmp68 = -_tmp58 * _tmp66;
  const Scalar _tmp69 = _tmp54 * (_tmp67 + _tmp68 + 1);
  const Scalar _tmp70 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp71 = 4 * _tmp45 * _tmp65 * lambdas(1, 0) * std::cos(_tmp64) / _tmp63;
  const Scalar _tmp72 = _tmp55 * _tmp71;
  const Scalar _tmp73 = _tmp38 * _tmp57 * _tmp66;
  const Scalar _tmp74 = _tmp70 * (_tmp72 + _tmp73);
  const Scalar _tmp75 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp76 = _tmp57 * _tmp71;
  const Scalar _tmp77 = _tmp55 * _tmp66;
  const Scalar _tmp78 = _tmp38 * _tmp77;
  const Scalar _tmp79 = _tmp75 * (-_tmp76 + _tmp78);
  const Scalar _tmp80 = _tmp53 * _tmp69 + _tmp53 * _tmp74 + _tmp53 * _tmp79;
  const Scalar _tmp81 = _tmp48 + _tmp80;
  const Scalar _tmp82 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp83 = std::pow(_tmp27, Scalar(2));
  const Scalar _tmp84 = std::pow(_tmp31, Scalar(2)) * std::pow(_tmp32, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp33;
  const Scalar _tmp85 = 4 * _tmp84;
  const Scalar _tmp86 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp87 = std::pow(_tmp86, Scalar(2));
  const Scalar _tmp88 = std::pow(_tmp82, Scalar(2));
  const Scalar _tmp89 = _tmp16 + _tmp83 * _tmp85 + _tmp85 * _tmp87 + _tmp85 * _tmp88;
  const Scalar _tmp90 = std::sqrt(_tmp89);
  const Scalar _tmp91 = (Scalar(1) / Scalar(2)) * _tmp90;
  const Scalar _tmp92 = std::sin(_tmp91);
  const Scalar _tmp93 = 8 * _tmp84 * std::pow(_tmp92, Scalar(2)) / _tmp89;
  const Scalar _tmp94 = _tmp27 * _tmp82 * _tmp93;
  const Scalar _tmp95 = 4 * _tmp34 * _tmp92 * lambdas(2, 0) * std::cos(_tmp91) / _tmp90;
  const Scalar _tmp96 = _tmp86 * _tmp95;
  const Scalar _tmp97 = _tmp94 + _tmp96;
  const Scalar _tmp98 = _tmp47 * _tmp57;
  const Scalar _tmp99 = _tmp54 * (-_tmp72 + _tmp73);
  const Scalar _tmp100 = _tmp57 * _tmp77;
  const Scalar _tmp101 = _tmp38 * _tmp71;
  const Scalar _tmp102 = _tmp75 * (_tmp100 + _tmp101);
  const Scalar _tmp103 = -_tmp61 * _tmp66 + 1;
  const Scalar _tmp104 = _tmp70 * (_tmp103 + _tmp67);
  const Scalar _tmp105 = _tmp102 * _tmp53 + _tmp104 * _tmp53 + _tmp53 * _tmp99;
  const Scalar _tmp106 = _tmp105 + _tmp98;
  const Scalar _tmp107 = _tmp82 * _tmp95;
  const Scalar _tmp108 = _tmp86 * _tmp93;
  const Scalar _tmp109 = _tmp108 * _tmp27;
  const Scalar _tmp110 = -_tmp107 + _tmp109;
  const Scalar _tmp111 = -_tmp88 * _tmp93;
  const Scalar _tmp112 = -_tmp87 * _tmp93;
  const Scalar _tmp113 = _tmp111 + _tmp112 + 1;
  const Scalar _tmp114 = _tmp47 * _tmp55;
  const Scalar _tmp115 = _tmp75 * (_tmp103 + _tmp68);
  const Scalar _tmp116 = _tmp70 * (_tmp100 - _tmp101);
  const Scalar _tmp117 = _tmp54 * (_tmp76 + _tmp78);
  const Scalar _tmp118 = _tmp115 * _tmp53 + _tmp116 * _tmp53 + _tmp117 * _tmp53;
  const Scalar _tmp119 = _tmp114 + _tmp118;
  const Scalar _tmp120 = _tmp106 * _tmp110 + _tmp113 * _tmp119 + _tmp81 * _tmp97;
  const Scalar _tmp121 = _tmp120 + _tmp37;
  const Scalar _tmp122 = _tmp35 * _tmp86;
  const Scalar _tmp123 = _tmp122 * lambdas(2, 1);
  const Scalar _tmp124 = _tmp27 * _tmp95;
  const Scalar _tmp125 = _tmp108 * _tmp82;
  const Scalar _tmp126 = -_tmp124 + _tmp125;
  const Scalar _tmp127 = _tmp107 + _tmp109;
  const Scalar _tmp128 = -_tmp83 * _tmp93 + 1;
  const Scalar _tmp129 = _tmp111 + _tmp128;
  const Scalar _tmp130 = _tmp106 * _tmp129 + _tmp119 * _tmp127 + _tmp126 * _tmp81;
  const Scalar _tmp131 = _tmp123 + _tmp130;
  const Scalar _tmp132 = -_tmp21 * _tmp4;
  const Scalar _tmp133 = -_tmp15 * _tmp21 + 1;
  const Scalar _tmp134 = _tmp132 + _tmp133;
  const Scalar _tmp135 = _tmp21 * _tmp3;
  const Scalar _tmp136 = _tmp135 * _tmp2;
  const Scalar _tmp137 = _tmp1 * _tmp24;
  const Scalar _tmp138 = _tmp136 - _tmp137;
  const Scalar _tmp139 = _tmp35 * _tmp82;
  const Scalar _tmp140 = _tmp139 * lambdas(2, 1);
  const Scalar _tmp141 = _tmp124 + _tmp125;
  const Scalar _tmp142 = _tmp112 + _tmp128;
  const Scalar _tmp143 = _tmp94 - _tmp96;
  const Scalar _tmp144 = _tmp106 * _tmp141 + _tmp119 * _tmp143 + _tmp142 * _tmp81;
  const Scalar _tmp145 = _tmp140 + _tmp144;
  const Scalar _tmp146 = _tmp121 * _tmp26 + _tmp131 * _tmp134 + _tmp138 * _tmp145;
  const Scalar _tmp147 = 2 * _tmp23;
  const Scalar _tmp148 = _tmp147 * lambdas(3, 1);
  const Scalar _tmp149 = _tmp1 * _tmp148;
  const Scalar _tmp150 = _tmp2 * _tmp24;
  const Scalar _tmp151 = _tmp1 * _tmp135;
  const Scalar _tmp152 = -_tmp150 + _tmp151;
  const Scalar _tmp153 = _tmp52 * lambdas(0, 2);
  const Scalar _tmp154 = _tmp46 * lambdas(1, 2);
  const Scalar _tmp155 = -_tmp105 * _tmp48 + _tmp115 * _tmp153 + _tmp116 * _tmp153 +
                         _tmp117 * _tmp153 + _tmp154 * _tmp55 + _tmp80 * _tmp98;
  const Scalar _tmp156 = _tmp105 * _tmp114 - _tmp118 * _tmp98 + _tmp153 * _tmp69 +
                         _tmp153 * _tmp74 + _tmp153 * _tmp79 + _tmp154 * _tmp38;
  const Scalar _tmp157 = _tmp102 * _tmp153 + _tmp104 * _tmp153 - _tmp114 * _tmp80 +
                         _tmp118 * _tmp48 + _tmp153 * _tmp99 + _tmp154 * _tmp57;
  const Scalar _tmp158 = _tmp110 * _tmp157 + _tmp113 * _tmp155 + _tmp123 * _tmp144 -
                         _tmp130 * _tmp140 + _tmp156 * _tmp97 + _tmp36 * lambdas(2, 2);
  const Scalar _tmp159 = _tmp147 * lambdas(3, 2);
  const Scalar _tmp160 = -_tmp120 * _tmp123 + _tmp130 * _tmp37 + _tmp139 * lambdas(2, 2) +
                         _tmp141 * _tmp157 + _tmp142 * _tmp156 + _tmp143 * _tmp155;
  const Scalar _tmp161 = -_tmp14 * _tmp21;
  const Scalar _tmp162 = _tmp133 + _tmp161;
  const Scalar _tmp163 = _tmp136 + _tmp137;
  const Scalar _tmp164 = _tmp120 * _tmp140 + _tmp122 * lambdas(2, 2) + _tmp126 * _tmp156 +
                         _tmp127 * _tmp155 + _tmp129 * _tmp157 - _tmp144 * _tmp37;
  const Scalar _tmp165 = _tmp132 + _tmp161 + 1;
  const Scalar _tmp166 = _tmp22 - _tmp25;
  const Scalar _tmp167 = _tmp150 + _tmp151;
  const Scalar _tmp168 = _tmp121 * _tmp165 + _tmp131 * _tmp166 + _tmp145 * _tmp167;
  const Scalar _tmp169 = _tmp148 * _tmp2;
  const Scalar _tmp170 = _tmp121 * _tmp152 + _tmp131 * _tmp163 + _tmp145 * _tmp162;
  const Scalar _tmp171 = _tmp148 * _tmp3;

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp0 * (_tmp146 * _tmp149 + _tmp152 * _tmp158 + _tmp159 * _tmp3 +
                        _tmp160 * _tmp162 + _tmp163 * _tmp164 - _tmp168 * _tmp169);
  _res(1, 0) = _tmp0 * (_tmp134 * _tmp164 + _tmp138 * _tmp160 - _tmp149 * _tmp170 +
                        _tmp158 * _tmp26 + _tmp159 * _tmp2 + _tmp168 * _tmp171);
  _res(2, 0) = _tmp0 * (_tmp1 * _tmp159 - _tmp146 * _tmp171 + _tmp158 * _tmp165 +
                        _tmp160 * _tmp167 + _tmp164 * _tmp166 + _tmp169 * _tmp170);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
