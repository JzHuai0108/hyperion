// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_rot3_velocity
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix32
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Rot3VelocityLocal(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 2>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const Scalar epsilon) {
  // Total ops: 291

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();

  // Intermediate terms (83)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp2 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp3 = _x2[3] * _x3[3];
  const Scalar _tmp4 = 1 - epsilon;
  const Scalar _tmp5 = std::min<Scalar>(_tmp4, std::fabs(_tmp2 - _tmp3));
  const Scalar _tmp6 = std::acos(_tmp5);
  const Scalar _tmp7 =
      2 * std::min<Scalar>(0, (((-_tmp2 + _tmp3) > 0) - ((-_tmp2 + _tmp3) < 0))) + 1;
  const Scalar _tmp8 = 1 - std::pow(_tmp5, Scalar(2));
  const Scalar _tmp9 = _tmp6 * _tmp7 / std::sqrt(_tmp8);
  const Scalar _tmp10 = _tmp1 * _tmp9;
  const Scalar _tmp11 = 2 * lambdas(2, 1);
  const Scalar _tmp12 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp13 = std::pow(_tmp12, Scalar(2));
  const Scalar _tmp14 = std::pow(_tmp6, Scalar(2)) * std::pow(_tmp7, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp8;
  const Scalar _tmp15 = 4 * _tmp14;
  const Scalar _tmp16 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp17 = std::pow(_tmp16, Scalar(2));
  const Scalar _tmp18 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp19 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp20 = _tmp13 * _tmp15 + _tmp15 * _tmp17 + _tmp15 * _tmp18 + _tmp19;
  const Scalar _tmp21 = std::sqrt(_tmp20);
  const Scalar _tmp22 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp23 = std::sin(_tmp22);
  const Scalar _tmp24 = 4 * _tmp23 * lambdas(2, 0) * std::cos(_tmp22) / _tmp21;
  const Scalar _tmp25 = _tmp24 * _tmp9;
  const Scalar _tmp26 = _tmp12 * _tmp25;
  const Scalar _tmp27 = 8 * _tmp14 * std::pow(_tmp23, Scalar(2)) / _tmp20;
  const Scalar _tmp28 = _tmp16 * _tmp27;
  const Scalar _tmp29 = _tmp1 * _tmp28;
  const Scalar _tmp30 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp31 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp32 = _x1[3] * _x2[3];
  const Scalar _tmp33 = std::min<Scalar>(_tmp4, std::fabs(_tmp31 - _tmp32));
  const Scalar _tmp34 = 1 - std::pow(_tmp33, Scalar(2));
  const Scalar _tmp35 = std::acos(_tmp33);
  const Scalar _tmp36 =
      2 * std::min<Scalar>(0, (((-_tmp31 + _tmp32) > 0) - ((-_tmp31 + _tmp32) < 0))) + 1;
  const Scalar _tmp37 = _tmp35 * _tmp36 / std::sqrt(_tmp34);
  const Scalar _tmp38 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp39 = std::pow(_tmp38, Scalar(2));
  const Scalar _tmp40 = std::pow(_tmp35, Scalar(2)) * std::pow(_tmp36, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp34;
  const Scalar _tmp41 = 4 * _tmp40;
  const Scalar _tmp42 = std::pow(_tmp30, Scalar(2));
  const Scalar _tmp43 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp44 = std::pow(_tmp43, Scalar(2));
  const Scalar _tmp45 = _tmp19 + _tmp39 * _tmp41 + _tmp41 * _tmp42 + _tmp41 * _tmp44;
  const Scalar _tmp46 = std::sqrt(_tmp45);
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp46;
  const Scalar _tmp48 = std::sin(_tmp47);
  const Scalar _tmp49 = 4 * _tmp48 * lambdas(1, 0) * std::cos(_tmp47) / _tmp46;
  const Scalar _tmp50 = _tmp37 * _tmp49;
  const Scalar _tmp51 = _tmp30 * _tmp50;
  const Scalar _tmp52 = 8 * _tmp40 * std::pow(_tmp48, Scalar(2)) / _tmp45;
  const Scalar _tmp53 = _tmp43 * _tmp52;
  const Scalar _tmp54 = _tmp38 * _tmp53;
  const Scalar _tmp55 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp56 = _x0[3] * _x1[3];
  const Scalar _tmp57 = std::min<Scalar>(_tmp4, std::fabs(_tmp55 - _tmp56));
  const Scalar _tmp58 =
      2 * lambdas(0, 1) *
      (2 * std::min<Scalar>(0, (((-_tmp55 + _tmp56) > 0) - ((-_tmp55 + _tmp56) < 0))) + 1) *
      std::acos(_tmp57) / std::sqrt(Scalar(1 - std::pow(_tmp57, Scalar(2))));
  const Scalar _tmp59 =
      _tmp58 * (-_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0]);
  const Scalar _tmp60 = _tmp30 * _tmp38 * _tmp52;
  const Scalar _tmp61 = _tmp43 * _tmp50;
  const Scalar _tmp62 =
      _tmp58 * (-_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2]);
  const Scalar _tmp63 = -_tmp42 * _tmp52;
  const Scalar _tmp64 = -_tmp44 * _tmp52 + 1;
  const Scalar _tmp65 =
      _tmp58 * (_x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1]);
  const Scalar _tmp66 = _tmp37 * _tmp38;
  const Scalar _tmp67 = 2 * lambdas(1, 1);
  const Scalar _tmp68 = _tmp59 * (-_tmp51 + _tmp54) + _tmp62 * (_tmp60 + _tmp61) +
                        _tmp65 * (_tmp63 + _tmp64) + _tmp66 * _tmp67;
  const Scalar _tmp69 = -_tmp39 * _tmp52;
  const Scalar _tmp70 = _tmp49 * _tmp66;
  const Scalar _tmp71 = _tmp30 * _tmp53;
  const Scalar _tmp72 = _tmp37 * _tmp67;
  const Scalar _tmp73 = _tmp43 * _tmp72 + _tmp59 * (_tmp63 + _tmp69 + 1) +
                        _tmp62 * (-_tmp70 + _tmp71) + _tmp65 * (_tmp51 + _tmp54);
  const Scalar _tmp74 = -_tmp13 * _tmp27;
  const Scalar _tmp75 = -_tmp17 * _tmp27;
  const Scalar _tmp76 = _tmp30 * _tmp72 + _tmp59 * (_tmp70 + _tmp71) + _tmp62 * (_tmp64 + _tmp69) +
                        _tmp65 * (_tmp60 - _tmp61);
  const Scalar _tmp77 = _tmp1 * _tmp12 * _tmp27;
  const Scalar _tmp78 = _tmp16 * _tmp25;
  const Scalar _tmp79 = _tmp11 * _tmp9;
  const Scalar _tmp80 = _tmp10 * _tmp24;
  const Scalar _tmp81 = _tmp12 * _tmp28;
  const Scalar _tmp82 = -_tmp18 * _tmp27 + 1;

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp0 * (_tmp10 * _tmp11 + _tmp68 * (_tmp26 + _tmp29) +
                        _tmp73 * (_tmp74 + _tmp75 + 1) + _tmp76 * (_tmp77 - _tmp78));
  _res(1, 0) = _tmp0 * (_tmp16 * _tmp79 + _tmp68 * (_tmp74 + _tmp82) + _tmp73 * (-_tmp26 + _tmp29) +
                        _tmp76 * (_tmp80 + _tmp81));
  _res(2, 0) = _tmp0 * (_tmp12 * _tmp79 + _tmp68 * (-_tmp80 + _tmp81) + _tmp73 * (_tmp77 + _tmp78) +
                        _tmp76 * (_tmp75 + _tmp82));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
