// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: cumulative_uniform_b_spline_lambdas
 *
 * Args:
 *     ut: Scalar
 *
 * Outputs:
 *     res: Matrix54
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 5, 4> CumulativeUniformBSplineLambdas63(const Scalar ut) {
  // Total ops: 87

  // Input arrays

  // Intermediate terms (27)
  const Scalar _tmp0 = std::pow(ut, Scalar(2));
  const Scalar _tmp1 = (Scalar(1) / Scalar(12)) * _tmp0;
  const Scalar _tmp2 = std::pow(ut, Scalar(5));
  const Scalar _tmp3 = (Scalar(1) / Scalar(120)) * _tmp2;
  const Scalar _tmp4 = std::pow(ut, Scalar(4));
  const Scalar _tmp5 = (Scalar(1) / Scalar(24)) * _tmp4;
  const Scalar _tmp6 = [&]() {
    const Scalar base = ut;
    return base * base * base;
  }();
  const Scalar _tmp7 = (Scalar(1) / Scalar(12)) * _tmp6;
  const Scalar _tmp8 = _tmp7 + (Scalar(1) / Scalar(24)) * ut;
  const Scalar _tmp9 = (Scalar(1) / Scalar(4)) * _tmp0;
  const Scalar _tmp10 = -_tmp9;
  const Scalar _tmp11 = -Scalar(1) / Scalar(30) * _tmp2;
  const Scalar _tmp12 = (Scalar(1) / Scalar(8)) * _tmp4;
  const Scalar _tmp13 = -_tmp7 + (Scalar(11) / Scalar(24)) * ut;
  const Scalar _tmp14 = (Scalar(1) / Scalar(6)) * ut;
  const Scalar _tmp15 = (Scalar(1) / Scalar(6)) * _tmp6;
  const Scalar _tmp16 = _tmp9 + Scalar(1) / Scalar(24);
  const Scalar _tmp17 = (Scalar(1) / Scalar(2)) * ut;
  const Scalar _tmp18 = -_tmp17;
  const Scalar _tmp19 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp20 = -Scalar(1) / Scalar(6) * _tmp4;
  const Scalar _tmp21 = _tmp10 + Scalar(11) / Scalar(24);
  const Scalar _tmp22 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp23 = (Scalar(3) / Scalar(2)) * _tmp0;
  const Scalar _tmp24 = -Scalar(2) / Scalar(3) * _tmp6;
  const Scalar _tmp25 = 3 * ut;
  const Scalar _tmp26 = -2 * _tmp0;

  // Output terms (1)
  Eigen::Matrix<Scalar, 5, 4> _res;

  _res(0, 0) = -_tmp1 + _tmp3 - _tmp5 + _tmp8 + Scalar(119) / Scalar(120);
  _res(1, 0) = _tmp10 + _tmp11 + _tmp12 + _tmp13 + Scalar(31) / Scalar(40);
  _res(2, 0) = -_tmp12 + _tmp13 + (Scalar(1) / Scalar(20)) * _tmp2 + _tmp9 + Scalar(9) / Scalar(40);
  _res(3, 0) = _tmp1 + _tmp11 + _tmp5 + _tmp8 + Scalar(1) / Scalar(120);
  _res(4, 0) = _tmp3;
  _res(0, 1) = -_tmp14 - _tmp15 + _tmp16 + _tmp5;
  _res(1, 1) = _tmp18 + _tmp19 + _tmp20 + _tmp21;
  _res(2, 1) = _tmp17 - _tmp19 + _tmp21 + (Scalar(1) / Scalar(4)) * _tmp4;
  _res(3, 1) = _tmp14 + _tmp15 + _tmp16 + _tmp20;
  _res(4, 1) = _tmp5;
  _res(0, 2) = _tmp15 + _tmp17 - _tmp22 + Scalar(-1) / Scalar(6);
  _res(1, 2) = _tmp18 + _tmp23 + _tmp24 + Scalar(-1) / Scalar(2);
  _res(2, 2) = _tmp18 - _tmp23 + _tmp6 + Scalar(1) / Scalar(2);
  _res(3, 2) = _tmp17 + _tmp22 + _tmp24 + Scalar(1) / Scalar(6);
  _res(4, 2) = _tmp15;
  _res(0, 3) = _tmp22 - ut + Scalar(1) / Scalar(2);
  _res(1, 3) = _tmp25 + _tmp26 + Scalar(-1) / Scalar(2);
  _res(2, 3) = 3 * _tmp0 - _tmp25 + Scalar(-1) / Scalar(2);
  _res(3, 3) = _tmp26 + ut + Scalar(1) / Scalar(2);
  _res(4, 3) = _tmp22;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
