// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: cumulative_uniform_b_spline_lambdas
 *
 * Args:
 *     ut: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> CumulativeUniformBSplineLambdas50(const Scalar ut) {
  // Total ops: 21

  // Input arrays

  // Intermediate terms (6)
  const Scalar _tmp0 = (Scalar(1) / Scalar(4)) * std::pow(ut, Scalar(2));
  const Scalar _tmp1 = std::pow(ut, Scalar(4));
  const Scalar _tmp2 = (Scalar(1) / Scalar(24)) * _tmp1;
  const Scalar _tmp3 = [&]() {
    const Scalar base = ut;
    return base * base * base;
  }();
  const Scalar _tmp4 = (Scalar(1) / Scalar(6)) * _tmp3 + (Scalar(1) / Scalar(6)) * ut;
  const Scalar _tmp5 = (Scalar(1) / Scalar(8)) * _tmp1;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) = -_tmp0 - _tmp2 + _tmp4 + Scalar(23) / Scalar(24);
  _res(1, 0) =
      -Scalar(1) / Scalar(3) * _tmp3 + _tmp5 + (Scalar(2) / Scalar(3)) * ut + Scalar(1) / Scalar(2);
  _res(2, 0) = _tmp0 + _tmp4 - _tmp5 + Scalar(1) / Scalar(24);
  _res(3, 0) = _tmp2;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
