// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_rot3_acceleration
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix33
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Rot3AccelerationLocal(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 3>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const Scalar epsilon) {
  // Total ops: 360

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();

  // Intermediate terms (118)
  const Scalar _tmp0 = std::pow(dt, Scalar(-2));
  const Scalar _tmp1 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp2 = _x0[3] * _x1[3];
  const Scalar _tmp3 = 1 - epsilon;
  const Scalar _tmp4 = std::min<Scalar>(_tmp3, std::fabs(_tmp1 - _tmp2));
  const Scalar _tmp5 =
      2 * (2 * std::min<Scalar>(0, (((-_tmp1 + _tmp2) > 0) - ((-_tmp1 + _tmp2) < 0))) + 1) *
      std::acos(_tmp4) / std::sqrt(Scalar(1 - std::pow(_tmp4, Scalar(2))));
  const Scalar _tmp6 = _tmp5 * lambdas(0, 2);
  const Scalar _tmp7 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp8 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp9 = std::pow(_tmp8, Scalar(2));
  const Scalar _tmp10 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp11 = std::pow(_tmp10, Scalar(2));
  const Scalar _tmp12 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp13 = _x1[3] * _x2[3];
  const Scalar _tmp14 = std::min<Scalar>(_tmp3, std::fabs(_tmp12 - _tmp13));
  const Scalar _tmp15 = 1 - std::pow(_tmp14, Scalar(2));
  const Scalar _tmp16 = std::acos(_tmp14);
  const Scalar _tmp17 =
      2 * std::min<Scalar>(0, (((-_tmp12 + _tmp13) > 0) - ((-_tmp12 + _tmp13) < 0))) + 1;
  const Scalar _tmp18 = std::pow(_tmp16, Scalar(2)) * std::pow(_tmp17, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp15;
  const Scalar _tmp19 = 4 * _tmp18;
  const Scalar _tmp20 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp21 = std::pow(_tmp20, Scalar(2));
  const Scalar _tmp22 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp23 = _tmp11 * _tmp19 + _tmp19 * _tmp21 + _tmp19 * _tmp9 + _tmp22;
  const Scalar _tmp24 = std::sqrt(_tmp23);
  const Scalar _tmp25 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp26 = std::sin(_tmp25);
  const Scalar _tmp27 = 8 * _tmp18 * std::pow(_tmp26, Scalar(2)) / _tmp23;
  const Scalar _tmp28 = -_tmp27 * _tmp9;
  const Scalar _tmp29 = -_tmp11 * _tmp27 + 1;
  const Scalar _tmp30 = _tmp7 * (_tmp28 + _tmp29);
  const Scalar _tmp31 = _tmp10 * _tmp20 * _tmp27;
  const Scalar _tmp32 = _tmp16 * _tmp17 / std::sqrt(_tmp15);
  const Scalar _tmp33 = 4 * _tmp26 * _tmp32 * lambdas(1, 0) * std::cos(_tmp25) / _tmp24;
  const Scalar _tmp34 = _tmp33 * _tmp8;
  const Scalar _tmp35 = _tmp31 - _tmp34;
  const Scalar _tmp36 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp37 = _tmp36 * _tmp6;
  const Scalar _tmp38 = -_tmp21 * _tmp27;
  const Scalar _tmp39 = _tmp29 + _tmp38;
  const Scalar _tmp40 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp41 = _tmp5 * lambdas(0, 1);
  const Scalar _tmp42 = _tmp40 * _tmp41;
  const Scalar _tmp43 = _tmp20 * _tmp33;
  const Scalar _tmp44 = _tmp27 * _tmp8;
  const Scalar _tmp45 = _tmp10 * _tmp44;
  const Scalar _tmp46 = _tmp43 + _tmp45;
  const Scalar _tmp47 = _tmp36 * _tmp41;
  const Scalar _tmp48 = _tmp10 * _tmp33;
  const Scalar _tmp49 = _tmp20 * _tmp44;
  const Scalar _tmp50 = _tmp7 * (-_tmp48 + _tmp49);
  const Scalar _tmp51 = _tmp39 * _tmp42 + _tmp41 * _tmp50 + _tmp46 * _tmp47;
  const Scalar _tmp52 = 2 * _tmp32;
  const Scalar _tmp53 = _tmp10 * _tmp52;
  const Scalar _tmp54 = _tmp53 * lambdas(1, 1);
  const Scalar _tmp55 = _tmp20 * _tmp52;
  const Scalar _tmp56 = -_tmp43 + _tmp45;
  const Scalar _tmp57 = _tmp7 * (_tmp31 + _tmp34);
  const Scalar _tmp58 = _tmp28 + _tmp38 + 1;
  const Scalar _tmp59 = _tmp41 * _tmp57 + _tmp42 * _tmp56 + _tmp47 * _tmp58;
  const Scalar _tmp60 = _tmp52 * _tmp8;
  const Scalar _tmp61 = _tmp60 * lambdas(1, 1);
  const Scalar _tmp62 = _tmp48 + _tmp49;
  const Scalar _tmp63 = _tmp40 * _tmp6;
  const Scalar _tmp64 = _tmp30 * _tmp6 + _tmp35 * _tmp37 + _tmp51 * _tmp54 +
                        _tmp55 * lambdas(1, 2) - _tmp59 * _tmp61 + _tmp62 * _tmp63;
  const Scalar _tmp65 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp66 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp67 = std::pow(_tmp66, Scalar(2));
  const Scalar _tmp68 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp69 = _x2[3] * _x3[3];
  const Scalar _tmp70 = std::min<Scalar>(_tmp3, std::fabs(_tmp68 - _tmp69));
  const Scalar _tmp71 = std::acos(_tmp70);
  const Scalar _tmp72 =
      2 * std::min<Scalar>(0, (((-_tmp68 + _tmp69) > 0) - ((-_tmp68 + _tmp69) < 0))) + 1;
  const Scalar _tmp73 = 1 - std::pow(_tmp70, Scalar(2));
  const Scalar _tmp74 = std::pow(_tmp71, Scalar(2)) * std::pow(_tmp72, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp73;
  const Scalar _tmp75 = 4 * _tmp74;
  const Scalar _tmp76 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp77 = std::pow(_tmp76, Scalar(2));
  const Scalar _tmp78 = std::pow(_tmp65, Scalar(2));
  const Scalar _tmp79 = _tmp22 + _tmp67 * _tmp75 + _tmp75 * _tmp77 + _tmp75 * _tmp78;
  const Scalar _tmp80 = std::sqrt(_tmp79);
  const Scalar _tmp81 = (Scalar(1) / Scalar(2)) * _tmp80;
  const Scalar _tmp82 = std::sin(_tmp81);
  const Scalar _tmp83 = 8 * _tmp74 * std::pow(_tmp82, Scalar(2)) / _tmp79;
  const Scalar _tmp84 = _tmp65 * _tmp66 * _tmp83;
  const Scalar _tmp85 = _tmp71 * _tmp72 / std::sqrt(_tmp73);
  const Scalar _tmp86 = 4 * _tmp82 * _tmp85 * lambdas(2, 0) * std::cos(_tmp81) / _tmp80;
  const Scalar _tmp87 = _tmp76 * _tmp86;
  const Scalar _tmp88 = _tmp84 - _tmp87;
  const Scalar _tmp89 = -_tmp77 * _tmp83;
  const Scalar _tmp90 = -_tmp67 * _tmp83 + 1;
  const Scalar _tmp91 = _tmp89 + _tmp90;
  const Scalar _tmp92 = _tmp30 * _tmp41 + _tmp35 * _tmp47 + _tmp42 * _tmp62;
  const Scalar _tmp93 = _tmp55 * lambdas(1, 1);
  const Scalar _tmp94 = _tmp37 * _tmp46 + _tmp39 * _tmp63 + _tmp50 * _tmp6 - _tmp54 * _tmp92 +
                        _tmp59 * _tmp93 + _tmp60 * lambdas(1, 2);
  const Scalar _tmp95 = _tmp66 * _tmp86;
  const Scalar _tmp96 = _tmp76 * _tmp83;
  const Scalar _tmp97 = _tmp65 * _tmp96;
  const Scalar _tmp98 = _tmp95 + _tmp97;
  const Scalar _tmp99 = _tmp37 * _tmp58 - _tmp51 * _tmp93 + _tmp53 * lambdas(1, 2) +
                        _tmp56 * _tmp63 + _tmp57 * _tmp6 + _tmp61 * _tmp92;
  const Scalar _tmp100 = 2 * _tmp85;
  const Scalar _tmp101 = _tmp100 * lambdas(2, 2);
  const Scalar _tmp102 = _tmp51 + _tmp61;
  const Scalar _tmp103 = _tmp84 + _tmp87;
  const Scalar _tmp104 = _tmp54 + _tmp59;
  const Scalar _tmp105 = _tmp65 * _tmp86;
  const Scalar _tmp106 = _tmp66 * _tmp96;
  const Scalar _tmp107 = -_tmp105 + _tmp106;
  const Scalar _tmp108 = -_tmp78 * _tmp83;
  const Scalar _tmp109 = _tmp108 + _tmp89 + 1;
  const Scalar _tmp110 = _tmp92 + _tmp93;
  const Scalar _tmp111 = _tmp100 * lambdas(2, 1);
  const Scalar _tmp112 = _tmp111 * (_tmp102 * _tmp103 + _tmp104 * _tmp107 + _tmp109 * _tmp110);
  const Scalar _tmp113 = -_tmp95 + _tmp97;
  const Scalar _tmp114 = _tmp105 + _tmp106;
  const Scalar _tmp115 = _tmp108 + _tmp90;
  const Scalar _tmp116 = _tmp111 * (_tmp102 * _tmp113 + _tmp104 * _tmp115 + _tmp110 * _tmp114);
  const Scalar _tmp117 = _tmp111 * (_tmp102 * _tmp91 + _tmp104 * _tmp98 + _tmp110 * _tmp88);

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp0 * (_tmp101 * _tmp65 - _tmp112 * _tmp76 + _tmp116 * _tmp66 + _tmp64 * _tmp88 +
                        _tmp91 * _tmp94 + _tmp98 * _tmp99);
  _res(1, 0) = _tmp0 * (_tmp101 * _tmp76 + _tmp112 * _tmp65 + _tmp113 * _tmp94 + _tmp114 * _tmp64 +
                        _tmp115 * _tmp99 - _tmp117 * _tmp66);
  _res(2, 0) = _tmp0 * (_tmp101 * _tmp66 + _tmp103 * _tmp94 + _tmp107 * _tmp99 + _tmp109 * _tmp64 -
                        _tmp116 * _tmp65 + _tmp117 * _tmp76);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
