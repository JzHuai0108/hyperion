// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline3_rot3_acceleration
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix33
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline3Rot3AccelerationGlobal(
    const Scalar dt, const Eigen::Matrix<Scalar, 3, 3>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const Scalar epsilon) {
  // Total ops: 405

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();

  // Intermediate terms (133)
  const Scalar _tmp0 = std::pow(dt, Scalar(-2));
  const Scalar _tmp1 = 2 * _x0[3];
  const Scalar _tmp2 = _tmp1 * _x0[1];
  const Scalar _tmp3 = 2 * _x0[2];
  const Scalar _tmp4 = _tmp3 * _x0[0];
  const Scalar _tmp5 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp6 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp7 = _x0[3] * _x1[3];
  const Scalar _tmp8 = 1 - epsilon;
  const Scalar _tmp9 = std::min<Scalar>(_tmp8, std::fabs(_tmp6 - _tmp7));
  const Scalar _tmp10 = 1 - std::pow(_tmp9, Scalar(2));
  const Scalar _tmp11 = std::acos(_tmp9);
  const Scalar _tmp12 =
      2 * std::min<Scalar>(0, (((-_tmp6 + _tmp7) > 0) - ((-_tmp6 + _tmp7) < 0))) + 1;
  const Scalar _tmp13 = _tmp11 * _tmp12 / std::sqrt(_tmp10);
  const Scalar _tmp14 = 2 * _tmp13;
  const Scalar _tmp15 = _tmp14 * lambdas(0, 2);
  const Scalar _tmp16 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp17 = _x2[3] * _x3[3];
  const Scalar _tmp18 = std::min<Scalar>(_tmp8, std::fabs(_tmp16 - _tmp17));
  const Scalar _tmp19 =
      2 * (2 * std::min<Scalar>(0, (((-_tmp16 + _tmp17) > 0) - ((-_tmp16 + _tmp17) < 0))) + 1) *
      std::acos(_tmp18) / std::sqrt(Scalar(1 - std::pow(_tmp18, Scalar(2))));
  const Scalar _tmp20 = _tmp19 * lambdas(2, 1);
  const Scalar _tmp21 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp22 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp23 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp24 = std::pow(_tmp23, Scalar(2));
  const Scalar _tmp25 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp26 = _x1[3] * _x2[3];
  const Scalar _tmp27 = std::min<Scalar>(_tmp8, std::fabs(_tmp25 - _tmp26));
  const Scalar _tmp28 = 1 - std::pow(_tmp27, Scalar(2));
  const Scalar _tmp29 = std::acos(_tmp27);
  const Scalar _tmp30 =
      2 * std::min<Scalar>(0, (((-_tmp25 + _tmp26) > 0) - ((-_tmp25 + _tmp26) < 0))) + 1;
  const Scalar _tmp31 = std::pow(_tmp29, Scalar(2)) * std::pow(_tmp30, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp28;
  const Scalar _tmp32 = 4 * _tmp31;
  const Scalar _tmp33 = std::pow(_tmp22, Scalar(2));
  const Scalar _tmp34 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp35 = std::pow(_tmp34, Scalar(2));
  const Scalar _tmp36 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp37 = _tmp24 * _tmp32 + _tmp32 * _tmp33 + _tmp32 * _tmp35 + _tmp36;
  const Scalar _tmp38 = std::sqrt(_tmp37);
  const Scalar _tmp39 = (Scalar(1) / Scalar(2)) * _tmp38;
  const Scalar _tmp40 = std::sin(_tmp39);
  const Scalar _tmp41 = _tmp29 * _tmp30 / std::sqrt(_tmp28);
  const Scalar _tmp42 = 4 * _tmp40 * _tmp41 * lambdas(1, 0) * std::cos(_tmp39) / _tmp38;
  const Scalar _tmp43 = _tmp22 * _tmp42;
  const Scalar _tmp44 = 8 * _tmp31 * std::pow(_tmp40, Scalar(2)) / _tmp37;
  const Scalar _tmp45 = _tmp23 * _tmp44;
  const Scalar _tmp46 = _tmp34 * _tmp45;
  const Scalar _tmp47 = _tmp21 * (-_tmp43 + _tmp46);
  const Scalar _tmp48 = -_tmp33 * _tmp44;
  const Scalar _tmp49 = -_tmp24 * _tmp44;
  const Scalar _tmp50 = _tmp48 + _tmp49 + 1;
  const Scalar _tmp51 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp52 = _tmp20 * _tmp51;
  const Scalar _tmp53 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp54 = _tmp23 * _tmp42;
  const Scalar _tmp55 = _tmp22 * _tmp34 * _tmp44;
  const Scalar _tmp56 = _tmp53 * (_tmp54 + _tmp55);
  const Scalar _tmp57 = _tmp20 * _tmp47 + _tmp20 * _tmp56 + _tmp50 * _tmp52;
  const Scalar _tmp58 = 2 * _tmp41;
  const Scalar _tmp59 = _tmp58 * lambdas(1, 1);
  const Scalar _tmp60 = _tmp23 * _tmp59;
  const Scalar _tmp61 = -_tmp54 + _tmp55;
  const Scalar _tmp62 = _tmp19 * lambdas(2, 2);
  const Scalar _tmp63 = _tmp51 * _tmp62;
  const Scalar _tmp64 = _tmp43 + _tmp46;
  const Scalar _tmp65 = -_tmp35 * _tmp44 + 1;
  const Scalar _tmp66 = _tmp21 * (_tmp48 + _tmp65);
  const Scalar _tmp67 = _tmp22 * _tmp45;
  const Scalar _tmp68 = _tmp34 * _tmp42;
  const Scalar _tmp69 = _tmp67 - _tmp68;
  const Scalar _tmp70 = _tmp20 * _tmp53;
  const Scalar _tmp71 = _tmp20 * _tmp66 + _tmp52 * _tmp64 + _tmp69 * _tmp70;
  const Scalar _tmp72 = _tmp34 * _tmp58;
  const Scalar _tmp73 = _tmp72 * lambdas(1, 1);
  const Scalar _tmp74 = _tmp58 * lambdas(1, 2);
  const Scalar _tmp75 = _tmp49 + _tmp65;
  const Scalar _tmp76 = _tmp53 * _tmp62;
  const Scalar _tmp77 = _tmp21 * (_tmp67 + _tmp68);
  const Scalar _tmp78 = _tmp22 * _tmp74 - _tmp57 * _tmp60 + _tmp61 * _tmp63 + _tmp62 * _tmp77 +
                        _tmp71 * _tmp73 + _tmp75 * _tmp76;
  const Scalar _tmp79 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp80 = std::pow(_tmp79, Scalar(2));
  const Scalar _tmp81 = std::pow(_tmp11, Scalar(2)) * std::pow(_tmp12, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp10;
  const Scalar _tmp82 = 4 * _tmp81;
  const Scalar _tmp83 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp84 = std::pow(_tmp83, Scalar(2));
  const Scalar _tmp85 = std::pow(_tmp5, Scalar(2));
  const Scalar _tmp86 = _tmp36 + _tmp80 * _tmp82 + _tmp82 * _tmp84 + _tmp82 * _tmp85;
  const Scalar _tmp87 = std::sqrt(_tmp86);
  const Scalar _tmp88 = (Scalar(1) / Scalar(2)) * _tmp87;
  const Scalar _tmp89 = std::sin(_tmp88);
  const Scalar _tmp90 = 8 * _tmp81 * std::pow(_tmp89, Scalar(2)) / _tmp86;
  const Scalar _tmp91 = -_tmp80 * _tmp90;
  const Scalar _tmp92 = -_tmp84 * _tmp90;
  const Scalar _tmp93 = _tmp91 + _tmp92 + 1;
  const Scalar _tmp94 = _tmp22 * _tmp59;
  const Scalar _tmp95 = _tmp20 * _tmp77 + _tmp52 * _tmp61 + _tmp70 * _tmp75;
  const Scalar _tmp96 = _tmp94 + _tmp95;
  const Scalar _tmp97 = 4 * _tmp13 * _tmp89 * lambdas(0, 0) * std::cos(_tmp88) / _tmp87;
  const Scalar _tmp98 = _tmp79 * _tmp97;
  const Scalar _tmp99 = _tmp5 * _tmp90;
  const Scalar _tmp100 = _tmp83 * _tmp99;
  const Scalar _tmp101 = _tmp100 + _tmp98;
  const Scalar _tmp102 = _tmp57 + _tmp73;
  const Scalar _tmp103 = -_tmp85 * _tmp90 + 1;
  const Scalar _tmp104 = _tmp103 + _tmp91;
  const Scalar _tmp105 = _tmp5 * _tmp97;
  const Scalar _tmp106 = _tmp79 * _tmp83 * _tmp90;
  const Scalar _tmp107 = -_tmp105 + _tmp106;
  const Scalar _tmp108 = _tmp60 + _tmp71;
  const Scalar _tmp109 = _tmp101 * _tmp96 + _tmp102 * _tmp104 + _tmp107 * _tmp108;
  const Scalar _tmp110 = _tmp14 * lambdas(0, 1);
  const Scalar _tmp111 = _tmp110 * _tmp79;
  const Scalar _tmp112 = _tmp47 * _tmp62 + _tmp50 * _tmp63 + _tmp56 * _tmp62 + _tmp60 * _tmp95 -
                         _tmp71 * _tmp94 + _tmp72 * lambdas(1, 2);
  const Scalar _tmp113 = _tmp100 - _tmp98;
  const Scalar _tmp114 = _tmp23 * _tmp74 + _tmp57 * _tmp94 + _tmp62 * _tmp66 + _tmp63 * _tmp64 +
                         _tmp69 * _tmp76 - _tmp73 * _tmp95;
  const Scalar _tmp115 = _tmp79 * _tmp99;
  const Scalar _tmp116 = _tmp83 * _tmp97;
  const Scalar _tmp117 = _tmp115 + _tmp116;
  const Scalar _tmp118 = _tmp115 - _tmp116;
  const Scalar _tmp119 = _tmp103 + _tmp92;
  const Scalar _tmp120 = _tmp105 + _tmp106;
  const Scalar _tmp121 = _tmp110 * (_tmp102 * _tmp120 + _tmp108 * _tmp119 + _tmp118 * _tmp96);
  const Scalar _tmp122 = -_tmp109 * _tmp111 + _tmp112 * _tmp113 + _tmp114 * _tmp117 +
                         _tmp121 * _tmp83 + _tmp15 * _tmp5 + _tmp78 * _tmp93;
  const Scalar _tmp123 = -2 * std::pow(_x0[2], Scalar(2));
  const Scalar _tmp124 = 1 - 2 * std::pow(_x0[1], Scalar(2));
  const Scalar _tmp125 = _tmp102 * _tmp113 + _tmp108 * _tmp117 + _tmp93 * _tmp96;
  const Scalar _tmp126 = _tmp101 * _tmp78 + _tmp104 * _tmp112 + _tmp107 * _tmp114 +
                         _tmp111 * _tmp125 - _tmp121 * _tmp5 + _tmp15 * _tmp83;
  const Scalar _tmp127 = _tmp1 * _x0[2];
  const Scalar _tmp128 = 2 * _x0[0] * _x0[1];
  const Scalar _tmp129 = _tmp109 * _tmp110 * _tmp5 - _tmp110 * _tmp125 * _tmp83 +
                         _tmp112 * _tmp120 + _tmp114 * _tmp119 + _tmp118 * _tmp78 + _tmp15 * _tmp79;
  const Scalar _tmp130 = _tmp1 * _x0[0];
  const Scalar _tmp131 = _tmp3 * _x0[1];
  const Scalar _tmp132 = -2 * std::pow(_x0[0], Scalar(2));

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp0 * (_tmp122 * (_tmp2 + _tmp4) + _tmp126 * (_tmp123 + _tmp124) +
                        _tmp129 * (-_tmp127 + _tmp128));
  _res(1, 0) = _tmp0 * (_tmp122 * (-_tmp130 + _tmp131) + _tmp126 * (_tmp127 + _tmp128) +
                        _tmp129 * (_tmp123 + _tmp132 + 1));
  _res(2, 0) = _tmp0 * (_tmp122 * (_tmp124 + _tmp132) + _tmp126 * (-_tmp2 + _tmp4) +
                        _tmp129 * (_tmp130 + _tmp131));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
