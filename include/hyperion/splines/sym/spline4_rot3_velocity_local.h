// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline4_rot3_velocity
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix42
 *     x0: Rot3
 *     x1: Rot3
 *     x2: Rot3
 *     x3: Rot3
 *     x4: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> Spline4Rot3VelocityLocal(
    const Scalar dt, const Eigen::Matrix<Scalar, 4, 2>& lambdas, const sym::Rot3<Scalar>& x0,
    const sym::Rot3<Scalar>& x1, const sym::Rot3<Scalar>& x2, const sym::Rot3<Scalar>& x3,
    const sym::Rot3<Scalar>& x4, const Scalar epsilon) {
  // Total ops: 410

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _x4 = x4.Data();

  // Intermediate terms (121)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = -_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0];
  const Scalar _tmp2 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp3 = _x3[3] * _x4[3];
  const Scalar _tmp4 = 1 - epsilon;
  const Scalar _tmp5 = std::min<Scalar>(_tmp4, std::fabs(_tmp2 - _tmp3));
  const Scalar _tmp6 = std::acos(_tmp5);
  const Scalar _tmp7 =
      2 * std::min<Scalar>(0, (((-_tmp2 + _tmp3) > 0) - ((-_tmp2 + _tmp3) < 0))) + 1;
  const Scalar _tmp8 = 1 - std::pow(_tmp5, Scalar(2));
  const Scalar _tmp9 = _tmp6 * _tmp7 / std::sqrt(_tmp8);
  const Scalar _tmp10 = 2 * lambdas(3, 1);
  const Scalar _tmp11 = _tmp10 * _tmp9;
  const Scalar _tmp12 = _x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1];
  const Scalar _tmp13 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp14 = std::pow(_tmp6, Scalar(2)) * std::pow(_tmp7, Scalar(2)) *
                        std::pow(lambdas(3, 0), Scalar(2)) / _tmp8;
  const Scalar _tmp15 = 4 * _tmp14;
  const Scalar _tmp16 = std::pow(_tmp12, Scalar(2));
  const Scalar _tmp17 = -_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2];
  const Scalar _tmp18 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp19 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp20 = _tmp13 * _tmp15 + _tmp15 * _tmp16 + _tmp15 * _tmp18 + _tmp19;
  const Scalar _tmp21 = std::sqrt(_tmp20);
  const Scalar _tmp22 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp23 = std::sin(_tmp22);
  const Scalar _tmp24 = 8 * _tmp14 * std::pow(_tmp23, Scalar(2)) / _tmp20;
  const Scalar _tmp25 = _tmp1 * _tmp12 * _tmp24;
  const Scalar _tmp26 = _tmp17 * _tmp9;
  const Scalar _tmp27 = 4 * _tmp23 * lambdas(3, 0) * std::cos(_tmp22) / _tmp21;
  const Scalar _tmp28 = _tmp26 * _tmp27;
  const Scalar _tmp29 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp30 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp31 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp32 = std::pow(_tmp31, Scalar(2));
  const Scalar _tmp33 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp34 = _x1[3] * _x2[3];
  const Scalar _tmp35 = std::min<Scalar>(_tmp4, std::fabs(_tmp33 - _tmp34));
  const Scalar _tmp36 = 1 - std::pow(_tmp35, Scalar(2));
  const Scalar _tmp37 = std::acos(_tmp35);
  const Scalar _tmp38 =
      2 * std::min<Scalar>(0, (((-_tmp33 + _tmp34) > 0) - ((-_tmp33 + _tmp34) < 0))) + 1;
  const Scalar _tmp39 = std::pow(_tmp37, Scalar(2)) * std::pow(_tmp38, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp36;
  const Scalar _tmp40 = 4 * _tmp39;
  const Scalar _tmp41 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp42 = std::pow(_tmp41, Scalar(2));
  const Scalar _tmp43 = _tmp19 + _tmp30 * _tmp40 + _tmp32 * _tmp40 + _tmp40 * _tmp42;
  const Scalar _tmp44 = std::sqrt(_tmp43);
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp44;
  const Scalar _tmp46 = std::sin(_tmp45);
  const Scalar _tmp47 = 8 * _tmp39 * std::pow(_tmp46, Scalar(2)) / _tmp43;
  const Scalar _tmp48 = -_tmp30 * _tmp47;
  const Scalar _tmp49 = -_tmp32 * _tmp47 + 1;
  const Scalar _tmp50 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp51 = _x0[3] * _x1[3];
  const Scalar _tmp52 = std::min<Scalar>(_tmp4, std::fabs(_tmp50 - _tmp51));
  const Scalar _tmp53 =
      2 * lambdas(0, 1) *
      (2 * std::min<Scalar>(0, (((-_tmp50 + _tmp51) > 0) - ((-_tmp50 + _tmp51) < 0))) + 1) *
      std::acos(_tmp52) / std::sqrt(Scalar(1 - std::pow(_tmp52, Scalar(2))));
  const Scalar _tmp54 =
      _tmp53 * (-_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0]);
  const Scalar _tmp55 = _tmp37 * _tmp38 / std::sqrt(_tmp36);
  const Scalar _tmp56 = 4 * _tmp46 * lambdas(1, 0) * std::cos(_tmp45) / _tmp44;
  const Scalar _tmp57 = _tmp55 * _tmp56;
  const Scalar _tmp58 = _tmp29 * _tmp57;
  const Scalar _tmp59 = _tmp41 * _tmp47;
  const Scalar _tmp60 = _tmp31 * _tmp59;
  const Scalar _tmp61 =
      _tmp53 * (_x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1]);
  const Scalar _tmp62 = _tmp31 * _tmp55;
  const Scalar _tmp63 = _tmp56 * _tmp62;
  const Scalar _tmp64 = _tmp29 * _tmp59;
  const Scalar _tmp65 =
      _tmp53 * (-_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2]);
  const Scalar _tmp66 = 2 * lambdas(1, 1);
  const Scalar _tmp67 = _tmp55 * _tmp66;
  const Scalar _tmp68 = _tmp41 * _tmp67 + _tmp54 * (_tmp48 + _tmp49) + _tmp61 * (_tmp58 + _tmp60) +
                        _tmp65 * (-_tmp63 + _tmp64);
  const Scalar _tmp69 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp70 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp71 = _x2[3] * _x3[3];
  const Scalar _tmp72 = std::min<Scalar>(_tmp4, std::fabs(_tmp70 - _tmp71));
  const Scalar _tmp73 = std::acos(_tmp72);
  const Scalar _tmp74 =
      2 * std::min<Scalar>(0, (((-_tmp70 + _tmp71) > 0) - ((-_tmp70 + _tmp71) < 0))) + 1;
  const Scalar _tmp75 = 1 - std::pow(_tmp72, Scalar(2));
  const Scalar _tmp76 = _tmp73 * _tmp74 / std::sqrt(_tmp75);
  const Scalar _tmp77 = std::pow(_tmp69, Scalar(2));
  const Scalar _tmp78 = std::pow(_tmp73, Scalar(2)) * std::pow(_tmp74, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp75;
  const Scalar _tmp79 = 4 * _tmp78;
  const Scalar _tmp80 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp81 = std::pow(_tmp80, Scalar(2));
  const Scalar _tmp82 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp83 = std::pow(_tmp82, Scalar(2));
  const Scalar _tmp84 = _tmp19 + _tmp77 * _tmp79 + _tmp79 * _tmp81 + _tmp79 * _tmp83;
  const Scalar _tmp85 = std::sqrt(_tmp84);
  const Scalar _tmp86 = (Scalar(1) / Scalar(2)) * _tmp85;
  const Scalar _tmp87 = std::sin(_tmp86);
  const Scalar _tmp88 = 4 * _tmp87 * lambdas(2, 0) * std::cos(_tmp86) / _tmp85;
  const Scalar _tmp89 = _tmp76 * _tmp88;
  const Scalar _tmp90 = _tmp69 * _tmp89;
  const Scalar _tmp91 = 8 * _tmp78 * std::pow(_tmp87, Scalar(2)) / _tmp84;
  const Scalar _tmp92 = _tmp80 * _tmp91;
  const Scalar _tmp93 = _tmp82 * _tmp92;
  const Scalar _tmp94 = _tmp76 * _tmp80;
  const Scalar _tmp95 = 2 * lambdas(2, 1);
  const Scalar _tmp96 = -_tmp42 * _tmp47;
  const Scalar _tmp97 = _tmp29 * _tmp31 * _tmp47;
  const Scalar _tmp98 = _tmp41 * _tmp57;
  const Scalar _tmp99 = _tmp29 * _tmp67 + _tmp54 * (_tmp63 + _tmp64) + _tmp61 * (_tmp97 - _tmp98) +
                        _tmp65 * (_tmp49 + _tmp96);
  const Scalar _tmp100 = _tmp82 * _tmp89;
  const Scalar _tmp101 = _tmp69 * _tmp92;
  const Scalar _tmp102 = -_tmp83 * _tmp91;
  const Scalar _tmp103 = -_tmp77 * _tmp91 + 1;
  const Scalar _tmp104 = _tmp54 * (-_tmp58 + _tmp60) + _tmp61 * (_tmp48 + _tmp96 + 1) +
                         _tmp62 * _tmp66 + _tmp65 * (_tmp97 + _tmp98);
  const Scalar _tmp105 = _tmp104 * (_tmp102 + _tmp103) + _tmp68 * (-_tmp90 + _tmp93) +
                         _tmp94 * _tmp95 + _tmp99 * (_tmp100 + _tmp101);
  const Scalar _tmp106 = _tmp76 * _tmp95;
  const Scalar _tmp107 = -_tmp81 * _tmp91;
  const Scalar _tmp108 = _tmp69 * _tmp82 * _tmp91;
  const Scalar _tmp109 = _tmp88 * _tmp94;
  const Scalar _tmp110 = _tmp104 * (_tmp90 + _tmp93) + _tmp106 * _tmp82 +
                         _tmp68 * (_tmp103 + _tmp107) + _tmp99 * (_tmp108 - _tmp109);
  const Scalar _tmp111 = -_tmp16 * _tmp24;
  const Scalar _tmp112 = -_tmp18 * _tmp24 + 1;
  const Scalar _tmp113 = _tmp27 * _tmp9;
  const Scalar _tmp114 = _tmp113 * _tmp12;
  const Scalar _tmp115 = _tmp17 * _tmp24;
  const Scalar _tmp116 = _tmp1 * _tmp115;
  const Scalar _tmp117 = _tmp104 * (-_tmp100 + _tmp101) + _tmp106 * _tmp69 +
                         _tmp68 * (_tmp108 + _tmp109) + _tmp99 * (_tmp102 + _tmp107 + 1);
  const Scalar _tmp118 = _tmp115 * _tmp12;
  const Scalar _tmp119 = _tmp1 * _tmp113;
  const Scalar _tmp120 = -_tmp13 * _tmp24;

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp0 * (_tmp1 * _tmp11 + _tmp105 * (_tmp25 + _tmp28) +
                        _tmp110 * (_tmp111 + _tmp112) + _tmp117 * (-_tmp114 + _tmp116));
  _res(1, 0) = _tmp0 * (_tmp105 * (_tmp112 + _tmp120) + _tmp11 * _tmp12 +
                        _tmp110 * (_tmp25 - _tmp28) + _tmp117 * (_tmp118 + _tmp119));
  _res(2, 0) = _tmp0 * (_tmp10 * _tmp26 + _tmp105 * (_tmp118 - _tmp119) +
                        _tmp110 * (_tmp114 + _tmp116) + _tmp117 * (_tmp111 + _tmp120 + 1));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
