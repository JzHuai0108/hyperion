// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: spline4_pose3_velocity
 *
 * Args:
 *     dt: Scalar
 *     lambdas: Matrix42
 *     x0: Pose3
 *     x1: Pose3
 *     x2: Pose3
 *     x3: Pose3
 *     x4: Pose3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix61
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> Spline4Pose3VelocityGlobal(
    const Scalar dt, const Eigen::Matrix<Scalar, 4, 2>& lambdas, const sym::Pose3<Scalar>& x0,
    const sym::Pose3<Scalar>& x1, const sym::Pose3<Scalar>& x2, const sym::Pose3<Scalar>& x3,
    const sym::Pose3<Scalar>& x4, const Scalar epsilon) {
  // Total ops: 525

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _x0 = x0.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x1 = x1.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x2 = x2.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x3 = x3.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _x4 = x4.Data();

  // Intermediate terms (153)
  const Scalar _tmp0 = Scalar(1.0) / (dt);
  const Scalar _tmp1 = -2 * std::pow(_x0[2], Scalar(2));
  const Scalar _tmp2 = 1 - 2 * std::pow(_x0[1], Scalar(2));
  const Scalar _tmp3 = _x0[0] * _x1[2] - _x0[1] * _x1[3] - _x0[2] * _x1[0] + _x0[3] * _x1[1];
  const Scalar _tmp4 = -_x0[0] * _x1[3] - _x0[1] * _x1[2] + _x0[2] * _x1[1] + _x0[3] * _x1[0];
  const Scalar _tmp5 = std::pow(_tmp4, Scalar(2));
  const Scalar _tmp6 = -_x0[0] * _x1[0] - _x0[1] * _x1[1] - _x0[2] * _x1[2];
  const Scalar _tmp7 = _x0[3] * _x1[3];
  const Scalar _tmp8 =
      2 * std::min<Scalar>(0, (((-_tmp6 + _tmp7) > 0) - ((-_tmp6 + _tmp7) < 0))) + 1;
  const Scalar _tmp9 = 1 - epsilon;
  const Scalar _tmp10 = std::min<Scalar>(_tmp9, std::fabs(_tmp6 - _tmp7));
  const Scalar _tmp11 = std::acos(_tmp10);
  const Scalar _tmp12 = 1 - std::pow(_tmp10, Scalar(2));
  const Scalar _tmp13 = std::pow(_tmp11, Scalar(2)) * std::pow(_tmp8, Scalar(2)) *
                        std::pow(lambdas(0, 0), Scalar(2)) / _tmp12;
  const Scalar _tmp14 = 4 * _tmp13;
  const Scalar _tmp15 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp16 = -_x0[0] * _x1[1] + _x0[1] * _x1[0] - _x0[2] * _x1[3] + _x0[3] * _x1[2];
  const Scalar _tmp17 = std::pow(_tmp16, Scalar(2));
  const Scalar _tmp18 = std::pow(epsilon, Scalar(2));
  const Scalar _tmp19 = _tmp14 * _tmp15 + _tmp14 * _tmp17 + _tmp14 * _tmp5 + _tmp18;
  const Scalar _tmp20 = std::sqrt(_tmp19);
  const Scalar _tmp21 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp22 = std::sin(_tmp21);
  const Scalar _tmp23 = 8 * _tmp13 * std::pow(_tmp22, Scalar(2)) / _tmp19;
  const Scalar _tmp24 = _tmp23 * _tmp3 * _tmp4;
  const Scalar _tmp25 = _tmp11 * _tmp8 / std::sqrt(_tmp12);
  const Scalar _tmp26 = _tmp16 * _tmp25;
  const Scalar _tmp27 = 4 * _tmp22 * lambdas(0, 0) * std::cos(_tmp21) / _tmp20;
  const Scalar _tmp28 = _tmp26 * _tmp27;
  const Scalar _tmp29 = _x2[0] * _x3[2] - _x2[1] * _x3[3] - _x2[2] * _x3[0] + _x2[3] * _x3[1];
  const Scalar _tmp30 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp31 = -_x2[0] * _x3[0] - _x2[1] * _x3[1] - _x2[2] * _x3[2];
  const Scalar _tmp32 = _x2[3] * _x3[3];
  const Scalar _tmp33 = std::min<Scalar>(_tmp9, std::fabs(_tmp31 - _tmp32));
  const Scalar _tmp34 = 1 - std::pow(_tmp33, Scalar(2));
  const Scalar _tmp35 =
      2 * std::min<Scalar>(0, (((-_tmp31 + _tmp32) > 0) - ((-_tmp31 + _tmp32) < 0))) + 1;
  const Scalar _tmp36 = std::acos(_tmp33);
  const Scalar _tmp37 = std::pow(_tmp35, Scalar(2)) * std::pow(_tmp36, Scalar(2)) *
                        std::pow(lambdas(2, 0), Scalar(2)) / _tmp34;
  const Scalar _tmp38 = 4 * _tmp37;
  const Scalar _tmp39 = -_x2[0] * _x3[3] - _x2[1] * _x3[2] + _x2[2] * _x3[1] + _x2[3] * _x3[0];
  const Scalar _tmp40 = std::pow(_tmp39, Scalar(2));
  const Scalar _tmp41 = -_x2[0] * _x3[1] + _x2[1] * _x3[0] - _x2[2] * _x3[3] + _x2[3] * _x3[2];
  const Scalar _tmp42 = std::pow(_tmp41, Scalar(2));
  const Scalar _tmp43 = _tmp18 + _tmp30 * _tmp38 + _tmp38 * _tmp40 + _tmp38 * _tmp42;
  const Scalar _tmp44 = std::sqrt(_tmp43);
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp44;
  const Scalar _tmp46 = std::sin(_tmp45);
  const Scalar _tmp47 = 8 * _tmp37 * std::pow(_tmp46, Scalar(2)) / _tmp43;
  const Scalar _tmp48 = -_tmp30 * _tmp47;
  const Scalar _tmp49 = -_tmp40 * _tmp47;
  const Scalar _tmp50 = -_x3[0] * _x4[0] - _x3[1] * _x4[1] - _x3[2] * _x4[2];
  const Scalar _tmp51 = _x3[3] * _x4[3];
  const Scalar _tmp52 = std::min<Scalar>(_tmp9, std::fabs(_tmp50 - _tmp51));
  const Scalar _tmp53 =
      2 * lambdas(3, 1) *
      (2 * std::min<Scalar>(0, (((-_tmp50 + _tmp51) > 0) - ((-_tmp50 + _tmp51) < 0))) + 1) *
      std::acos(_tmp52) / std::sqrt(Scalar(1 - std::pow(_tmp52, Scalar(2))));
  const Scalar _tmp54 =
      _tmp53 * (-_x3[0] * _x4[1] + _x3[1] * _x4[0] - _x3[2] * _x4[3] + _x3[3] * _x4[2]);
  const Scalar _tmp55 = _tmp35 * _tmp36 / std::sqrt(_tmp34);
  const Scalar _tmp56 = _tmp39 * _tmp55;
  const Scalar _tmp57 = 4 * _tmp46 * lambdas(2, 0) * std::cos(_tmp45) / _tmp44;
  const Scalar _tmp58 = _tmp56 * _tmp57;
  const Scalar _tmp59 = _tmp29 * _tmp47;
  const Scalar _tmp60 = _tmp41 * _tmp59;
  const Scalar _tmp61 =
      _tmp53 * (_x3[0] * _x4[2] - _x3[1] * _x4[3] - _x3[2] * _x4[0] + _x3[3] * _x4[1]);
  const Scalar _tmp62 = 2 * lambdas(2, 1);
  const Scalar _tmp63 = _tmp55 * _tmp62;
  const Scalar _tmp64 = _tmp55 * _tmp57;
  const Scalar _tmp65 = _tmp29 * _tmp64;
  const Scalar _tmp66 = _tmp39 * _tmp41 * _tmp47;
  const Scalar _tmp67 =
      _tmp53 * (-_x3[0] * _x4[3] - _x3[1] * _x4[2] + _x3[2] * _x4[1] + _x3[3] * _x4[0]);
  const Scalar _tmp68 = _tmp41 * _tmp63 + _tmp54 * (_tmp48 + _tmp49 + 1) +
                        _tmp61 * (_tmp58 + _tmp60) + _tmp67 * (-_tmp65 + _tmp66);
  const Scalar _tmp69 = -_x1[0] * _x2[1] + _x1[1] * _x2[0] - _x1[2] * _x2[3] + _x1[3] * _x2[2];
  const Scalar _tmp70 = _x1[0] * _x2[2] - _x1[1] * _x2[3] - _x1[2] * _x2[0] + _x1[3] * _x2[1];
  const Scalar _tmp71 = -_x1[0] * _x2[3] - _x1[1] * _x2[2] + _x1[2] * _x2[1] + _x1[3] * _x2[0];
  const Scalar _tmp72 = std::pow(_tmp71, Scalar(2));
  const Scalar _tmp73 = -_x1[0] * _x2[0] - _x1[1] * _x2[1] - _x1[2] * _x2[2];
  const Scalar _tmp74 = _x1[3] * _x2[3];
  const Scalar _tmp75 = std::min<Scalar>(_tmp9, std::fabs(_tmp73 - _tmp74));
  const Scalar _tmp76 = 1 - std::pow(_tmp75, Scalar(2));
  const Scalar _tmp77 =
      2 * std::min<Scalar>(0, (((-_tmp73 + _tmp74) > 0) - ((-_tmp73 + _tmp74) < 0))) + 1;
  const Scalar _tmp78 = std::acos(_tmp75);
  const Scalar _tmp79 = std::pow(_tmp77, Scalar(2)) * std::pow(_tmp78, Scalar(2)) *
                        std::pow(lambdas(1, 0), Scalar(2)) / _tmp76;
  const Scalar _tmp80 = 4 * _tmp79;
  const Scalar _tmp81 = std::pow(_tmp69, Scalar(2));
  const Scalar _tmp82 = std::pow(_tmp70, Scalar(2));
  const Scalar _tmp83 = _tmp18 + _tmp72 * _tmp80 + _tmp80 * _tmp81 + _tmp80 * _tmp82;
  const Scalar _tmp84 = std::sqrt(_tmp83);
  const Scalar _tmp85 = (Scalar(1) / Scalar(2)) * _tmp84;
  const Scalar _tmp86 = std::sin(_tmp85);
  const Scalar _tmp87 = 8 * _tmp79 * std::pow(_tmp86, Scalar(2)) / _tmp83;
  const Scalar _tmp88 = _tmp70 * _tmp87;
  const Scalar _tmp89 = _tmp69 * _tmp88;
  const Scalar _tmp90 = _tmp77 * _tmp78 / std::sqrt(_tmp76);
  const Scalar _tmp91 = 4 * _tmp86 * lambdas(1, 0) * std::cos(_tmp85) / _tmp84;
  const Scalar _tmp92 = _tmp90 * _tmp91;
  const Scalar _tmp93 = _tmp71 * _tmp92;
  const Scalar _tmp94 = 2 * lambdas(1, 1);
  const Scalar _tmp95 = _tmp90 * _tmp94;
  const Scalar _tmp96 = _tmp71 * _tmp88;
  const Scalar _tmp97 = _tmp69 * _tmp90;
  const Scalar _tmp98 = _tmp91 * _tmp97;
  const Scalar _tmp99 = -_tmp42 * _tmp47 + 1;
  const Scalar _tmp100 = _tmp39 * _tmp59;
  const Scalar _tmp101 = _tmp41 * _tmp64;
  const Scalar _tmp102 = _tmp54 * (_tmp65 + _tmp66) + _tmp56 * _tmp62 +
                         _tmp61 * (_tmp100 - _tmp101) + _tmp67 * (_tmp48 + _tmp99);
  const Scalar _tmp103 = _tmp29 * _tmp63 + _tmp54 * (-_tmp58 + _tmp60) +
                         _tmp61 * (_tmp49 + _tmp99) + _tmp67 * (_tmp100 + _tmp101);
  const Scalar _tmp104 = -_tmp72 * _tmp87;
  const Scalar _tmp105 = -_tmp81 * _tmp87 + 1;
  const Scalar _tmp106 = _tmp102 * (_tmp96 + _tmp98) + _tmp103 * (_tmp104 + _tmp105) +
                         _tmp68 * (_tmp89 - _tmp93) + _tmp70 * _tmp95;
  const Scalar _tmp107 = _tmp25 * _tmp27;
  const Scalar _tmp108 = _tmp107 * _tmp3;
  const Scalar _tmp109 = _tmp16 * _tmp23;
  const Scalar _tmp110 = _tmp109 * _tmp4;
  const Scalar _tmp111 = _tmp70 * _tmp92;
  const Scalar _tmp112 = _tmp69 * _tmp71 * _tmp87;
  const Scalar _tmp113 = -_tmp82 * _tmp87;
  const Scalar _tmp114 = _tmp102 * (-_tmp111 + _tmp112) + _tmp103 * (_tmp89 + _tmp93) +
                         _tmp68 * (_tmp104 + _tmp113 + 1) + _tmp94 * _tmp97;
  const Scalar _tmp115 = 2 * lambdas(0, 1);
  const Scalar _tmp116 = _tmp115 * _tmp25;
  const Scalar _tmp117 = _tmp102 * (_tmp105 + _tmp113) + _tmp103 * (_tmp96 - _tmp98) +
                         _tmp68 * (_tmp111 + _tmp112) + _tmp71 * _tmp95;
  const Scalar _tmp118 = -_tmp17 * _tmp23;
  const Scalar _tmp119 = -_tmp15 * _tmp23 + 1;
  const Scalar _tmp120 = _tmp106 * (_tmp24 - _tmp28) + _tmp114 * (_tmp108 + _tmp110) +
                         _tmp116 * _tmp4 + _tmp117 * (_tmp118 + _tmp119);
  const Scalar _tmp121 = 2 * _x0[0];
  const Scalar _tmp122 = _tmp121 * _x0[1];
  const Scalar _tmp123 = 2 * _x0[3];
  const Scalar _tmp124 = _tmp123 * _x0[2];
  const Scalar _tmp125 = _tmp109 * _tmp3;
  const Scalar _tmp126 = _tmp107 * _tmp4;
  const Scalar _tmp127 = -_tmp23 * _tmp5;
  const Scalar _tmp128 = _tmp106 * (_tmp118 + _tmp127 + 1) + _tmp114 * (_tmp125 - _tmp126) +
                         _tmp116 * _tmp3 + _tmp117 * (_tmp24 + _tmp28);
  const Scalar _tmp129 = _tmp123 * _x0[1];
  const Scalar _tmp130 = _tmp121 * _x0[2];
  const Scalar _tmp131 = _tmp106 * (_tmp125 + _tmp126) + _tmp114 * (_tmp119 + _tmp127) +
                         _tmp115 * _tmp26 + _tmp117 * (-_tmp108 + _tmp110);
  const Scalar _tmp132 =
      _tmp120 * (_tmp1 + _tmp2) + _tmp128 * (_tmp122 - _tmp124) + _tmp131 * (_tmp129 + _tmp130);
  const Scalar _tmp133 = -2 * std::pow(_x0[0], Scalar(2));
  const Scalar _tmp134 = _tmp123 * _x0[0];
  const Scalar _tmp135 = 2 * _x0[1] * _x0[2];
  const Scalar _tmp136 = _tmp120 * (_tmp122 + _tmp124) + _tmp128 * (_tmp1 + _tmp133 + 1) +
                         _tmp131 * (-_tmp134 + _tmp135);
  const Scalar _tmp137 =
      _tmp120 * (-_tmp129 + _tmp130) + _tmp128 * (_tmp134 + _tmp135) + _tmp131 * (_tmp133 + _tmp2);
  const Scalar _tmp138 = -_x1[4] + _x2[4];
  const Scalar _tmp139 = -_x3[4] + _x4[4];
  const Scalar _tmp140 = -_x2[4] + _x3[4];
  const Scalar _tmp141 = -_x0[4] + _x1[4];
  const Scalar _tmp142 = -_x1[6] + _x2[6];
  const Scalar _tmp143 = -_x3[6] + _x4[6];
  const Scalar _tmp144 = -_x2[6] + _x3[6];
  const Scalar _tmp145 = -_x0[6] + _x1[6];
  const Scalar _tmp146 = _tmp142 * lambdas(1, 0) + _tmp143 * lambdas(3, 0) +
                         _tmp144 * lambdas(2, 0) + _tmp145 * lambdas(0, 0) + _x0[6];
  const Scalar _tmp147 = -_x1[5] + _x2[5];
  const Scalar _tmp148 = -_x3[5] + _x4[5];
  const Scalar _tmp149 = -_x2[5] + _x3[5];
  const Scalar _tmp150 = -_x0[5] + _x1[5];
  const Scalar _tmp151 = _tmp147 * lambdas(1, 0) + _tmp148 * lambdas(3, 0) +
                         _tmp149 * lambdas(2, 0) + _tmp150 * lambdas(0, 0) + _x0[5];
  const Scalar _tmp152 = _tmp138 * lambdas(1, 0) + _tmp139 * lambdas(3, 0) +
                         _tmp140 * lambdas(2, 0) + _tmp141 * lambdas(0, 0) + _x0[4];

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 1> _res;

  _res(0, 0) = _tmp0 * _tmp132;
  _res(1, 0) = _tmp0 * _tmp136;
  _res(2, 0) = _tmp0 * _tmp137;
  _res(3, 0) =
      _tmp0 * (-_tmp136 * _tmp146 + _tmp137 * _tmp151 + _tmp138 * lambdas(1, 1) +
               _tmp139 * lambdas(3, 1) + _tmp140 * lambdas(2, 1) + _tmp141 * lambdas(0, 1));
  _res(4, 0) =
      _tmp0 * (_tmp132 * _tmp146 - _tmp137 * _tmp152 + _tmp147 * lambdas(1, 1) +
               _tmp148 * lambdas(3, 1) + _tmp149 * lambdas(2, 1) + _tmp150 * lambdas(0, 1));
  _res(5, 0) =
      _tmp0 * (-_tmp132 * _tmp151 + _tmp136 * _tmp152 + _tmp142 * lambdas(1, 1) +
               _tmp143 * lambdas(3, 1) + _tmp144 * lambdas(2, 1) + _tmp145 * lambdas(0, 1));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
