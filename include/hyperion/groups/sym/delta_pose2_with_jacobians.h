// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose2.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: delta_pose2
 *
 * Args:
 *     x: Pose2
 *     y: Pose2
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x3) jacobian of res (3) wrt arg x (3)
 *     res_D_y: (3x3) jacobian of res (3) wrt arg y (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> DeltaPose2WithJacobians(
    const sym::Pose2<Scalar>& x, const sym::Pose2<Scalar>& y, const Scalar epsilon,
    Eigen::Matrix<Scalar, 3, 3>* const res_D_x = nullptr,
    Eigen::Matrix<Scalar, 3, 3>* const res_D_y = nullptr) {
  // Total ops: 31

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (12)
  const Scalar _tmp0 = _x[0] * _y[1];
  const Scalar _tmp1 = _x[1] * _y[0];
  const Scalar _tmp2 = _tmp0 - _tmp1;
  const Scalar _tmp3 = _x[0] * _y[0];
  const Scalar _tmp4 = _x[1] * _y[1];
  const Scalar _tmp5 = _tmp3 + _tmp4;
  const Scalar _tmp6 = _tmp5 + epsilon * ((((_tmp5) > 0) - ((_tmp5) < 0)) + Scalar(0.5));
  const Scalar _tmp7 = Scalar(1.0) / (_tmp6);
  const Scalar _tmp8 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp9 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp10 = Scalar(1.0) / (_tmp9);
  const Scalar _tmp11 = _tmp9 / (_tmp8 + _tmp9);

  // Output terms (3)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = std::atan2(_tmp2, _tmp6);
  _res(1, 0) = -_x[2] + _y[2];
  _res(2, 0) = -_x[3] + _y[3];

  if (res_D_x != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_x = (*res_D_x);

    _res_D_x.setZero();

    _res_D_x(0, 0) = _tmp11 * (-_tmp10 * _tmp8 + _tmp7 * (-_tmp3 - _tmp4));
    _res_D_x(1, 1) = -1;
    _res_D_x(2, 2) = -1;
  }

  if (res_D_y != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_y = (*res_D_y);

    _res_D_y.setZero();

    _res_D_y(0, 0) = _tmp11 * (-_tmp10 * _tmp2 * (-_tmp0 + _tmp1) + _tmp5 * _tmp7);
    _res_D_y(1, 1) = 1;
    _res_D_y(2, 2) = 1;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
