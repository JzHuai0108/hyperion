// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose2.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: retract_pose2
 *
 * Args:
 *     value: Pose2
 *     tau: Matrix31
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Pose2
 *     res_D_value: (3x3) jacobian of res (3) wrt arg value (3)
 *     res_D_tau: (3x3) jacobian of res (3) wrt arg tau (3)
 */
template <typename Scalar>
sym::Pose2<Scalar> RetractPose2WithJacobians(
    const sym::Pose2<Scalar>& value, const Eigen::Matrix<Scalar, 3, 1>& tau, const Scalar epsilon,
    Eigen::Matrix<Scalar, 3, 3>* const res_D_value = nullptr,
    Eigen::Matrix<Scalar, 3, 3>* const res_D_tau = nullptr) {
  // Total ops: 15

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _value = value.Data();

  // Intermediate terms (7)
  const Scalar _tmp0 = std::sin(tau(0, 0));
  const Scalar _tmp1 = std::cos(tau(0, 0));
  const Scalar _tmp2 = -_tmp0 * _value[1] + _tmp1 * _value[0];
  const Scalar _tmp3 = _tmp0 * _value[0];
  const Scalar _tmp4 = _tmp1 * _value[1];
  const Scalar _tmp5 = _tmp3 + _tmp4;
  const Scalar _tmp6 = std::pow(_tmp2, Scalar(2)) - _tmp5 * (-_tmp3 - _tmp4);

  // Output terms (3)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = _tmp2;
  _res[1] = _tmp5;
  _res[2] = _value[2] + tau(1, 0);
  _res[3] = _value[3] + tau(2, 0);

  if (res_D_value != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_value = (*res_D_value);

    _res_D_value.setZero();

    _res_D_value(0, 0) = _tmp6;
    _res_D_value(1, 1) = 1;
    _res_D_value(2, 2) = 1;
  }

  if (res_D_tau != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_tau = (*res_D_tau);

    _res_D_tau.setZero();

    _res_D_tau(0, 0) = _tmp6;
    _res_D_tau(1, 1) = 1;
    _res_D_tau(2, 2) = 1;
  }

  return sym::Pose2<Scalar>(_res);
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
