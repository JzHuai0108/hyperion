// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: retract_pose3
 *
 * Args:
 *     value: Pose3
 *     tau: Matrix61
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Pose3
 *     res_D_value: (6x6) jacobian of res (6) wrt arg value (6)
 *     res_D_tau: (6x6) jacobian of res (6) wrt arg tau (6)
 */
template <typename Scalar>
sym::Pose3<Scalar> RetractPose3WithJacobians(
    const sym::Pose3<Scalar>& value, const Eigen::Matrix<Scalar, 6, 1>& tau, const Scalar epsilon,
    Eigen::Matrix<Scalar, 6, 6>* const res_D_value = nullptr,
    Eigen::Matrix<Scalar, 6, 6>* const res_D_tau = nullptr) {
  // Total ops: 389

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _value = value.Data();

  // Intermediate terms (133)
  const Scalar _tmp0 = std::pow(tau(2, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(tau(1, 0), Scalar(2));
  const Scalar _tmp2 = std::pow(tau(0, 0), Scalar(2));
  const Scalar _tmp3 = _tmp0 + _tmp1 + _tmp2 + std::pow(epsilon, Scalar(2));
  const Scalar _tmp4 = std::sqrt(_tmp3);
  const Scalar _tmp5 = (Scalar(1) / Scalar(2)) * _tmp4;
  const Scalar _tmp6 = std::sin(_tmp5);
  const Scalar _tmp7 = _tmp6 / _tmp4;
  const Scalar _tmp8 = _tmp7 * _value[3];
  const Scalar _tmp9 = _tmp8 * tau(0, 0);
  const Scalar _tmp10 = _tmp7 * _value[1];
  const Scalar _tmp11 = _tmp10 * tau(2, 0);
  const Scalar _tmp12 = _tmp7 * _value[2];
  const Scalar _tmp13 = _tmp12 * tau(1, 0);
  const Scalar _tmp14 = std::cos(_tmp5);
  const Scalar _tmp15 = _tmp14 * _value[0];
  const Scalar _tmp16 = _tmp11 - _tmp13 + _tmp15 + _tmp9;
  const Scalar _tmp17 = _tmp12 * tau(0, 0);
  const Scalar _tmp18 = _tmp8 * tau(1, 0);
  const Scalar _tmp19 = _tmp7 * _value[0];
  const Scalar _tmp20 = _tmp19 * tau(2, 0);
  const Scalar _tmp21 = _tmp14 * _value[1];
  const Scalar _tmp22 = _tmp17 + _tmp18 - _tmp20 + _tmp21;
  const Scalar _tmp23 = _tmp10 * tau(0, 0);
  const Scalar _tmp24 = _tmp19 * tau(1, 0);
  const Scalar _tmp25 = _tmp8 * tau(2, 0);
  const Scalar _tmp26 = _tmp14 * _value[2];
  const Scalar _tmp27 = -_tmp23 + _tmp24 + _tmp25 + _tmp26;
  const Scalar _tmp28 = _tmp19 * tau(0, 0);
  const Scalar _tmp29 = _tmp12 * tau(2, 0);
  const Scalar _tmp30 = _tmp10 * tau(1, 0);
  const Scalar _tmp31 = _tmp14 * _value[3];
  const Scalar _tmp32 = -_tmp28 - _tmp29 - _tmp30 + _tmp31;
  const Scalar _tmp33 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp34 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp35 = -_tmp34;
  const Scalar _tmp36 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp37 = -_tmp36;
  const Scalar _tmp38 = -Scalar(1) / Scalar(2) * _tmp20;
  const Scalar _tmp39 = _tmp37 + _tmp38;
  const Scalar _tmp40 = _tmp33 + _tmp35 + _tmp39;
  const Scalar _tmp41 = 2 * _tmp22;
  const Scalar _tmp42 = -Scalar(1) / Scalar(2) * _tmp23;
  const Scalar _tmp43 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp44 = -_tmp43;
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp46 = -_tmp45;
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp48 = _tmp42 + _tmp44 + _tmp46 + _tmp47;
  const Scalar _tmp49 = 2 * _tmp27;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp52 = -_tmp51;
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp54 = -_tmp53;
  const Scalar _tmp55 = -Scalar(1) / Scalar(2) * _tmp13;
  const Scalar _tmp56 = _tmp54 + _tmp55;
  const Scalar _tmp57 = _tmp50 + _tmp52 + _tmp56;
  const Scalar _tmp58 = 2 * _tmp16;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp60 = -_tmp59;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp29;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp63 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp64 = _tmp62 + _tmp63;
  const Scalar _tmp65 = _tmp60 + _tmp61 + _tmp64;
  const Scalar _tmp66 = 2 * _tmp32;
  const Scalar _tmp67 = -_tmp62;
  const Scalar _tmp68 = _tmp59 + _tmp61 + _tmp63 + _tmp67;
  const Scalar _tmp69 = -_tmp33;
  const Scalar _tmp70 = _tmp35 + _tmp36 + _tmp38 + _tmp69;
  const Scalar _tmp71 = -_tmp50;
  const Scalar _tmp72 = _tmp51 + _tmp56 + _tmp71;
  const Scalar _tmp73 = _tmp42 - _tmp47;
  const Scalar _tmp74 = _tmp44 + _tmp45 + _tmp73;
  const Scalar _tmp75 = _tmp34 + _tmp39 + _tmp69;
  const Scalar _tmp76 = -_tmp61;
  const Scalar _tmp77 = _tmp59 + _tmp64 + _tmp76;
  const Scalar _tmp78 = _tmp43 + _tmp46 + _tmp73;
  const Scalar _tmp79 = _tmp52 + _tmp53 + _tmp55 + _tmp71;
  const Scalar _tmp80 = -_tmp10;
  const Scalar _tmp81 = _tmp6 / (_tmp3 * std::sqrt(_tmp3));
  const Scalar _tmp82 = _tmp81 * tau(0, 0);
  const Scalar _tmp83 = _tmp82 * tau(1, 0);
  const Scalar _tmp84 = _tmp83 * _value[0];
  const Scalar _tmp85 = Scalar(1.0) / (_tmp3);
  const Scalar _tmp86 = _tmp51 * _tmp85;
  const Scalar _tmp87 = tau(0, 0) * tau(1, 0);
  const Scalar _tmp88 = _tmp86 * _tmp87;
  const Scalar _tmp89 = _tmp2 * _tmp85;
  const Scalar _tmp90 = _tmp2 * _tmp81;
  const Scalar _tmp91 = _tmp82 * tau(2, 0);
  const Scalar _tmp92 = _tmp63 * _tmp85;
  const Scalar _tmp93 = tau(0, 0) * tau(2, 0);
  const Scalar _tmp94 = -_tmp91 * _value[3] + _tmp92 * _tmp93;
  const Scalar _tmp95 =
      -_tmp34 * _tmp89 + _tmp37 + _tmp80 - _tmp84 + _tmp88 + _tmp90 * _value[1] + _tmp94;
  const Scalar _tmp96 = -_tmp86 * _tmp93 + _tmp91 * _value[0];
  const Scalar _tmp97 = -_tmp83 * _value[3] + _tmp87 * _tmp92;
  const Scalar _tmp98 = _tmp12 + _tmp42 + _tmp47 * _tmp89 - _tmp90 * _value[2] + _tmp96 + _tmp97;
  const Scalar _tmp99 = _tmp83 * _value[2];
  const Scalar _tmp100 = _tmp47 * _tmp85;
  const Scalar _tmp101 = _tmp100 * _tmp87;
  const Scalar _tmp102 = _tmp34 * _tmp85;
  const Scalar _tmp103 = _tmp102 * _tmp93;
  const Scalar _tmp104 = _tmp91 * _value[1];
  const Scalar _tmp105 =
      -_tmp101 + _tmp103 - _tmp104 + _tmp2 * _tmp92 + _tmp60 + _tmp8 - _tmp90 * _value[3] + _tmp99;
  const Scalar _tmp106 = -_tmp19;
  const Scalar _tmp107 = _tmp100 * _tmp93;
  const Scalar _tmp108 = _tmp91 * _value[2];
  const Scalar _tmp109 = -_tmp102 * _tmp87 + _tmp83 * _value[1];
  const Scalar _tmp110 =
      _tmp106 - _tmp107 + _tmp108 + _tmp109 - _tmp51 * _tmp89 + _tmp54 + _tmp90 * _value[0];
  const Scalar _tmp111 = -_tmp12;
  const Scalar _tmp112 = tau(1, 0) * tau(2, 0);
  const Scalar _tmp113 = _tmp112 * _tmp81;
  const Scalar _tmp114 = _tmp113 * _value[1];
  const Scalar _tmp115 = _tmp112 * _tmp85;
  const Scalar _tmp116 = _tmp115 * _tmp34;
  const Scalar _tmp117 = _tmp1 * _tmp85;
  const Scalar _tmp118 = _tmp1 * _tmp81;
  const Scalar _tmp119 =
      _tmp111 - _tmp114 + _tmp116 - _tmp117 * _tmp47 + _tmp118 * _value[2] + _tmp44 + _tmp97;
  const Scalar _tmp120 = -_tmp100 * _tmp112 + _tmp113 * _value[2];
  const Scalar _tmp121 =
      -_tmp117 * _tmp34 + _tmp118 * _value[1] + _tmp120 + _tmp69 + _tmp80 + _tmp84 - _tmp88;
  const Scalar _tmp122 = _tmp112 * _tmp92 - _tmp113 * _value[3];
  const Scalar _tmp123 =
      _tmp109 + _tmp117 * _tmp51 - _tmp118 * _value[0] + _tmp122 + _tmp19 + _tmp55;
  const Scalar _tmp124 = _tmp115 * _tmp51;
  const Scalar _tmp125 = _tmp113 * _value[0];
  const Scalar _tmp126 =
      _tmp1 * _tmp92 + _tmp101 - _tmp118 * _value[3] - _tmp124 + _tmp125 + _tmp67 + _tmp8 - _tmp99;
  const Scalar _tmp127 = _tmp0 * _tmp81;
  const Scalar _tmp128 =
      _tmp0 * _tmp92 - _tmp103 + _tmp104 + _tmp124 - _tmp125 - _tmp127 * _value[3] + _tmp76 + _tmp8;
  const Scalar _tmp129 = _tmp0 * _tmp85;
  const Scalar _tmp130 =
      _tmp106 + _tmp107 - _tmp108 + _tmp122 + _tmp127 * _value[0] - _tmp129 * _tmp51 + _tmp71;
  const Scalar _tmp131 =
      _tmp10 + _tmp120 - _tmp127 * _value[1] + _tmp129 * _tmp34 + _tmp38 + _tmp94;
  const Scalar _tmp132 =
      _tmp111 + _tmp114 - _tmp116 + _tmp127 * _value[2] - _tmp129 * _tmp47 + _tmp46 + _tmp96;

  // Output terms (3)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _tmp16;
  _res[1] = _tmp22;
  _res[2] = _tmp27;
  _res[3] = _tmp32;
  _res[4] = _value[4] + tau(3, 0);
  _res[5] = _value[5] + tau(4, 0);
  _res[6] = _value[6] + tau(5, 0);

  if (res_D_value != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_value = (*res_D_value);

    _res_D_value.setZero();

    _res_D_value(0, 0) = -_tmp40 * _tmp41 + _tmp48 * _tmp49 - _tmp57 * _tmp58 + _tmp65 * _tmp66;
    _res_D_value(1, 0) = _tmp40 * _tmp58 - _tmp41 * _tmp57 + _tmp48 * _tmp66 - _tmp49 * _tmp65;
    _res_D_value(2, 0) = _tmp40 * _tmp66 + _tmp41 * _tmp65 - _tmp48 * _tmp58 - _tmp49 * _tmp57;
    _res_D_value(0, 1) = -_tmp41 * _tmp72 + _tmp49 * _tmp68 - _tmp58 * _tmp70 + _tmp66 * _tmp74;
    _res_D_value(1, 1) = -_tmp41 * _tmp70 - _tmp49 * _tmp74 + _tmp58 * _tmp72 + _tmp66 * _tmp68;
    _res_D_value(2, 1) = _tmp41 * _tmp74 - _tmp49 * _tmp70 - _tmp58 * _tmp68 + _tmp66 * _tmp72;
    _res_D_value(0, 2) = -_tmp41 * _tmp77 + _tmp49 * _tmp79 - _tmp58 * _tmp78 + _tmp66 * _tmp75;
    _res_D_value(1, 2) = -_tmp41 * _tmp78 - _tmp49 * _tmp75 + _tmp58 * _tmp77 + _tmp66 * _tmp79;
    _res_D_value(2, 2) = _tmp41 * _tmp75 - _tmp49 * _tmp78 - _tmp58 * _tmp79 + _tmp66 * _tmp77;
    _res_D_value(3, 3) = 1;
    _res_D_value(4, 4) = 1;
    _res_D_value(5, 5) = 1;
  }

  if (res_D_tau != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_tau = (*res_D_tau);

    _res_D_tau.setZero();

    _res_D_tau(0, 0) = _tmp105 * _tmp66 - _tmp110 * _tmp58 - _tmp41 * _tmp95 + _tmp49 * _tmp98;
    _res_D_tau(1, 0) = -_tmp105 * _tmp49 - _tmp110 * _tmp41 + _tmp58 * _tmp95 + _tmp66 * _tmp98;
    _res_D_tau(2, 0) = _tmp105 * _tmp41 - _tmp110 * _tmp49 - _tmp58 * _tmp98 + _tmp66 * _tmp95;
    _res_D_tau(0, 1) = _tmp119 * _tmp66 - _tmp121 * _tmp58 - _tmp123 * _tmp41 + _tmp126 * _tmp49;
    _res_D_tau(1, 1) = -_tmp119 * _tmp49 - _tmp121 * _tmp41 + _tmp123 * _tmp58 + _tmp126 * _tmp66;
    _res_D_tau(2, 1) = _tmp119 * _tmp41 - _tmp121 * _tmp49 + _tmp123 * _tmp66 - _tmp126 * _tmp58;
    _res_D_tau(0, 2) = -_tmp128 * _tmp41 + _tmp130 * _tmp49 + _tmp131 * _tmp66 - _tmp132 * _tmp58;
    _res_D_tau(1, 2) = _tmp128 * _tmp58 + _tmp130 * _tmp66 - _tmp131 * _tmp49 - _tmp132 * _tmp41;
    _res_D_tau(2, 2) = _tmp128 * _tmp66 - _tmp130 * _tmp58 + _tmp131 * _tmp41 - _tmp132 * _tmp49;
    _res_D_tau(3, 3) = 1;
    _res_D_tau(4, 4) = 1;
    _res_D_tau(5, 5) = 1;
  }

  return sym::Pose3<Scalar>(_res);
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
