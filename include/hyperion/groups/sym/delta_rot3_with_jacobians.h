// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: delta_rot3
 *
 * Args:
 *     x: Rot3
 *     y: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix31
 *     res_D_x: (3x3) jacobian of res (3) wrt arg x (3)
 *     res_D_y: (3x3) jacobian of res (3) wrt arg y (3)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> DeltaRot3WithJacobians(
    const sym::Rot3<Scalar>& x, const sym::Rot3<Scalar>& y, const Scalar epsilon,
    Eigen::Matrix<Scalar, 3, 3>* const res_D_x = nullptr,
    Eigen::Matrix<Scalar, 3, 3>* const res_D_y = nullptr) {
  // Total ops: 199

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _x = x.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _y = y.Data();

  // Intermediate terms (77)
  const Scalar _tmp0 = _x[3] * _y[0];
  const Scalar _tmp1 = _x[1] * _y[2];
  const Scalar _tmp2 = _x[0] * _y[3];
  const Scalar _tmp3 = _x[2] * _y[1];
  const Scalar _tmp4 = _tmp0 - _tmp1 - _tmp2 + _tmp3;
  const Scalar _tmp5 = 1 - epsilon;
  const Scalar _tmp6 = _x[3] * _y[3];
  const Scalar _tmp7 = _x[1] * _y[1];
  const Scalar _tmp8 = _x[0] * _y[0];
  const Scalar _tmp9 = _x[2] * _y[2];
  const Scalar _tmp10 = _tmp6 + _tmp7 + _tmp8 + _tmp9;
  const Scalar _tmp11 = std::min<Scalar>(_tmp5, std::fabs(_tmp10));
  const Scalar _tmp12 = 2 * std::min<Scalar>(0, (((_tmp10) > 0) - ((_tmp10) < 0))) + 1;
  const Scalar _tmp13 = 2 * _tmp12;
  const Scalar _tmp14 =
      _tmp13 * std::acos(_tmp11) / std::sqrt(Scalar(1 - std::pow(_tmp11, Scalar(2))));
  const Scalar _tmp15 = _x[3] * _y[1];
  const Scalar _tmp16 = _x[1] * _y[3];
  const Scalar _tmp17 = _x[0] * _y[2];
  const Scalar _tmp18 = _x[2] * _y[0];
  const Scalar _tmp19 = _tmp15 - _tmp16 + _tmp17 - _tmp18;
  const Scalar _tmp20 = _x[3] * _y[2];
  const Scalar _tmp21 = _x[1] * _y[0];
  const Scalar _tmp22 = _x[0] * _y[1];
  const Scalar _tmp23 = _x[2] * _y[3];
  const Scalar _tmp24 = _tmp20 + _tmp21 - _tmp22 - _tmp23;
  const Scalar _tmp25 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp26 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp27 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp28 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp29 = _tmp25 - _tmp26 - _tmp27 + _tmp28;
  const Scalar _tmp30 = _tmp6 + _tmp7 + _tmp8 + _tmp9;
  const Scalar _tmp31 = std::fabs(_tmp30);
  const Scalar _tmp32 = std::min<Scalar>(_tmp31, _tmp5);
  const Scalar _tmp33 = std::acos(_tmp32);
  const Scalar _tmp34 = 1 - std::pow(_tmp32, Scalar(2));
  const Scalar _tmp35 = _tmp12 * ((((-_tmp31 + _tmp5) > 0) - ((-_tmp31 + _tmp5) < 0)) + 1) *
                        (((_tmp30) > 0) - ((_tmp30) < 0));
  const Scalar _tmp36 = _tmp32 * _tmp35 / (_tmp34 * std::sqrt(_tmp34));
  const Scalar _tmp37 = _tmp36 * _tmp4;
  const Scalar _tmp38 = _tmp33 * _tmp37;
  const Scalar _tmp39 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp40 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp41 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp43 = _tmp13 / std::sqrt(_tmp34);
  const Scalar _tmp44 = _tmp33 * _tmp43;
  const Scalar _tmp45 = _tmp44 * (-_tmp39 - _tmp40 - _tmp41 - _tmp42);
  const Scalar _tmp46 = _tmp35 / _tmp34;
  const Scalar _tmp47 = _tmp29 * _tmp46;
  const Scalar _tmp48 = _tmp33 * _tmp36;
  const Scalar _tmp49 = _tmp19 * _tmp48;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp52 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp54 = _tmp50 + _tmp51 - _tmp52 - _tmp53;
  const Scalar _tmp55 = _tmp44 * _tmp54;
  const Scalar _tmp56 = _tmp24 * _tmp48;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp61 = -_tmp57 + _tmp58 - _tmp59 + _tmp60;
  const Scalar _tmp62 = _tmp33 * _tmp61;
  const Scalar _tmp63 = _tmp43 * _tmp62;
  const Scalar _tmp64 = _tmp57 - _tmp58 + _tmp59 - _tmp60;
  const Scalar _tmp65 = -_tmp50 - _tmp51 + _tmp52 + _tmp53;
  const Scalar _tmp66 = _tmp44 * _tmp65;
  const Scalar _tmp67 = _tmp4 * _tmp46;
  const Scalar _tmp68 = _tmp19 * _tmp46;
  const Scalar _tmp69 = _tmp29 * _tmp44;
  const Scalar _tmp70 = _tmp24 * _tmp46;
  const Scalar _tmp71 = _tmp44 * _tmp64;
  const Scalar _tmp72 = -_tmp25 + _tmp26 + _tmp27 - _tmp28;
  const Scalar _tmp73 = _tmp44 * _tmp72;
  const Scalar _tmp74 = _tmp44 * (_tmp39 + _tmp40 + _tmp41 + _tmp42);
  const Scalar _tmp75 = _tmp46 * _tmp61;
  const Scalar _tmp76 = _tmp36 * _tmp62;

  // Output terms (3)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _tmp14 * _tmp4;
  _res(1, 0) = _tmp14 * _tmp19;
  _res(2, 0) = _tmp14 * _tmp24;

  if (res_D_x != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_x = (*res_D_x);

    _res_D_x(0, 0) = _tmp29 * _tmp38 - _tmp4 * _tmp47 + _tmp45;
    _res_D_x(1, 0) = -_tmp19 * _tmp47 + _tmp29 * _tmp49 + _tmp55;
    _res_D_x(2, 0) = -_tmp24 * _tmp47 + _tmp29 * _tmp56 + _tmp63;
    _res_D_x(0, 1) = _tmp38 * _tmp64 - _tmp64 * _tmp67 + _tmp66;
    _res_D_x(1, 1) = _tmp45 + _tmp49 * _tmp64 - _tmp64 * _tmp68;
    _res_D_x(2, 1) = _tmp56 * _tmp64 - _tmp64 * _tmp70 + _tmp69;
    _res_D_x(0, 2) = _tmp38 * _tmp54 - _tmp54 * _tmp67 + _tmp71;
    _res_D_x(1, 2) = _tmp49 * _tmp54 - _tmp54 * _tmp68 + _tmp73;
    _res_D_x(2, 2) = _tmp45 + _tmp54 * _tmp56 - _tmp54 * _tmp70;
  }

  if (res_D_y != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_y = (*res_D_y);

    _res_D_y(0, 0) = _tmp38 * _tmp72 - _tmp67 * _tmp72 + _tmp74;
    _res_D_y(1, 0) = _tmp49 * _tmp72 + _tmp55 - _tmp68 * _tmp72;
    _res_D_y(2, 0) = _tmp56 * _tmp72 + _tmp63 - _tmp70 * _tmp72;
    _res_D_y(0, 1) = _tmp37 * _tmp62 - _tmp4 * _tmp75 + _tmp66;
    _res_D_y(1, 1) = -_tmp19 * _tmp75 + _tmp19 * _tmp76 + _tmp74;
    _res_D_y(2, 1) = -_tmp24 * _tmp75 + _tmp24 * _tmp76 + _tmp69;
    _res_D_y(0, 2) = _tmp38 * _tmp65 - _tmp65 * _tmp67 + _tmp71;
    _res_D_y(1, 2) = _tmp49 * _tmp65 - _tmp65 * _tmp68 + _tmp73;
    _res_D_y(2, 2) = _tmp56 * _tmp65 - _tmp65 * _tmp70 + _tmp74;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
